// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package lamisplus_etl.hiv_art_pharmacy_6_0;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.PreganancyStatus;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_4
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: HIV_ART_Pharmacy Purpose: F_HIV_ART_Pharmacy<br>
 * Description: F_HIV_ART_Pharmacy <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class HIV_ART_Pharmacy implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(LAMISPlus_Schema != null){
				
					this.setProperty("LAMISPlus_Schema", LAMISPlus_Schema.toString());
				
			}
			
			if(LAMISPlus_AdditionalParams != null){
				
					this.setProperty("LAMISPlus_AdditionalParams", LAMISPlus_AdditionalParams.toString());
				
			}
			
			if(LAMISPlus_Database != null){
				
					this.setProperty("LAMISPlus_Database", LAMISPlus_Database.toString());
				
			}
			
			if(LAMISPlus_Login != null){
				
					this.setProperty("LAMISPlus_Login", LAMISPlus_Login.toString());
				
			}
			
			if(LAMISPlus_Server != null){
				
					this.setProperty("LAMISPlus_Server", LAMISPlus_Server.toString());
				
			}
			
			if(LAMISPlus_Password != null){
				
					this.setProperty("LAMISPlus_Password", LAMISPlus_Password.toString());
				
			}
			
			if(LAMISPlus_Port != null){
				
					this.setProperty("LAMISPlus_Port", LAMISPlus_Port.toString());
				
			}
			
			if(LAMIS3_AdditionalParams != null){
				
					this.setProperty("LAMIS3_AdditionalParams", LAMIS3_AdditionalParams.toString());
				
			}
			
			if(LAMIS3_Database != null){
				
					this.setProperty("LAMIS3_Database", LAMIS3_Database.toString());
				
			}
			
			if(LAMIS3_Login != null){
				
					this.setProperty("LAMIS3_Login", LAMIS3_Login.toString());
				
			}
			
			if(LAMIS3_Password != null){
				
					this.setProperty("LAMIS3_Password", LAMIS3_Password.toString());
				
			}
			
			if(LAMIS3_Port != null){
				
					this.setProperty("LAMIS3_Port", LAMIS3_Port.toString());
				
			}
			
			if(LAMIS3_Schema != null){
				
					this.setProperty("LAMIS3_Schema", LAMIS3_Schema.toString());
				
			}
			
			if(LAMIS3_Server != null){
				
					this.setProperty("LAMIS3_Server", LAMIS3_Server.toString());
				
			}
			
		}

public String LAMISPlus_Schema;
public String getLAMISPlus_Schema(){
	return this.LAMISPlus_Schema;
}
public String LAMISPlus_AdditionalParams;
public String getLAMISPlus_AdditionalParams(){
	return this.LAMISPlus_AdditionalParams;
}
public String LAMISPlus_Database;
public String getLAMISPlus_Database(){
	return this.LAMISPlus_Database;
}
public String LAMISPlus_Login;
public String getLAMISPlus_Login(){
	return this.LAMISPlus_Login;
}
public String LAMISPlus_Server;
public String getLAMISPlus_Server(){
	return this.LAMISPlus_Server;
}
public java.lang.String LAMISPlus_Password;
public java.lang.String getLAMISPlus_Password(){
	return this.LAMISPlus_Password;
}
public String LAMISPlus_Port;
public String getLAMISPlus_Port(){
	return this.LAMISPlus_Port;
}
public String LAMIS3_AdditionalParams;
public String getLAMIS3_AdditionalParams(){
	return this.LAMIS3_AdditionalParams;
}
public String LAMIS3_Database;
public String getLAMIS3_Database(){
	return this.LAMIS3_Database;
}
public String LAMIS3_Login;
public String getLAMIS3_Login(){
	return this.LAMIS3_Login;
}
public java.lang.String LAMIS3_Password;
public java.lang.String getLAMIS3_Password(){
	return this.LAMIS3_Password;
}
public String LAMIS3_Port;
public String getLAMIS3_Port(){
	return this.LAMIS3_Port;
}
public String LAMIS3_Schema;
public String getLAMIS3_Schema(){
	return this.LAMIS3_Schema;
}
public String LAMIS3_Server;
public String getLAMIS3_Server(){
	return this.LAMIS3_Server;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "6.0";
	private final String jobName = "HIV_ART_Pharmacy";
	private final String projectName = "LAMISPLUS_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				HIV_ART_Pharmacy.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(HIV_ART_Pharmacy.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_facilities_lookup_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class Unique_pharmStruct implements routines.system.IPersistableRow<Unique_pharmStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public java.util.Date next_appointment;

				public java.util.Date getNext_appointment () {
					return this.next_appointment;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public Boolean ard_screened;

				public Boolean getArd_screened () {
					return this.ard_screened;
				}
				
			    public Boolean adherence;

				public Boolean getAdherence () {
					return this.adherence;
				}
				
			    public String adverse_drug_reactions;

				public String getAdverse_drug_reactions () {
					return this.adverse_drug_reactions;
				}
				
			    public String mmd_type;

				public String getMmd_type () {
					return this.mmd_type;
				}
				
			    public Boolean prescription_error;

				public Boolean getPrescription_error () {
					return this.prescription_error;
				}
				
			    public String extra;

				public String getExtra () {
					return this.extra;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				
			    public long facility_id;

				public long getFacility_id () {
					return this.facility_id;
				}
				
			    public Boolean is_devolve;

				public Boolean getIs_devolve () {
					return this.is_devolve;
				}
				
			    public Integer refill_period;

				public Integer getRefill_period () {
					return this.refill_period;
				}
				
			    public String delivery_point;

				public String getDelivery_point () {
					return this.delivery_point;
				}
				
			    public String dsd_model;

				public String getDsd_model () {
					return this.dsd_model;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Pharmacy) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.created_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.last_modified_by = readString(dis);
					
					this.next_appointment = readDate(dis);
					
					this.visit_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ard_screened = null;
           				} else {
           			    	this.ard_screened = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.adherence = null;
           				} else {
           			    	this.adherence = dis.readBoolean();
           				}
					
					this.adverse_drug_reactions = readString(dis);
					
					this.mmd_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prescription_error = null;
           				} else {
           			    	this.prescription_error = dis.readBoolean();
           				}
					
					this.extra = readString(dis);
					
					this.uuid = readString(dis);
					
					this.visit_id = readString(dis);
					
			        this.facility_id = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_devolve = null;
           				} else {
           			    	this.is_devolve = dis.readBoolean();
           				}
					
						this.refill_period = readInteger(dis);
					
					this.delivery_point = readString(dis);
					
					this.dsd_model = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// java.util.Date
				
						writeDate(this.next_appointment,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// Boolean
				
						if(this.ard_screened == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.ard_screened);
		            	}
					
					// Boolean
				
						if(this.adherence == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.adherence);
		            	}
					
					// String
				
						writeString(this.adverse_drug_reactions,dos);
					
					// String
				
						writeString(this.mmd_type,dos);
					
					// Boolean
				
						if(this.prescription_error == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prescription_error);
		            	}
					
					// String
				
						writeString(this.extra,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.visit_id,dos);
					
					// long
				
		            	dos.writeLong(this.facility_id);
					
					// Boolean
				
						if(this.is_devolve == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_devolve);
		            	}
					
					// Integer
				
						writeInteger(this.refill_period,dos);
					
					// String
				
						writeString(this.delivery_point,dos);
					
					// String
				
						writeString(this.dsd_model,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",next_appointment="+String.valueOf(next_appointment));
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",ard_screened="+String.valueOf(ard_screened));
		sb.append(",adherence="+String.valueOf(adherence));
		sb.append(",adverse_drug_reactions="+adverse_drug_reactions);
		sb.append(",mmd_type="+mmd_type);
		sb.append(",prescription_error="+String.valueOf(prescription_error));
		sb.append(",extra="+extra);
		sb.append(",uuid="+uuid);
		sb.append(",visit_id="+visit_id);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",is_devolve="+String.valueOf(is_devolve));
		sb.append(",refill_period="+String.valueOf(refill_period));
		sb.append(",delivery_point="+delivery_point);
		sb.append(",dsd_model="+dsd_model);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Unique_pharmStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Duplicate_pharmStruct implements routines.system.IPersistableRow<Duplicate_pharmStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public java.util.Date next_appointment;

				public java.util.Date getNext_appointment () {
					return this.next_appointment;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public Boolean ard_screened;

				public Boolean getArd_screened () {
					return this.ard_screened;
				}
				
			    public Boolean adherence;

				public Boolean getAdherence () {
					return this.adherence;
				}
				
			    public String adverse_drug_reactions;

				public String getAdverse_drug_reactions () {
					return this.adverse_drug_reactions;
				}
				
			    public String mmd_type;

				public String getMmd_type () {
					return this.mmd_type;
				}
				
			    public Boolean prescription_error;

				public Boolean getPrescription_error () {
					return this.prescription_error;
				}
				
			    public String extra;

				public String getExtra () {
					return this.extra;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				
			    public long facility_id;

				public long getFacility_id () {
					return this.facility_id;
				}
				
			    public Boolean is_devolve;

				public Boolean getIs_devolve () {
					return this.is_devolve;
				}
				
			    public Integer refill_period;

				public Integer getRefill_period () {
					return this.refill_period;
				}
				
			    public String delivery_point;

				public String getDelivery_point () {
					return this.delivery_point;
				}
				
			    public String dsd_model;

				public String getDsd_model () {
					return this.dsd_model;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Pharmacy) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.created_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.last_modified_by = readString(dis);
					
					this.next_appointment = readDate(dis);
					
					this.visit_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ard_screened = null;
           				} else {
           			    	this.ard_screened = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.adherence = null;
           				} else {
           			    	this.adherence = dis.readBoolean();
           				}
					
					this.adverse_drug_reactions = readString(dis);
					
					this.mmd_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prescription_error = null;
           				} else {
           			    	this.prescription_error = dis.readBoolean();
           				}
					
					this.extra = readString(dis);
					
					this.uuid = readString(dis);
					
					this.visit_id = readString(dis);
					
			        this.facility_id = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_devolve = null;
           				} else {
           			    	this.is_devolve = dis.readBoolean();
           				}
					
						this.refill_period = readInteger(dis);
					
					this.delivery_point = readString(dis);
					
					this.dsd_model = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// java.util.Date
				
						writeDate(this.next_appointment,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// Boolean
				
						if(this.ard_screened == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.ard_screened);
		            	}
					
					// Boolean
				
						if(this.adherence == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.adherence);
		            	}
					
					// String
				
						writeString(this.adverse_drug_reactions,dos);
					
					// String
				
						writeString(this.mmd_type,dos);
					
					// Boolean
				
						if(this.prescription_error == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prescription_error);
		            	}
					
					// String
				
						writeString(this.extra,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.visit_id,dos);
					
					// long
				
		            	dos.writeLong(this.facility_id);
					
					// Boolean
				
						if(this.is_devolve == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_devolve);
		            	}
					
					// Integer
				
						writeInteger(this.refill_period,dos);
					
					// String
				
						writeString(this.delivery_point,dos);
					
					// String
				
						writeString(this.dsd_model,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",next_appointment="+String.valueOf(next_appointment));
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",ard_screened="+String.valueOf(ard_screened));
		sb.append(",adherence="+String.valueOf(adherence));
		sb.append(",adverse_drug_reactions="+adverse_drug_reactions);
		sb.append(",mmd_type="+mmd_type);
		sb.append(",prescription_error="+String.valueOf(prescription_error));
		sb.append(",extra="+extra);
		sb.append(",uuid="+uuid);
		sb.append(",visit_id="+visit_id);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",is_devolve="+String.valueOf(is_devolve));
		sb.append(",refill_period="+String.valueOf(refill_period));
		sb.append(",delivery_point="+delivery_point);
		sb.append(",dsd_model="+dsd_model);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Duplicate_pharmStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Pharmacy_visit_mapStruct implements routines.system.IPersistableRow<Pharmacy_visit_mapStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public java.util.Date next_appointment;

				public java.util.Date getNext_appointment () {
					return this.next_appointment;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public Boolean ard_screened;

				public Boolean getArd_screened () {
					return this.ard_screened;
				}
				
			    public Boolean adherence;

				public Boolean getAdherence () {
					return this.adherence;
				}
				
			    public String adverse_drug_reactions;

				public String getAdverse_drug_reactions () {
					return this.adverse_drug_reactions;
				}
				
			    public String mmd_type;

				public String getMmd_type () {
					return this.mmd_type;
				}
				
			    public Boolean prescription_error;

				public Boolean getPrescription_error () {
					return this.prescription_error;
				}
				
			    public String extra;

				public String getExtra () {
					return this.extra;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				
			    public long facility_id;

				public long getFacility_id () {
					return this.facility_id;
				}
				
			    public Boolean is_devolve;

				public Boolean getIs_devolve () {
					return this.is_devolve;
				}
				
			    public Integer refill_period;

				public Integer getRefill_period () {
					return this.refill_period;
				}
				
			    public String delivery_point;

				public String getDelivery_point () {
					return this.delivery_point;
				}
				
			    public String dsd_model;

				public String getDsd_model () {
					return this.dsd_model;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Pharmacy) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.created_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.last_modified_by = readString(dis);
					
					this.next_appointment = readDate(dis);
					
					this.visit_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ard_screened = null;
           				} else {
           			    	this.ard_screened = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.adherence = null;
           				} else {
           			    	this.adherence = dis.readBoolean();
           				}
					
					this.adverse_drug_reactions = readString(dis);
					
					this.mmd_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prescription_error = null;
           				} else {
           			    	this.prescription_error = dis.readBoolean();
           				}
					
					this.extra = readString(dis);
					
					this.uuid = readString(dis);
					
					this.visit_id = readString(dis);
					
			        this.facility_id = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_devolve = null;
           				} else {
           			    	this.is_devolve = dis.readBoolean();
           				}
					
						this.refill_period = readInteger(dis);
					
					this.delivery_point = readString(dis);
					
					this.dsd_model = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// java.util.Date
				
						writeDate(this.next_appointment,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// Boolean
				
						if(this.ard_screened == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.ard_screened);
		            	}
					
					// Boolean
				
						if(this.adherence == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.adherence);
		            	}
					
					// String
				
						writeString(this.adverse_drug_reactions,dos);
					
					// String
				
						writeString(this.mmd_type,dos);
					
					// Boolean
				
						if(this.prescription_error == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prescription_error);
		            	}
					
					// String
				
						writeString(this.extra,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.visit_id,dos);
					
					// long
				
		            	dos.writeLong(this.facility_id);
					
					// Boolean
				
						if(this.is_devolve == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_devolve);
		            	}
					
					// Integer
				
						writeInteger(this.refill_period,dos);
					
					// String
				
						writeString(this.delivery_point,dos);
					
					// String
				
						writeString(this.dsd_model,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",next_appointment="+String.valueOf(next_appointment));
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",ard_screened="+String.valueOf(ard_screened));
		sb.append(",adherence="+String.valueOf(adherence));
		sb.append(",adverse_drug_reactions="+adverse_drug_reactions);
		sb.append(",mmd_type="+mmd_type);
		sb.append(",prescription_error="+String.valueOf(prescription_error));
		sb.append(",extra="+extra);
		sb.append(",uuid="+uuid);
		sb.append(",visit_id="+visit_id);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",is_devolve="+String.valueOf(is_devolve));
		sb.append(",refill_period="+String.valueOf(refill_period));
		sb.append(",delivery_point="+delivery_point);
		sb.append(",dsd_model="+dsd_model);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Pharmacy_visit_mapStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class HIV_Art_PharmacyStruct implements routines.system.IPersistableRow<HIV_Art_PharmacyStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public java.util.Date next_appointment;

				public java.util.Date getNext_appointment () {
					return this.next_appointment;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public Boolean ard_screened;

				public Boolean getArd_screened () {
					return this.ard_screened;
				}
				
			    public Boolean adherence;

				public Boolean getAdherence () {
					return this.adherence;
				}
				
			    public String adverse_drug_reactions;

				public String getAdverse_drug_reactions () {
					return this.adverse_drug_reactions;
				}
				
			    public String mmd_type;

				public String getMmd_type () {
					return this.mmd_type;
				}
				
			    public Boolean prescription_error;

				public Boolean getPrescription_error () {
					return this.prescription_error;
				}
				
			    public String extra;

				public String getExtra () {
					return this.extra;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public long facility_id;

				public long getFacility_id () {
					return this.facility_id;
				}
				
			    public Boolean is_devolve;

				public Boolean getIs_devolve () {
					return this.is_devolve;
				}
				
			    public Integer refill_period;

				public Integer getRefill_period () {
					return this.refill_period;
				}
				
			    public String delivery_point;

				public String getDelivery_point () {
					return this.delivery_point;
				}
				
			    public String dsd_model;

				public String getDsd_model () {
					return this.dsd_model;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Pharmacy) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.created_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.last_modified_by = readString(dis);
					
					this.next_appointment = readDate(dis);
					
					this.visit_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ard_screened = null;
           				} else {
           			    	this.ard_screened = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.adherence = null;
           				} else {
           			    	this.adherence = dis.readBoolean();
           				}
					
					this.adverse_drug_reactions = readString(dis);
					
					this.mmd_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prescription_error = null;
           				} else {
           			    	this.prescription_error = dis.readBoolean();
           				}
					
					this.extra = readString(dis);
					
					this.person_uuid = readString(dis);
					
					this.uuid = readString(dis);
					
			        this.facility_id = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_devolve = null;
           				} else {
           			    	this.is_devolve = dis.readBoolean();
           				}
					
						this.refill_period = readInteger(dis);
					
					this.delivery_point = readString(dis);
					
					this.dsd_model = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// java.util.Date
				
						writeDate(this.next_appointment,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// Boolean
				
						if(this.ard_screened == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.ard_screened);
		            	}
					
					// Boolean
				
						if(this.adherence == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.adherence);
		            	}
					
					// String
				
						writeString(this.adverse_drug_reactions,dos);
					
					// String
				
						writeString(this.mmd_type,dos);
					
					// Boolean
				
						if(this.prescription_error == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prescription_error);
		            	}
					
					// String
				
						writeString(this.extra,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// long
				
		            	dos.writeLong(this.facility_id);
					
					// Boolean
				
						if(this.is_devolve == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_devolve);
		            	}
					
					// Integer
				
						writeInteger(this.refill_period,dos);
					
					// String
				
						writeString(this.delivery_point,dos);
					
					// String
				
						writeString(this.dsd_model,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",next_appointment="+String.valueOf(next_appointment));
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",ard_screened="+String.valueOf(ard_screened));
		sb.append(",adherence="+String.valueOf(adherence));
		sb.append(",adverse_drug_reactions="+adverse_drug_reactions);
		sb.append(",mmd_type="+mmd_type);
		sb.append(",prescription_error="+String.valueOf(prescription_error));
		sb.append(",extra="+extra);
		sb.append(",person_uuid="+person_uuid);
		sb.append(",uuid="+uuid);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",is_devolve="+String.valueOf(is_devolve));
		sb.append(",refill_period="+String.valueOf(refill_period));
		sb.append(",delivery_point="+delivery_point);
		sb.append(",dsd_model="+dsd_model);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(HIV_Art_PharmacyStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class hiv_pharmacyStruct implements routines.system.IPersistableRow<hiv_pharmacyStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public java.util.Date last_modified;

				public java.util.Date getLast_modified () {
					return this.last_modified;
				}
				
			    public java.util.Date next_appointment;

				public java.util.Date getNext_appointment () {
					return this.next_appointment;
				}
				
			    public java.util.Date date_visit;

				public java.util.Date getDate_visit () {
					return this.date_visit;
				}
				
			    public Boolean adr_screened;

				public Boolean getAdr_screened () {
					return this.adr_screened;
				}
				
			    public Boolean adherence;

				public Boolean getAdherence () {
					return this.adherence;
				}
				
			    public String adverse_drug_reactions;

				public String getAdverse_drug_reactions () {
					return this.adverse_drug_reactions;
				}
				
			    public String mmd_type;

				public String getMmd_type () {
					return this.mmd_type;
				}
				
			    public Boolean prescription_error;

				public Boolean getPrescription_error () {
					return this.prescription_error;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public String extra;

				public String getExtra () {
					return this.extra;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Pharmacy) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.last_modified = readDate(dis);
					
					this.next_appointment = readDate(dis);
					
					this.date_visit = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.adr_screened = null;
           				} else {
           			    	this.adr_screened = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.adherence = null;
           				} else {
           			    	this.adherence = dis.readBoolean();
           				}
					
					this.adverse_drug_reactions = readString(dis);
					
					this.mmd_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prescription_error = null;
           				} else {
           			    	this.prescription_error = dis.readBoolean();
           				}
					
						this.archived = readInteger(dis);
					
					this.extra = readString(dis);
					
					this.person_uuid = readString(dis);
					
					this.uuid = readString(dis);
					
					this.datim_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// java.util.Date
				
						writeDate(this.last_modified,dos);
					
					// java.util.Date
				
						writeDate(this.next_appointment,dos);
					
					// java.util.Date
				
						writeDate(this.date_visit,dos);
					
					// Boolean
				
						if(this.adr_screened == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.adr_screened);
		            	}
					
					// Boolean
				
						if(this.adherence == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.adherence);
		            	}
					
					// String
				
						writeString(this.adverse_drug_reactions,dos);
					
					// String
				
						writeString(this.mmd_type,dos);
					
					// Boolean
				
						if(this.prescription_error == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prescription_error);
		            	}
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// String
				
						writeString(this.extra,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.datim_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",last_modified="+String.valueOf(last_modified));
		sb.append(",next_appointment="+String.valueOf(next_appointment));
		sb.append(",date_visit="+String.valueOf(date_visit));
		sb.append(",adr_screened="+String.valueOf(adr_screened));
		sb.append(",adherence="+String.valueOf(adherence));
		sb.append(",adverse_drug_reactions="+adverse_drug_reactions);
		sb.append(",mmd_type="+mmd_type);
		sb.append(",prescription_error="+String.valueOf(prescription_error));
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",extra="+extra);
		sb.append(",person_uuid="+person_uuid);
		sb.append(",uuid="+uuid);
		sb.append(",datim_id="+datim_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(hiv_pharmacyStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_2Struct implements routines.system.IPersistableRow<after_tDBInput_2Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public java.util.Date last_modified;

				public java.util.Date getLast_modified () {
					return this.last_modified;
				}
				
			    public java.util.Date next_appointment;

				public java.util.Date getNext_appointment () {
					return this.next_appointment;
				}
				
			    public java.util.Date date_visit;

				public java.util.Date getDate_visit () {
					return this.date_visit;
				}
				
			    public Boolean adr_screened;

				public Boolean getAdr_screened () {
					return this.adr_screened;
				}
				
			    public Boolean adherence;

				public Boolean getAdherence () {
					return this.adherence;
				}
				
			    public String adverse_drug_reactions;

				public String getAdverse_drug_reactions () {
					return this.adverse_drug_reactions;
				}
				
			    public String mmd_type;

				public String getMmd_type () {
					return this.mmd_type;
				}
				
			    public Boolean prescription_error;

				public Boolean getPrescription_error () {
					return this.prescription_error;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public String extra;

				public String getExtra () {
					return this.extra;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tDBInput_2Struct other = (after_tDBInput_2Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(after_tDBInput_2Struct other) {

		other.id = this.id;
	            other.last_modified = this.last_modified;
	            other.next_appointment = this.next_appointment;
	            other.date_visit = this.date_visit;
	            other.adr_screened = this.adr_screened;
	            other.adherence = this.adherence;
	            other.adverse_drug_reactions = this.adverse_drug_reactions;
	            other.mmd_type = this.mmd_type;
	            other.prescription_error = this.prescription_error;
	            other.archived = this.archived;
	            other.extra = this.extra;
	            other.person_uuid = this.person_uuid;
	            other.uuid = this.uuid;
	            other.datim_id = this.datim_id;
	            
	}

	public void copyKeysDataTo(after_tDBInput_2Struct other) {

		other.id = this.id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Pharmacy) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.last_modified = readDate(dis);
					
					this.next_appointment = readDate(dis);
					
					this.date_visit = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.adr_screened = null;
           				} else {
           			    	this.adr_screened = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.adherence = null;
           				} else {
           			    	this.adherence = dis.readBoolean();
           				}
					
					this.adverse_drug_reactions = readString(dis);
					
					this.mmd_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prescription_error = null;
           				} else {
           			    	this.prescription_error = dis.readBoolean();
           				}
					
						this.archived = readInteger(dis);
					
					this.extra = readString(dis);
					
					this.person_uuid = readString(dis);
					
					this.uuid = readString(dis);
					
					this.datim_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// java.util.Date
				
						writeDate(this.last_modified,dos);
					
					// java.util.Date
				
						writeDate(this.next_appointment,dos);
					
					// java.util.Date
				
						writeDate(this.date_visit,dos);
					
					// Boolean
				
						if(this.adr_screened == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.adr_screened);
		            	}
					
					// Boolean
				
						if(this.adherence == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.adherence);
		            	}
					
					// String
				
						writeString(this.adverse_drug_reactions,dos);
					
					// String
				
						writeString(this.mmd_type,dos);
					
					// Boolean
				
						if(this.prescription_error == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.prescription_error);
		            	}
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// String
				
						writeString(this.extra,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.datim_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",last_modified="+String.valueOf(last_modified));
		sb.append(",next_appointment="+String.valueOf(next_appointment));
		sb.append(",date_visit="+String.valueOf(date_visit));
		sb.append(",adr_screened="+String.valueOf(adr_screened));
		sb.append(",adherence="+String.valueOf(adherence));
		sb.append(",adverse_drug_reactions="+adverse_drug_reactions);
		sb.append(",mmd_type="+mmd_type);
		sb.append(",prescription_error="+String.valueOf(prescription_error));
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",extra="+extra);
		sb.append(",person_uuid="+person_uuid);
		sb.append(",uuid="+uuid);
		sb.append(",datim_id="+datim_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_1Process(globalMap);
		tDBInput_8Process(globalMap);

		hiv_pharmacyStruct hiv_pharmacy = new hiv_pharmacyStruct();
HIV_Art_PharmacyStruct HIV_Art_Pharmacy = new HIV_Art_PharmacyStruct();
Pharmacy_visit_mapStruct Pharmacy_visit_map = new Pharmacy_visit_mapStruct();
Unique_pharmStruct Unique_pharm = new Unique_pharmStruct();
Duplicate_pharmStruct Duplicate_pharm = new Duplicate_pharmStruct();







	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Unique_pharm");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = context.LAMISPlus_Schema;
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("hiv_art_pharmacy");
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("hiv_art_pharmacy");
}

        int updateKeyCount_tDBOutput_1 = 1;
        if(updateKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_1 = "jdbc:postgresql://"+context.LAMISPlus_Server+":"+context.LAMISPlus_Port+"/"+context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
    dbUser_tDBOutput_1 = context.LAMISPlus_Login;

	final String decryptedPassword_tDBOutput_1 = context.LAMISPlus_Password; 

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;



int count_tDBOutput_1=0;
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_1 + "\" WHERE \"id\" = ?");
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1 + "\" (\"id\",\"created_date\",\"created_by\",\"last_modified_date\",\"last_modified_by\",\"next_appointment\",\"visit_date\",\"ard_screened\",\"adherence\",\"" + "adverse_drug_reactions" + "\",\"mmd_type\",\"prescription_error\",\"" + "extra" + "\",\"uuid\",\"visit_id\",\"facility_id\",\"is_devolve\",\"refill_period\",\"delivery_point\",\"dsd_model\") VALUES (?,?,?,?,?,?,?,?,?," + "?::json" + ",?,?," + "?::json" + ",?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
	    String update_tDBOutput_1 = "UPDATE \"" + tableName_tDBOutput_1 + "\" SET \"id\" = ?,\"created_date\" = ?,\"created_by\" = ?,\"last_modified_date\" = ?,\"last_modified_by\" = ?,\"next_appointment\" = ?,\"visit_date\" = ?,\"ard_screened\" = ?,\"adherence\" = ?,\"" + "adverse_drug_reactions" + "\" = " + "?::json" + ",\"mmd_type\" = ?,\"prescription_error\" = ?,\"" + "extra" + "\" = " + "?::json" + ",\"uuid\" = ?,\"visit_id\" = ?,\"facility_id\" = ?,\"is_devolve\" = ?,\"refill_period\" = ?,\"delivery_point\" = ?,\"dsd_model\" = ? WHERE \"id\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
	    resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */




	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Duplicate_pharm");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = context.LAMISPlus_Schema;
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("hiv_art_pharmacy_duplicates");
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("hiv_art_pharmacy_duplicates");
}

        int updateKeyCount_tDBOutput_2 = 1;
        if(updateKeyCount_tDBOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_2 = "jdbc:postgresql://"+context.LAMISPlus_Server+":"+context.LAMISPlus_Port+"/"+context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
    dbUser_tDBOutput_2 = context.LAMISPlus_Login;

	final String decryptedPassword_tDBOutput_2 = context.LAMISPlus_Password; 

    String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;

    conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2,dbUser_tDBOutput_2,dbPwd_tDBOutput_2);
	
	resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
        conn_tDBOutput_2.setAutoCommit(false);
        int commitEvery_tDBOutput_2 = 10000;
        int commitCounter_tDBOutput_2 = 0;



int count_tDBOutput_2=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_2 = conn_tDBOutput_2.getMetaData();
                                boolean whetherExist_tDBOutput_2 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_2 = dbMetaData_tDBOutput_2.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_2 = "public";
                                    if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_2 = conn_tDBOutput_2.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_2 = stmtSchema_tDBOutput_2.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_2.next()){
                                                defaultSchema_tDBOutput_2 = rsSchema_tDBOutput_2.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_2.next()) {
                                        String table_tDBOutput_2 = rsTable_tDBOutput_2.getString("TABLE_NAME");
                                        String schema_tDBOutput_2 = rsTable_tDBOutput_2.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_2.equals(("hiv_art_pharmacy_duplicates"))
                                            && (schema_tDBOutput_2.equals(dbschema_tDBOutput_2) || ((dbschema_tDBOutput_2 ==null || dbschema_tDBOutput_2.trim().length() ==0) && defaultSchema_tDBOutput_2.equals(schema_tDBOutput_2)))) {
                                            whetherExist_tDBOutput_2 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_2) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                                        stmtCreate_tDBOutput_2.execute("CREATE TABLE \"" + tableName_tDBOutput_2 + "\"(\"id\" BIGSERIAL  not null ,\"created_date\" TIMESTAMP(29)  ,\"created_by\" VARCHAR(255)  ,\"last_modified_date\" TIMESTAMP(29)  ,\"last_modified_by\" VARCHAR(255)  ,\"next_appointment\" DATE ,\"visit_date\" DATE ,\"ard_screened\" BOOL ,\"adherence\" BOOL ,\"adverse_drug_reactions\" VARCHAR(250)  ,\"mmd_type\" VARCHAR(500)  ,\"prescription_error\" BOOL ,\"extra\" VARCHAR(500)  ,\"uuid\" VARCHAR(50)   not null ,\"visit_id\" VARCHAR(50)   not null ,\"facility_id\" BIGSERIAL  not null ,\"is_devolve\" BOOL ,\"refill_period\" INT4 ,\"delivery_point\" VARCHAR ,\"dsd_model\" VARCHAR )");
                                    }
                                }
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_2 + "\" WHERE \"id\" = ?");
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2 + "\" (\"id\",\"created_date\",\"created_by\",\"last_modified_date\",\"last_modified_by\",\"next_appointment\",\"visit_date\",\"ard_screened\",\"adherence\",\"adverse_drug_reactions\",\"mmd_type\",\"prescription_error\",\"extra\",\"uuid\",\"visit_id\",\"facility_id\",\"is_devolve\",\"refill_period\",\"delivery_point\",\"dsd_model\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmtInsert_tDBOutput_2", pstmtInsert_tDBOutput_2);
	    String update_tDBOutput_2 = "UPDATE \"" + tableName_tDBOutput_2 + "\" SET \"id\" = ?,\"created_date\" = ?,\"created_by\" = ?,\"last_modified_date\" = ?,\"last_modified_by\" = ?,\"next_appointment\" = ?,\"visit_date\" = ?,\"ard_screened\" = ?,\"adherence\" = ?,\"adverse_drug_reactions\" = ?,\"mmd_type\" = ?,\"prescription_error\" = ?,\"extra\" = ?,\"uuid\" = ?,\"visit_id\" = ?,\"facility_id\" = ?,\"is_devolve\" = ?,\"refill_period\" = ?,\"delivery_point\" = ?,\"dsd_model\" = ? WHERE \"id\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(update_tDBOutput_2);
	    resourceMap.put("pstmtUpdate_tDBOutput_2", pstmtUpdate_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Pharmacy_visit_map");
					}
				
		int tos_count_tUniqRow_1 = 0;
		

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					int id;
					String uuid;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
									result = prime * result + (int) this.id;
									
								result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this.id != other.id) 
										return false;
								
									if (this.uuid == null) {
										if (other.uuid != null) 
											return false;
								
									} else if (!this.uuid.equals(other.uuid))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"HIV_Art_Pharmacy");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) 
					globalMap.get( "tHash_Lookup_row1" ))
					;					
					
	

row1Struct row1HashKey = new row1Struct();
row1Struct row1Default = new row1Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
Pharmacy_visit_mapStruct Pharmacy_visit_map_tmp = new Pharmacy_visit_mapStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"hiv_pharmacy");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<facilities_lookupStruct> tHash_Lookup_facilities_lookup = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<facilities_lookupStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<facilities_lookupStruct>) 
					globalMap.get( "tHash_Lookup_facilities_lookup" ))
					;					
					
	

facilities_lookupStruct facilities_lookupHashKey = new facilities_lookupStruct();
facilities_lookupStruct facilities_lookupDefault = new facilities_lookupStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
HIV_Art_PharmacyStruct HIV_Art_Pharmacy_tmp = new HIV_Art_PharmacyStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = context.LAMIS3_Login;
				
				
	final String decryptedPassword_tDBInput_2 = context.LAMIS3_Password; 
				
				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
				String url_tDBInput_2 = "jdbc:postgresql://" + context.LAMIS3_Server + ":" + context.LAMIS3_Port + "/" + context.LAMIS3_Database + "?" + context.LAMIS3_AdditionalParams;
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
				conn_tDBInput_2.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT DISTINCT phar.id, phar.last_modified, phar.next_appointment, phar.date_visit, \n        phar.adr_screened, phar."
+"adherence, phar.adverse_drug_reactions, \n        phar.mmd_type, phar.prescription_error,phar.archived::integer, \n     "
+"   phar.extra, p.uuid as person_uuid, ''::VARCHAR as uuid, \n        nf.datim_id\n    FROM pharmacy as phar\n    INNER J"
+"OIN patient p \n    ON p.id=phar.patient_id\n    INNER JOIN ndr_facility nf\n    ON nf.id=phar.facility_id\nORDER BY id "
+"ASC";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								hiv_pharmacy.id = 0;
							} else {
		                          
            hiv_pharmacy.id = rs_tDBInput_2.getInt(1);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								hiv_pharmacy.last_modified = null;
							} else {
										
			hiv_pharmacy.last_modified = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 2);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								hiv_pharmacy.next_appointment = null;
							} else {
										
			hiv_pharmacy.next_appointment = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 3);
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								hiv_pharmacy.date_visit = null;
							} else {
										
			hiv_pharmacy.date_visit = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 4);
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								hiv_pharmacy.adr_screened = null;
							} else {
	                         		
            hiv_pharmacy.adr_screened = rs_tDBInput_2.getBoolean(5);
            if(rs_tDBInput_2.wasNull()){
                    hiv_pharmacy.adr_screened = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								hiv_pharmacy.adherence = null;
							} else {
	                         		
            hiv_pharmacy.adherence = rs_tDBInput_2.getBoolean(6);
            if(rs_tDBInput_2.wasNull()){
                    hiv_pharmacy.adherence = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								hiv_pharmacy.adverse_drug_reactions = null;
							} else {
	                         		
        	hiv_pharmacy.adverse_drug_reactions = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								hiv_pharmacy.mmd_type = null;
							} else {
	                         		
        	hiv_pharmacy.mmd_type = routines.system.JDBCUtil.getString(rs_tDBInput_2, 8, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								hiv_pharmacy.prescription_error = null;
							} else {
	                         		
            hiv_pharmacy.prescription_error = rs_tDBInput_2.getBoolean(9);
            if(rs_tDBInput_2.wasNull()){
                    hiv_pharmacy.prescription_error = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 10) {
								hiv_pharmacy.archived = null;
							} else {
		                          
            hiv_pharmacy.archived = rs_tDBInput_2.getInt(10);
            if(rs_tDBInput_2.wasNull()){
                    hiv_pharmacy.archived = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 11) {
								hiv_pharmacy.extra = null;
							} else {
	                         		
        	hiv_pharmacy.extra = routines.system.JDBCUtil.getString(rs_tDBInput_2, 11, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 12) {
								hiv_pharmacy.person_uuid = null;
							} else {
	                         		
        	hiv_pharmacy.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_2, 12, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 13) {
								hiv_pharmacy.uuid = null;
							} else {
	                         		
        	hiv_pharmacy.uuid = routines.system.JDBCUtil.getString(rs_tDBInput_2, 13, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 14) {
								hiv_pharmacy.datim_id = null;
							} else {
	                         		
        	hiv_pharmacy.datim_id = routines.system.JDBCUtil.getString(rs_tDBInput_2, 14, false);
		                    }
					


 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"hiv_pharmacy");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "facilities_lookup" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopfacilities_lookup = false;
       		  	    	
       		  	    	
 							facilities_lookupStruct facilities_lookupObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    facilities_lookupHashKey.datim_code = hiv_pharmacy.datim_id ;
                        		    		

								
		                        	facilities_lookupHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_facilities_lookup.lookup( facilities_lookupHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_facilities_lookup != null && tHash_Lookup_facilities_lookup.getCount(facilities_lookupHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'facilities_lookup' and it contains more one result from keys :  facilities_lookup.datim_code = '" + facilities_lookupHashKey.datim_code + "'");
								} // G 071
							

							facilities_lookupStruct facilities_lookup = null;
                    		  	 
							   
                    		  	 
	       		  	    	facilities_lookupStruct fromLookup_facilities_lookup = null;
							facilities_lookup = facilities_lookupDefault;
										 
							
								 
							
							
								if (tHash_Lookup_facilities_lookup !=null && tHash_Lookup_facilities_lookup.hasNext()) { // G 099
								
							
								
								fromLookup_facilities_lookup = tHash_Lookup_facilities_lookup.next();

							
							
								} // G 099
							
							

							if(fromLookup_facilities_lookup != null) {
								facilities_lookup = fromLookup_facilities_lookup;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

HIV_Art_Pharmacy = null;


// # Output table : 'HIV_Art_Pharmacy'
HIV_Art_Pharmacy_tmp.id = hiv_pharmacy.id ;
HIV_Art_Pharmacy_tmp.created_date = hiv_pharmacy.last_modified ;
HIV_Art_Pharmacy_tmp.created_by = "ETL";
HIV_Art_Pharmacy_tmp.last_modified_date = hiv_pharmacy.last_modified ;
HIV_Art_Pharmacy_tmp.last_modified_by = "ETL";
HIV_Art_Pharmacy_tmp.next_appointment = hiv_pharmacy.next_appointment ;
HIV_Art_Pharmacy_tmp.visit_date = hiv_pharmacy.date_visit ;
HIV_Art_Pharmacy_tmp.ard_screened = hiv_pharmacy.adr_screened ;
HIV_Art_Pharmacy_tmp.adherence = hiv_pharmacy.adherence ;
HIV_Art_Pharmacy_tmp.adverse_drug_reactions = hiv_pharmacy.adverse_drug_reactions ;
HIV_Art_Pharmacy_tmp.mmd_type = hiv_pharmacy.mmd_type ;
HIV_Art_Pharmacy_tmp.prescription_error = hiv_pharmacy.prescription_error ;
HIV_Art_Pharmacy_tmp.extra = hiv_pharmacy.extra ;
HIV_Art_Pharmacy_tmp.person_uuid = hiv_pharmacy.person_uuid ;
HIV_Art_Pharmacy_tmp.uuid = java.util.UUID.randomUUID().toString() ;
HIV_Art_Pharmacy_tmp.facility_id = facilities_lookup.id ;
HIV_Art_Pharmacy_tmp.is_devolve = null;
HIV_Art_Pharmacy_tmp.refill_period = null;
HIV_Art_Pharmacy_tmp.delivery_point = null;
HIV_Art_Pharmacy_tmp.dsd_model = null;
HIV_Art_Pharmacy = HIV_Art_Pharmacy_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "HIV_Art_Pharmacy"
if(HIV_Art_Pharmacy != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"HIV_Art_Pharmacy");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row1" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow1 = false;
       		  	    	
       		  	    	
 							row1Struct row1ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    row1HashKey.person_uuid = HIV_Art_Pharmacy.person_uuid ;
                        		    		
                        		    		    row1HashKey.visit_start_date = HIV_Art_Pharmacy.visit_date  == null ? null : new java.util.Date(HIV_Art_Pharmacy.visit_date .getTime());
                        		    		

								
		                        	row1HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row1.lookup( row1HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row1 != null && tHash_Lookup_row1.getCount(row1HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row1' and it contains more one result from keys :  row1.person_uuid = '" + row1HashKey.person_uuid + "', row1.visit_start_date = '" + row1HashKey.visit_start_date + "'");
								} // G 071
							

							row1Struct row1 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row1Struct fromLookup_row1 = null;
							row1 = row1Default;
										 
							
								 
							
							
								if (tHash_Lookup_row1 !=null && tHash_Lookup_row1.hasNext()) { // G 099
								
							
								
								fromLookup_row1 = tHash_Lookup_row1.next();

							
							
								} // G 099
							
							

							if(fromLookup_row1 != null) {
								row1 = fromLookup_row1;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

Pharmacy_visit_map = null;


// # Output table : 'Pharmacy_visit_map'
Pharmacy_visit_map_tmp.id = HIV_Art_Pharmacy.id ;
Pharmacy_visit_map_tmp.created_date = HIV_Art_Pharmacy.created_date ;
Pharmacy_visit_map_tmp.created_by = HIV_Art_Pharmacy.created_by ;
Pharmacy_visit_map_tmp.last_modified_date = HIV_Art_Pharmacy.last_modified_date ;
Pharmacy_visit_map_tmp.last_modified_by = HIV_Art_Pharmacy.last_modified_by ;
Pharmacy_visit_map_tmp.next_appointment = HIV_Art_Pharmacy.next_appointment ;
Pharmacy_visit_map_tmp.visit_date = row1.visit_start_date ;
Pharmacy_visit_map_tmp.ard_screened = HIV_Art_Pharmacy.ard_screened ;
Pharmacy_visit_map_tmp.adherence = HIV_Art_Pharmacy.adherence ;
Pharmacy_visit_map_tmp.adverse_drug_reactions = HIV_Art_Pharmacy.adverse_drug_reactions ;
Pharmacy_visit_map_tmp.mmd_type = HIV_Art_Pharmacy.mmd_type ;
Pharmacy_visit_map_tmp.prescription_error = HIV_Art_Pharmacy.prescription_error ;
Pharmacy_visit_map_tmp.extra = HIV_Art_Pharmacy.extra ;
Pharmacy_visit_map_tmp.uuid = HIV_Art_Pharmacy.uuid ;
Pharmacy_visit_map_tmp.visit_id = row1.uuid ;
Pharmacy_visit_map_tmp.facility_id = HIV_Art_Pharmacy.facility_id ;
Pharmacy_visit_map_tmp.is_devolve = HIV_Art_Pharmacy.is_devolve ;
Pharmacy_visit_map_tmp.refill_period = HIV_Art_Pharmacy.refill_period ;
Pharmacy_visit_map_tmp.delivery_point = HIV_Art_Pharmacy.delivery_point ;
Pharmacy_visit_map_tmp.dsd_model = HIV_Art_Pharmacy.dsd_model ;
Pharmacy_visit_map = Pharmacy_visit_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "Pharmacy_visit_map"
if(Pharmacy_visit_map != null) { 



	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Pharmacy_visit_map");
					}
					
Duplicate_pharm = null;			Unique_pharm = null;			
finder_tUniqRow_1.id = Pharmacy_visit_map.id;
if(Pharmacy_visit_map.uuid == null){
	finder_tUniqRow_1.uuid = null;
}else{
	finder_tUniqRow_1.uuid = Pharmacy_visit_map.uuid.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
new_tUniqRow_1.id = Pharmacy_visit_map.id;
if(Pharmacy_visit_map.uuid == null){
	new_tUniqRow_1.uuid = null;
}else{
	new_tUniqRow_1.uuid = Pharmacy_visit_map.uuid.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(Unique_pharm == null){ 
	
	Unique_pharm = new Unique_pharmStruct();
}Unique_pharm.id = Pharmacy_visit_map.id;			Unique_pharm.created_date = Pharmacy_visit_map.created_date;			Unique_pharm.created_by = Pharmacy_visit_map.created_by;			Unique_pharm.last_modified_date = Pharmacy_visit_map.last_modified_date;			Unique_pharm.last_modified_by = Pharmacy_visit_map.last_modified_by;			Unique_pharm.next_appointment = Pharmacy_visit_map.next_appointment;			Unique_pharm.visit_date = Pharmacy_visit_map.visit_date;			Unique_pharm.ard_screened = Pharmacy_visit_map.ard_screened;			Unique_pharm.adherence = Pharmacy_visit_map.adherence;			Unique_pharm.adverse_drug_reactions = Pharmacy_visit_map.adverse_drug_reactions;			Unique_pharm.mmd_type = Pharmacy_visit_map.mmd_type;			Unique_pharm.prescription_error = Pharmacy_visit_map.prescription_error;			Unique_pharm.extra = Pharmacy_visit_map.extra;			Unique_pharm.uuid = Pharmacy_visit_map.uuid;			Unique_pharm.visit_id = Pharmacy_visit_map.visit_id;			Unique_pharm.facility_id = Pharmacy_visit_map.facility_id;			Unique_pharm.is_devolve = Pharmacy_visit_map.is_devolve;			Unique_pharm.refill_period = Pharmacy_visit_map.refill_period;			Unique_pharm.delivery_point = Pharmacy_visit_map.delivery_point;			Unique_pharm.dsd_model = Pharmacy_visit_map.dsd_model;					
		nb_uniques_tUniqRow_1++;
	} else {
if(Duplicate_pharm == null){ 
	
	Duplicate_pharm = new Duplicate_pharmStruct();
}				Duplicate_pharm.id = Pharmacy_visit_map.id;			Duplicate_pharm.created_date = Pharmacy_visit_map.created_date;			Duplicate_pharm.created_by = Pharmacy_visit_map.created_by;			Duplicate_pharm.last_modified_date = Pharmacy_visit_map.last_modified_date;			Duplicate_pharm.last_modified_by = Pharmacy_visit_map.last_modified_by;			Duplicate_pharm.next_appointment = Pharmacy_visit_map.next_appointment;			Duplicate_pharm.visit_date = Pharmacy_visit_map.visit_date;			Duplicate_pharm.ard_screened = Pharmacy_visit_map.ard_screened;			Duplicate_pharm.adherence = Pharmacy_visit_map.adherence;			Duplicate_pharm.adverse_drug_reactions = Pharmacy_visit_map.adverse_drug_reactions;			Duplicate_pharm.mmd_type = Pharmacy_visit_map.mmd_type;			Duplicate_pharm.prescription_error = Pharmacy_visit_map.prescription_error;			Duplicate_pharm.extra = Pharmacy_visit_map.extra;			Duplicate_pharm.uuid = Pharmacy_visit_map.uuid;			Duplicate_pharm.visit_id = Pharmacy_visit_map.visit_id;			Duplicate_pharm.facility_id = Pharmacy_visit_map.facility_id;			Duplicate_pharm.is_devolve = Pharmacy_visit_map.is_devolve;			Duplicate_pharm.refill_period = Pharmacy_visit_map.refill_period;			Duplicate_pharm.delivery_point = Pharmacy_visit_map.delivery_point;			Duplicate_pharm.dsd_model = Pharmacy_visit_map.dsd_model;			
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "Unique_pharm"
if(Unique_pharm != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Unique_pharm");
					}
					



        whetherReject_tDBOutput_1 = false;
                    pstmt_tDBOutput_1.setInt(1, Unique_pharm.id);

            int checkCount_tDBOutput_1 = -1;
            try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
                while(rs_tDBOutput_1.next()) {
                    checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
                }
            }
            if(checkCount_tDBOutput_1 > 0) {
                        pstmtUpdate_tDBOutput_1.setInt(1, Unique_pharm.id);

                        if(Unique_pharm.created_date != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(2, new java.sql.Timestamp(Unique_pharm.created_date.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.TIMESTAMP);
}

                        if(Unique_pharm.created_by == null) {
pstmtUpdate_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(3, Unique_pharm.created_by);
}

                        if(Unique_pharm.last_modified_date != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(4, new java.sql.Timestamp(Unique_pharm.last_modified_date.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(4, java.sql.Types.TIMESTAMP);
}

                        if(Unique_pharm.last_modified_by == null) {
pstmtUpdate_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(5, Unique_pharm.last_modified_by);
}

                        if(Unique_pharm.next_appointment != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(6, new java.sql.Timestamp(Unique_pharm.next_appointment.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(6, java.sql.Types.TIMESTAMP);
}

                        if(Unique_pharm.visit_date != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(7, new java.sql.Timestamp(Unique_pharm.visit_date.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(7, java.sql.Types.TIMESTAMP);
}

                        if(Unique_pharm.ard_screened == null) {
pstmtUpdate_tDBOutput_1.setNull(8, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tDBOutput_1.setBoolean(8, Unique_pharm.ard_screened);
}

                        if(Unique_pharm.adherence == null) {
pstmtUpdate_tDBOutput_1.setNull(9, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tDBOutput_1.setBoolean(9, Unique_pharm.adherence);
}

                        if(Unique_pharm.adverse_drug_reactions == null) {
pstmtUpdate_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(10, Unique_pharm.adverse_drug_reactions);
}

                        if(Unique_pharm.mmd_type == null) {
pstmtUpdate_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(11, Unique_pharm.mmd_type);
}

                        if(Unique_pharm.prescription_error == null) {
pstmtUpdate_tDBOutput_1.setNull(12, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tDBOutput_1.setBoolean(12, Unique_pharm.prescription_error);
}

                        if(Unique_pharm.extra == null) {
pstmtUpdate_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(13, Unique_pharm.extra);
}

                        if(Unique_pharm.uuid == null) {
pstmtUpdate_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(14, Unique_pharm.uuid);
}

                        if(Unique_pharm.visit_id == null) {
pstmtUpdate_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(15, Unique_pharm.visit_id);
}

                        pstmtUpdate_tDBOutput_1.setLong(16, Unique_pharm.facility_id);

                        if(Unique_pharm.is_devolve == null) {
pstmtUpdate_tDBOutput_1.setNull(17, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tDBOutput_1.setBoolean(17, Unique_pharm.is_devolve);
}

                        if(Unique_pharm.refill_period == null) {
pstmtUpdate_tDBOutput_1.setNull(18, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(18, Unique_pharm.refill_period);
}

                        if(Unique_pharm.delivery_point == null) {
pstmtUpdate_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(19, Unique_pharm.delivery_point);
}

                        if(Unique_pharm.dsd_model == null) {
pstmtUpdate_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(20, Unique_pharm.dsd_model);
}

                        pstmtUpdate_tDBOutput_1.setInt(21 + count_tDBOutput_1, Unique_pharm.id);

                try {
					
                    updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1 + pstmtUpdate_tDBOutput_1.executeUpdate();
                    nb_line_tDBOutput_1++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_1 = true;
                        nb_line_tDBOutput_1++;
                            System.err.print(e.getMessage());
                }
            } else {
                        pstmtInsert_tDBOutput_1.setInt(1, Unique_pharm.id);

                        if(Unique_pharm.created_date != null) {
pstmtInsert_tDBOutput_1.setTimestamp(2, new java.sql.Timestamp(Unique_pharm.created_date.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.TIMESTAMP);
}

                        if(Unique_pharm.created_by == null) {
pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(3, Unique_pharm.created_by);
}

                        if(Unique_pharm.last_modified_date != null) {
pstmtInsert_tDBOutput_1.setTimestamp(4, new java.sql.Timestamp(Unique_pharm.last_modified_date.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.TIMESTAMP);
}

                        if(Unique_pharm.last_modified_by == null) {
pstmtInsert_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(5, Unique_pharm.last_modified_by);
}

                        if(Unique_pharm.next_appointment != null) {
pstmtInsert_tDBOutput_1.setTimestamp(6, new java.sql.Timestamp(Unique_pharm.next_appointment.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(6, java.sql.Types.TIMESTAMP);
}

                        if(Unique_pharm.visit_date != null) {
pstmtInsert_tDBOutput_1.setTimestamp(7, new java.sql.Timestamp(Unique_pharm.visit_date.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(7, java.sql.Types.TIMESTAMP);
}

                        if(Unique_pharm.ard_screened == null) {
pstmtInsert_tDBOutput_1.setNull(8, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_1.setBoolean(8, Unique_pharm.ard_screened);
}

                        if(Unique_pharm.adherence == null) {
pstmtInsert_tDBOutput_1.setNull(9, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_1.setBoolean(9, Unique_pharm.adherence);
}

                        if(Unique_pharm.adverse_drug_reactions == null) {
pstmtInsert_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(10, Unique_pharm.adverse_drug_reactions);
}

                        if(Unique_pharm.mmd_type == null) {
pstmtInsert_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(11, Unique_pharm.mmd_type);
}

                        if(Unique_pharm.prescription_error == null) {
pstmtInsert_tDBOutput_1.setNull(12, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_1.setBoolean(12, Unique_pharm.prescription_error);
}

                        if(Unique_pharm.extra == null) {
pstmtInsert_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(13, Unique_pharm.extra);
}

                        if(Unique_pharm.uuid == null) {
pstmtInsert_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(14, Unique_pharm.uuid);
}

                        if(Unique_pharm.visit_id == null) {
pstmtInsert_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(15, Unique_pharm.visit_id);
}

                        pstmtInsert_tDBOutput_1.setLong(16, Unique_pharm.facility_id);

                        if(Unique_pharm.is_devolve == null) {
pstmtInsert_tDBOutput_1.setNull(17, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_1.setBoolean(17, Unique_pharm.is_devolve);
}

                        if(Unique_pharm.refill_period == null) {
pstmtInsert_tDBOutput_1.setNull(18, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(18, Unique_pharm.refill_period);
}

                        if(Unique_pharm.delivery_point == null) {
pstmtInsert_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(19, Unique_pharm.delivery_point);
}

                        if(Unique_pharm.dsd_model == null) {
pstmtInsert_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(20, Unique_pharm.dsd_model);
}

                try {
					
                    insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1 + pstmtInsert_tDBOutput_1.executeUpdate();
                    nb_line_tDBOutput_1++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_1 = true;
                        nb_line_tDBOutput_1++;
                            System.err.print(e.getMessage());
                }
            }
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                	conn_tDBOutput_1.commit();
                	
                	commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "Unique_pharm"




// Start of branch "Duplicate_pharm"
if(Duplicate_pharm != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Duplicate_pharm");
					}
					



        whetherReject_tDBOutput_2 = false;
                    pstmt_tDBOutput_2.setInt(1, Duplicate_pharm.id);

            int checkCount_tDBOutput_2 = -1;
            try (java.sql.ResultSet rs_tDBOutput_2 = pstmt_tDBOutput_2.executeQuery()) {
                while(rs_tDBOutput_2.next()) {
                    checkCount_tDBOutput_2 = rs_tDBOutput_2.getInt(1);
                }
            }
            if(checkCount_tDBOutput_2 > 0) {
                        pstmtUpdate_tDBOutput_2.setInt(1, Duplicate_pharm.id);

                        if(Duplicate_pharm.created_date != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(2, new java.sql.Timestamp(Duplicate_pharm.created_date.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(2, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_pharm.created_by == null) {
pstmtUpdate_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(3, Duplicate_pharm.created_by);
}

                        if(Duplicate_pharm.last_modified_date != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(4, new java.sql.Timestamp(Duplicate_pharm.last_modified_date.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(4, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_pharm.last_modified_by == null) {
pstmtUpdate_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(5, Duplicate_pharm.last_modified_by);
}

                        if(Duplicate_pharm.next_appointment != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(6, new java.sql.Timestamp(Duplicate_pharm.next_appointment.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(6, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_pharm.visit_date != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(7, new java.sql.Timestamp(Duplicate_pharm.visit_date.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(7, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_pharm.ard_screened == null) {
pstmtUpdate_tDBOutput_2.setNull(8, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tDBOutput_2.setBoolean(8, Duplicate_pharm.ard_screened);
}

                        if(Duplicate_pharm.adherence == null) {
pstmtUpdate_tDBOutput_2.setNull(9, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tDBOutput_2.setBoolean(9, Duplicate_pharm.adherence);
}

                        if(Duplicate_pharm.adverse_drug_reactions == null) {
pstmtUpdate_tDBOutput_2.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(10, Duplicate_pharm.adverse_drug_reactions);
}

                        if(Duplicate_pharm.mmd_type == null) {
pstmtUpdate_tDBOutput_2.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(11, Duplicate_pharm.mmd_type);
}

                        if(Duplicate_pharm.prescription_error == null) {
pstmtUpdate_tDBOutput_2.setNull(12, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tDBOutput_2.setBoolean(12, Duplicate_pharm.prescription_error);
}

                        if(Duplicate_pharm.extra == null) {
pstmtUpdate_tDBOutput_2.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(13, Duplicate_pharm.extra);
}

                        if(Duplicate_pharm.uuid == null) {
pstmtUpdate_tDBOutput_2.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(14, Duplicate_pharm.uuid);
}

                        if(Duplicate_pharm.visit_id == null) {
pstmtUpdate_tDBOutput_2.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(15, Duplicate_pharm.visit_id);
}

                        pstmtUpdate_tDBOutput_2.setLong(16, Duplicate_pharm.facility_id);

                        if(Duplicate_pharm.is_devolve == null) {
pstmtUpdate_tDBOutput_2.setNull(17, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tDBOutput_2.setBoolean(17, Duplicate_pharm.is_devolve);
}

                        if(Duplicate_pharm.refill_period == null) {
pstmtUpdate_tDBOutput_2.setNull(18, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setInt(18, Duplicate_pharm.refill_period);
}

                        if(Duplicate_pharm.delivery_point == null) {
pstmtUpdate_tDBOutput_2.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(19, Duplicate_pharm.delivery_point);
}

                        if(Duplicate_pharm.dsd_model == null) {
pstmtUpdate_tDBOutput_2.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(20, Duplicate_pharm.dsd_model);
}

                        pstmtUpdate_tDBOutput_2.setInt(21 + count_tDBOutput_2, Duplicate_pharm.id);

                try {
					
                    updatedCount_tDBOutput_2 = updatedCount_tDBOutput_2 + pstmtUpdate_tDBOutput_2.executeUpdate();
                    nb_line_tDBOutput_2++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_2 = true;
                        nb_line_tDBOutput_2++;
                            System.err.print(e.getMessage());
                }
            } else {
                        pstmtInsert_tDBOutput_2.setInt(1, Duplicate_pharm.id);

                        if(Duplicate_pharm.created_date != null) {
pstmtInsert_tDBOutput_2.setTimestamp(2, new java.sql.Timestamp(Duplicate_pharm.created_date.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(2, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_pharm.created_by == null) {
pstmtInsert_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(3, Duplicate_pharm.created_by);
}

                        if(Duplicate_pharm.last_modified_date != null) {
pstmtInsert_tDBOutput_2.setTimestamp(4, new java.sql.Timestamp(Duplicate_pharm.last_modified_date.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(4, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_pharm.last_modified_by == null) {
pstmtInsert_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(5, Duplicate_pharm.last_modified_by);
}

                        if(Duplicate_pharm.next_appointment != null) {
pstmtInsert_tDBOutput_2.setTimestamp(6, new java.sql.Timestamp(Duplicate_pharm.next_appointment.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(6, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_pharm.visit_date != null) {
pstmtInsert_tDBOutput_2.setTimestamp(7, new java.sql.Timestamp(Duplicate_pharm.visit_date.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(7, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_pharm.ard_screened == null) {
pstmtInsert_tDBOutput_2.setNull(8, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_2.setBoolean(8, Duplicate_pharm.ard_screened);
}

                        if(Duplicate_pharm.adherence == null) {
pstmtInsert_tDBOutput_2.setNull(9, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_2.setBoolean(9, Duplicate_pharm.adherence);
}

                        if(Duplicate_pharm.adverse_drug_reactions == null) {
pstmtInsert_tDBOutput_2.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(10, Duplicate_pharm.adverse_drug_reactions);
}

                        if(Duplicate_pharm.mmd_type == null) {
pstmtInsert_tDBOutput_2.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(11, Duplicate_pharm.mmd_type);
}

                        if(Duplicate_pharm.prescription_error == null) {
pstmtInsert_tDBOutput_2.setNull(12, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_2.setBoolean(12, Duplicate_pharm.prescription_error);
}

                        if(Duplicate_pharm.extra == null) {
pstmtInsert_tDBOutput_2.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(13, Duplicate_pharm.extra);
}

                        if(Duplicate_pharm.uuid == null) {
pstmtInsert_tDBOutput_2.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(14, Duplicate_pharm.uuid);
}

                        if(Duplicate_pharm.visit_id == null) {
pstmtInsert_tDBOutput_2.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(15, Duplicate_pharm.visit_id);
}

                        pstmtInsert_tDBOutput_2.setLong(16, Duplicate_pharm.facility_id);

                        if(Duplicate_pharm.is_devolve == null) {
pstmtInsert_tDBOutput_2.setNull(17, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_2.setBoolean(17, Duplicate_pharm.is_devolve);
}

                        if(Duplicate_pharm.refill_period == null) {
pstmtInsert_tDBOutput_2.setNull(18, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setInt(18, Duplicate_pharm.refill_period);
}

                        if(Duplicate_pharm.delivery_point == null) {
pstmtInsert_tDBOutput_2.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(19, Duplicate_pharm.delivery_point);
}

                        if(Duplicate_pharm.dsd_model == null) {
pstmtInsert_tDBOutput_2.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(20, Duplicate_pharm.dsd_model);
}

                try {
					
                    insertedCount_tDBOutput_2 = insertedCount_tDBOutput_2 + pstmtInsert_tDBOutput_2.executeUpdate();
                    nb_line_tDBOutput_2++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_2 = true;
                        nb_line_tDBOutput_2++;
                            System.err.print(e.getMessage());
                }
            }
    		    commitCounter_tDBOutput_2++;
                if(commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
                	conn_tDBOutput_2.commit();
                	
                	commitCounter_tDBOutput_2=0;
                }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "Duplicate_pharm"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */

} // End of branch "Pharmacy_visit_map"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */

} // End of branch "HIV_Art_Pharmacy"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
	if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
		
			conn_tDBInput_2.commit();
			
		
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());

   			if (globalMap.get("tDBInput_2_NB_LINE") != null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				tJava_1Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}



/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_facilities_lookup != null) {
						tHash_Lookup_facilities_lookup.endGet();
					}
					globalMap.remove( "tHash_Lookup_facilities_lookup" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"hiv_pharmacy");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row1 != null) {
						tHash_Lookup_row1.endGet();
					}
					globalMap.remove( "tHash_Lookup_row1" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"HIV_Art_Pharmacy");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Pharmacy_visit_map");
			  	}
			  	
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



        if(pstmtUpdate_tDBOutput_1 != null){
            pstmtUpdate_tDBOutput_1.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_1");
        }
        if(pstmtInsert_tDBOutput_1 != null){
            pstmtInsert_tDBOutput_1.close();
            resourceMap.remove("pstmtInsert_tDBOutput_1");
        }
        if(pstmt_tDBOutput_1 != null) {
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
			
			conn_tDBOutput_1.commit();
			
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Unique_pharm");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */




	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



        if(pstmtUpdate_tDBOutput_2 != null){
            pstmtUpdate_tDBOutput_2.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_2");
        }
        if(pstmtInsert_tDBOutput_2 != null){
            pstmtInsert_tDBOutput_2.close();
            resourceMap.remove("pstmtInsert_tDBOutput_2");
        }
        if(pstmt_tDBOutput_2 != null) {
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);
			
			conn_tDBOutput_2.commit();
			
		
    	conn_tDBOutput_2 .close();
    	
    	resourceMap.put("finish_tDBOutput_2", true);
    	

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Duplicate_pharm");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row1"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_facilities_lookup"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
                if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_1")) != null) {
                    pstmtUpdateToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
                if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_1")) != null) {
                    pstmtInsertToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */




	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_2 = null;
                if ((pstmtUpdateToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_2")) != null) {
                    pstmtUpdateToClose_tDBOutput_2.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_2 = null;
                if ((pstmtInsertToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_2")) != null) {
                    pstmtInsertToClose_tDBOutput_2.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_2") == null){
            java.sql.Connection ctn_tDBOutput_2 = null;
            if((ctn_tDBOutput_2 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_2")) != null){
                try {
                    ctn_tDBOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_2) {
                    String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :" + sqlEx_tDBOutput_2.getMessage();
                    System.err.println(errorMessage_tDBOutput_2);
                }
            }
        }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class HIV_RegimenStruct implements routines.system.IPersistableRow<HIV_RegimenStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public long art_pharmacy_id;

				public long getArt_pharmacy_id () {
					return this.art_pharmacy_id;
				}
				
			    public long regimens_id;

				public long getRegimens_id () {
					return this.regimens_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final HIV_RegimenStruct other = (HIV_RegimenStruct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(HIV_RegimenStruct other) {

		other.id = this.id;
	            other.art_pharmacy_id = this.art_pharmacy_id;
	            other.regimens_id = this.regimens_id;
	            
	}

	public void copyKeysDataTo(HIV_RegimenStruct other) {

		other.id = this.id;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Pharmacy) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
			        this.art_pharmacy_id = dis.readLong();
					
			        this.regimens_id = dis.readLong();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// long
				
		            	dos.writeLong(this.art_pharmacy_id);
					
					// long
				
		            	dos.writeLong(this.regimens_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",art_pharmacy_id="+String.valueOf(art_pharmacy_id));
		sb.append(",regimens_id="+String.valueOf(regimens_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(HIV_RegimenStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Load_pharmlinesStruct implements routines.system.IPersistableRow<Load_pharmlinesStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[0];

	
			    public long patient_id;

				public long getPatient_id () {
					return this.patient_id;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String regimen_description;

				public String getRegimen_description () {
					return this.regimen_description;
				}
				
			    public String regimen_type_description;

				public String getRegimen_type_description () {
					return this.regimen_type_description;
				}
				
			    public long regimen_id;

				public long getRegimen_id () {
					return this.regimen_id;
				}
				
			    public long regimen_type_id;

				public long getRegimen_type_id () {
					return this.regimen_type_id;
				}
				
			    public java.util.Date date_visit;

				public java.util.Date getDate_visit () {
					return this.date_visit;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Pharmacy) {

        	try {

        		int length = 0;
		
			        this.patient_id = dis.readLong();
					
					this.person_uuid = readString(dis);
					
					this.regimen_description = readString(dis);
					
					this.regimen_type_description = readString(dis);
					
			        this.regimen_id = dis.readLong();
					
			        this.regimen_type_id = dis.readLong();
					
					this.date_visit = readDate(dis);
					
					this.visit_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.patient_id);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.regimen_description,dos);
					
					// String
				
						writeString(this.regimen_type_description,dos);
					
					// long
				
		            	dos.writeLong(this.regimen_id);
					
					// long
				
		            	dos.writeLong(this.regimen_type_id);
					
					// java.util.Date
				
						writeDate(this.date_visit,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_id="+String.valueOf(patient_id));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",regimen_description="+regimen_description);
		sb.append(",regimen_type_description="+regimen_type_description);
		sb.append(",regimen_id="+String.valueOf(regimen_id));
		sb.append(",regimen_type_id="+String.valueOf(regimen_type_id));
		sb.append(",date_visit="+String.valueOf(date_visit));
		sb.append(",visit_date="+String.valueOf(visit_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Load_pharmlinesStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Pharm_LinesStruct implements routines.system.IPersistableRow<Pharm_LinesStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public java.util.Date date_visit;

				public java.util.Date getDate_visit () {
					return this.date_visit;
				}
				
			    public long patient_id;

				public long getPatient_id () {
					return this.patient_id;
				}
				
			    public String morning;

				public String getMorning () {
					return this.morning;
				}
				
			    public String duration;

				public String getDuration () {
					return this.duration;
				}
				
			    public String afternoon;

				public String getAfternoon () {
					return this.afternoon;
				}
				
			    public String regimen_id;

				public String getRegimen_id () {
					return this.regimen_id;
				}
				
			    public String regimen_drug_id;

				public String getRegimen_drug_id () {
					return this.regimen_drug_id;
				}
				
			    public String regimen_type_id;

				public String getRegimen_type_id () {
					return this.regimen_type_id;
				}
				
			    public String regimen_description;

				public String getRegimen_description () {
					return this.regimen_description;
				}
				
			    public String regimen_compostion;

				public String getRegimen_compostion () {
					return this.regimen_compostion;
				}
				
			    public String regimen_type_description;

				public String getRegimen_type_description () {
					return this.regimen_type_description;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Pharmacy) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.date_visit = readDate(dis);
					
			        this.patient_id = dis.readLong();
					
					this.morning = readString(dis);
					
					this.duration = readString(dis);
					
					this.afternoon = readString(dis);
					
					this.regimen_id = readString(dis);
					
					this.regimen_drug_id = readString(dis);
					
					this.regimen_type_id = readString(dis);
					
					this.regimen_description = readString(dis);
					
					this.regimen_compostion = readString(dis);
					
					this.regimen_type_description = readString(dis);
					
					this.person_uuid = readString(dis);
					
					this.visit_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// java.util.Date
				
						writeDate(this.date_visit,dos);
					
					// long
				
		            	dos.writeLong(this.patient_id);
					
					// String
				
						writeString(this.morning,dos);
					
					// String
				
						writeString(this.duration,dos);
					
					// String
				
						writeString(this.afternoon,dos);
					
					// String
				
						writeString(this.regimen_id,dos);
					
					// String
				
						writeString(this.regimen_drug_id,dos);
					
					// String
				
						writeString(this.regimen_type_id,dos);
					
					// String
				
						writeString(this.regimen_description,dos);
					
					// String
				
						writeString(this.regimen_compostion,dos);
					
					// String
				
						writeString(this.regimen_type_description,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",date_visit="+String.valueOf(date_visit));
		sb.append(",patient_id="+String.valueOf(patient_id));
		sb.append(",morning="+morning);
		sb.append(",duration="+duration);
		sb.append(",afternoon="+afternoon);
		sb.append(",regimen_id="+regimen_id);
		sb.append(",regimen_drug_id="+regimen_drug_id);
		sb.append(",regimen_type_id="+regimen_type_id);
		sb.append(",regimen_description="+regimen_description);
		sb.append(",regimen_compostion="+regimen_compostion);
		sb.append(",regimen_type_description="+regimen_type_description);
		sb.append(",person_uuid="+person_uuid);
		sb.append(",visit_date="+String.valueOf(visit_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Pharm_LinesStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_4Struct implements routines.system.IPersistableRow<after_tDBInput_4Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public java.util.Date date_visit;

				public java.util.Date getDate_visit () {
					return this.date_visit;
				}
				
			    public long patient_id;

				public long getPatient_id () {
					return this.patient_id;
				}
				
			    public String morning;

				public String getMorning () {
					return this.morning;
				}
				
			    public String duration;

				public String getDuration () {
					return this.duration;
				}
				
			    public String afternoon;

				public String getAfternoon () {
					return this.afternoon;
				}
				
			    public String regimen_id;

				public String getRegimen_id () {
					return this.regimen_id;
				}
				
			    public String regimen_drug_id;

				public String getRegimen_drug_id () {
					return this.regimen_drug_id;
				}
				
			    public String regimen_type_id;

				public String getRegimen_type_id () {
					return this.regimen_type_id;
				}
				
			    public String regimen_description;

				public String getRegimen_description () {
					return this.regimen_description;
				}
				
			    public String regimen_compostion;

				public String getRegimen_compostion () {
					return this.regimen_compostion;
				}
				
			    public String regimen_type_description;

				public String getRegimen_type_description () {
					return this.regimen_type_description;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tDBInput_4Struct other = (after_tDBInput_4Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(after_tDBInput_4Struct other) {

		other.id = this.id;
	            other.date_visit = this.date_visit;
	            other.patient_id = this.patient_id;
	            other.morning = this.morning;
	            other.duration = this.duration;
	            other.afternoon = this.afternoon;
	            other.regimen_id = this.regimen_id;
	            other.regimen_drug_id = this.regimen_drug_id;
	            other.regimen_type_id = this.regimen_type_id;
	            other.regimen_description = this.regimen_description;
	            other.regimen_compostion = this.regimen_compostion;
	            other.regimen_type_description = this.regimen_type_description;
	            other.person_uuid = this.person_uuid;
	            other.visit_date = this.visit_date;
	            
	}

	public void copyKeysDataTo(after_tDBInput_4Struct other) {

		other.id = this.id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Pharmacy) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.date_visit = readDate(dis);
					
			        this.patient_id = dis.readLong();
					
					this.morning = readString(dis);
					
					this.duration = readString(dis);
					
					this.afternoon = readString(dis);
					
					this.regimen_id = readString(dis);
					
					this.regimen_drug_id = readString(dis);
					
					this.regimen_type_id = readString(dis);
					
					this.regimen_description = readString(dis);
					
					this.regimen_compostion = readString(dis);
					
					this.regimen_type_description = readString(dis);
					
					this.person_uuid = readString(dis);
					
					this.visit_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// java.util.Date
				
						writeDate(this.date_visit,dos);
					
					// long
				
		            	dos.writeLong(this.patient_id);
					
					// String
				
						writeString(this.morning,dos);
					
					// String
				
						writeString(this.duration,dos);
					
					// String
				
						writeString(this.afternoon,dos);
					
					// String
				
						writeString(this.regimen_id,dos);
					
					// String
				
						writeString(this.regimen_drug_id,dos);
					
					// String
				
						writeString(this.regimen_type_id,dos);
					
					// String
				
						writeString(this.regimen_description,dos);
					
					// String
				
						writeString(this.regimen_compostion,dos);
					
					// String
				
						writeString(this.regimen_type_description,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",date_visit="+String.valueOf(date_visit));
		sb.append(",patient_id="+String.valueOf(patient_id));
		sb.append(",morning="+morning);
		sb.append(",duration="+duration);
		sb.append(",afternoon="+afternoon);
		sb.append(",regimen_id="+regimen_id);
		sb.append(",regimen_drug_id="+regimen_drug_id);
		sb.append(",regimen_type_id="+regimen_type_id);
		sb.append(",regimen_description="+regimen_description);
		sb.append(",regimen_compostion="+regimen_compostion);
		sb.append(",regimen_type_description="+regimen_type_description);
		sb.append(",person_uuid="+person_uuid);
		sb.append(",visit_date="+String.valueOf(visit_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_3Process(globalMap);
		tDBInput_5Process(globalMap);

		Pharm_LinesStruct Pharm_Lines = new Pharm_LinesStruct();
Load_pharmlinesStruct Load_pharmlines = new Load_pharmlinesStruct();
HIV_RegimenStruct HIV_Regimen = new HIV_RegimenStruct();






	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"HIV_Regimen");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = context.LAMISPlus_Schema;
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("hiv_art_pharmacy_regimens");
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("hiv_art_pharmacy_regimens");
}

        int updateKeyCount_tDBOutput_3 = 1;
        if(updateKeyCount_tDBOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_3 = "jdbc:postgresql://"+context.LAMISPlus_Server+":"+context.LAMISPlus_Port+"/"+context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
    dbUser_tDBOutput_3 = context.LAMISPlus_Login;

	final String decryptedPassword_tDBOutput_3 = context.LAMISPlus_Password; 

    String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;

    conn_tDBOutput_3 = java.sql.DriverManager.getConnection(url_tDBOutput_3,dbUser_tDBOutput_3,dbPwd_tDBOutput_3);
	
	resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
        conn_tDBOutput_3.setAutoCommit(false);
        int commitEvery_tDBOutput_3 = 10000;
        int commitCounter_tDBOutput_3 = 0;



int count_tDBOutput_3=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_3 = conn_tDBOutput_3.getMetaData();
                                boolean whetherExist_tDBOutput_3 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_3 = dbMetaData_tDBOutput_3.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_3 = "public";
                                    if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_3 = conn_tDBOutput_3.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_3 = stmtSchema_tDBOutput_3.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_3.next()){
                                                defaultSchema_tDBOutput_3 = rsSchema_tDBOutput_3.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_3.next()) {
                                        String table_tDBOutput_3 = rsTable_tDBOutput_3.getString("TABLE_NAME");
                                        String schema_tDBOutput_3 = rsTable_tDBOutput_3.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_3.equals(("hiv_art_pharmacy_regimens"))
                                            && (schema_tDBOutput_3.equals(dbschema_tDBOutput_3) || ((dbschema_tDBOutput_3 ==null || dbschema_tDBOutput_3.trim().length() ==0) && defaultSchema_tDBOutput_3.equals(schema_tDBOutput_3)))) {
                                            whetherExist_tDBOutput_3 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_3) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
                                        stmtCreate_tDBOutput_3.execute("CREATE TABLE \"" + tableName_tDBOutput_3 + "\"(\"id\" INT4 ,\"art_pharmacy_id\" BIGSERIAL  not null ,\"regimens_id\" BIGSERIAL  not null ,primary key(\"id\"))");
                                    }
                                }
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_3 + "\" WHERE \"id\" = ?");
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    String insert_tDBOutput_3 = "INSERT INTO \"" + tableName_tDBOutput_3 + "\" (\"id\",\"art_pharmacy_id\",\"regimens_id\") VALUES (?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
	    resourceMap.put("pstmtInsert_tDBOutput_3", pstmtInsert_tDBOutput_3);
	    String update_tDBOutput_3 = "UPDATE \"" + tableName_tDBOutput_3 + "\" SET \"id\" = ?,\"art_pharmacy_id\" = ?,\"regimens_id\" = ? WHERE \"id\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(update_tDBOutput_3);
	    resourceMap.put("pstmtUpdate_tDBOutput_3", pstmtUpdate_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Load_pharmlines");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
					globalMap.get( "tHash_Lookup_row5" ))
					;					
					
	

row5Struct row5HashKey = new row5Struct();
row5Struct row5Default = new row5Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
HIV_RegimenStruct HIV_Regimen_tmp = new HIV_RegimenStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Pharm_Lines");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
Load_pharmlinesStruct Load_pharmlines_tmp = new Load_pharmlinesStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = context.LAMIS3_Login;
				
				
	final String decryptedPassword_tDBInput_4 = context.LAMIS3_Password; 
				
				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
				
				String url_tDBInput_4 = "jdbc:postgresql://" + context.LAMIS3_Server + ":" + context.LAMIS3_Port + "/" + context.LAMIS3_Database + "?" + context.LAMIS3_AdditionalParams;
				
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4,dbUser_tDBInput_4,dbPwd_tDBInput_4);
		        
				conn_tDBInput_4.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT result.id, result.date_visit, result.patient_id, result.morning::VARCHAR, result.afternoon::VARCHAR, \nresult.du"
+"ration::VARCHAR, result.regimen_id::BIGINT, result.regimen_drug_id::BIGINT,\nresult.regimen_type_id::BIGINT,r.descriptio"
+"n as regimen_description, r.composition as regimen_compostion,\nrt.description as regimen_type_description,p.uuid as per"
+"son_uuid,date_visit as visit_date\nFROM (SELECT pharmacy.id, pharmacy.date_visit,pharmacy.patient_id,\npharmacy_object -"
+">> 'morning' as morning, pharmacy_object ->> 'duration'::VARCHAR as duration, \npharmacy_object ->> 'afternoon'::VARCHAR"
+" as afternoon, \npharmacy_object ->>'regimen_id'::VARCHAR as regimen_id, \npharmacy_object ->>'regimen_drug_id'::VARCHAR"
+" as regimen_drug_id, \npharmacy_object ->>'regimen_type_id' ::VARCHAR as regimen_type_id FROM pharmacy,\njsonb_array_ele"
+"ments(lines) with ordinality p(pharmacy_object)) as result\nINNER JOIN regimen r ON result.regimen_id::bigint=r.id\nINNE"
+"R JOIN regimen_drug rd ON result.regimen_drug_id::bigint = rd.id\nINNER JOIN regimen_type rt ON result.regimen_type_id::"
+"bigint = rt.id\nINNER JOIN patient p ON p.id = result.patient_id";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								Pharm_Lines.id = 0;
							} else {
		                          
            Pharm_Lines.id = rs_tDBInput_4.getInt(1);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								Pharm_Lines.date_visit = null;
							} else {
										
			Pharm_Lines.date_visit = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 2);
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								Pharm_Lines.patient_id = 0;
							} else {
		                          
            Pharm_Lines.patient_id = rs_tDBInput_4.getLong(3);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								Pharm_Lines.morning = null;
							} else {
	                         		
        	Pharm_Lines.morning = routines.system.JDBCUtil.getString(rs_tDBInput_4, 4, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 5) {
								Pharm_Lines.duration = null;
							} else {
	                         		
        	Pharm_Lines.duration = routines.system.JDBCUtil.getString(rs_tDBInput_4, 5, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 6) {
								Pharm_Lines.afternoon = null;
							} else {
	                         		
        	Pharm_Lines.afternoon = routines.system.JDBCUtil.getString(rs_tDBInput_4, 6, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 7) {
								Pharm_Lines.regimen_id = null;
							} else {
	                         		
        	Pharm_Lines.regimen_id = routines.system.JDBCUtil.getString(rs_tDBInput_4, 7, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 8) {
								Pharm_Lines.regimen_drug_id = null;
							} else {
	                         		
        	Pharm_Lines.regimen_drug_id = routines.system.JDBCUtil.getString(rs_tDBInput_4, 8, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 9) {
								Pharm_Lines.regimen_type_id = null;
							} else {
	                         		
        	Pharm_Lines.regimen_type_id = routines.system.JDBCUtil.getString(rs_tDBInput_4, 9, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 10) {
								Pharm_Lines.regimen_description = null;
							} else {
	                         		
        	Pharm_Lines.regimen_description = routines.system.JDBCUtil.getString(rs_tDBInput_4, 10, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 11) {
								Pharm_Lines.regimen_compostion = null;
							} else {
	                         		
        	Pharm_Lines.regimen_compostion = routines.system.JDBCUtil.getString(rs_tDBInput_4, 11, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 12) {
								Pharm_Lines.regimen_type_description = null;
							} else {
	                         		
        	Pharm_Lines.regimen_type_description = routines.system.JDBCUtil.getString(rs_tDBInput_4, 12, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 13) {
								Pharm_Lines.person_uuid = null;
							} else {
	                         		
        	Pharm_Lines.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_4, 13, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 14) {
								Pharm_Lines.visit_date = null;
							} else {
										
			Pharm_Lines.visit_date = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 14);
		                    }
					


 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Pharm_Lines");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row2HashKey.description = Pharm_Lines.regimen_description ;
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.description = '" + row2HashKey.description + "'");
								} // G 071
							

							row2Struct row2 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								 
							
							
								if (tHash_Lookup_row2 !=null && tHash_Lookup_row2.hasNext()) { // G 099
								
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							
							
								} // G 099
							
							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

Load_pharmlines = null;


// # Output table : 'Load_pharmlines'
Load_pharmlines_tmp.patient_id = Pharm_Lines.patient_id ;
Load_pharmlines_tmp.person_uuid = Pharm_Lines.person_uuid ;
Load_pharmlines_tmp.regimen_description = Pharm_Lines.regimen_description ;
Load_pharmlines_tmp.regimen_type_description = Pharm_Lines.regimen_type_description ;
Load_pharmlines_tmp.regimen_id = row2.id ;
Load_pharmlines_tmp.regimen_type_id = row2.regimen_type_id ;
Load_pharmlines_tmp.date_visit = Pharm_Lines.date_visit ;
Load_pharmlines_tmp.visit_date = Pharm_Lines.visit_date ;
Load_pharmlines = Load_pharmlines_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "Load_pharmlines"
if(Load_pharmlines != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Load_pharmlines");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row5" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow5 = false;
       		  	    	
       		  	    	
 							row5Struct row5ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row5HashKey.person_uuid = Load_pharmlines.person_uuid ;
                        		    		
                        		    		    row5HashKey.visit_date = Load_pharmlines.visit_date  == null ? null : new java.util.Date(Load_pharmlines.visit_date .getTime());
                        		    		

								
		                        	row5HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row5.lookup( row5HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row5 != null && tHash_Lookup_row5.getCount(row5HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row5' and it contains more one result from keys :  row5.person_uuid = '" + row5HashKey.person_uuid + "', row5.visit_date = '" + row5HashKey.visit_date + "'");
								} // G 071
							

							row5Struct row5 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row5Struct fromLookup_row5 = null;
							row5 = row5Default;
										 
							
								 
							
							
								if (tHash_Lookup_row5 !=null && tHash_Lookup_row5.hasNext()) { // G 099
								
							
								
								fromLookup_row5 = tHash_Lookup_row5.next();

							
							
								} // G 099
							
							

							if(fromLookup_row5 != null) {
								row5 = fromLookup_row5;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

HIV_Regimen = null;


// # Output table : 'HIV_Regimen'
HIV_Regimen_tmp.id = Numeric.sequence("id",1,1);
HIV_Regimen_tmp.art_pharmacy_id = row5.art_pharmacy_id ;
HIV_Regimen_tmp.regimens_id = Load_pharmlines.regimen_id ;
HIV_Regimen = HIV_Regimen_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "HIV_Regimen"
if(HIV_Regimen != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"HIV_Regimen");
					}
					



        whetherReject_tDBOutput_3 = false;
                    if(HIV_Regimen.id == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setInt(1, HIV_Regimen.id);
}

            int checkCount_tDBOutput_3 = -1;
            try (java.sql.ResultSet rs_tDBOutput_3 = pstmt_tDBOutput_3.executeQuery()) {
                while(rs_tDBOutput_3.next()) {
                    checkCount_tDBOutput_3 = rs_tDBOutput_3.getInt(1);
                }
            }
            if(checkCount_tDBOutput_3 > 0) {
                        if(HIV_Regimen.id == null) {
pstmtUpdate_tDBOutput_3.setNull(1, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_3.setInt(1, HIV_Regimen.id);
}

                        pstmtUpdate_tDBOutput_3.setLong(2, HIV_Regimen.art_pharmacy_id);

                        pstmtUpdate_tDBOutput_3.setLong(3, HIV_Regimen.regimens_id);

                        if(HIV_Regimen.id == null) {
pstmtUpdate_tDBOutput_3.setNull(4 + count_tDBOutput_3, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_3.setInt(4 + count_tDBOutput_3, HIV_Regimen.id);
}

                try {
					
                    updatedCount_tDBOutput_3 = updatedCount_tDBOutput_3 + pstmtUpdate_tDBOutput_3.executeUpdate();
                    nb_line_tDBOutput_3++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_3 = true;
                        nb_line_tDBOutput_3++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(HIV_Regimen.id == null) {
pstmtInsert_tDBOutput_3.setNull(1, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_3.setInt(1, HIV_Regimen.id);
}

                        pstmtInsert_tDBOutput_3.setLong(2, HIV_Regimen.art_pharmacy_id);

                        pstmtInsert_tDBOutput_3.setLong(3, HIV_Regimen.regimens_id);

                try {
					
                    insertedCount_tDBOutput_3 = insertedCount_tDBOutput_3 + pstmtInsert_tDBOutput_3.executeUpdate();
                    nb_line_tDBOutput_3++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_3 = true;
                        nb_line_tDBOutput_3++;
                            System.err.print(e.getMessage());
                }
            }
            if(!whetherReject_tDBOutput_3) {
            }
    		    commitCounter_tDBOutput_3++;
                if(commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {
                	conn_tDBOutput_3.commit();
                	
                	commitCounter_tDBOutput_3=0;
                }

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "HIV_Regimen"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "Load_pharmlines"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
	if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
		
			conn_tDBInput_4.commit();
			
		
			conn_tDBInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);
 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());

   			if (globalMap.get("tDBInput_4_NB_LINE") != null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				tJava_2Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}



/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Pharm_Lines");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row5 != null) {
						tHash_Lookup_row5.endGet();
					}
					globalMap.remove( "tHash_Lookup_row5" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Load_pharmlines");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



        if(pstmtUpdate_tDBOutput_3 != null){
            pstmtUpdate_tDBOutput_3.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_3");
        }
        if(pstmtInsert_tDBOutput_3 != null){
            pstmtInsert_tDBOutput_3.close();
            resourceMap.remove("pstmtInsert_tDBOutput_3");
        }
        if(pstmt_tDBOutput_3 != null) {
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);
			
			conn_tDBOutput_3.commit();
			
		
    	conn_tDBOutput_3 .close();
    	
    	resourceMap.put("finish_tDBOutput_3", true);
    	

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"HIV_Regimen");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJava_3Process(globalMap);



/**
 * [tDBOutput_3 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row5"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_3 = null;
                if ((pstmtUpdateToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_3")) != null) {
                    pstmtUpdateToClose_tDBOutput_3.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_3 = null;
                if ((pstmtInsertToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_3")) != null) {
                    pstmtInsertToClose_tDBOutput_3.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_3") == null){
            java.sql.Connection ctn_tDBOutput_3 = null;
            if((ctn_tDBOutput_3 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_3")) != null){
                try {
                    ctn_tDBOutput_3.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_3) {
                    String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :" + sqlEx_tDBOutput_3.getMessage();
                    System.err.println(errorMessage_tDBOutput_3);
                }
            }
        }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	

public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";

	
		int tos_count_tJava_3 = 0;
		


int totalMigrated = globalMap.get("tDBOutput_3_NB_LINE_UPDATED") != null ? (Integer)globalMap.get("tDBOutput_3_NB_LINE_UPDATED") : 0;

System.out.println("Total hiv_art_pharmacy_regimens already migrated "+totalMigrated);

System.out.println("Total new records migrated - "+globalMap.get("tDBOutput_3_NB_LINE_INSERTED"));
if(globalMap.get("tDBOutput_3_ERROR_MESSAGE") != null){
System.out.println("Migration Error - "+globalMap.get("tDBOutput_3_ERROR_MESSAGE"));
}
System.out.println("Total erroneous records not migrated - "+globalMap.get("tFileOutputDelimited_3_NB_LINE"));

java.time.LocalDateTime endTime = java.time.LocalDateTime.now();
System.out.println("End time - "+ endTime);
java.time.LocalDateTime statTime = (java.time.LocalDateTime)globalMap.get("startTime");

java.time.Duration duration = java.time.Duration.between(statTime, endTime);
System.out.println("Duration - "+ duration);

System.out.println("*************HIV_ART_PHARMACY MIGRATION REPORT END*****************");
System.out.println("****************************************************************");
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());




/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	

public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";

	
		int tos_count_tJava_2 = 0;
		


System.out.println("Total hiv_art_pharmacy records fetched for regimen ordered - "+globalMap.get("tDBInput_4_NB_LINE"));
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


System.out.println("Total Pharmacy records fetched from LAMIS3 Pharmacy - "+globalMap.get("tDBInput_2_NB_LINE"));
System.out.println("");
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class facilities_lookupStruct implements routines.system.IPersistableComparableLookupRow<facilities_lookupStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public String facility_name;

				public String getFacility_name () {
					return this.facility_name;
				}
				
			    public String lga_name;

				public String getLga_name () {
					return this.lga_name;
				}
				
			    public String datim_code;

				public String getDatim_code () {
					return this.datim_code;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.datim_code == null) ? 0 : this.datim_code.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final facilities_lookupStruct other = (facilities_lookupStruct) obj;
		
						if (this.datim_code == null) {
							if (other.datim_code != null)
								return false;
						
						} else if (!this.datim_code.equals(other.datim_code))
						
							return false;
					

		return true;
    }

	public void copyDataTo(facilities_lookupStruct other) {

		other.id = this.id;
	            other.facility_name = this.facility_name;
	            other.lga_name = this.lga_name;
	            other.datim_code = this.datim_code;
	            
	}

	public void copyKeysDataTo(facilities_lookupStruct other) {

		other.datim_code = this.datim_code;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Pharmacy) {

        	try {

        		int length = 0;
		
					this.datim_code = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.datim_code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readLong();
					
						this.facility_name = readString(dis,ois);
					
						this.lga_name = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeLong(this.id);
					
						writeString(this.facility_name, dos, oos);
					
						writeString(this.lga_name, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",facility_name="+facility_name);
		sb.append(",lga_name="+lga_name);
		sb.append(",datim_code="+datim_code);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(facilities_lookupStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.datim_code, other.datim_code);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		facilities_lookupStruct facilities_lookup = new facilities_lookupStruct();




	
	/**
	 * [tAdvancedHash_facilities_lookup begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_facilities_lookup", false);
		start_Hash.put("tAdvancedHash_facilities_lookup", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_facilities_lookup";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"facilities_lookup");
					}
				
		int tos_count_tAdvancedHash_facilities_lookup = 0;
		

			   		// connection name:facilities_lookup
			   		// source node:tDBInput_1 - inputs:(after_tDBInput_2) outputs:(facilities_lookup,If,facilities_lookup) | target node:tAdvancedHash_facilities_lookup - inputs:(facilities_lookup) outputs:()
			   		// linked node: tMap_1 - inputs:(hiv_pharmacy,facilities_lookup) outputs:(HIV_Art_Pharmacy)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_facilities_lookup = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<facilities_lookupStruct> tHash_Lookup_facilities_lookup =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<facilities_lookupStruct>getLookup(matchingModeEnum_facilities_lookup);
	   						   
		   	   	   globalMap.put("tHash_Lookup_facilities_lookup", tHash_Lookup_facilities_lookup);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_facilities_lookup begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_1 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
				String url_tDBInput_1 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
				conn_tDBInput_1.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT iden.organisation_unit_id as id, ef.facility_name, ef.lga_name, ef.datim_id FROM etl_facility ef \nINNER JOIN ba"
+"se_organisation_unit_identifier iden ON iden.code = ef.datim_id";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								facilities_lookup.id = 0;
							} else {
		                          
            facilities_lookup.id = rs_tDBInput_1.getLong(1);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								facilities_lookup.facility_name = null;
							} else {
	                         		
        	facilities_lookup.facility_name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								facilities_lookup.lga_name = null;
							} else {
	                         		
        	facilities_lookup.lga_name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								facilities_lookup.datim_code = null;
							} else {
	                         		
        	facilities_lookup.datim_code = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_facilities_lookup main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facilities_lookup";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"facilities_lookup");
					}
					


			   
			   

					facilities_lookupStruct facilities_lookup_HashRow = new facilities_lookupStruct();
		   	   	   
				
				facilities_lookup_HashRow.id = facilities_lookup.id;
				
				facilities_lookup_HashRow.facility_name = facilities_lookup.facility_name;
				
				facilities_lookup_HashRow.lga_name = facilities_lookup.lga_name;
				
				facilities_lookup_HashRow.datim_code = facilities_lookup.datim_code;
				
			tHash_Lookup_facilities_lookup.put(facilities_lookup_HashRow);
			
            




 


	tos_count_tAdvancedHash_facilities_lookup++;

/**
 * [tAdvancedHash_facilities_lookup main ] stop
 */
	
	/**
	 * [tAdvancedHash_facilities_lookup process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facilities_lookup";

	

 



/**
 * [tAdvancedHash_facilities_lookup process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_facilities_lookup process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facilities_lookup";

	

 



/**
 * [tAdvancedHash_facilities_lookup process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
	if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
		
			conn_tDBInput_1.commit();
			
		
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());

   			if (globalMap.get("tDBInput_1_NB_LINE") != null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If3", 0, "true");
					}
				tJava_4Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "false");
					}   	 
   				}



/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_facilities_lookup end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facilities_lookup";

	

tHash_Lookup_facilities_lookup.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"facilities_lookup");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_facilities_lookup", true);
end_Hash.put("tAdvancedHash_facilities_lookup", System.currentTimeMillis());




/**
 * [tAdvancedHash_facilities_lookup end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_facilities_lookup finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facilities_lookup";

	

 



/**
 * [tAdvancedHash_facilities_lookup finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_4", false);
		start_Hash.put("tJava_4", System.currentTimeMillis());
		
	
	currentComponent="tJava_4";

	
		int tos_count_tJava_4 = 0;
		


System.out.println("*****************************************************************");
System.out.println("***********HIV_ART_PHARMACY MIGRATION REPORT START*****************");
java.time.LocalDateTime startTime = java.time.LocalDateTime.now();
globalMap.put("startTime", startTime);
System.out.println("Start time - "+ startTime);
System.out.println("");
 



/**
 * [tJava_4 begin ] stop
 */
	
	/**
	 * [tJava_4 main ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 


	tos_count_tJava_4++;

/**
 * [tJava_4 main ] stop
 */
	
	/**
	 * [tJava_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 process_data_begin ] stop
 */
	
	/**
	 * [tJava_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 process_data_end ] stop
 */
	
	/**
	 * [tJava_4 end ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 

ok_Hash.put("tJava_4", true);
end_Hash.put("tJava_4", System.currentTimeMillis());




/**
 * [tJava_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_4 finally ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableComparableLookupRow<row1Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public java.util.Date visit_start_date;

				public java.util.Date getVisit_start_date () {
					return this.visit_start_date;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.person_uuid == null) ? 0 : this.person_uuid.hashCode());
					
						result = prime * result + ((this.visit_start_date == null) ? 0 : this.visit_start_date.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.person_uuid == null) {
							if (other.person_uuid != null)
								return false;
						
						} else if (!this.person_uuid.equals(other.person_uuid))
						
							return false;
					
						if (this.visit_start_date == null) {
							if (other.visit_start_date != null)
								return false;
						
						} else if (!this.visit_start_date.equals(other.visit_start_date))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.person_uuid = this.person_uuid;
	            other.visit_start_date = this.visit_start_date;
	            other.uuid = this.uuid;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.person_uuid = this.person_uuid;
	            	other.visit_start_date = this.visit_start_date;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Pharmacy) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
					this.visit_start_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
					// java.util.Date
				
						writeDate(this.visit_start_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.uuid = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.uuid, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",visit_start_date="+String.valueOf(visit_start_date));
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.person_uuid, other.person_uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.visit_start_date, other.visit_start_date);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tAdvancedHash_row1 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row1", false);
		start_Hash.put("tAdvancedHash_row1", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tAdvancedHash_row1 = 0;
		

			   		// connection name:row1
			   		// source node:tDBInput_8 - inputs:(after_tDBInput_2) outputs:(row1,row1) | target node:tAdvancedHash_row1 - inputs:(row1) outputs:()
			   		// linked node: tMap_5 - inputs:(HIV_Art_Pharmacy,row1) outputs:(Pharmacy_visit_map)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row1 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row1Struct>getLookup(matchingModeEnum_row1);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row1", tHash_Lookup_row1);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row1 begin ] stop
 */



	
	/**
	 * [tDBInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_8", false);
		start_Hash.put("tDBInput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_8";

	
		int tos_count_tDBInput_8 = 0;
		
	
    
	
		    int nb_line_tDBInput_8 = 0;
		    java.sql.Connection conn_tDBInput_8 = null;
				String driverClass_tDBInput_8 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_8 = java.lang.Class.forName(driverClass_tDBInput_8);
				String dbUser_tDBInput_8 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_8 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_8 = decryptedPassword_tDBInput_8;
				
				String url_tDBInput_8 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_8 = java.sql.DriverManager.getConnection(url_tDBInput_8,dbUser_tDBInput_8,dbPwd_tDBInput_8);
		        
				conn_tDBInput_8.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8.createStatement();

		    String dbquery_tDBInput_8 = "SELECT person_uuid, visit_start_date, uuid FROM patient_visit";
			

            	globalMap.put("tDBInput_8_QUERY",dbquery_tDBInput_8);
		    java.sql.ResultSet rs_tDBInput_8 = null;

		    try {
		    	rs_tDBInput_8 = stmt_tDBInput_8.executeQuery(dbquery_tDBInput_8);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8.getMetaData();
		    	int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8.getColumnCount();

		    String tmpContent_tDBInput_8 = null;
		    
		    
		    while (rs_tDBInput_8.next()) {
		        nb_line_tDBInput_8++;
		        
							if(colQtyInRs_tDBInput_8 < 1) {
								row1.person_uuid = null;
							} else {
	                         		
        	row1.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_8, 1, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 2) {
								row1.visit_start_date = null;
							} else {
										
			row1.visit_start_date = routines.system.JDBCUtil.getDate(rs_tDBInput_8, 2);
		                    }
							if(colQtyInRs_tDBInput_8 < 3) {
								row1.uuid = null;
							} else {
	                         		
        	row1.uuid = routines.system.JDBCUtil.getString(rs_tDBInput_8, 3, false);
		                    }
					


 



/**
 * [tDBInput_8 begin ] stop
 */
	
	/**
	 * [tDBInput_8 main ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 


	tos_count_tDBInput_8++;

/**
 * [tDBInput_8 main ] stop
 */
	
	/**
	 * [tDBInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row1 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					


			   
			   

					row1Struct row1_HashRow = new row1Struct();
		   	   	   
				
				row1_HashRow.person_uuid = row1.person_uuid;
				
				row1_HashRow.visit_start_date = row1.visit_start_date;
				
				row1_HashRow.uuid = row1.uuid;
				
			tHash_Lookup_row1.put(row1_HashRow);
			
            




 


	tos_count_tAdvancedHash_row1++;

/**
 * [tAdvancedHash_row1 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	

 



/**
 * [tAdvancedHash_row1 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row1 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	

 



/**
 * [tAdvancedHash_row1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_8 end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

	}
}finally{
	if (rs_tDBInput_8 != null) {
		rs_tDBInput_8.close();
	}
	if (stmt_tDBInput_8 != null) {
		stmt_tDBInput_8.close();
	}
	if(conn_tDBInput_8 != null && !conn_tDBInput_8.isClosed()) {
		
			conn_tDBInput_8.commit();
			
		
			conn_tDBInput_8.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_8_NB_LINE",nb_line_tDBInput_8);
 

ok_Hash.put("tDBInput_8", true);
end_Hash.put("tDBInput_8", System.currentTimeMillis());




/**
 * [tDBInput_8 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row1 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	

tHash_Lookup_row1.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row1", true);
end_Hash.put("tAdvancedHash_row1", System.currentTimeMillis());




/**
 * [tAdvancedHash_row1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row1 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	

 



/**
 * [tAdvancedHash_row1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public long regimen_type_id;

				public long getRegimen_type_id () {
					return this.regimen_type_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.description == null) ? 0 : this.description.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.description == null) {
							if (other.description != null)
								return false;
						
						} else if (!this.description.equals(other.description))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.id = this.id;
	            other.description = this.description;
	            other.regimen_type_id = this.regimen_type_id;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.description = this.description;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Pharmacy) {

        	try {

        		int length = 0;
		
					this.description = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.description,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readLong();
					
			            this.regimen_type_id = dis.readLong();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeLong(this.id);
					
		            	dos.writeLong(this.regimen_type_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",description="+description);
		sb.append(",regimen_type_id="+String.valueOf(regimen_type_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.description, other.description);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tDBInput_3 - inputs:(after_tDBInput_4) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_2 - inputs:(Pharm_Lines,row2) outputs:(Load_pharmlines)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_3 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				
				String url_tDBInput_3 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
				conn_tDBInput_3.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT id, description, regimen_type_id FROM hiv_regimen";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row2.id = 0;
							} else {
		                          
            row2.id = rs_tDBInput_3.getLong(1);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row2.description = null;
							} else {
	                         		
        	row2.description = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row2.regimen_type_id = 0;
							} else {
		                          
            row2.regimen_type_id = rs_tDBInput_3.getLong(3);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					


 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.id = row2.id;
				
				row2_HashRow.description = row2.description;
				
				row2_HashRow.regimen_type_id = row2.regimen_type_id;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
	if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
		
			conn_tDBInput_3.commit();
			
		
			conn_tDBInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

tHash_Lookup_row2.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long art_pharmacy_id;

				public long getArt_pharmacy_id () {
					return this.art_pharmacy_id;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.person_uuid == null) ? 0 : this.person_uuid.hashCode());
					
						result = prime * result + ((this.visit_date == null) ? 0 : this.visit_date.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row5Struct other = (row5Struct) obj;
		
						if (this.person_uuid == null) {
							if (other.person_uuid != null)
								return false;
						
						} else if (!this.person_uuid.equals(other.person_uuid))
						
							return false;
					
						if (this.visit_date == null) {
							if (other.visit_date != null)
								return false;
						
						} else if (!this.visit_date.equals(other.visit_date))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row5Struct other) {

		other.art_pharmacy_id = this.art_pharmacy_id;
	            other.person_uuid = this.person_uuid;
	            other.visit_date = this.visit_date;
	            
	}

	public void copyKeysDataTo(row5Struct other) {

		other.person_uuid = this.person_uuid;
	            	other.visit_date = this.visit_date;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Pharmacy, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Pharmacy) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
					this.visit_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.art_pharmacy_id = dis.readLong();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeLong(this.art_pharmacy_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("art_pharmacy_id="+String.valueOf(art_pharmacy_id));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",visit_date="+String.valueOf(visit_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.person_uuid, other.person_uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.visit_date, other.visit_date);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tAdvancedHash_row5 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row5", false);
		start_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tAdvancedHash_row5 = 0;
		

			   		// connection name:row5
			   		// source node:tDBInput_5 - inputs:(after_tDBInput_4) outputs:(row5,row5) | target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
			   		// linked node: tMap_3 - inputs:(Load_pharmlines,row5) outputs:(HIV_Regimen)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row5Struct>getLookup(matchingModeEnum_row5);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row5 begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
    
	
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_5 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;
				
				String url_tDBInput_5 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5,dbUser_tDBInput_5,dbPwd_tDBInput_5);
		        
				conn_tDBInput_5.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "SELECT id as art_pharmacy_id, person_uuid, visit_date FROM hiv_art_pharmacy";
			

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								row5.art_pharmacy_id = 0;
							} else {
		                          
            row5.art_pharmacy_id = rs_tDBInput_5.getLong(1);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								row5.person_uuid = null;
							} else {
	                         		
        	row5.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_5, 2, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								row5.visit_date = null;
							} else {
										
			row5.visit_date = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 3);
		                    }
					


 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					


			   
			   

					row5Struct row5_HashRow = new row5Struct();
		   	   	   
				
				row5_HashRow.art_pharmacy_id = row5.art_pharmacy_id;
				
				row5_HashRow.person_uuid = row5.person_uuid;
				
				row5_HashRow.visit_date = row5.visit_date;
				
			tHash_Lookup_row5.put(row5_HashRow);
			
            




 


	tos_count_tAdvancedHash_row5++;

/**
 * [tAdvancedHash_row5 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
	if(conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {
		
			conn_tDBInput_5.commit();
			
		
			conn_tDBInput_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);
 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

tHash_Lookup_row5.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row5", true);
end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());




/**
 * [tAdvancedHash_row5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Lamisplus";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final HIV_ART_Pharmacy HIV_ART_PharmacyClass = new HIV_ART_Pharmacy();

        int exitCode = HIV_ART_PharmacyClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = HIV_ART_Pharmacy.class.getClassLoader().getResourceAsStream("lamisplus_etl/hiv_art_pharmacy_6_0/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = HIV_ART_Pharmacy.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("LAMISPlus_Schema", "id_String");
                            context.LAMISPlus_Schema=(String) context.getProperty("LAMISPlus_Schema");
                        context.setContextType("LAMISPlus_AdditionalParams", "id_String");
                            context.LAMISPlus_AdditionalParams=(String) context.getProperty("LAMISPlus_AdditionalParams");
                        context.setContextType("LAMISPlus_Database", "id_String");
                            context.LAMISPlus_Database=(String) context.getProperty("LAMISPlus_Database");
                        context.setContextType("LAMISPlus_Login", "id_String");
                            context.LAMISPlus_Login=(String) context.getProperty("LAMISPlus_Login");
                        context.setContextType("LAMISPlus_Server", "id_String");
                            context.LAMISPlus_Server=(String) context.getProperty("LAMISPlus_Server");
                        context.setContextType("LAMISPlus_Password", "id_Password");
                            String pwd_LAMISPlus_Password_value = context.getProperty("LAMISPlus_Password");
                            context.LAMISPlus_Password = null;
                            if(pwd_LAMISPlus_Password_value!=null) {
                                if(context_param.containsKey("LAMISPlus_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.LAMISPlus_Password = pwd_LAMISPlus_Password_value;
                                } else if (!pwd_LAMISPlus_Password_value.isEmpty()) {
                                    try {
                                        context.LAMISPlus_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_LAMISPlus_Password_value);
                                        context.put("LAMISPlus_Password",context.LAMISPlus_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("LAMISPlus_Port", "id_String");
                            context.LAMISPlus_Port=(String) context.getProperty("LAMISPlus_Port");
                        context.setContextType("LAMIS3_AdditionalParams", "id_String");
                            context.LAMIS3_AdditionalParams=(String) context.getProperty("LAMIS3_AdditionalParams");
                        context.setContextType("LAMIS3_Database", "id_String");
                            context.LAMIS3_Database=(String) context.getProperty("LAMIS3_Database");
                        context.setContextType("LAMIS3_Login", "id_String");
                            context.LAMIS3_Login=(String) context.getProperty("LAMIS3_Login");
                        context.setContextType("LAMIS3_Password", "id_Password");
                            String pwd_LAMIS3_Password_value = context.getProperty("LAMIS3_Password");
                            context.LAMIS3_Password = null;
                            if(pwd_LAMIS3_Password_value!=null) {
                                if(context_param.containsKey("LAMIS3_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.LAMIS3_Password = pwd_LAMIS3_Password_value;
                                } else if (!pwd_LAMIS3_Password_value.isEmpty()) {
                                    try {
                                        context.LAMIS3_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_LAMIS3_Password_value);
                                        context.put("LAMIS3_Password",context.LAMIS3_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("LAMIS3_Port", "id_String");
                            context.LAMIS3_Port=(String) context.getProperty("LAMIS3_Port");
                        context.setContextType("LAMIS3_Schema", "id_String");
                            context.LAMIS3_Schema=(String) context.getProperty("LAMIS3_Schema");
                        context.setContextType("LAMIS3_Server", "id_String");
                            context.LAMIS3_Server=(String) context.getProperty("LAMIS3_Server");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("LAMISPlus_Schema")) {
                context.LAMISPlus_Schema = (String) parentContextMap.get("LAMISPlus_Schema");
            }if (parentContextMap.containsKey("LAMISPlus_AdditionalParams")) {
                context.LAMISPlus_AdditionalParams = (String) parentContextMap.get("LAMISPlus_AdditionalParams");
            }if (parentContextMap.containsKey("LAMISPlus_Database")) {
                context.LAMISPlus_Database = (String) parentContextMap.get("LAMISPlus_Database");
            }if (parentContextMap.containsKey("LAMISPlus_Login")) {
                context.LAMISPlus_Login = (String) parentContextMap.get("LAMISPlus_Login");
            }if (parentContextMap.containsKey("LAMISPlus_Server")) {
                context.LAMISPlus_Server = (String) parentContextMap.get("LAMISPlus_Server");
            }if (parentContextMap.containsKey("LAMISPlus_Password")) {
                context.LAMISPlus_Password = (java.lang.String) parentContextMap.get("LAMISPlus_Password");
            }if (parentContextMap.containsKey("LAMISPlus_Port")) {
                context.LAMISPlus_Port = (String) parentContextMap.get("LAMISPlus_Port");
            }if (parentContextMap.containsKey("LAMIS3_AdditionalParams")) {
                context.LAMIS3_AdditionalParams = (String) parentContextMap.get("LAMIS3_AdditionalParams");
            }if (parentContextMap.containsKey("LAMIS3_Database")) {
                context.LAMIS3_Database = (String) parentContextMap.get("LAMIS3_Database");
            }if (parentContextMap.containsKey("LAMIS3_Login")) {
                context.LAMIS3_Login = (String) parentContextMap.get("LAMIS3_Login");
            }if (parentContextMap.containsKey("LAMIS3_Password")) {
                context.LAMIS3_Password = (java.lang.String) parentContextMap.get("LAMIS3_Password");
            }if (parentContextMap.containsKey("LAMIS3_Port")) {
                context.LAMIS3_Port = (String) parentContextMap.get("LAMIS3_Port");
            }if (parentContextMap.containsKey("LAMIS3_Schema")) {
                context.LAMIS3_Schema = (String) parentContextMap.get("LAMIS3_Schema");
            }if (parentContextMap.containsKey("LAMIS3_Server")) {
                context.LAMIS3_Server = (String) parentContextMap.get("LAMIS3_Server");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("LAMISPlus_Password");
			parametersToEncrypt.add("LAMIS3_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_2) {
globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);

e_tDBInput_2.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : HIV_ART_Pharmacy");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     315936 characters generated by Talend Open Studio for Big Data 
 *     on the October 28, 2022 5:32:55 PM WAT
 ************************************************************************************************/