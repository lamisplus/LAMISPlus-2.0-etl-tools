// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package lamisplus_etl.hiv_art_clinical_6_0;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.PreganancyStatus;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: HIV_ART_Clinical Purpose: HIV_ART_Clinicals<br>
 * Description: HIV_ART_Clinicals <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class HIV_ART_Clinical implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(LAMISPlus_AdditionalParams != null){
				
					this.setProperty("LAMISPlus_AdditionalParams", LAMISPlus_AdditionalParams.toString());
				
			}
			
			if(LAMISPlus_Database != null){
				
					this.setProperty("LAMISPlus_Database", LAMISPlus_Database.toString());
				
			}
			
			if(LAMISPlus_Login != null){
				
					this.setProperty("LAMISPlus_Login", LAMISPlus_Login.toString());
				
			}
			
			if(LAMISPlus_Password != null){
				
					this.setProperty("LAMISPlus_Password", LAMISPlus_Password.toString());
				
			}
			
			if(LAMISPlus_Port != null){
				
					this.setProperty("LAMISPlus_Port", LAMISPlus_Port.toString());
				
			}
			
			if(LAMISPlus_Schema != null){
				
					this.setProperty("LAMISPlus_Schema", LAMISPlus_Schema.toString());
				
			}
			
			if(LAMISPlus_Server != null){
				
					this.setProperty("LAMISPlus_Server", LAMISPlus_Server.toString());
				
			}
			
			if(LAMIS3_AdditionalParams != null){
				
					this.setProperty("LAMIS3_AdditionalParams", LAMIS3_AdditionalParams.toString());
				
			}
			
			if(LAMIS3_Database != null){
				
					this.setProperty("LAMIS3_Database", LAMIS3_Database.toString());
				
			}
			
			if(LAMIS3_Login != null){
				
					this.setProperty("LAMIS3_Login", LAMIS3_Login.toString());
				
			}
			
			if(LAMIS3_Password != null){
				
					this.setProperty("LAMIS3_Password", LAMIS3_Password.toString());
				
			}
			
			if(LAMIS3_Port != null){
				
					this.setProperty("LAMIS3_Port", LAMIS3_Port.toString());
				
			}
			
			if(LAMIS3_Schema != null){
				
					this.setProperty("LAMIS3_Schema", LAMIS3_Schema.toString());
				
			}
			
			if(LAMIS3_Server != null){
				
					this.setProperty("LAMIS3_Server", LAMIS3_Server.toString());
				
			}
			
			if(Lamisplus2_sinkdb_connection_Database != null){
				
					this.setProperty("Lamisplus2_sinkdb_connection_Database", Lamisplus2_sinkdb_connection_Database.toString());
				
			}
			
			if(Lamisplus2_sinkdb_connection_Login != null){
				
					this.setProperty("Lamisplus2_sinkdb_connection_Login", Lamisplus2_sinkdb_connection_Login.toString());
				
			}
			
			if(Lamisplus2_sinkdb_connection_Password != null){
				
					this.setProperty("Lamisplus2_sinkdb_connection_Password", Lamisplus2_sinkdb_connection_Password.toString());
				
			}
			
			if(Lamisplus2_sinkdb_connection_Port != null){
				
					this.setProperty("Lamisplus2_sinkdb_connection_Port", Lamisplus2_sinkdb_connection_Port.toString());
				
			}
			
			if(Lamisplus2_sinkdb_connection_Schema != null){
				
					this.setProperty("Lamisplus2_sinkdb_connection_Schema", Lamisplus2_sinkdb_connection_Schema.toString());
				
			}
			
			if(Lamisplus2_sinkdb_connection_Server != null){
				
					this.setProperty("Lamisplus2_sinkdb_connection_Server", Lamisplus2_sinkdb_connection_Server.toString());
				
			}
			
		}

public String LAMISPlus_AdditionalParams;
public String getLAMISPlus_AdditionalParams(){
	return this.LAMISPlus_AdditionalParams;
}
public String LAMISPlus_Database;
public String getLAMISPlus_Database(){
	return this.LAMISPlus_Database;
}
public String LAMISPlus_Login;
public String getLAMISPlus_Login(){
	return this.LAMISPlus_Login;
}
public java.lang.String LAMISPlus_Password;
public java.lang.String getLAMISPlus_Password(){
	return this.LAMISPlus_Password;
}
public String LAMISPlus_Port;
public String getLAMISPlus_Port(){
	return this.LAMISPlus_Port;
}
public String LAMISPlus_Schema;
public String getLAMISPlus_Schema(){
	return this.LAMISPlus_Schema;
}
public String LAMISPlus_Server;
public String getLAMISPlus_Server(){
	return this.LAMISPlus_Server;
}
public String LAMIS3_AdditionalParams;
public String getLAMIS3_AdditionalParams(){
	return this.LAMIS3_AdditionalParams;
}
public String LAMIS3_Database;
public String getLAMIS3_Database(){
	return this.LAMIS3_Database;
}
public String LAMIS3_Login;
public String getLAMIS3_Login(){
	return this.LAMIS3_Login;
}
public java.lang.String LAMIS3_Password;
public java.lang.String getLAMIS3_Password(){
	return this.LAMIS3_Password;
}
public String LAMIS3_Port;
public String getLAMIS3_Port(){
	return this.LAMIS3_Port;
}
public String LAMIS3_Schema;
public String getLAMIS3_Schema(){
	return this.LAMIS3_Schema;
}
public String LAMIS3_Server;
public String getLAMIS3_Server(){
	return this.LAMIS3_Server;
}
public String Lamisplus2_sinkdb_connection_Database;
public String getLamisplus2_sinkdb_connection_Database(){
	return this.Lamisplus2_sinkdb_connection_Database;
}
public String Lamisplus2_sinkdb_connection_Login;
public String getLamisplus2_sinkdb_connection_Login(){
	return this.Lamisplus2_sinkdb_connection_Login;
}
public java.lang.String Lamisplus2_sinkdb_connection_Password;
public java.lang.String getLamisplus2_sinkdb_connection_Password(){
	return this.Lamisplus2_sinkdb_connection_Password;
}
public String Lamisplus2_sinkdb_connection_Port;
public String getLamisplus2_sinkdb_connection_Port(){
	return this.Lamisplus2_sinkdb_connection_Port;
}
public String Lamisplus2_sinkdb_connection_Schema;
public String getLamisplus2_sinkdb_connection_Schema(){
	return this.Lamisplus2_sinkdb_connection_Schema;
}
public String Lamisplus2_sinkdb_connection_Server;
public String getLamisplus2_sinkdb_connection_Server(){
	return this.Lamisplus2_sinkdb_connection_Server;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "6.0";
	private final String jobName = "HIV_ART_Clinical";
	private final String projectName = "LAMISPLUS_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				HIV_ART_Clinical.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(HIV_ART_Clinical.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_facilities_lookup_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_triage_uuid_lookup_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_hiv_art_codeset_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_funtional_status_lookup_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_hiv_art_stage_codeset_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_hiv_stage_lookup_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_hiv_enrollment_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_patient_visit_for_clinic_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_Compostion_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class load_art_clinicalsStruct implements routines.system.IPersistableRow<load_art_clinicalsStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String hiv_enrollment_uuid;

				public String getHiv_enrollment_uuid () {
					return this.hiv_enrollment_uuid;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public Double cd_4;

				public Double getCd_4 () {
					return this.cd_4;
				}
				
			    public Double cd_4_percentage;

				public Double getCd_4_percentage () {
					return this.cd_4_percentage;
				}
				
			    public Boolean is_commencement;

				public Boolean getIs_commencement () {
					return this.is_commencement;
				}
				
			    public String oi_screened;

				public String getOi_screened () {
					return this.oi_screened;
				}
				
			    public String sti_ids;

				public String getSti_ids () {
					return this.sti_ids;
				}
				
			    public String sti_treated;

				public String getSti_treated () {
					return this.sti_treated;
				}
				
			    public String opportunistic_infections;

				public String getOpportunistic_infections () {
					return this.opportunistic_infections;
				}
				
			    public String adr_screened;

				public String getAdr_screened () {
					return this.adr_screened;
				}
				
			    public String adverse_drug_reactions;

				public String getAdverse_drug_reactions () {
					return this.adverse_drug_reactions;
				}
				
			    public String adherence_level;

				public String getAdherence_level () {
					return this.adherence_level;
				}
				
			    public String adheres;

				public String getAdheres () {
					return this.adheres;
				}
				
			    public java.util.Date next_appointment;

				public java.util.Date getNext_appointment () {
					return this.next_appointment;
				}
				
			    public java.util.Date lmp_date;

				public java.util.Date getLmp_date () {
					return this.lmp_date;
				}
				
			    public long facility_id;

				public long getFacility_id () {
					return this.facility_id;
				}
				
			    public long functional_status_id;

				public long getFunctional_status_id () {
					return this.functional_status_id;
				}
				
			    public long clinical_stage_id;

				public long getClinical_stage_id () {
					return this.clinical_stage_id;
				}
				
			    public String clinical_note;

				public String getClinical_note () {
					return this.clinical_note;
				}
				
			    public Integer regimen_id;

				public Integer getRegimen_id () {
					return this.regimen_id;
				}
				
			    public Integer regimen_type_id;

				public Integer getRegimen_type_id () {
					return this.regimen_type_id;
				}
				
			    public Integer art_status_id;

				public Integer getArt_status_id () {
					return this.art_status_id;
				}
				
			    public String vital_sign_uuid;

				public String getVital_sign_uuid () {
					return this.vital_sign_uuid;
				}
				
			    public Integer who_staging_id;

				public Integer getWho_staging_id () {
					return this.who_staging_id;
				}
				
			    public String extra;

				public String getExtra () {
					return this.extra;
				}
				
			    public String tb_status;

				public String getTb_status () {
					return this.tb_status;
				}
				
			    public String tb_screen;

				public String getTb_screen () {
					return this.tb_screen;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final load_art_clinicalsStruct other = (load_art_clinicalsStruct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(load_art_clinicalsStruct other) {

		other.id = this.id;
	            other.created_date = this.created_date;
	            other.created_by = this.created_by;
	            other.last_modified_date = this.last_modified_date;
	            other.last_modified_by = this.last_modified_by;
	            other.person_uuid = this.person_uuid;
	            other.hiv_enrollment_uuid = this.hiv_enrollment_uuid;
	            other.uuid = this.uuid;
	            other.archived = this.archived;
	            other.visit_id = this.visit_id;
	            other.visit_date = this.visit_date;
	            other.cd_4 = this.cd_4;
	            other.cd_4_percentage = this.cd_4_percentage;
	            other.is_commencement = this.is_commencement;
	            other.oi_screened = this.oi_screened;
	            other.sti_ids = this.sti_ids;
	            other.sti_treated = this.sti_treated;
	            other.opportunistic_infections = this.opportunistic_infections;
	            other.adr_screened = this.adr_screened;
	            other.adverse_drug_reactions = this.adverse_drug_reactions;
	            other.adherence_level = this.adherence_level;
	            other.adheres = this.adheres;
	            other.next_appointment = this.next_appointment;
	            other.lmp_date = this.lmp_date;
	            other.facility_id = this.facility_id;
	            other.functional_status_id = this.functional_status_id;
	            other.clinical_stage_id = this.clinical_stage_id;
	            other.clinical_note = this.clinical_note;
	            other.regimen_id = this.regimen_id;
	            other.regimen_type_id = this.regimen_type_id;
	            other.art_status_id = this.art_status_id;
	            other.vital_sign_uuid = this.vital_sign_uuid;
	            other.who_staging_id = this.who_staging_id;
	            other.extra = this.extra;
	            other.tb_status = this.tb_status;
	            other.tb_screen = this.tb_screen;
	            
	}

	public void copyKeysDataTo(load_art_clinicalsStruct other) {

		other.id = this.id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
					this.created_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.last_modified_by = readString(dis);
					
					this.person_uuid = readString(dis);
					
					this.hiv_enrollment_uuid = readString(dis);
					
					this.uuid = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.visit_id = readString(dis);
					
					this.visit_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd_4 = null;
           				} else {
           			    	this.cd_4 = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd_4_percentage = null;
           				} else {
           			    	this.cd_4_percentage = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_commencement = null;
           				} else {
           			    	this.is_commencement = dis.readBoolean();
           				}
					
					this.oi_screened = readString(dis);
					
					this.sti_ids = readString(dis);
					
					this.sti_treated = readString(dis);
					
					this.opportunistic_infections = readString(dis);
					
					this.adr_screened = readString(dis);
					
					this.adverse_drug_reactions = readString(dis);
					
					this.adherence_level = readString(dis);
					
					this.adheres = readString(dis);
					
					this.next_appointment = readDate(dis);
					
					this.lmp_date = readDate(dis);
					
			        this.facility_id = dis.readLong();
					
			        this.functional_status_id = dis.readLong();
					
			        this.clinical_stage_id = dis.readLong();
					
					this.clinical_note = readString(dis);
					
						this.regimen_id = readInteger(dis);
					
						this.regimen_type_id = readInteger(dis);
					
						this.art_status_id = readInteger(dis);
					
					this.vital_sign_uuid = readString(dis);
					
						this.who_staging_id = readInteger(dis);
					
					this.extra = readString(dis);
					
					this.tb_status = readString(dis);
					
					this.tb_screen = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.hiv_enrollment_uuid,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// String
				
						writeString(this.visit_id,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// Double
				
						if(this.cd_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.cd_4);
		            	}
					
					// Double
				
						if(this.cd_4_percentage == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.cd_4_percentage);
		            	}
					
					// Boolean
				
						if(this.is_commencement == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_commencement);
		            	}
					
					// String
				
						writeString(this.oi_screened,dos);
					
					// String
				
						writeString(this.sti_ids,dos);
					
					// String
				
						writeString(this.sti_treated,dos);
					
					// String
				
						writeString(this.opportunistic_infections,dos);
					
					// String
				
						writeString(this.adr_screened,dos);
					
					// String
				
						writeString(this.adverse_drug_reactions,dos);
					
					// String
				
						writeString(this.adherence_level,dos);
					
					// String
				
						writeString(this.adheres,dos);
					
					// java.util.Date
				
						writeDate(this.next_appointment,dos);
					
					// java.util.Date
				
						writeDate(this.lmp_date,dos);
					
					// long
				
		            	dos.writeLong(this.facility_id);
					
					// long
				
		            	dos.writeLong(this.functional_status_id);
					
					// long
				
		            	dos.writeLong(this.clinical_stage_id);
					
					// String
				
						writeString(this.clinical_note,dos);
					
					// Integer
				
						writeInteger(this.regimen_id,dos);
					
					// Integer
				
						writeInteger(this.regimen_type_id,dos);
					
					// Integer
				
						writeInteger(this.art_status_id,dos);
					
					// String
				
						writeString(this.vital_sign_uuid,dos);
					
					// Integer
				
						writeInteger(this.who_staging_id,dos);
					
					// String
				
						writeString(this.extra,dos);
					
					// String
				
						writeString(this.tb_status,dos);
					
					// String
				
						writeString(this.tb_screen,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",person_uuid="+person_uuid);
		sb.append(",hiv_enrollment_uuid="+hiv_enrollment_uuid);
		sb.append(",uuid="+uuid);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",visit_id="+visit_id);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",cd_4="+String.valueOf(cd_4));
		sb.append(",cd_4_percentage="+String.valueOf(cd_4_percentage));
		sb.append(",is_commencement="+String.valueOf(is_commencement));
		sb.append(",oi_screened="+oi_screened);
		sb.append(",sti_ids="+sti_ids);
		sb.append(",sti_treated="+sti_treated);
		sb.append(",opportunistic_infections="+opportunistic_infections);
		sb.append(",adr_screened="+adr_screened);
		sb.append(",adverse_drug_reactions="+adverse_drug_reactions);
		sb.append(",adherence_level="+adherence_level);
		sb.append(",adheres="+adheres);
		sb.append(",next_appointment="+String.valueOf(next_appointment));
		sb.append(",lmp_date="+String.valueOf(lmp_date));
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",functional_status_id="+String.valueOf(functional_status_id));
		sb.append(",clinical_stage_id="+String.valueOf(clinical_stage_id));
		sb.append(",clinical_note="+clinical_note);
		sb.append(",regimen_id="+String.valueOf(regimen_id));
		sb.append(",regimen_type_id="+String.valueOf(regimen_type_id));
		sb.append(",art_status_id="+String.valueOf(art_status_id));
		sb.append(",vital_sign_uuid="+vital_sign_uuid);
		sb.append(",who_staging_id="+String.valueOf(who_staging_id));
		sb.append(",extra="+extra);
		sb.append(",tb_status="+tb_status);
		sb.append(",tb_screen="+tb_screen);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(load_art_clinicalsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class HIV_Art_clinicalStruct implements routines.system.IPersistableRow<HIV_Art_clinicalStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];

	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public Double cd_4;

				public Double getCd_4 () {
					return this.cd_4;
				}
				
			    public Double cd_4_percentage;

				public Double getCd_4_percentage () {
					return this.cd_4_percentage;
				}
				
			    public Boolean is_commencement;

				public Boolean getIs_commencement () {
					return this.is_commencement;
				}
				
			    public String oi_screened;

				public String getOi_screened () {
					return this.oi_screened;
				}
				
			    public String sti_ids;

				public String getSti_ids () {
					return this.sti_ids;
				}
				
			    public String sti_treated;

				public String getSti_treated () {
					return this.sti_treated;
				}
				
			    public String opportunistic_infections;

				public String getOpportunistic_infections () {
					return this.opportunistic_infections;
				}
				
			    public String adr_screened;

				public String getAdr_screened () {
					return this.adr_screened;
				}
				
			    public String adverse_drug_reactions;

				public String getAdverse_drug_reactions () {
					return this.adverse_drug_reactions;
				}
				
			    public String adherence_level;

				public String getAdherence_level () {
					return this.adherence_level;
				}
				
			    public String adheres;

				public String getAdheres () {
					return this.adheres;
				}
				
			    public java.util.Date next_appointment;

				public java.util.Date getNext_appointment () {
					return this.next_appointment;
				}
				
			    public java.util.Date lmp_date;

				public java.util.Date getLmp_date () {
					return this.lmp_date;
				}
				
			    public String functional_status;

				public String getFunctional_status () {
					return this.functional_status;
				}
				
			    public String clinical_stage;

				public String getClinical_stage () {
					return this.clinical_stage;
				}
				
			    public long facility_id;

				public long getFacility_id () {
					return this.facility_id;
				}
				
			    public String hiv_enrollment_uuid;

				public String getHiv_enrollment_uuid () {
					return this.hiv_enrollment_uuid;
				}
				
			    public String vital_sign_uuid;

				public String getVital_sign_uuid () {
					return this.vital_sign_uuid;
				}
				
			    public Integer regimen_type_id;

				public Integer getRegimen_type_id () {
					return this.regimen_type_id;
				}
				
			    public Integer regimen_id;

				public Integer getRegimen_id () {
					return this.regimen_id;
				}
				
			    public String extra;

				public String getExtra () {
					return this.extra;
				}
				
			    public String clinical_note;

				public String getClinical_note () {
					return this.clinical_note;
				}
				
			    public String tb_status;

				public String getTb_status () {
					return this.tb_status;
				}
				
			    public String tb_screen;

				public String getTb_screen () {
					return this.tb_screen;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
					this.created_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.last_modified_by = readString(dis);
					
					this.person_uuid = readString(dis);
					
					this.uuid = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.visit_id = readString(dis);
					
					this.visit_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd_4 = null;
           				} else {
           			    	this.cd_4 = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd_4_percentage = null;
           				} else {
           			    	this.cd_4_percentage = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_commencement = null;
           				} else {
           			    	this.is_commencement = dis.readBoolean();
           				}
					
					this.oi_screened = readString(dis);
					
					this.sti_ids = readString(dis);
					
					this.sti_treated = readString(dis);
					
					this.opportunistic_infections = readString(dis);
					
					this.adr_screened = readString(dis);
					
					this.adverse_drug_reactions = readString(dis);
					
					this.adherence_level = readString(dis);
					
					this.adheres = readString(dis);
					
					this.next_appointment = readDate(dis);
					
					this.lmp_date = readDate(dis);
					
					this.functional_status = readString(dis);
					
					this.clinical_stage = readString(dis);
					
			        this.facility_id = dis.readLong();
					
					this.hiv_enrollment_uuid = readString(dis);
					
					this.vital_sign_uuid = readString(dis);
					
						this.regimen_type_id = readInteger(dis);
					
						this.regimen_id = readInteger(dis);
					
					this.extra = readString(dis);
					
					this.clinical_note = readString(dis);
					
					this.tb_status = readString(dis);
					
					this.tb_screen = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// String
				
						writeString(this.visit_id,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// Double
				
						if(this.cd_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.cd_4);
		            	}
					
					// Double
				
						if(this.cd_4_percentage == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.cd_4_percentage);
		            	}
					
					// Boolean
				
						if(this.is_commencement == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_commencement);
		            	}
					
					// String
				
						writeString(this.oi_screened,dos);
					
					// String
				
						writeString(this.sti_ids,dos);
					
					// String
				
						writeString(this.sti_treated,dos);
					
					// String
				
						writeString(this.opportunistic_infections,dos);
					
					// String
				
						writeString(this.adr_screened,dos);
					
					// String
				
						writeString(this.adverse_drug_reactions,dos);
					
					// String
				
						writeString(this.adherence_level,dos);
					
					// String
				
						writeString(this.adheres,dos);
					
					// java.util.Date
				
						writeDate(this.next_appointment,dos);
					
					// java.util.Date
				
						writeDate(this.lmp_date,dos);
					
					// String
				
						writeString(this.functional_status,dos);
					
					// String
				
						writeString(this.clinical_stage,dos);
					
					// long
				
		            	dos.writeLong(this.facility_id);
					
					// String
				
						writeString(this.hiv_enrollment_uuid,dos);
					
					// String
				
						writeString(this.vital_sign_uuid,dos);
					
					// Integer
				
						writeInteger(this.regimen_type_id,dos);
					
					// Integer
				
						writeInteger(this.regimen_id,dos);
					
					// String
				
						writeString(this.extra,dos);
					
					// String
				
						writeString(this.clinical_note,dos);
					
					// String
				
						writeString(this.tb_status,dos);
					
					// String
				
						writeString(this.tb_screen,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",person_uuid="+person_uuid);
		sb.append(",uuid="+uuid);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",visit_id="+visit_id);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",cd_4="+String.valueOf(cd_4));
		sb.append(",cd_4_percentage="+String.valueOf(cd_4_percentage));
		sb.append(",is_commencement="+String.valueOf(is_commencement));
		sb.append(",oi_screened="+oi_screened);
		sb.append(",sti_ids="+sti_ids);
		sb.append(",sti_treated="+sti_treated);
		sb.append(",opportunistic_infections="+opportunistic_infections);
		sb.append(",adr_screened="+adr_screened);
		sb.append(",adverse_drug_reactions="+adverse_drug_reactions);
		sb.append(",adherence_level="+adherence_level);
		sb.append(",adheres="+adheres);
		sb.append(",next_appointment="+String.valueOf(next_appointment));
		sb.append(",lmp_date="+String.valueOf(lmp_date));
		sb.append(",functional_status="+functional_status);
		sb.append(",clinical_stage="+clinical_stage);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",hiv_enrollment_uuid="+hiv_enrollment_uuid);
		sb.append(",vital_sign_uuid="+vital_sign_uuid);
		sb.append(",regimen_type_id="+String.valueOf(regimen_type_id));
		sb.append(",regimen_id="+String.valueOf(regimen_id));
		sb.append(",extra="+extra);
		sb.append(",clinical_note="+clinical_note);
		sb.append(",tb_status="+tb_status);
		sb.append(",tb_screen="+tb_screen);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(HIV_Art_clinicalStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class hiv_clinicalsStruct implements routines.system.IPersistableRow<hiv_clinicalsStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];

	
			    public String tb_status;

				public String getTb_status () {
					return this.tb_status;
				}
				
			    public String tb_screen;

				public String getTb_screen () {
					return this.tb_screen;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public Double cd_4;

				public Double getCd_4 () {
					return this.cd_4;
				}
				
			    public Double cd_4_percentage;

				public Double getCd_4_percentage () {
					return this.cd_4_percentage;
				}
				
			    public Boolean is_commencement;

				public Boolean getIs_commencement () {
					return this.is_commencement;
				}
				
			    public String oi_screened;

				public String getOi_screened () {
					return this.oi_screened;
				}
				
			    public String sti_ids;

				public String getSti_ids () {
					return this.sti_ids;
				}
				
			    public String sti_treated;

				public String getSti_treated () {
					return this.sti_treated;
				}
				
			    public String opportunistic_infections;

				public String getOpportunistic_infections () {
					return this.opportunistic_infections;
				}
				
			    public String adr_screened;

				public String getAdr_screened () {
					return this.adr_screened;
				}
				
			    public String adverse_drug_reactions;

				public String getAdverse_drug_reactions () {
					return this.adverse_drug_reactions;
				}
				
			    public String adherence_level;

				public String getAdherence_level () {
					return this.adherence_level;
				}
				
			    public String adheres;

				public String getAdheres () {
					return this.adheres;
				}
				
			    public java.util.Date next_appointment;

				public java.util.Date getNext_appointment () {
					return this.next_appointment;
				}
				
			    public java.util.Date lmp_date;

				public java.util.Date getLmp_date () {
					return this.lmp_date;
				}
				
			    public String functional_status;

				public String getFunctional_status () {
					return this.functional_status;
				}
				
			    public String clinical_stage;

				public String getClinical_stage () {
					return this.clinical_stage;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				
			    public String hiv_enrollment_uuid;

				public String getHiv_enrollment_uuid () {
					return this.hiv_enrollment_uuid;
				}
				
			    public Integer regimen_type_id;

				public Integer getRegimen_type_id () {
					return this.regimen_type_id;
				}
				
			    public Integer regimen_id;

				public Integer getRegimen_id () {
					return this.regimen_id;
				}
				
			    public String extra;

				public String getExtra () {
					return this.extra;
				}
				
			    public String notes;

				public String getNotes () {
					return this.notes;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical) {

        	try {

        		int length = 0;
		
					this.tb_status = readString(dis);
					
					this.tb_screen = readString(dis);
					
			        this.id = dis.readInt();
					
					this.created_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.last_modified_by = readString(dis);
					
					this.person_uuid = readString(dis);
					
					this.uuid = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.visit_id = readString(dis);
					
					this.visit_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd_4 = null;
           				} else {
           			    	this.cd_4 = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd_4_percentage = null;
           				} else {
           			    	this.cd_4_percentage = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_commencement = null;
           				} else {
           			    	this.is_commencement = dis.readBoolean();
           				}
					
					this.oi_screened = readString(dis);
					
					this.sti_ids = readString(dis);
					
					this.sti_treated = readString(dis);
					
					this.opportunistic_infections = readString(dis);
					
					this.adr_screened = readString(dis);
					
					this.adverse_drug_reactions = readString(dis);
					
					this.adherence_level = readString(dis);
					
					this.adheres = readString(dis);
					
					this.next_appointment = readDate(dis);
					
					this.lmp_date = readDate(dis);
					
					this.functional_status = readString(dis);
					
					this.clinical_stage = readString(dis);
					
					this.datim_id = readString(dis);
					
					this.hiv_enrollment_uuid = readString(dis);
					
						this.regimen_type_id = readInteger(dis);
					
						this.regimen_id = readInteger(dis);
					
					this.extra = readString(dis);
					
					this.notes = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.tb_status,dos);
					
					// String
				
						writeString(this.tb_screen,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// String
				
						writeString(this.visit_id,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// Double
				
						if(this.cd_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.cd_4);
		            	}
					
					// Double
				
						if(this.cd_4_percentage == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.cd_4_percentage);
		            	}
					
					// Boolean
				
						if(this.is_commencement == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_commencement);
		            	}
					
					// String
				
						writeString(this.oi_screened,dos);
					
					// String
				
						writeString(this.sti_ids,dos);
					
					// String
				
						writeString(this.sti_treated,dos);
					
					// String
				
						writeString(this.opportunistic_infections,dos);
					
					// String
				
						writeString(this.adr_screened,dos);
					
					// String
				
						writeString(this.adverse_drug_reactions,dos);
					
					// String
				
						writeString(this.adherence_level,dos);
					
					// String
				
						writeString(this.adheres,dos);
					
					// java.util.Date
				
						writeDate(this.next_appointment,dos);
					
					// java.util.Date
				
						writeDate(this.lmp_date,dos);
					
					// String
				
						writeString(this.functional_status,dos);
					
					// String
				
						writeString(this.clinical_stage,dos);
					
					// String
				
						writeString(this.datim_id,dos);
					
					// String
				
						writeString(this.hiv_enrollment_uuid,dos);
					
					// Integer
				
						writeInteger(this.regimen_type_id,dos);
					
					// Integer
				
						writeInteger(this.regimen_id,dos);
					
					// String
				
						writeString(this.extra,dos);
					
					// String
				
						writeString(this.notes,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("tb_status="+tb_status);
		sb.append(",tb_screen="+tb_screen);
		sb.append(",id="+String.valueOf(id));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",person_uuid="+person_uuid);
		sb.append(",uuid="+uuid);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",visit_id="+visit_id);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",cd_4="+String.valueOf(cd_4));
		sb.append(",cd_4_percentage="+String.valueOf(cd_4_percentage));
		sb.append(",is_commencement="+String.valueOf(is_commencement));
		sb.append(",oi_screened="+oi_screened);
		sb.append(",sti_ids="+sti_ids);
		sb.append(",sti_treated="+sti_treated);
		sb.append(",opportunistic_infections="+opportunistic_infections);
		sb.append(",adr_screened="+adr_screened);
		sb.append(",adverse_drug_reactions="+adverse_drug_reactions);
		sb.append(",adherence_level="+adherence_level);
		sb.append(",adheres="+adheres);
		sb.append(",next_appointment="+String.valueOf(next_appointment));
		sb.append(",lmp_date="+String.valueOf(lmp_date));
		sb.append(",functional_status="+functional_status);
		sb.append(",clinical_stage="+clinical_stage);
		sb.append(",datim_id="+datim_id);
		sb.append(",hiv_enrollment_uuid="+hiv_enrollment_uuid);
		sb.append(",regimen_type_id="+String.valueOf(regimen_type_id));
		sb.append(",regimen_id="+String.valueOf(regimen_id));
		sb.append(",extra="+extra);
		sb.append(",notes="+notes);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(hiv_clinicalsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_2Struct implements routines.system.IPersistableRow<after_tDBInput_2Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];

	
			    public String tb_status;

				public String getTb_status () {
					return this.tb_status;
				}
				
			    public String tb_screen;

				public String getTb_screen () {
					return this.tb_screen;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public Double cd_4;

				public Double getCd_4 () {
					return this.cd_4;
				}
				
			    public Double cd_4_percentage;

				public Double getCd_4_percentage () {
					return this.cd_4_percentage;
				}
				
			    public Boolean is_commencement;

				public Boolean getIs_commencement () {
					return this.is_commencement;
				}
				
			    public String oi_screened;

				public String getOi_screened () {
					return this.oi_screened;
				}
				
			    public String sti_ids;

				public String getSti_ids () {
					return this.sti_ids;
				}
				
			    public String sti_treated;

				public String getSti_treated () {
					return this.sti_treated;
				}
				
			    public String opportunistic_infections;

				public String getOpportunistic_infections () {
					return this.opportunistic_infections;
				}
				
			    public String adr_screened;

				public String getAdr_screened () {
					return this.adr_screened;
				}
				
			    public String adverse_drug_reactions;

				public String getAdverse_drug_reactions () {
					return this.adverse_drug_reactions;
				}
				
			    public String adherence_level;

				public String getAdherence_level () {
					return this.adherence_level;
				}
				
			    public String adheres;

				public String getAdheres () {
					return this.adheres;
				}
				
			    public java.util.Date next_appointment;

				public java.util.Date getNext_appointment () {
					return this.next_appointment;
				}
				
			    public java.util.Date lmp_date;

				public java.util.Date getLmp_date () {
					return this.lmp_date;
				}
				
			    public String functional_status;

				public String getFunctional_status () {
					return this.functional_status;
				}
				
			    public String clinical_stage;

				public String getClinical_stage () {
					return this.clinical_stage;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				
			    public String hiv_enrollment_uuid;

				public String getHiv_enrollment_uuid () {
					return this.hiv_enrollment_uuid;
				}
				
			    public Integer regimen_type_id;

				public Integer getRegimen_type_id () {
					return this.regimen_type_id;
				}
				
			    public Integer regimen_id;

				public Integer getRegimen_id () {
					return this.regimen_id;
				}
				
			    public String extra;

				public String getExtra () {
					return this.extra;
				}
				
			    public String notes;

				public String getNotes () {
					return this.notes;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical) {

        	try {

        		int length = 0;
		
					this.tb_status = readString(dis);
					
					this.tb_screen = readString(dis);
					
			        this.id = dis.readInt();
					
					this.created_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.last_modified_by = readString(dis);
					
					this.person_uuid = readString(dis);
					
					this.uuid = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.visit_id = readString(dis);
					
					this.visit_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd_4 = null;
           				} else {
           			    	this.cd_4 = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd_4_percentage = null;
           				} else {
           			    	this.cd_4_percentage = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_commencement = null;
           				} else {
           			    	this.is_commencement = dis.readBoolean();
           				}
					
					this.oi_screened = readString(dis);
					
					this.sti_ids = readString(dis);
					
					this.sti_treated = readString(dis);
					
					this.opportunistic_infections = readString(dis);
					
					this.adr_screened = readString(dis);
					
					this.adverse_drug_reactions = readString(dis);
					
					this.adherence_level = readString(dis);
					
					this.adheres = readString(dis);
					
					this.next_appointment = readDate(dis);
					
					this.lmp_date = readDate(dis);
					
					this.functional_status = readString(dis);
					
					this.clinical_stage = readString(dis);
					
					this.datim_id = readString(dis);
					
					this.hiv_enrollment_uuid = readString(dis);
					
						this.regimen_type_id = readInteger(dis);
					
						this.regimen_id = readInteger(dis);
					
					this.extra = readString(dis);
					
					this.notes = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.tb_status,dos);
					
					// String
				
						writeString(this.tb_screen,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// String
				
						writeString(this.visit_id,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// Double
				
						if(this.cd_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.cd_4);
		            	}
					
					// Double
				
						if(this.cd_4_percentage == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.cd_4_percentage);
		            	}
					
					// Boolean
				
						if(this.is_commencement == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_commencement);
		            	}
					
					// String
				
						writeString(this.oi_screened,dos);
					
					// String
				
						writeString(this.sti_ids,dos);
					
					// String
				
						writeString(this.sti_treated,dos);
					
					// String
				
						writeString(this.opportunistic_infections,dos);
					
					// String
				
						writeString(this.adr_screened,dos);
					
					// String
				
						writeString(this.adverse_drug_reactions,dos);
					
					// String
				
						writeString(this.adherence_level,dos);
					
					// String
				
						writeString(this.adheres,dos);
					
					// java.util.Date
				
						writeDate(this.next_appointment,dos);
					
					// java.util.Date
				
						writeDate(this.lmp_date,dos);
					
					// String
				
						writeString(this.functional_status,dos);
					
					// String
				
						writeString(this.clinical_stage,dos);
					
					// String
				
						writeString(this.datim_id,dos);
					
					// String
				
						writeString(this.hiv_enrollment_uuid,dos);
					
					// Integer
				
						writeInteger(this.regimen_type_id,dos);
					
					// Integer
				
						writeInteger(this.regimen_id,dos);
					
					// String
				
						writeString(this.extra,dos);
					
					// String
				
						writeString(this.notes,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("tb_status="+tb_status);
		sb.append(",tb_screen="+tb_screen);
		sb.append(",id="+String.valueOf(id));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",person_uuid="+person_uuid);
		sb.append(",uuid="+uuid);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",visit_id="+visit_id);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",cd_4="+String.valueOf(cd_4));
		sb.append(",cd_4_percentage="+String.valueOf(cd_4_percentage));
		sb.append(",is_commencement="+String.valueOf(is_commencement));
		sb.append(",oi_screened="+oi_screened);
		sb.append(",sti_ids="+sti_ids);
		sb.append(",sti_treated="+sti_treated);
		sb.append(",opportunistic_infections="+opportunistic_infections);
		sb.append(",adr_screened="+adr_screened);
		sb.append(",adverse_drug_reactions="+adverse_drug_reactions);
		sb.append(",adherence_level="+adherence_level);
		sb.append(",adheres="+adheres);
		sb.append(",next_appointment="+String.valueOf(next_appointment));
		sb.append(",lmp_date="+String.valueOf(lmp_date));
		sb.append(",functional_status="+functional_status);
		sb.append(",clinical_stage="+clinical_stage);
		sb.append(",datim_id="+datim_id);
		sb.append(",hiv_enrollment_uuid="+hiv_enrollment_uuid);
		sb.append(",regimen_type_id="+String.valueOf(regimen_type_id));
		sb.append(",regimen_id="+String.valueOf(regimen_id));
		sb.append(",extra="+extra);
		sb.append(",notes="+notes);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_1Process(globalMap);
		tDBInput_7Process(globalMap);
		tDBInput_4Process(globalMap);
		tDBInput_6Process(globalMap);

		hiv_clinicalsStruct hiv_clinicals = new hiv_clinicalsStruct();
HIV_Art_clinicalStruct HIV_Art_clinical = new HIV_Art_clinicalStruct();
load_art_clinicalsStruct load_art_clinicals = new load_art_clinicalsStruct();






	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"load_art_clinicals");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = context.LAMISPlus_Schema;
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("hiv_art_clinical");
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("hiv_art_clinical");
}

        int updateKeyCount_tDBOutput_1 = 1;
        if(updateKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_1 = "jdbc:postgresql://"+context.LAMISPlus_Server+":"+context.LAMISPlus_Port+"/"+context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
    dbUser_tDBOutput_1 = context.LAMISPlus_Login;

	final String decryptedPassword_tDBOutput_1 = context.LAMISPlus_Password; 

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;



int count_tDBOutput_1=0;
	    String update_tDBOutput_1 = "UPDATE \"" + tableName_tDBOutput_1 + "\" SET \"id\" = ?,\"created_date\" = ?,\"created_by\" = ?,\"last_modified_date\" = ?,\"last_modified_by\" = ?,\"person_uuid\" = ?,\"hiv_enrollment_uuid\" = ?,\"uuid\" = ?,\"archived\" = ?,\"visit_id\" = ?,\"visit_date\" = ?,\"cd_4\" = ?,\"cd_4_percentage\" = ?,\"is_commencement\" = ?,\"oi_screened\" = ?,\"sti_ids\" = ?,\"sti_treated\" = ?,\"" + "opportunistic_infections" + "\" = " + "?::json" + ",\"adr_screened\" = ?,\"" + "adverse_drug_reactions" + "\" = " + "?::json" + ",\"adherence_level\" = ?,\"" + "adheres" + "\" = " + "?::json" + ",\"next_appointment\" = ?,\"lmp_date\" = ?,\"facility_id\" = ?,\"functional_status_id\" = ?,\"clinical_stage_id\" = ?,\"clinical_note\" = ?,\"regimen_id\" = ?,\"regimen_type_id\" = ?,\"art_status_id\" = ?,\"vital_sign_uuid\" = ?,\"who_staging_id\" = ?,\"" + "extra" + "\" = " + "?::json" + ",\"tb_status\" = ?,\"" + "tb_screen" + "\" = " + "?::json" + " WHERE \"uuid\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
	    resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);
	    String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1 + "\" (\"id\",\"created_date\",\"created_by\",\"last_modified_date\",\"last_modified_by\",\"person_uuid\",\"hiv_enrollment_uuid\",\"uuid\",\"archived\",\"visit_id\",\"visit_date\",\"cd_4\",\"cd_4_percentage\",\"is_commencement\",\"oi_screened\",\"sti_ids\",\"sti_treated\",\"" + "opportunistic_infections" + "\",\"adr_screened\",\"" + "adverse_drug_reactions" + "\",\"adherence_level\",\"" + "adheres" + "\",\"next_appointment\",\"lmp_date\",\"facility_id\",\"functional_status_id\",\"clinical_stage_id\",\"clinical_note\",\"regimen_id\",\"regimen_type_id\",\"art_status_id\",\"vital_sign_uuid\",\"who_staging_id\",\"" + "extra" + "\",\"tb_status\",\"" + "tb_screen" + "\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?," + "?::json" + ",?," + "?::json" + ",?," + "?::json" + ",?,?,?,?,?,?,?,?,?,?,?," + "?::json" + ",?," + "?::json" + ")";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"HIV_Art_clinical");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<funtional_status_lookupStruct> tHash_Lookup_funtional_status_lookup = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<funtional_status_lookupStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<funtional_status_lookupStruct>) 
					globalMap.get( "tHash_Lookup_funtional_status_lookup" ))
					;					
					
	

funtional_status_lookupStruct funtional_status_lookupHashKey = new funtional_status_lookupStruct();
funtional_status_lookupStruct funtional_status_lookupDefault = new funtional_status_lookupStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<hiv_stage_lookupStruct> tHash_Lookup_hiv_stage_lookup = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<hiv_stage_lookupStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<hiv_stage_lookupStruct>) 
					globalMap.get( "tHash_Lookup_hiv_stage_lookup" ))
					;					
					
	

hiv_stage_lookupStruct hiv_stage_lookupHashKey = new hiv_stage_lookupStruct();
hiv_stage_lookupStruct hiv_stage_lookupDefault = new hiv_stage_lookupStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
load_art_clinicalsStruct load_art_clinicals_tmp = new load_art_clinicalsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"hiv_clinicals");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<facilities_lookupStruct> tHash_Lookup_facilities_lookup = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<facilities_lookupStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<facilities_lookupStruct>) 
					globalMap.get( "tHash_Lookup_facilities_lookup" ))
					;					
					
	

facilities_lookupStruct facilities_lookupHashKey = new facilities_lookupStruct();
facilities_lookupStruct facilities_lookupDefault = new facilities_lookupStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<triage_uuid_lookupStruct> tHash_Lookup_triage_uuid_lookup = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<triage_uuid_lookupStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<triage_uuid_lookupStruct>) 
					globalMap.get( "tHash_Lookup_triage_uuid_lookup" ))
					;					
					
	

triage_uuid_lookupStruct triage_uuid_lookupHashKey = new triage_uuid_lookupStruct();
triage_uuid_lookupStruct triage_uuid_lookupDefault = new triage_uuid_lookupStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
HIV_Art_clinicalStruct HIV_Art_clinical_tmp = new HIV_Art_clinicalStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_2 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
				String url_tDBInput_2 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
				conn_tDBInput_2.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT  \n(CASE\n WHEN a.tb_status = 0 THEN NULL\n ELSE\n a.tb_status::VARCHAR\n END\n )::VARCHAR as tb_status, \n  jso"
+"n_build_object('tbStatusId', (CASE\n WHEN a.tb_status = 0 THEN NULL\n ELSE\n a.tb_status::VARCHAR\n END)) tb_screen,\n "
+"\n a.id,a.created_date, a.created_by, a.last_modified_date, \n    a.last_modified_by,a.person_uuid, a.uuid, a.archived, a"
+".visit_id,\n    a.visit_date, a.cd_4, a.cd_4_percentage, a.is_commencement,a.oi_screened, \n    a.sti_ids, a.sti_treated"
+", a.opportunistic_infections, a.adr_screened,  \n    a.adverse_drug_reactions, a.adherence_level,  a.adheres,  a.next_ap"
+"pointment,\n    a.lmp_date,  a.functional_status,  a.clinical_stage, a.datim_id,\n    hiv_enrollment_uuid, a.regimen_typ"
+"e_id, a.regimen_id, a.extra, a.notes\n\nFROM etl_hiv_art_clinical_stage AS a";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								hiv_clinicals.tb_status = null;
							} else {
	                         		
        	hiv_clinicals.tb_status = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								hiv_clinicals.tb_screen = null;
							} else {
	                         		
        	hiv_clinicals.tb_screen = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								hiv_clinicals.id = 0;
							} else {
		                          
            hiv_clinicals.id = rs_tDBInput_2.getInt(3);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								hiv_clinicals.created_date = null;
							} else {
										
			hiv_clinicals.created_date = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 4);
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								hiv_clinicals.created_by = null;
							} else {
	                         		
        	hiv_clinicals.created_by = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								hiv_clinicals.last_modified_date = null;
							} else {
										
			hiv_clinicals.last_modified_date = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 6);
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								hiv_clinicals.last_modified_by = null;
							} else {
	                         		
        	hiv_clinicals.last_modified_by = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								hiv_clinicals.person_uuid = null;
							} else {
	                         		
        	hiv_clinicals.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_2, 8, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								hiv_clinicals.uuid = null;
							} else {
	                         		
        	hiv_clinicals.uuid = routines.system.JDBCUtil.getString(rs_tDBInput_2, 9, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 10) {
								hiv_clinicals.archived = null;
							} else {
		                          
            hiv_clinicals.archived = rs_tDBInput_2.getInt(10);
            if(rs_tDBInput_2.wasNull()){
                    hiv_clinicals.archived = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 11) {
								hiv_clinicals.visit_id = null;
							} else {
	                         		
        	hiv_clinicals.visit_id = routines.system.JDBCUtil.getString(rs_tDBInput_2, 11, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 12) {
								hiv_clinicals.visit_date = null;
							} else {
										
			hiv_clinicals.visit_date = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 12);
		                    }
							if(colQtyInRs_tDBInput_2 < 13) {
								hiv_clinicals.cd_4 = null;
							} else {
	                         		
            hiv_clinicals.cd_4 = rs_tDBInput_2.getDouble(13);
            if(rs_tDBInput_2.wasNull()){
                    hiv_clinicals.cd_4 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 14) {
								hiv_clinicals.cd_4_percentage = null;
							} else {
	                         		
            hiv_clinicals.cd_4_percentage = rs_tDBInput_2.getDouble(14);
            if(rs_tDBInput_2.wasNull()){
                    hiv_clinicals.cd_4_percentage = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 15) {
								hiv_clinicals.is_commencement = null;
							} else {
	                         		
            hiv_clinicals.is_commencement = rs_tDBInput_2.getBoolean(15);
            if(rs_tDBInput_2.wasNull()){
                    hiv_clinicals.is_commencement = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 16) {
								hiv_clinicals.oi_screened = null;
							} else {
	                         		
        	hiv_clinicals.oi_screened = routines.system.JDBCUtil.getString(rs_tDBInput_2, 16, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 17) {
								hiv_clinicals.sti_ids = null;
							} else {
	                         		
        	hiv_clinicals.sti_ids = routines.system.JDBCUtil.getString(rs_tDBInput_2, 17, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 18) {
								hiv_clinicals.sti_treated = null;
							} else {
	                         		
        	hiv_clinicals.sti_treated = routines.system.JDBCUtil.getString(rs_tDBInput_2, 18, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 19) {
								hiv_clinicals.opportunistic_infections = null;
							} else {
	                         		
        	hiv_clinicals.opportunistic_infections = routines.system.JDBCUtil.getString(rs_tDBInput_2, 19, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 20) {
								hiv_clinicals.adr_screened = null;
							} else {
	                         		
        	hiv_clinicals.adr_screened = routines.system.JDBCUtil.getString(rs_tDBInput_2, 20, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 21) {
								hiv_clinicals.adverse_drug_reactions = null;
							} else {
	                         		
        	hiv_clinicals.adverse_drug_reactions = routines.system.JDBCUtil.getString(rs_tDBInput_2, 21, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 22) {
								hiv_clinicals.adherence_level = null;
							} else {
	                         		
        	hiv_clinicals.adherence_level = routines.system.JDBCUtil.getString(rs_tDBInput_2, 22, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 23) {
								hiv_clinicals.adheres = null;
							} else {
	                         		
        	hiv_clinicals.adheres = routines.system.JDBCUtil.getString(rs_tDBInput_2, 23, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 24) {
								hiv_clinicals.next_appointment = null;
							} else {
										
			hiv_clinicals.next_appointment = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 24);
		                    }
							if(colQtyInRs_tDBInput_2 < 25) {
								hiv_clinicals.lmp_date = null;
							} else {
										
			hiv_clinicals.lmp_date = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 25);
		                    }
							if(colQtyInRs_tDBInput_2 < 26) {
								hiv_clinicals.functional_status = null;
							} else {
	                         		
        	hiv_clinicals.functional_status = routines.system.JDBCUtil.getString(rs_tDBInput_2, 26, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 27) {
								hiv_clinicals.clinical_stage = null;
							} else {
	                         		
        	hiv_clinicals.clinical_stage = routines.system.JDBCUtil.getString(rs_tDBInput_2, 27, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 28) {
								hiv_clinicals.datim_id = null;
							} else {
	                         		
        	hiv_clinicals.datim_id = routines.system.JDBCUtil.getString(rs_tDBInput_2, 28, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 29) {
								hiv_clinicals.hiv_enrollment_uuid = null;
							} else {
	                         		
        	hiv_clinicals.hiv_enrollment_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_2, 29, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 30) {
								hiv_clinicals.regimen_type_id = null;
							} else {
		                          
            hiv_clinicals.regimen_type_id = rs_tDBInput_2.getInt(30);
            if(rs_tDBInput_2.wasNull()){
                    hiv_clinicals.regimen_type_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 31) {
								hiv_clinicals.regimen_id = null;
							} else {
		                          
            hiv_clinicals.regimen_id = rs_tDBInput_2.getInt(31);
            if(rs_tDBInput_2.wasNull()){
                    hiv_clinicals.regimen_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 32) {
								hiv_clinicals.extra = null;
							} else {
	                         		
        	hiv_clinicals.extra = routines.system.JDBCUtil.getString(rs_tDBInput_2, 32, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 33) {
								hiv_clinicals.notes = null;
							} else {
	                         		
        	hiv_clinicals.notes = routines.system.JDBCUtil.getString(rs_tDBInput_2, 33, false);
		                    }
					


 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"hiv_clinicals");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "facilities_lookup" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopfacilities_lookup = false;
       		  	    	
       		  	    	
 							facilities_lookupStruct facilities_lookupObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    facilities_lookupHashKey.datim_code = hiv_clinicals.datim_id ;
                        		    		

								
		                        	facilities_lookupHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_facilities_lookup.lookup( facilities_lookupHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_facilities_lookup != null && tHash_Lookup_facilities_lookup.getCount(facilities_lookupHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'facilities_lookup' and it contains more one result from keys :  facilities_lookup.datim_code = '" + facilities_lookupHashKey.datim_code + "'");
								} // G 071
							

							facilities_lookupStruct facilities_lookup = null;
                    		  	 
							   
                    		  	 
	       		  	    	facilities_lookupStruct fromLookup_facilities_lookup = null;
							facilities_lookup = facilities_lookupDefault;
										 
							
								 
							
							
								if (tHash_Lookup_facilities_lookup !=null && tHash_Lookup_facilities_lookup.hasNext()) { // G 099
								
							
								
								fromLookup_facilities_lookup = tHash_Lookup_facilities_lookup.next();

							
							
								} // G 099
							
							

							if(fromLookup_facilities_lookup != null) {
								facilities_lookup = fromLookup_facilities_lookup;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "triage_uuid_lookup" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooptriage_uuid_lookup = false;
       		  	    	
       		  	    	
 							triage_uuid_lookupStruct triage_uuid_lookupObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    triage_uuid_lookupHashKey.person_uuid = hiv_clinicals.person_uuid ;
                        		    		
                        		    		    triage_uuid_lookupHashKey.capture_date = hiv_clinicals.visit_date  == null ? null : new java.util.Date(hiv_clinicals.visit_date .getTime());
                        		    		

								
		                        	triage_uuid_lookupHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_triage_uuid_lookup.lookup( triage_uuid_lookupHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_triage_uuid_lookup != null && tHash_Lookup_triage_uuid_lookup.getCount(triage_uuid_lookupHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'triage_uuid_lookup' and it contains more one result from keys :  triage_uuid_lookup.person_uuid = '" + triage_uuid_lookupHashKey.person_uuid + "', triage_uuid_lookup.capture_date = '" + triage_uuid_lookupHashKey.capture_date + "'");
								} // G 071
							

							triage_uuid_lookupStruct triage_uuid_lookup = null;
                    		  	 
							   
                    		  	 
	       		  	    	triage_uuid_lookupStruct fromLookup_triage_uuid_lookup = null;
							triage_uuid_lookup = triage_uuid_lookupDefault;
										 
							
								 
							
							
								if (tHash_Lookup_triage_uuid_lookup !=null && tHash_Lookup_triage_uuid_lookup.hasNext()) { // G 099
								
							
								
								fromLookup_triage_uuid_lookup = tHash_Lookup_triage_uuid_lookup.next();

							
							
								} // G 099
							
							

							if(fromLookup_triage_uuid_lookup != null) {
								triage_uuid_lookup = fromLookup_triage_uuid_lookup;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

HIV_Art_clinical = null;


// # Output table : 'HIV_Art_clinical'
HIV_Art_clinical_tmp.id = hiv_clinicals.id ;
HIV_Art_clinical_tmp.created_date = hiv_clinicals.created_date ;
HIV_Art_clinical_tmp.created_by = hiv_clinicals.created_by ;
HIV_Art_clinical_tmp.last_modified_date = hiv_clinicals.last_modified_date ;
HIV_Art_clinical_tmp.last_modified_by = hiv_clinicals.last_modified_by ;
HIV_Art_clinical_tmp.person_uuid = hiv_clinicals.person_uuid ;
HIV_Art_clinical_tmp.uuid = hiv_clinicals.uuid ;
HIV_Art_clinical_tmp.archived = hiv_clinicals.archived ;
HIV_Art_clinical_tmp.visit_id = hiv_clinicals.visit_id ;
HIV_Art_clinical_tmp.visit_date = hiv_clinicals.visit_date ;
HIV_Art_clinical_tmp.cd_4 = hiv_clinicals.cd_4 ;
HIV_Art_clinical_tmp.cd_4_percentage = hiv_clinicals.cd_4_percentage ;
HIV_Art_clinical_tmp.is_commencement = hiv_clinicals.is_commencement ;
HIV_Art_clinical_tmp.oi_screened = hiv_clinicals.oi_screened ;
HIV_Art_clinical_tmp.sti_ids = hiv_clinicals.sti_ids ;
HIV_Art_clinical_tmp.sti_treated = hiv_clinicals.sti_treated ;
HIV_Art_clinical_tmp.opportunistic_infections = hiv_clinicals.opportunistic_infections ;
HIV_Art_clinical_tmp.adr_screened = hiv_clinicals.adr_screened ;
HIV_Art_clinical_tmp.adverse_drug_reactions = hiv_clinicals.adverse_drug_reactions ;
HIV_Art_clinical_tmp.adherence_level = hiv_clinicals.adherence_level ;
HIV_Art_clinical_tmp.adheres = hiv_clinicals.adheres ;
HIV_Art_clinical_tmp.next_appointment = hiv_clinicals.next_appointment ;
HIV_Art_clinical_tmp.lmp_date = hiv_clinicals.lmp_date ;
HIV_Art_clinical_tmp.functional_status = hiv_clinicals.functional_status ;
HIV_Art_clinical_tmp.clinical_stage = hiv_clinicals.clinical_stage ;
HIV_Art_clinical_tmp.facility_id = facilities_lookup.id ;
HIV_Art_clinical_tmp.hiv_enrollment_uuid = hiv_clinicals.hiv_enrollment_uuid ;
HIV_Art_clinical_tmp.vital_sign_uuid = triage_uuid_lookup.uuid ;
HIV_Art_clinical_tmp.regimen_type_id = hiv_clinicals.regimen_type_id ;
HIV_Art_clinical_tmp.regimen_id = hiv_clinicals.regimen_id ;
HIV_Art_clinical_tmp.extra = hiv_clinicals.extra ;
HIV_Art_clinical_tmp.clinical_note = hiv_clinicals.notes ;
HIV_Art_clinical_tmp.tb_status = hiv_clinicals.tb_status ;
HIV_Art_clinical_tmp.tb_screen = hiv_clinicals.tb_screen ;
HIV_Art_clinical = HIV_Art_clinical_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "HIV_Art_clinical"
if(HIV_Art_clinical != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"HIV_Art_clinical");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "funtional_status_lookup" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopfuntional_status_lookup = false;
       		  	    	
       		  	    	
 							funtional_status_lookupStruct funtional_status_lookupObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    funtional_status_lookupHashKey.person_uuid = HIV_Art_clinical.person_uuid ;
                        		    		

								
		                        	funtional_status_lookupHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_funtional_status_lookup.lookup( funtional_status_lookupHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_funtional_status_lookup != null && tHash_Lookup_funtional_status_lookup.getCount(funtional_status_lookupHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'funtional_status_lookup' and it contains more one result from keys :  funtional_status_lookup.person_uuid = '" + funtional_status_lookupHashKey.person_uuid + "'");
								} // G 071
							

							funtional_status_lookupStruct funtional_status_lookup = null;
                    		  	 
							   
                    		  	 
	       		  	    	funtional_status_lookupStruct fromLookup_funtional_status_lookup = null;
							funtional_status_lookup = funtional_status_lookupDefault;
										 
							
								 
							
							
								if (tHash_Lookup_funtional_status_lookup !=null && tHash_Lookup_funtional_status_lookup.hasNext()) { // G 099
								
							
								
								fromLookup_funtional_status_lookup = tHash_Lookup_funtional_status_lookup.next();

							
							
								} // G 099
							
							

							if(fromLookup_funtional_status_lookup != null) {
								funtional_status_lookup = fromLookup_funtional_status_lookup;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "hiv_stage_lookup" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoophiv_stage_lookup = false;
       		  	    	
       		  	    	
 							hiv_stage_lookupStruct hiv_stage_lookupObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    hiv_stage_lookupHashKey.person_uuid = HIV_Art_clinical.person_uuid ;
                        		    		

								
		                        	hiv_stage_lookupHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_hiv_stage_lookup.lookup( hiv_stage_lookupHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_hiv_stage_lookup != null && tHash_Lookup_hiv_stage_lookup.getCount(hiv_stage_lookupHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'hiv_stage_lookup' and it contains more one result from keys :  hiv_stage_lookup.person_uuid = '" + hiv_stage_lookupHashKey.person_uuid + "'");
								} // G 071
							

							hiv_stage_lookupStruct hiv_stage_lookup = null;
                    		  	 
							   
                    		  	 
	       		  	    	hiv_stage_lookupStruct fromLookup_hiv_stage_lookup = null;
							hiv_stage_lookup = hiv_stage_lookupDefault;
										 
							
								 
							
							
								if (tHash_Lookup_hiv_stage_lookup !=null && tHash_Lookup_hiv_stage_lookup.hasNext()) { // G 099
								
							
								
								fromLookup_hiv_stage_lookup = tHash_Lookup_hiv_stage_lookup.next();

							
							
								} // G 099
							
							

							if(fromLookup_hiv_stage_lookup != null) {
								hiv_stage_lookup = fromLookup_hiv_stage_lookup;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

load_art_clinicals = null;


// # Output table : 'load_art_clinicals'
load_art_clinicals_tmp.id = HIV_Art_clinical.id ;
load_art_clinicals_tmp.created_date = HIV_Art_clinical.created_date ;
load_art_clinicals_tmp.created_by = HIV_Art_clinical.created_by ;
load_art_clinicals_tmp.last_modified_date = HIV_Art_clinical.last_modified_date ;
load_art_clinicals_tmp.last_modified_by = HIV_Art_clinical.last_modified_by ;
load_art_clinicals_tmp.person_uuid = HIV_Art_clinical.person_uuid ;
load_art_clinicals_tmp.hiv_enrollment_uuid = HIV_Art_clinical.hiv_enrollment_uuid ;
load_art_clinicals_tmp.uuid = HIV_Art_clinical.uuid ;
load_art_clinicals_tmp.archived = HIV_Art_clinical.archived ;
load_art_clinicals_tmp.visit_id = HIV_Art_clinical.visit_id ;
load_art_clinicals_tmp.visit_date = HIV_Art_clinical.visit_date ;
load_art_clinicals_tmp.cd_4 = HIV_Art_clinical.cd_4 ;
load_art_clinicals_tmp.cd_4_percentage = HIV_Art_clinical.cd_4_percentage ;
load_art_clinicals_tmp.is_commencement = HIV_Art_clinical.is_commencement ;
load_art_clinicals_tmp.oi_screened = HIV_Art_clinical.oi_screened ;
load_art_clinicals_tmp.sti_ids = HIV_Art_clinical.sti_ids ;
load_art_clinicals_tmp.sti_treated = HIV_Art_clinical.sti_treated ;
load_art_clinicals_tmp.opportunistic_infections = HIV_Art_clinical.opportunistic_infections ;
load_art_clinicals_tmp.adr_screened = HIV_Art_clinical.adr_screened ;
load_art_clinicals_tmp.adverse_drug_reactions = HIV_Art_clinical.adverse_drug_reactions ;
load_art_clinicals_tmp.adherence_level = HIV_Art_clinical.adherence_level ;
load_art_clinicals_tmp.adheres = HIV_Art_clinical.adheres ;
load_art_clinicals_tmp.next_appointment = HIV_Art_clinical.next_appointment ;
load_art_clinicals_tmp.lmp_date = HIV_Art_clinical.lmp_date ;
load_art_clinicals_tmp.facility_id = HIV_Art_clinical.facility_id ;
load_art_clinicals_tmp.functional_status_id = funtional_status_lookup.functional_status_id ;
load_art_clinicals_tmp.clinical_stage_id = hiv_stage_lookup.clinical_stage_id ;
load_art_clinicals_tmp.clinical_note = HIV_Art_clinical.clinical_note;
load_art_clinicals_tmp.regimen_id = HIV_Art_clinical.regimen_id ;
load_art_clinicals_tmp.regimen_type_id = HIV_Art_clinical.regimen_type_id ;
load_art_clinicals_tmp.art_status_id = 0;
load_art_clinicals_tmp.vital_sign_uuid = HIV_Art_clinical.vital_sign_uuid ;
load_art_clinicals_tmp.who_staging_id = null;
load_art_clinicals_tmp.extra = HIV_Art_clinical.extra ;
load_art_clinicals_tmp.tb_status = HIV_Art_clinical.tb_status ;
load_art_clinicals_tmp.tb_screen = HIV_Art_clinical.tb_screen ;
load_art_clinicals = load_art_clinicals_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "load_art_clinicals"
if(load_art_clinicals != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"load_art_clinicals");
					}
					



        whetherReject_tDBOutput_1 = false;
            int updateFlag_tDBOutput_1=0;
                    pstmtUpdate_tDBOutput_1.setLong(1, load_art_clinicals.id);

                    if(load_art_clinicals.created_date != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(2, new java.sql.Timestamp(load_art_clinicals.created_date.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(load_art_clinicals.created_by == null) {
pstmtUpdate_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(3, load_art_clinicals.created_by);
}

                    if(load_art_clinicals.last_modified_date != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(4, new java.sql.Timestamp(load_art_clinicals.last_modified_date.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(4, java.sql.Types.TIMESTAMP);
}

                    if(load_art_clinicals.last_modified_by == null) {
pstmtUpdate_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(5, load_art_clinicals.last_modified_by);
}

                    if(load_art_clinicals.person_uuid == null) {
pstmtUpdate_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(6, load_art_clinicals.person_uuid);
}

                    if(load_art_clinicals.hiv_enrollment_uuid == null) {
pstmtUpdate_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(7, load_art_clinicals.hiv_enrollment_uuid);
}

                    if(load_art_clinicals.uuid == null) {
pstmtUpdate_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(8, load_art_clinicals.uuid);
}

                    if(load_art_clinicals.archived == null) {
pstmtUpdate_tDBOutput_1.setNull(9, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(9, load_art_clinicals.archived);
}

                    if(load_art_clinicals.visit_id == null) {
pstmtUpdate_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(10, load_art_clinicals.visit_id);
}

                    if(load_art_clinicals.visit_date != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(11, new java.sql.Timestamp(load_art_clinicals.visit_date.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(11, java.sql.Types.TIMESTAMP);
}

                    if(load_art_clinicals.cd_4 == null) {
pstmtUpdate_tDBOutput_1.setNull(12, java.sql.Types.DOUBLE);
} else {pstmtUpdate_tDBOutput_1.setDouble(12, load_art_clinicals.cd_4);
}

                    if(load_art_clinicals.cd_4_percentage == null) {
pstmtUpdate_tDBOutput_1.setNull(13, java.sql.Types.DOUBLE);
} else {pstmtUpdate_tDBOutput_1.setDouble(13, load_art_clinicals.cd_4_percentage);
}

                    if(load_art_clinicals.is_commencement == null) {
pstmtUpdate_tDBOutput_1.setNull(14, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tDBOutput_1.setBoolean(14, load_art_clinicals.is_commencement);
}

                    if(load_art_clinicals.oi_screened == null) {
pstmtUpdate_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(15, load_art_clinicals.oi_screened);
}

                    if(load_art_clinicals.sti_ids == null) {
pstmtUpdate_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(16, load_art_clinicals.sti_ids);
}

                    if(load_art_clinicals.sti_treated == null) {
pstmtUpdate_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(17, load_art_clinicals.sti_treated);
}

                    if(load_art_clinicals.opportunistic_infections == null) {
pstmtUpdate_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(18, load_art_clinicals.opportunistic_infections);
}

                    if(load_art_clinicals.adr_screened == null) {
pstmtUpdate_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(19, load_art_clinicals.adr_screened);
}

                    if(load_art_clinicals.adverse_drug_reactions == null) {
pstmtUpdate_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(20, load_art_clinicals.adverse_drug_reactions);
}

                    if(load_art_clinicals.adherence_level == null) {
pstmtUpdate_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(21, load_art_clinicals.adherence_level);
}

                    if(load_art_clinicals.adheres == null) {
pstmtUpdate_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(22, load_art_clinicals.adheres);
}

                    if(load_art_clinicals.next_appointment != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(23, new java.sql.Timestamp(load_art_clinicals.next_appointment.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(23, java.sql.Types.TIMESTAMP);
}

                    if(load_art_clinicals.lmp_date != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(24, new java.sql.Timestamp(load_art_clinicals.lmp_date.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(24, java.sql.Types.TIMESTAMP);
}

                    pstmtUpdate_tDBOutput_1.setLong(25, load_art_clinicals.facility_id);

                    pstmtUpdate_tDBOutput_1.setLong(26, load_art_clinicals.functional_status_id);

                    pstmtUpdate_tDBOutput_1.setLong(27, load_art_clinicals.clinical_stage_id);

                    if(load_art_clinicals.clinical_note == null) {
pstmtUpdate_tDBOutput_1.setNull(28, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(28, load_art_clinicals.clinical_note);
}

                    if(load_art_clinicals.regimen_id == null) {
pstmtUpdate_tDBOutput_1.setNull(29, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(29, load_art_clinicals.regimen_id);
}

                    if(load_art_clinicals.regimen_type_id == null) {
pstmtUpdate_tDBOutput_1.setNull(30, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(30, load_art_clinicals.regimen_type_id);
}

                    if(load_art_clinicals.art_status_id == null) {
pstmtUpdate_tDBOutput_1.setNull(31, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(31, load_art_clinicals.art_status_id);
}

                    if(load_art_clinicals.vital_sign_uuid == null) {
pstmtUpdate_tDBOutput_1.setNull(32, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(32, load_art_clinicals.vital_sign_uuid);
}

                    if(load_art_clinicals.who_staging_id == null) {
pstmtUpdate_tDBOutput_1.setNull(33, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(33, load_art_clinicals.who_staging_id);
}

                    if(load_art_clinicals.extra == null) {
pstmtUpdate_tDBOutput_1.setNull(34, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(34, load_art_clinicals.extra);
}

                    if(load_art_clinicals.tb_status == null) {
pstmtUpdate_tDBOutput_1.setNull(35, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(35, load_art_clinicals.tb_status);
}

                    if(load_art_clinicals.tb_screen == null) {
pstmtUpdate_tDBOutput_1.setNull(36, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(36, load_art_clinicals.tb_screen);
}


                    if(load_art_clinicals.uuid == null) {
pstmtUpdate_tDBOutput_1.setNull(37 + count_tDBOutput_1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(37 + count_tDBOutput_1, load_art_clinicals.uuid);
}


            try {
				
                updateFlag_tDBOutput_1=pstmtUpdate_tDBOutput_1.executeUpdate();
                updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1+updateFlag_tDBOutput_1;
				
            if(updateFlag_tDBOutput_1 == 0) {
            	
                        pstmtInsert_tDBOutput_1.setLong(1, load_art_clinicals.id);

                        if(load_art_clinicals.created_date != null) {
pstmtInsert_tDBOutput_1.setTimestamp(2, new java.sql.Timestamp(load_art_clinicals.created_date.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.TIMESTAMP);
}

                        if(load_art_clinicals.created_by == null) {
pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(3, load_art_clinicals.created_by);
}

                        if(load_art_clinicals.last_modified_date != null) {
pstmtInsert_tDBOutput_1.setTimestamp(4, new java.sql.Timestamp(load_art_clinicals.last_modified_date.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.TIMESTAMP);
}

                        if(load_art_clinicals.last_modified_by == null) {
pstmtInsert_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(5, load_art_clinicals.last_modified_by);
}

                        if(load_art_clinicals.person_uuid == null) {
pstmtInsert_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(6, load_art_clinicals.person_uuid);
}

                        if(load_art_clinicals.hiv_enrollment_uuid == null) {
pstmtInsert_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(7, load_art_clinicals.hiv_enrollment_uuid);
}

                        if(load_art_clinicals.uuid == null) {
pstmtInsert_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(8, load_art_clinicals.uuid);
}

                        if(load_art_clinicals.archived == null) {
pstmtInsert_tDBOutput_1.setNull(9, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(9, load_art_clinicals.archived);
}

                        if(load_art_clinicals.visit_id == null) {
pstmtInsert_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(10, load_art_clinicals.visit_id);
}

                        if(load_art_clinicals.visit_date != null) {
pstmtInsert_tDBOutput_1.setTimestamp(11, new java.sql.Timestamp(load_art_clinicals.visit_date.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(11, java.sql.Types.TIMESTAMP);
}

                        if(load_art_clinicals.cd_4 == null) {
pstmtInsert_tDBOutput_1.setNull(12, java.sql.Types.DOUBLE);
} else {pstmtInsert_tDBOutput_1.setDouble(12, load_art_clinicals.cd_4);
}

                        if(load_art_clinicals.cd_4_percentage == null) {
pstmtInsert_tDBOutput_1.setNull(13, java.sql.Types.DOUBLE);
} else {pstmtInsert_tDBOutput_1.setDouble(13, load_art_clinicals.cd_4_percentage);
}

                        if(load_art_clinicals.is_commencement == null) {
pstmtInsert_tDBOutput_1.setNull(14, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_1.setBoolean(14, load_art_clinicals.is_commencement);
}

                        if(load_art_clinicals.oi_screened == null) {
pstmtInsert_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(15, load_art_clinicals.oi_screened);
}

                        if(load_art_clinicals.sti_ids == null) {
pstmtInsert_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(16, load_art_clinicals.sti_ids);
}

                        if(load_art_clinicals.sti_treated == null) {
pstmtInsert_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(17, load_art_clinicals.sti_treated);
}

                        if(load_art_clinicals.opportunistic_infections == null) {
pstmtInsert_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(18, load_art_clinicals.opportunistic_infections);
}

                        if(load_art_clinicals.adr_screened == null) {
pstmtInsert_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(19, load_art_clinicals.adr_screened);
}

                        if(load_art_clinicals.adverse_drug_reactions == null) {
pstmtInsert_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(20, load_art_clinicals.adverse_drug_reactions);
}

                        if(load_art_clinicals.adherence_level == null) {
pstmtInsert_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(21, load_art_clinicals.adherence_level);
}

                        if(load_art_clinicals.adheres == null) {
pstmtInsert_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(22, load_art_clinicals.adheres);
}

                        if(load_art_clinicals.next_appointment != null) {
pstmtInsert_tDBOutput_1.setTimestamp(23, new java.sql.Timestamp(load_art_clinicals.next_appointment.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(23, java.sql.Types.TIMESTAMP);
}

                        if(load_art_clinicals.lmp_date != null) {
pstmtInsert_tDBOutput_1.setTimestamp(24, new java.sql.Timestamp(load_art_clinicals.lmp_date.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(24, java.sql.Types.TIMESTAMP);
}

                        pstmtInsert_tDBOutput_1.setLong(25, load_art_clinicals.facility_id);

                        pstmtInsert_tDBOutput_1.setLong(26, load_art_clinicals.functional_status_id);

                        pstmtInsert_tDBOutput_1.setLong(27, load_art_clinicals.clinical_stage_id);

                        if(load_art_clinicals.clinical_note == null) {
pstmtInsert_tDBOutput_1.setNull(28, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(28, load_art_clinicals.clinical_note);
}

                        if(load_art_clinicals.regimen_id == null) {
pstmtInsert_tDBOutput_1.setNull(29, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(29, load_art_clinicals.regimen_id);
}

                        if(load_art_clinicals.regimen_type_id == null) {
pstmtInsert_tDBOutput_1.setNull(30, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(30, load_art_clinicals.regimen_type_id);
}

                        if(load_art_clinicals.art_status_id == null) {
pstmtInsert_tDBOutput_1.setNull(31, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(31, load_art_clinicals.art_status_id);
}

                        if(load_art_clinicals.vital_sign_uuid == null) {
pstmtInsert_tDBOutput_1.setNull(32, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(32, load_art_clinicals.vital_sign_uuid);
}

                        if(load_art_clinicals.who_staging_id == null) {
pstmtInsert_tDBOutput_1.setNull(33, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(33, load_art_clinicals.who_staging_id);
}

                        if(load_art_clinicals.extra == null) {
pstmtInsert_tDBOutput_1.setNull(34, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(34, load_art_clinicals.extra);
}

                        if(load_art_clinicals.tb_status == null) {
pstmtInsert_tDBOutput_1.setNull(35, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(35, load_art_clinicals.tb_status);
}

                        if(load_art_clinicals.tb_screen == null) {
pstmtInsert_tDBOutput_1.setNull(36, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(36, load_art_clinicals.tb_screen);
}

					
                    insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1 + pstmtInsert_tDBOutput_1.executeUpdate();
                    nb_line_tDBOutput_1++;
					
    	            }else{
    					nb_line_tDBOutput_1++;
    					
     					
    				}
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_1 = true;
                        nb_line_tDBOutput_1++;
                            System.err.print(e.getMessage());
                }
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                	conn_tDBOutput_1.commit();
                	
                	commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "load_art_clinicals"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "HIV_Art_clinical"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
	if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
		
			conn_tDBInput_2.commit();
			
		
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());

   			if (globalMap.get("tDBInput_2_NB_LINE") != null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				tJava_2Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}



/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_facilities_lookup != null) {
						tHash_Lookup_facilities_lookup.endGet();
					}
					globalMap.remove( "tHash_Lookup_facilities_lookup" );

					
					
				
					if(tHash_Lookup_triage_uuid_lookup != null) {
						tHash_Lookup_triage_uuid_lookup.endGet();
					}
					globalMap.remove( "tHash_Lookup_triage_uuid_lookup" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"hiv_clinicals");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_funtional_status_lookup != null) {
						tHash_Lookup_funtional_status_lookup.endGet();
					}
					globalMap.remove( "tHash_Lookup_funtional_status_lookup" );

					
					
				
					if(tHash_Lookup_hiv_stage_lookup != null) {
						tHash_Lookup_hiv_stage_lookup.endGet();
					}
					globalMap.remove( "tHash_Lookup_hiv_stage_lookup" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"HIV_Art_clinical");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



        if(pstmtUpdate_tDBOutput_1 != null){
            pstmtUpdate_tDBOutput_1.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_1");
        }
        if(pstmtInsert_tDBOutput_1 != null){
            pstmtInsert_tDBOutput_1.close();
            resourceMap.remove("pstmtInsert_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
			
			conn_tDBOutput_1.commit();
			
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"load_art_clinicals");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tDBInput_12Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_funtional_status_lookup"); 
				     			
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_hiv_stage_lookup"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_facilities_lookup"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_triage_uuid_lookup"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
                if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_1")) != null) {
                    pstmtUpdateToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
                if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_1")) != null) {
                    pstmtInsertToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	

public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";

	
		int tos_count_tJava_2 = 0;
		


System.out.println("Total HIV ART Clinicans fetched from etl_hiv_art_clinical_stage - "+globalMap.get("tDBInput_2_NB_LINE"));
System.out.println();
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class sequence_extraStruct implements routines.system.IPersistableRow<sequence_extraStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long sequence_count;

				public Long getSequence_count () {
					return this.sequence_count;
				}
				
			    public String table_name;

				public String getTable_name () {
					return this.table_name;
				}
				
			    public java.util.Date date_time;

				public java.util.Date getDate_time () {
					return this.date_time;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.table_name == null) ? 0 : this.table_name.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final sequence_extraStruct other = (sequence_extraStruct) obj;
		
						if (this.table_name == null) {
							if (other.table_name != null)
								return false;
						
						} else if (!this.table_name.equals(other.table_name))
						
							return false;
					

		return true;
    }

	public void copyDataTo(sequence_extraStruct other) {

		other.sequence_count = this.sequence_count;
	            other.table_name = this.table_name;
	            other.date_time = this.date_time;
	            
	}

	public void copyKeysDataTo(sequence_extraStruct other) {

		other.table_name = this.table_name;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sequence_count = null;
           				} else {
           			    	this.sequence_count = dis.readLong();
           				}
					
					this.table_name = readString(dis);
					
					this.date_time = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.sequence_count == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.sequence_count);
		            	}
					
					// String
				
						writeString(this.table_name,dos);
					
					// java.util.Date
				
						writeDate(this.date_time,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("sequence_count="+String.valueOf(sequence_count));
		sb.append(",table_name="+table_name);
		sb.append(",date_time="+String.valueOf(date_time));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sequence_extraStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.table_name, other.table_name);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];

	
			    public Long sequence_count;

				public Long getSequence_count () {
					return this.sequence_count;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sequence_count = null;
           				} else {
           			    	this.sequence_count = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.sequence_count == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.sequence_count);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("sequence_count="+String.valueOf(sequence_count));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
sequence_extraStruct sequence_extra = new sequence_extraStruct();





	
	/**
	 * [tDBOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_4", false);
		start_Hash.put("tDBOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sequence_extra");
					}
				
		int tos_count_tDBOutput_4 = 0;
		





String dbschema_tDBOutput_4 = null;
	dbschema_tDBOutput_4 = context.LAMISPlus_Schema;
	

String tableName_tDBOutput_4 = null;
if(dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
	tableName_tDBOutput_4 = ("etl_sequence");
} else {
	tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "\".\"" + ("etl_sequence");
}

        int updateKeyCount_tDBOutput_4 = 1;
        if(updateKeyCount_tDBOutput_4 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_4 = 0;
int nb_line_update_tDBOutput_4 = 0;
int nb_line_inserted_tDBOutput_4 = 0;
int nb_line_deleted_tDBOutput_4 = 0;
int nb_line_rejected_tDBOutput_4 = 0;

int deletedCount_tDBOutput_4=0;
int updatedCount_tDBOutput_4=0;
int insertedCount_tDBOutput_4=0;
int rejectedCount_tDBOutput_4=0;

boolean whetherReject_tDBOutput_4 = false;

java.sql.Connection conn_tDBOutput_4 = null;
String dbUser_tDBOutput_4 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_4 = "jdbc:postgresql://"+context.LAMISPlus_Server+":"+context.LAMISPlus_Port+"/"+context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
    dbUser_tDBOutput_4 = context.LAMISPlus_Login;

	final String decryptedPassword_tDBOutput_4 = context.LAMISPlus_Password; 

    String dbPwd_tDBOutput_4 = decryptedPassword_tDBOutput_4;

    conn_tDBOutput_4 = java.sql.DriverManager.getConnection(url_tDBOutput_4,dbUser_tDBOutput_4,dbPwd_tDBOutput_4);
	
	resourceMap.put("conn_tDBOutput_4", conn_tDBOutput_4);
        conn_tDBOutput_4.setAutoCommit(false);
        int commitEvery_tDBOutput_4 = 10000;
        int commitCounter_tDBOutput_4 = 0;



int count_tDBOutput_4=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_4 = conn_tDBOutput_4.getMetaData();
                                boolean whetherExist_tDBOutput_4 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_4 = dbMetaData_tDBOutput_4.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_4 = "public";
                                    if(dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_4 = conn_tDBOutput_4.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_4 = stmtSchema_tDBOutput_4.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_4.next()){
                                                defaultSchema_tDBOutput_4 = rsSchema_tDBOutput_4.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_4.next()) {
                                        String table_tDBOutput_4 = rsTable_tDBOutput_4.getString("TABLE_NAME");
                                        String schema_tDBOutput_4 = rsTable_tDBOutput_4.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_4.equals(("etl_sequence"))
                                            && (schema_tDBOutput_4.equals(dbschema_tDBOutput_4) || ((dbschema_tDBOutput_4 ==null || dbschema_tDBOutput_4.trim().length() ==0) && defaultSchema_tDBOutput_4.equals(schema_tDBOutput_4)))) {
                                            whetherExist_tDBOutput_4 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_4) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
                                        stmtCreate_tDBOutput_4.execute("CREATE TABLE \"" + tableName_tDBOutput_4 + "\"(\"sequence_count\" INT8 ,\"table_name\" VARCHAR ,\"date_time\" TIMESTAMP ,primary key(\"table_name\"))");
                                    }
                                }
	    String update_tDBOutput_4 = "UPDATE \"" + tableName_tDBOutput_4 + "\" SET \"sequence_count\" = ?,\"date_time\" = ? WHERE \"table_name\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(update_tDBOutput_4);
	    resourceMap.put("pstmtUpdate_tDBOutput_4", pstmtUpdate_tDBOutput_4);
	    String insert_tDBOutput_4 = "INSERT INTO \"" + tableName_tDBOutput_4 + "\" (\"sequence_count\",\"table_name\",\"date_time\") VALUES (?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
	    resourceMap.put("pstmtInsert_tDBOutput_4", pstmtInsert_tDBOutput_4);
	    

 



/**
 * [tDBOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
sequence_extraStruct sequence_extra_tmp = new sequence_extraStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tDBInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_12", false);
		start_Hash.put("tDBInput_12", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_12";

	
		int tos_count_tDBInput_12 = 0;
		
	
    
	
		    int nb_line_tDBInput_12 = 0;
		    java.sql.Connection conn_tDBInput_12 = null;
				String driverClass_tDBInput_12 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_12 = java.lang.Class.forName(driverClass_tDBInput_12);
				String dbUser_tDBInput_12 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_12 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_12 = decryptedPassword_tDBInput_12;
				
				String url_tDBInput_12 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_12 = java.sql.DriverManager.getConnection(url_tDBInput_12,dbUser_tDBInput_12,dbPwd_tDBInput_12);
		        
				conn_tDBInput_12.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_12 = conn_tDBInput_12.createStatement();

		    String dbquery_tDBInput_12 = "SELECT pg_catalog.setval('hiv_art_clinical_id_seq', (SELECT MAX(id) FROM hiv_art_clinical), true);";
			

            	globalMap.put("tDBInput_12_QUERY",dbquery_tDBInput_12);
		    java.sql.ResultSet rs_tDBInput_12 = null;

		    try {
		    	rs_tDBInput_12 = stmt_tDBInput_12.executeQuery(dbquery_tDBInput_12);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_12 = rs_tDBInput_12.getMetaData();
		    	int colQtyInRs_tDBInput_12 = rsmd_tDBInput_12.getColumnCount();

		    String tmpContent_tDBInput_12 = null;
		    
		    
		    while (rs_tDBInput_12.next()) {
		        nb_line_tDBInput_12++;
		        
							if(colQtyInRs_tDBInput_12 < 1) {
								row6.sequence_count = null;
							} else {
		                          
            row6.sequence_count = rs_tDBInput_12.getLong(1);
            if(rs_tDBInput_12.wasNull()){
                    row6.sequence_count = null;
            }
		                    }
					


 



/**
 * [tDBInput_12 begin ] stop
 */
	
	/**
	 * [tDBInput_12 main ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 


	tos_count_tDBInput_12++;

/**
 * [tDBInput_12 main ] stop
 */
	
	/**
	 * [tDBInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

sequence_extra = null;


// # Output table : 'sequence_extra'
sequence_extra_tmp.sequence_count = row6.sequence_count ;
sequence_extra_tmp.table_name = "hiv_art_clinical";
sequence_extra_tmp.date_time = java.sql.Timestamp.valueOf( java.time.LocalDateTime.now() );
sequence_extra = sequence_extra_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "sequence_extra"
if(sequence_extra != null) { 



	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sequence_extra");
					}
					



        whetherReject_tDBOutput_4 = false;
            int updateFlag_tDBOutput_4=0;
                    if(sequence_extra.sequence_count == null) {
pstmtUpdate_tDBOutput_4.setNull(1, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_4.setLong(1, sequence_extra.sequence_count);
}

                    if(sequence_extra.date_time != null) {
pstmtUpdate_tDBOutput_4.setTimestamp(2, new java.sql.Timestamp(sequence_extra.date_time.getTime()));
} else {
pstmtUpdate_tDBOutput_4.setNull(2, java.sql.Types.TIMESTAMP);
}


                    if(sequence_extra.table_name == null) {
pstmtUpdate_tDBOutput_4.setNull(3 + count_tDBOutput_4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(3 + count_tDBOutput_4, sequence_extra.table_name);
}


            try {
				
                updateFlag_tDBOutput_4=pstmtUpdate_tDBOutput_4.executeUpdate();
                updatedCount_tDBOutput_4 = updatedCount_tDBOutput_4+updateFlag_tDBOutput_4;
				
            if(updateFlag_tDBOutput_4 == 0) {
            	
                        if(sequence_extra.sequence_count == null) {
pstmtInsert_tDBOutput_4.setNull(1, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_4.setLong(1, sequence_extra.sequence_count);
}

                        if(sequence_extra.table_name == null) {
pstmtInsert_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(2, sequence_extra.table_name);
}

                        if(sequence_extra.date_time != null) {
pstmtInsert_tDBOutput_4.setTimestamp(3, new java.sql.Timestamp(sequence_extra.date_time.getTime()));
} else {
pstmtInsert_tDBOutput_4.setNull(3, java.sql.Types.TIMESTAMP);
}

					
                    insertedCount_tDBOutput_4 = insertedCount_tDBOutput_4 + pstmtInsert_tDBOutput_4.executeUpdate();
                    nb_line_tDBOutput_4++;
					
    	            }else{
    					nb_line_tDBOutput_4++;
    					
     					
    				}
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_4 = true;
                        nb_line_tDBOutput_4++;
                            System.err.print(e.getMessage());
                }
            if(!whetherReject_tDBOutput_4) {
            }
    		    commitCounter_tDBOutput_4++;
                if(commitEvery_tDBOutput_4 <= commitCounter_tDBOutput_4) {
                	conn_tDBOutput_4.commit();
                	
                	commitCounter_tDBOutput_4=0;
                }

 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */

} // End of branch "sequence_extra"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_12 end ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

	}
}finally{
	if (rs_tDBInput_12 != null) {
		rs_tDBInput_12.close();
	}
	if (stmt_tDBInput_12 != null) {
		stmt_tDBInput_12.close();
	}
	if(conn_tDBInput_12 != null && !conn_tDBInput_12.isClosed()) {
		
			conn_tDBInput_12.commit();
			
		
			conn_tDBInput_12.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_12_NB_LINE",nb_line_tDBInput_12);
 

ok_Hash.put("tDBInput_12", true);
end_Hash.put("tDBInput_12", System.currentTimeMillis());




/**
 * [tDBInput_12 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tDBOutput_4 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



        if(pstmtUpdate_tDBOutput_4 != null){
            pstmtUpdate_tDBOutput_4.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_4");
        }
        if(pstmtInsert_tDBOutput_4 != null){
            pstmtInsert_tDBOutput_4.close();
            resourceMap.remove("pstmtInsert_tDBOutput_4");
        }
    resourceMap.put("statementClosed_tDBOutput_4", true);
			
			conn_tDBOutput_4.commit();
			
		
    	conn_tDBOutput_4 .close();
    	
    	resourceMap.put("finish_tDBOutput_4", true);
    	

	nb_line_deleted_tDBOutput_4=nb_line_deleted_tDBOutput_4+ deletedCount_tDBOutput_4;
	nb_line_update_tDBOutput_4=nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
	nb_line_inserted_tDBOutput_4=nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
	nb_line_rejected_tDBOutput_4=nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;
	
        globalMap.put("tDBOutput_4_NB_LINE",nb_line_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_UPDATED",nb_line_update_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_DELETED",nb_line_deleted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sequence_extra");
			  	}
			  	
 

ok_Hash.put("tDBOutput_4", true);
end_Hash.put("tDBOutput_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJava_3Process(globalMap);



/**
 * [tDBOutput_4 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_12 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tDBOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_4 = null;
                if ((pstmtUpdateToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_4")) != null) {
                    pstmtUpdateToClose_tDBOutput_4.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_4 = null;
                if ((pstmtInsertToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_4")) != null) {
                    pstmtInsertToClose_tDBOutput_4.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_4") == null){
            java.sql.Connection ctn_tDBOutput_4 = null;
            if((ctn_tDBOutput_4 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_4")) != null){
                try {
                    ctn_tDBOutput_4.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_4) {
                    String errorMessage_tDBOutput_4 = "failed to close the connection in tDBOutput_4 :" + sqlEx_tDBOutput_4.getMessage();
                    System.err.println(errorMessage_tDBOutput_4);
                }
            }
        }
    }
 



/**
 * [tDBOutput_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_12_SUBPROCESS_STATE", 1);
	}
	

public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";

	
		int tos_count_tJava_3 = 0;
		


int totalMigrated = globalMap.get("tDBOutput_1_NB_LINE_UPDATED") != null ? (Integer)globalMap.get("tDBOutput_1_NB_LINE_UPDATED") : 0;

System.out.println("Total hiv_enrollment already migrated "+totalMigrated);

System.out.println("Total new records migrated - "+globalMap.get("tDBOutput_1_NB_LINE_INSERTED"));
if(globalMap.get("tDBOutput_1_ERROR_MESSAGE") != null){
System.out.println("Migration Error - "+globalMap.get("tDBOutput_1_ERROR_MESSAGE"));
}
System.out.println("Total erroneous records not migrated - "+globalMap.get("tFileOutputDelimited_1_NB_LINE"));
System.out.println();
java.time.LocalDateTime endTime = java.time.LocalDateTime.now();
System.out.println("End time - "+ endTime);
java.time.LocalDateTime statTime = (java.time.LocalDateTime)globalMap.get("startTime");

java.time.Duration duration = java.time.Duration.between(statTime, endTime);
System.out.println("Duration - "+ duration);

System.out.println("*************HIV_ART_CLINIC MIGRATION REPORT END*****************");
System.out.println("****************************************************************");
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());




/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	


public static class facilities_lookupStruct implements routines.system.IPersistableComparableLookupRow<facilities_lookupStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String orgunit_name;

				public String getOrgunit_name () {
					return this.orgunit_name;
				}
				
			    public String datim_code;

				public String getDatim_code () {
					return this.datim_code;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.datim_code == null) ? 0 : this.datim_code.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final facilities_lookupStruct other = (facilities_lookupStruct) obj;
		
						if (this.datim_code == null) {
							if (other.datim_code != null)
								return false;
						
						} else if (!this.datim_code.equals(other.datim_code))
						
							return false;
					

		return true;
    }

	public void copyDataTo(facilities_lookupStruct other) {

		other.id = this.id;
	            other.name = this.name;
	            other.orgunit_name = this.orgunit_name;
	            other.datim_code = this.datim_code;
	            
	}

	public void copyKeysDataTo(facilities_lookupStruct other) {

		other.datim_code = this.datim_code;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical) {

        	try {

        		int length = 0;
		
					this.datim_code = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.datim_code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readLong();
					
						this.name = readString(dis,ois);
					
						this.orgunit_name = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeLong(this.id);
					
						writeString(this.name, dos, oos);
					
						writeString(this.orgunit_name, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",orgunit_name="+orgunit_name);
		sb.append(",datim_code="+datim_code);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(facilities_lookupStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.datim_code, other.datim_code);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		facilities_lookupStruct facilities_lookup = new facilities_lookupStruct();




	
	/**
	 * [tAdvancedHash_facilities_lookup begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_facilities_lookup", false);
		start_Hash.put("tAdvancedHash_facilities_lookup", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_facilities_lookup";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"facilities_lookup");
					}
				
		int tos_count_tAdvancedHash_facilities_lookup = 0;
		

			   		// connection name:facilities_lookup
			   		// source node:tDBInput_1 - inputs:(after_tDBInput_2) outputs:(facilities_lookup,facilities_lookup) | target node:tAdvancedHash_facilities_lookup - inputs:(facilities_lookup) outputs:()
			   		// linked node: tMap_1 - inputs:(hiv_clinicals,facilities_lookup,triage_uuid_lookup) outputs:(HIV_Art_clinical)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_facilities_lookup = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<facilities_lookupStruct> tHash_Lookup_facilities_lookup =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<facilities_lookupStruct>getLookup(matchingModeEnum_facilities_lookup);
	   						   
		   	   	   globalMap.put("tHash_Lookup_facilities_lookup", tHash_Lookup_facilities_lookup);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_facilities_lookup begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_1 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
				String url_tDBInput_1 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
				conn_tDBInput_1.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT facility.id,\n	facility.name,\n	orgunit.name as orgunit_name,\n	oid.code as datim_code\nFROM base_organisation_u"
+"nit facility\nJOIN base_organisation_unit orgunit\nON facility.parent_organisation_unit_id = orgunit.id\nJOIN base_organ"
+"isation_unit_identifier oid\nON facility.id = oid.organisation_unit_id\nWHERE facility.organisation_unit_level_id =4 AND"
+" EXISTS(\nSELECT * FROM public.dblink\n('lamis',\n'SELECT DISTINCT \n	fc.id as id, \n	fc.name AS facility_name,\n	lg.nam"
+"e AS lga_name, \n	nf.datim_id AS datim_id\n FROM public.patient ps\n INNER JOIN facility fc\n  ON ps.facility_id=fc.id\n"
+" INNER JOIN lga lg\n  ON fc.lga_id=lg.id\nINNER JOIN ndr_facility nf\n  ON nf.id=ps.facility_id'\n) AS DATA(\n		id INTEG"
+"ER,\n		facility_name VARCHAR,\n		lga_name VARCHAR,\n		datim_id VARCHAR\n	)\nWHERE oid.code=datim_id\n)\nORDER BY facilit"
+"y.id ASC";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								facilities_lookup.id = 0;
							} else {
		                          
            facilities_lookup.id = rs_tDBInput_1.getLong(1);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								facilities_lookup.name = null;
							} else {
	                         		
        	facilities_lookup.name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								facilities_lookup.orgunit_name = null;
							} else {
	                         		
        	facilities_lookup.orgunit_name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								facilities_lookup.datim_code = null;
							} else {
	                         		
        	facilities_lookup.datim_code = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_facilities_lookup main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facilities_lookup";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"facilities_lookup");
					}
					


			   
			   

					facilities_lookupStruct facilities_lookup_HashRow = new facilities_lookupStruct();
		   	   	   
				
				facilities_lookup_HashRow.id = facilities_lookup.id;
				
				facilities_lookup_HashRow.name = facilities_lookup.name;
				
				facilities_lookup_HashRow.orgunit_name = facilities_lookup.orgunit_name;
				
				facilities_lookup_HashRow.datim_code = facilities_lookup.datim_code;
				
			tHash_Lookup_facilities_lookup.put(facilities_lookup_HashRow);
			
            




 


	tos_count_tAdvancedHash_facilities_lookup++;

/**
 * [tAdvancedHash_facilities_lookup main ] stop
 */
	
	/**
	 * [tAdvancedHash_facilities_lookup process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facilities_lookup";

	

 



/**
 * [tAdvancedHash_facilities_lookup process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_facilities_lookup process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facilities_lookup";

	

 



/**
 * [tAdvancedHash_facilities_lookup process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
	if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
		
			conn_tDBInput_1.commit();
			
		
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_facilities_lookup end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facilities_lookup";

	

tHash_Lookup_facilities_lookup.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"facilities_lookup");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_facilities_lookup", true);
end_Hash.put("tAdvancedHash_facilities_lookup", System.currentTimeMillis());




/**
 * [tAdvancedHash_facilities_lookup end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_facilities_lookup finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facilities_lookup";

	

 



/**
 * [tAdvancedHash_facilities_lookup finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class triage_uuid_lookupStruct implements routines.system.IPersistableComparableLookupRow<triage_uuid_lookupStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public java.util.Date capture_date;

				public java.util.Date getCapture_date () {
					return this.capture_date;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.person_uuid == null) ? 0 : this.person_uuid.hashCode());
					
						result = prime * result + ((this.capture_date == null) ? 0 : this.capture_date.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final triage_uuid_lookupStruct other = (triage_uuid_lookupStruct) obj;
		
						if (this.person_uuid == null) {
							if (other.person_uuid != null)
								return false;
						
						} else if (!this.person_uuid.equals(other.person_uuid))
						
							return false;
					
						if (this.capture_date == null) {
							if (other.capture_date != null)
								return false;
						
						} else if (!this.capture_date.equals(other.capture_date))
						
							return false;
					

		return true;
    }

	public void copyDataTo(triage_uuid_lookupStruct other) {

		other.uuid = this.uuid;
	            other.person_uuid = this.person_uuid;
	            other.capture_date = this.capture_date;
	            
	}

	public void copyKeysDataTo(triage_uuid_lookupStruct other) {

		other.person_uuid = this.person_uuid;
	            	other.capture_date = this.capture_date;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
					this.capture_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
					// java.util.Date
				
						writeDate(this.capture_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.uuid = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.uuid, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",person_uuid="+person_uuid);
		sb.append(",capture_date="+String.valueOf(capture_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(triage_uuid_lookupStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.person_uuid, other.person_uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.capture_date, other.capture_date);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		triage_uuid_lookupStruct triage_uuid_lookup = new triage_uuid_lookupStruct();




	
	/**
	 * [tAdvancedHash_triage_uuid_lookup begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_triage_uuid_lookup", false);
		start_Hash.put("tAdvancedHash_triage_uuid_lookup", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_triage_uuid_lookup";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"triage_uuid_lookup");
					}
				
		int tos_count_tAdvancedHash_triage_uuid_lookup = 0;
		

			   		// connection name:triage_uuid_lookup
			   		// source node:tDBInput_7 - inputs:(after_tDBInput_2) outputs:(triage_uuid_lookup,triage_uuid_lookup) | target node:tAdvancedHash_triage_uuid_lookup - inputs:(triage_uuid_lookup) outputs:()
			   		// linked node: tMap_1 - inputs:(hiv_clinicals,facilities_lookup,triage_uuid_lookup) outputs:(HIV_Art_clinical)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_triage_uuid_lookup = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<triage_uuid_lookupStruct> tHash_Lookup_triage_uuid_lookup =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<triage_uuid_lookupStruct>getLookup(matchingModeEnum_triage_uuid_lookup);
	   						   
		   	   	   globalMap.put("tHash_Lookup_triage_uuid_lookup", tHash_Lookup_triage_uuid_lookup);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_triage_uuid_lookup begin ] stop
 */



	
	/**
	 * [tDBInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_7", false);
		start_Hash.put("tDBInput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_7";

	
		int tos_count_tDBInput_7 = 0;
		
	
    
	
		    int nb_line_tDBInput_7 = 0;
		    java.sql.Connection conn_tDBInput_7 = null;
				String driverClass_tDBInput_7 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_7 = java.lang.Class.forName(driverClass_tDBInput_7);
				String dbUser_tDBInput_7 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_7 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_7 = decryptedPassword_tDBInput_7;
				
				String url_tDBInput_7 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_7 = java.sql.DriverManager.getConnection(url_tDBInput_7,dbUser_tDBInput_7,dbPwd_tDBInput_7);
		        
				conn_tDBInput_7.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

		    String dbquery_tDBInput_7 = "SELECT DISTINCT tvs.uuid,tvs.person_uuid, tvs.capture_date\nFROM triage_vital_sign tvs";
			

            	globalMap.put("tDBInput_7_QUERY",dbquery_tDBInput_7);
		    java.sql.ResultSet rs_tDBInput_7 = null;

		    try {
		    	rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
		    	int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

		    String tmpContent_tDBInput_7 = null;
		    
		    
		    while (rs_tDBInput_7.next()) {
		        nb_line_tDBInput_7++;
		        
							if(colQtyInRs_tDBInput_7 < 1) {
								triage_uuid_lookup.uuid = null;
							} else {
	                         		
        	triage_uuid_lookup.uuid = routines.system.JDBCUtil.getString(rs_tDBInput_7, 1, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 2) {
								triage_uuid_lookup.person_uuid = null;
							} else {
	                         		
        	triage_uuid_lookup.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_7, 2, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 3) {
								triage_uuid_lookup.capture_date = null;
							} else {
										
			triage_uuid_lookup.capture_date = routines.system.JDBCUtil.getDate(rs_tDBInput_7, 3);
		                    }
					


 



/**
 * [tDBInput_7 begin ] stop
 */
	
	/**
	 * [tDBInput_7 main ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 


	tos_count_tDBInput_7++;

/**
 * [tDBInput_7 main ] stop
 */
	
	/**
	 * [tDBInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_triage_uuid_lookup main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_triage_uuid_lookup";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"triage_uuid_lookup");
					}
					


			   
			   

					triage_uuid_lookupStruct triage_uuid_lookup_HashRow = new triage_uuid_lookupStruct();
		   	   	   
				
				triage_uuid_lookup_HashRow.uuid = triage_uuid_lookup.uuid;
				
				triage_uuid_lookup_HashRow.person_uuid = triage_uuid_lookup.person_uuid;
				
				triage_uuid_lookup_HashRow.capture_date = triage_uuid_lookup.capture_date;
				
			tHash_Lookup_triage_uuid_lookup.put(triage_uuid_lookup_HashRow);
			
            




 


	tos_count_tAdvancedHash_triage_uuid_lookup++;

/**
 * [tAdvancedHash_triage_uuid_lookup main ] stop
 */
	
	/**
	 * [tAdvancedHash_triage_uuid_lookup process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_triage_uuid_lookup";

	

 



/**
 * [tAdvancedHash_triage_uuid_lookup process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_triage_uuid_lookup process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_triage_uuid_lookup";

	

 



/**
 * [tAdvancedHash_triage_uuid_lookup process_data_end ] stop
 */



	
	/**
	 * [tDBInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_7 end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

	}
}finally{
	if (rs_tDBInput_7 != null) {
		rs_tDBInput_7.close();
	}
	if (stmt_tDBInput_7 != null) {
		stmt_tDBInput_7.close();
	}
	if(conn_tDBInput_7 != null && !conn_tDBInput_7.isClosed()) {
		
			conn_tDBInput_7.commit();
			
		
			conn_tDBInput_7.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_7_NB_LINE",nb_line_tDBInput_7);
 

ok_Hash.put("tDBInput_7", true);
end_Hash.put("tDBInput_7", System.currentTimeMillis());




/**
 * [tDBInput_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_triage_uuid_lookup end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_triage_uuid_lookup";

	

tHash_Lookup_triage_uuid_lookup.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"triage_uuid_lookup");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_triage_uuid_lookup", true);
end_Hash.put("tAdvancedHash_triage_uuid_lookup", System.currentTimeMillis());




/**
 * [tAdvancedHash_triage_uuid_lookup end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_triage_uuid_lookup finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_triage_uuid_lookup";

	

 



/**
 * [tAdvancedHash_triage_uuid_lookup finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class hiv_art_codesetStruct implements routines.system.IPersistableComparableLookupRow<hiv_art_codesetStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public String codeset_group;

				public String getCodeset_group () {
					return this.codeset_group;
				}
				
			    public String display;

				public String getDisplay () {
					return this.display;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.display == null) ? 0 : this.display.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final hiv_art_codesetStruct other = (hiv_art_codesetStruct) obj;
		
						if (this.display == null) {
							if (other.display != null)
								return false;
						
						} else if (!this.display.equals(other.display))
						
							return false;
					

		return true;
    }

	public void copyDataTo(hiv_art_codesetStruct other) {

		other.id = this.id;
	            other.codeset_group = this.codeset_group;
	            other.display = this.display;
	            
	}

	public void copyKeysDataTo(hiv_art_codesetStruct other) {

		other.display = this.display;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical) {

        	try {

        		int length = 0;
		
					this.display = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.display,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readLong();
					
						this.codeset_group = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeLong(this.id);
					
						writeString(this.codeset_group, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",codeset_group="+codeset_group);
		sb.append(",display="+display);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(hiv_art_codesetStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.display, other.display);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		hiv_art_codesetStruct hiv_art_codeset = new hiv_art_codesetStruct();




	
	/**
	 * [tAdvancedHash_hiv_art_codeset begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_hiv_art_codeset", false);
		start_Hash.put("tAdvancedHash_hiv_art_codeset", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_hiv_art_codeset";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"hiv_art_codeset");
					}
				
		int tos_count_tAdvancedHash_hiv_art_codeset = 0;
		

			   		// connection name:hiv_art_codeset
			   		// source node:tDBInput_3 - inputs:(after_tDBInput_4) outputs:(hiv_art_codeset,hiv_art_codeset) | target node:tAdvancedHash_hiv_art_codeset - inputs:(hiv_art_codeset) outputs:()
			   		// linked node: tMap_2 - inputs:(hiv_art_codeset,functional_status) outputs:(funtional_status_lookup,funtional_status_lookup)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_hiv_art_codeset = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<hiv_art_codesetStruct> tHash_Lookup_hiv_art_codeset =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<hiv_art_codesetStruct>getLookup(matchingModeEnum_hiv_art_codeset);
	   						   
		   	   	   globalMap.put("tHash_Lookup_hiv_art_codeset", tHash_Lookup_hiv_art_codeset);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_hiv_art_codeset begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_3 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				
				String url_tDBInput_3 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
				conn_tDBInput_3.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT DISTINCT c.id,codeset_group,display FROM public.base_application_codeset c\nINNER JOIN etl_hiv_art_clinical_stag"
+"e h\n  ON c.display = h.functional_status";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								hiv_art_codeset.id = 0;
							} else {
		                          
            hiv_art_codeset.id = rs_tDBInput_3.getLong(1);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								hiv_art_codeset.codeset_group = null;
							} else {
	                         		
        	hiv_art_codeset.codeset_group = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								hiv_art_codeset.display = null;
							} else {
	                         		
        	hiv_art_codeset.display = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
		                    }
					


 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_hiv_art_codeset main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_hiv_art_codeset";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"hiv_art_codeset");
					}
					


			   
			   

					hiv_art_codesetStruct hiv_art_codeset_HashRow = new hiv_art_codesetStruct();
		   	   	   
				
				hiv_art_codeset_HashRow.id = hiv_art_codeset.id;
				
				hiv_art_codeset_HashRow.codeset_group = hiv_art_codeset.codeset_group;
				
				hiv_art_codeset_HashRow.display = hiv_art_codeset.display;
				
			tHash_Lookup_hiv_art_codeset.put(hiv_art_codeset_HashRow);
			
            




 


	tos_count_tAdvancedHash_hiv_art_codeset++;

/**
 * [tAdvancedHash_hiv_art_codeset main ] stop
 */
	
	/**
	 * [tAdvancedHash_hiv_art_codeset process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_hiv_art_codeset";

	

 



/**
 * [tAdvancedHash_hiv_art_codeset process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_hiv_art_codeset process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_hiv_art_codeset";

	

 



/**
 * [tAdvancedHash_hiv_art_codeset process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
	if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
		
			conn_tDBInput_3.commit();
			
		
			conn_tDBInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_hiv_art_codeset end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_hiv_art_codeset";

	

tHash_Lookup_hiv_art_codeset.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"hiv_art_codeset");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_hiv_art_codeset", true);
end_Hash.put("tAdvancedHash_hiv_art_codeset", System.currentTimeMillis());




/**
 * [tAdvancedHash_hiv_art_codeset end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_hiv_art_codeset finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_hiv_art_codeset";

	

 



/**
 * [tAdvancedHash_hiv_art_codeset finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class hiv_art_stage_codesetStruct implements routines.system.IPersistableComparableLookupRow<hiv_art_stage_codesetStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public String codeset_group;

				public String getCodeset_group () {
					return this.codeset_group;
				}
				
			    public String display;

				public String getDisplay () {
					return this.display;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.display == null) ? 0 : this.display.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final hiv_art_stage_codesetStruct other = (hiv_art_stage_codesetStruct) obj;
		
						if (this.display == null) {
							if (other.display != null)
								return false;
						
						} else if (!this.display.equals(other.display))
						
							return false;
					

		return true;
    }

	public void copyDataTo(hiv_art_stage_codesetStruct other) {

		other.id = this.id;
	            other.codeset_group = this.codeset_group;
	            other.display = this.display;
	            
	}

	public void copyKeysDataTo(hiv_art_stage_codesetStruct other) {

		other.display = this.display;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical) {

        	try {

        		int length = 0;
		
					this.display = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.display,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readLong();
					
						this.codeset_group = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeLong(this.id);
					
						writeString(this.codeset_group, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",codeset_group="+codeset_group);
		sb.append(",display="+display);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(hiv_art_stage_codesetStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.display, other.display);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		hiv_art_stage_codesetStruct hiv_art_stage_codeset = new hiv_art_stage_codesetStruct();




	
	/**
	 * [tAdvancedHash_hiv_art_stage_codeset begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_hiv_art_stage_codeset", false);
		start_Hash.put("tAdvancedHash_hiv_art_stage_codeset", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_hiv_art_stage_codeset";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"hiv_art_stage_codeset");
					}
				
		int tos_count_tAdvancedHash_hiv_art_stage_codeset = 0;
		

			   		// connection name:hiv_art_stage_codeset
			   		// source node:tDBInput_5 - inputs:(after_tDBInput_6) outputs:(hiv_art_stage_codeset,hiv_art_stage_codeset) | target node:tAdvancedHash_hiv_art_stage_codeset - inputs:(hiv_art_stage_codeset) outputs:()
			   		// linked node: tMap_3 - inputs:(hiv_art_stage_codeset,hiv_art_stage) outputs:(hiv_stage_lookup,hiv_stage_lookup)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_hiv_art_stage_codeset = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<hiv_art_stage_codesetStruct> tHash_Lookup_hiv_art_stage_codeset =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<hiv_art_stage_codesetStruct>getLookup(matchingModeEnum_hiv_art_stage_codeset);
	   						   
		   	   	   globalMap.put("tHash_Lookup_hiv_art_stage_codeset", tHash_Lookup_hiv_art_stage_codeset);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_hiv_art_stage_codeset begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
    
	
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_5 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;
				
				String url_tDBInput_5 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5,dbUser_tDBInput_5,dbPwd_tDBInput_5);
		        
				conn_tDBInput_5.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "SELECT DISTINCT c.id,codeset_group,lower(display) as display FROM base_application_codeset c\nINNER JOIN etl_hiv_art_cl"
+"inical_stage h\n  ON lower(c.display) =  lower(h.clinical_stage) AND codeset_group = 'CLINICAL_STAGE'";
			

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								hiv_art_stage_codeset.id = 0;
							} else {
		                          
            hiv_art_stage_codeset.id = rs_tDBInput_5.getLong(1);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								hiv_art_stage_codeset.codeset_group = null;
							} else {
	                         		
        	hiv_art_stage_codeset.codeset_group = routines.system.JDBCUtil.getString(rs_tDBInput_5, 2, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								hiv_art_stage_codeset.display = null;
							} else {
	                         		
        	hiv_art_stage_codeset.display = routines.system.JDBCUtil.getString(rs_tDBInput_5, 3, false);
		                    }
					


 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_hiv_art_stage_codeset main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_hiv_art_stage_codeset";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"hiv_art_stage_codeset");
					}
					


			   
			   

					hiv_art_stage_codesetStruct hiv_art_stage_codeset_HashRow = new hiv_art_stage_codesetStruct();
		   	   	   
				
				hiv_art_stage_codeset_HashRow.id = hiv_art_stage_codeset.id;
				
				hiv_art_stage_codeset_HashRow.codeset_group = hiv_art_stage_codeset.codeset_group;
				
				hiv_art_stage_codeset_HashRow.display = hiv_art_stage_codeset.display;
				
			tHash_Lookup_hiv_art_stage_codeset.put(hiv_art_stage_codeset_HashRow);
			
            




 


	tos_count_tAdvancedHash_hiv_art_stage_codeset++;

/**
 * [tAdvancedHash_hiv_art_stage_codeset main ] stop
 */
	
	/**
	 * [tAdvancedHash_hiv_art_stage_codeset process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_hiv_art_stage_codeset";

	

 



/**
 * [tAdvancedHash_hiv_art_stage_codeset process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_hiv_art_stage_codeset process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_hiv_art_stage_codeset";

	

 



/**
 * [tAdvancedHash_hiv_art_stage_codeset process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
	if(conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {
		
			conn_tDBInput_5.commit();
			
		
			conn_tDBInput_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);
 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_hiv_art_stage_codeset end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_hiv_art_stage_codeset";

	

tHash_Lookup_hiv_art_stage_codeset.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"hiv_art_stage_codeset");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_hiv_art_stage_codeset", true);
end_Hash.put("tAdvancedHash_hiv_art_stage_codeset", System.currentTimeMillis());




/**
 * [tAdvancedHash_hiv_art_stage_codeset end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_hiv_art_stage_codeset finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_hiv_art_stage_codeset";

	

 



/**
 * [tAdvancedHash_hiv_art_stage_codeset finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class funtional_status_lookupStruct implements routines.system.IPersistableComparableLookupRow<funtional_status_lookupStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public long functional_status_id;

				public long getFunctional_status_id () {
					return this.functional_status_id;
				}
				
			    public String functional_status;

				public String getFunctional_status () {
					return this.functional_status;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.person_uuid == null) ? 0 : this.person_uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final funtional_status_lookupStruct other = (funtional_status_lookupStruct) obj;
		
						if (this.person_uuid == null) {
							if (other.person_uuid != null)
								return false;
						
						} else if (!this.person_uuid.equals(other.person_uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(funtional_status_lookupStruct other) {

		other.person_uuid = this.person_uuid;
	            other.functional_status_id = this.functional_status_id;
	            other.functional_status = this.functional_status;
	            
	}

	public void copyKeysDataTo(funtional_status_lookupStruct other) {

		other.person_uuid = this.person_uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.functional_status_id = dis.readLong();
					
						this.functional_status = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeLong(this.functional_status_id);
					
						writeString(this.functional_status, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",functional_status_id="+String.valueOf(functional_status_id));
		sb.append(",functional_status="+functional_status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(funtional_status_lookupStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.person_uuid, other.person_uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class functional_statusStruct implements routines.system.IPersistableRow<functional_statusStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];

	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String functional_status;

				public String getFunctional_status () {
					return this.functional_status;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
					this.functional_status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.functional_status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",functional_status="+functional_status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(functional_statusStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_4Struct implements routines.system.IPersistableRow<after_tDBInput_4Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];

	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String functional_status;

				public String getFunctional_status () {
					return this.functional_status;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
					this.functional_status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.functional_status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",functional_status="+functional_status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_3Process(globalMap);

		functional_statusStruct functional_status = new functional_statusStruct();
funtional_status_lookupStruct funtional_status_lookup = new funtional_status_lookupStruct();





	
	/**
	 * [tAdvancedHash_funtional_status_lookup begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_funtional_status_lookup", false);
		start_Hash.put("tAdvancedHash_funtional_status_lookup", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_funtional_status_lookup";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"funtional_status_lookup");
					}
				
		int tos_count_tAdvancedHash_funtional_status_lookup = 0;
		

			   		// connection name:funtional_status_lookup
			   		// source node:tMap_2 - inputs:(hiv_art_codeset,functional_status) outputs:(funtional_status_lookup,funtional_status_lookup) | target node:tAdvancedHash_funtional_status_lookup - inputs:(funtional_status_lookup) outputs:()
			   		// linked node: tMap_4 - inputs:(HIV_Art_clinical,funtional_status_lookup,hiv_stage_lookup) outputs:(load_art_clinicals)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_funtional_status_lookup = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<funtional_status_lookupStruct> tHash_Lookup_funtional_status_lookup =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<funtional_status_lookupStruct>getLookup(matchingModeEnum_funtional_status_lookup);
	   						   
		   	   	   globalMap.put("tHash_Lookup_funtional_status_lookup", tHash_Lookup_funtional_status_lookup);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_funtional_status_lookup begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"functional_status");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<hiv_art_codesetStruct> tHash_Lookup_hiv_art_codeset = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<hiv_art_codesetStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<hiv_art_codesetStruct>) 
					globalMap.get( "tHash_Lookup_hiv_art_codeset" ))
					;					
					
	

hiv_art_codesetStruct hiv_art_codesetHashKey = new hiv_art_codesetStruct();
hiv_art_codesetStruct hiv_art_codesetDefault = new hiv_art_codesetStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
funtional_status_lookupStruct funtional_status_lookup_tmp = new funtional_status_lookupStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_4 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
				
				String url_tDBInput_4 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4,dbUser_tDBInput_4,dbPwd_tDBInput_4);
		        
				conn_tDBInput_4.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT h.person_uuid,functional_status FROM etl_hiv_art_clinical_stage h";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								functional_status.person_uuid = null;
							} else {
	                         		
        	functional_status.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_4, 1, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								functional_status.functional_status = null;
							} else {
	                         		
        	functional_status.functional_status = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
		                    }
					


 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"functional_status");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "hiv_art_codeset" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoophiv_art_codeset = false;
       		  	    	
       		  	    	
 							hiv_art_codesetStruct hiv_art_codesetObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    hiv_art_codesetHashKey.display = functional_status.functional_status ;
                        		    		

								
		                        	hiv_art_codesetHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_hiv_art_codeset.lookup( hiv_art_codesetHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_hiv_art_codeset != null && tHash_Lookup_hiv_art_codeset.getCount(hiv_art_codesetHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'hiv_art_codeset' and it contains more one result from keys :  hiv_art_codeset.display = '" + hiv_art_codesetHashKey.display + "'");
								} // G 071
							

							hiv_art_codesetStruct hiv_art_codeset = null;
                    		  	 
							   
                    		  	 
	       		  	    	hiv_art_codesetStruct fromLookup_hiv_art_codeset = null;
							hiv_art_codeset = hiv_art_codesetDefault;
										 
							
								 
							
							
								if (tHash_Lookup_hiv_art_codeset !=null && tHash_Lookup_hiv_art_codeset.hasNext()) { // G 099
								
							
								
								fromLookup_hiv_art_codeset = tHash_Lookup_hiv_art_codeset.next();

							
							
								} // G 099
							
							

							if(fromLookup_hiv_art_codeset != null) {
								hiv_art_codeset = fromLookup_hiv_art_codeset;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

funtional_status_lookup = null;


// # Output table : 'funtional_status_lookup'
funtional_status_lookup_tmp.person_uuid = functional_status.person_uuid ;
funtional_status_lookup_tmp.functional_status_id = hiv_art_codeset.id ;
funtional_status_lookup_tmp.functional_status = functional_status.functional_status ;
funtional_status_lookup = funtional_status_lookup_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "funtional_status_lookup"
if(funtional_status_lookup != null) { 



	
	/**
	 * [tAdvancedHash_funtional_status_lookup main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_funtional_status_lookup";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"funtional_status_lookup");
					}
					


			   
			   

					funtional_status_lookupStruct funtional_status_lookup_HashRow = new funtional_status_lookupStruct();
		   	   	   
				
				funtional_status_lookup_HashRow.person_uuid = funtional_status_lookup.person_uuid;
				
				funtional_status_lookup_HashRow.functional_status_id = funtional_status_lookup.functional_status_id;
				
				funtional_status_lookup_HashRow.functional_status = funtional_status_lookup.functional_status;
				
			tHash_Lookup_funtional_status_lookup.put(funtional_status_lookup_HashRow);
			
            




 


	tos_count_tAdvancedHash_funtional_status_lookup++;

/**
 * [tAdvancedHash_funtional_status_lookup main ] stop
 */
	
	/**
	 * [tAdvancedHash_funtional_status_lookup process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_funtional_status_lookup";

	

 



/**
 * [tAdvancedHash_funtional_status_lookup process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_funtional_status_lookup process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_funtional_status_lookup";

	

 



/**
 * [tAdvancedHash_funtional_status_lookup process_data_end ] stop
 */

} // End of branch "funtional_status_lookup"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
	if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
		
			conn_tDBInput_4.commit();
			
		
			conn_tDBInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);
 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_hiv_art_codeset != null) {
						tHash_Lookup_hiv_art_codeset.endGet();
					}
					globalMap.remove( "tHash_Lookup_hiv_art_codeset" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"functional_status");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_funtional_status_lookup end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_funtional_status_lookup";

	

tHash_Lookup_funtional_status_lookup.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"funtional_status_lookup");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_funtional_status_lookup", true);
end_Hash.put("tAdvancedHash_funtional_status_lookup", System.currentTimeMillis());




/**
 * [tAdvancedHash_funtional_status_lookup end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_hiv_art_codeset"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_funtional_status_lookup finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_funtional_status_lookup";

	

 



/**
 * [tAdvancedHash_funtional_status_lookup finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class hiv_stage_lookupStruct implements routines.system.IPersistableComparableLookupRow<hiv_stage_lookupStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public long clinical_stage_id;

				public long getClinical_stage_id () {
					return this.clinical_stage_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.person_uuid == null) ? 0 : this.person_uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final hiv_stage_lookupStruct other = (hiv_stage_lookupStruct) obj;
		
						if (this.person_uuid == null) {
							if (other.person_uuid != null)
								return false;
						
						} else if (!this.person_uuid.equals(other.person_uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(hiv_stage_lookupStruct other) {

		other.person_uuid = this.person_uuid;
	            other.clinical_stage_id = this.clinical_stage_id;
	            
	}

	public void copyKeysDataTo(hiv_stage_lookupStruct other) {

		other.person_uuid = this.person_uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.clinical_stage_id = dis.readLong();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeLong(this.clinical_stage_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",clinical_stage_id="+String.valueOf(clinical_stage_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(hiv_stage_lookupStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.person_uuid, other.person_uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class hiv_art_stageStruct implements routines.system.IPersistableRow<hiv_art_stageStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];

	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String clinical_stage;

				public String getClinical_stage () {
					return this.clinical_stage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
					this.clinical_stage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.clinical_stage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",clinical_stage="+clinical_stage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(hiv_art_stageStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_6Struct implements routines.system.IPersistableRow<after_tDBInput_6Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];

	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String clinical_stage;

				public String getClinical_stage () {
					return this.clinical_stage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
					this.clinical_stage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.clinical_stage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",clinical_stage="+clinical_stage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_5Process(globalMap);

		hiv_art_stageStruct hiv_art_stage = new hiv_art_stageStruct();
hiv_stage_lookupStruct hiv_stage_lookup = new hiv_stage_lookupStruct();





	
	/**
	 * [tAdvancedHash_hiv_stage_lookup begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_hiv_stage_lookup", false);
		start_Hash.put("tAdvancedHash_hiv_stage_lookup", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_hiv_stage_lookup";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"hiv_stage_lookup");
					}
				
		int tos_count_tAdvancedHash_hiv_stage_lookup = 0;
		

			   		// connection name:hiv_stage_lookup
			   		// source node:tMap_3 - inputs:(hiv_art_stage_codeset,hiv_art_stage) outputs:(hiv_stage_lookup,hiv_stage_lookup) | target node:tAdvancedHash_hiv_stage_lookup - inputs:(hiv_stage_lookup) outputs:()
			   		// linked node: tMap_4 - inputs:(HIV_Art_clinical,funtional_status_lookup,hiv_stage_lookup) outputs:(load_art_clinicals)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_hiv_stage_lookup = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<hiv_stage_lookupStruct> tHash_Lookup_hiv_stage_lookup =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<hiv_stage_lookupStruct>getLookup(matchingModeEnum_hiv_stage_lookup);
	   						   
		   	   	   globalMap.put("tHash_Lookup_hiv_stage_lookup", tHash_Lookup_hiv_stage_lookup);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_hiv_stage_lookup begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"hiv_art_stage");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<hiv_art_stage_codesetStruct> tHash_Lookup_hiv_art_stage_codeset = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<hiv_art_stage_codesetStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<hiv_art_stage_codesetStruct>) 
					globalMap.get( "tHash_Lookup_hiv_art_stage_codeset" ))
					;					
					
	

hiv_art_stage_codesetStruct hiv_art_stage_codesetHashKey = new hiv_art_stage_codesetStruct();
hiv_art_stage_codesetStruct hiv_art_stage_codesetDefault = new hiv_art_stage_codesetStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
hiv_stage_lookupStruct hiv_stage_lookup_tmp = new hiv_stage_lookupStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tDBInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_6", false);
		start_Hash.put("tDBInput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_6";

	
		int tos_count_tDBInput_6 = 0;
		
	
    
	
		    int nb_line_tDBInput_6 = 0;
		    java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_6 = java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_6 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;
				
				String url_tDBInput_6 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_6 = java.sql.DriverManager.getConnection(url_tDBInput_6,dbUser_tDBInput_6,dbPwd_tDBInput_6);
		        
				conn_tDBInput_6.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

		    String dbquery_tDBInput_6 = "SELECT h.person_uuid,lower(h.clinical_stage) as clinical_stage \nFROM etl_hiv_art_clinical_stage h";
			

            	globalMap.put("tDBInput_6_QUERY",dbquery_tDBInput_6);
		    java.sql.ResultSet rs_tDBInput_6 = null;

		    try {
		    	rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
		    	int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

		    String tmpContent_tDBInput_6 = null;
		    
		    
		    while (rs_tDBInput_6.next()) {
		        nb_line_tDBInput_6++;
		        
							if(colQtyInRs_tDBInput_6 < 1) {
								hiv_art_stage.person_uuid = null;
							} else {
	                         		
        	hiv_art_stage.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_6, 1, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 2) {
								hiv_art_stage.clinical_stage = null;
							} else {
	                         		
        	hiv_art_stage.clinical_stage = routines.system.JDBCUtil.getString(rs_tDBInput_6, 2, false);
		                    }
					


 



/**
 * [tDBInput_6 begin ] stop
 */
	
	/**
	 * [tDBInput_6 main ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 


	tos_count_tDBInput_6++;

/**
 * [tDBInput_6 main ] stop
 */
	
	/**
	 * [tDBInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"hiv_art_stage");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "hiv_art_stage_codeset" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoophiv_art_stage_codeset = false;
       		  	    	
       		  	    	
 							hiv_art_stage_codesetStruct hiv_art_stage_codesetObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    hiv_art_stage_codesetHashKey.display = hiv_art_stage.clinical_stage ;
                        		    		

								
		                        	hiv_art_stage_codesetHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_hiv_art_stage_codeset.lookup( hiv_art_stage_codesetHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_hiv_art_stage_codeset != null && tHash_Lookup_hiv_art_stage_codeset.getCount(hiv_art_stage_codesetHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'hiv_art_stage_codeset' and it contains more one result from keys :  hiv_art_stage_codeset.display = '" + hiv_art_stage_codesetHashKey.display + "'");
								} // G 071
							

							hiv_art_stage_codesetStruct hiv_art_stage_codeset = null;
                    		  	 
							   
                    		  	 
	       		  	    	hiv_art_stage_codesetStruct fromLookup_hiv_art_stage_codeset = null;
							hiv_art_stage_codeset = hiv_art_stage_codesetDefault;
										 
							
								 
							
							
								if (tHash_Lookup_hiv_art_stage_codeset !=null && tHash_Lookup_hiv_art_stage_codeset.hasNext()) { // G 099
								
							
								
								fromLookup_hiv_art_stage_codeset = tHash_Lookup_hiv_art_stage_codeset.next();

							
							
								} // G 099
							
							

							if(fromLookup_hiv_art_stage_codeset != null) {
								hiv_art_stage_codeset = fromLookup_hiv_art_stage_codeset;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

hiv_stage_lookup = null;


// # Output table : 'hiv_stage_lookup'
hiv_stage_lookup_tmp.person_uuid = hiv_art_stage.person_uuid ;
hiv_stage_lookup_tmp.clinical_stage_id = hiv_art_stage_codeset.id ;
hiv_stage_lookup = hiv_stage_lookup_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "hiv_stage_lookup"
if(hiv_stage_lookup != null) { 



	
	/**
	 * [tAdvancedHash_hiv_stage_lookup main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_hiv_stage_lookup";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"hiv_stage_lookup");
					}
					


			   
			   

					hiv_stage_lookupStruct hiv_stage_lookup_HashRow = new hiv_stage_lookupStruct();
		   	   	   
				
				hiv_stage_lookup_HashRow.person_uuid = hiv_stage_lookup.person_uuid;
				
				hiv_stage_lookup_HashRow.clinical_stage_id = hiv_stage_lookup.clinical_stage_id;
				
			tHash_Lookup_hiv_stage_lookup.put(hiv_stage_lookup_HashRow);
			
            




 


	tos_count_tAdvancedHash_hiv_stage_lookup++;

/**
 * [tAdvancedHash_hiv_stage_lookup main ] stop
 */
	
	/**
	 * [tAdvancedHash_hiv_stage_lookup process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_hiv_stage_lookup";

	

 



/**
 * [tAdvancedHash_hiv_stage_lookup process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_hiv_stage_lookup process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_hiv_stage_lookup";

	

 



/**
 * [tAdvancedHash_hiv_stage_lookup process_data_end ] stop
 */

} // End of branch "hiv_stage_lookup"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_6 end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

	}
}finally{
	if (rs_tDBInput_6 != null) {
		rs_tDBInput_6.close();
	}
	if (stmt_tDBInput_6 != null) {
		stmt_tDBInput_6.close();
	}
	if(conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {
		
			conn_tDBInput_6.commit();
			
		
			conn_tDBInput_6.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_6_NB_LINE",nb_line_tDBInput_6);
 

ok_Hash.put("tDBInput_6", true);
end_Hash.put("tDBInput_6", System.currentTimeMillis());




/**
 * [tDBInput_6 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_hiv_art_stage_codeset != null) {
						tHash_Lookup_hiv_art_stage_codeset.endGet();
					}
					globalMap.remove( "tHash_Lookup_hiv_art_stage_codeset" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"hiv_art_stage");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_hiv_stage_lookup end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_hiv_stage_lookup";

	

tHash_Lookup_hiv_stage_lookup.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"hiv_stage_lookup");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_hiv_stage_lookup", true);
end_Hash.put("tAdvancedHash_hiv_stage_lookup", System.currentTimeMillis());




/**
 * [tAdvancedHash_hiv_stage_lookup end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_hiv_art_stage_codeset"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_hiv_stage_lookup finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_hiv_stage_lookup";

	

 



/**
 * [tAdvancedHash_hiv_stage_lookup finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class clinic_stage_recordStruct implements routines.system.IPersistableRow<clinic_stage_recordStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public Double cd_4;

				public Double getCd_4 () {
					return this.cd_4;
				}
				
			    public Double cd_4_percentage;

				public Double getCd_4_percentage () {
					return this.cd_4_percentage;
				}
				
			    public Boolean is_commencement;

				public Boolean getIs_commencement () {
					return this.is_commencement;
				}
				
			    public String oi_screened;

				public String getOi_screened () {
					return this.oi_screened;
				}
				
			    public String sti_ids;

				public String getSti_ids () {
					return this.sti_ids;
				}
				
			    public String sti_treated;

				public String getSti_treated () {
					return this.sti_treated;
				}
				
			    public String opportunistic_infections;

				public String getOpportunistic_infections () {
					return this.opportunistic_infections;
				}
				
			    public String adr_screened;

				public String getAdr_screened () {
					return this.adr_screened;
				}
				
			    public String adverse_drug_reactions;

				public String getAdverse_drug_reactions () {
					return this.adverse_drug_reactions;
				}
				
			    public String adherence_level;

				public String getAdherence_level () {
					return this.adherence_level;
				}
				
			    public String adheres;

				public String getAdheres () {
					return this.adheres;
				}
				
			    public java.util.Date next_appointment;

				public java.util.Date getNext_appointment () {
					return this.next_appointment;
				}
				
			    public java.util.Date lmp_date;

				public java.util.Date getLmp_date () {
					return this.lmp_date;
				}
				
			    public String functional_status;

				public String getFunctional_status () {
					return this.functional_status;
				}
				
			    public String clinical_stage;

				public String getClinical_stage () {
					return this.clinical_stage;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				
			    public String hiv_enrollment_uuid;

				public String getHiv_enrollment_uuid () {
					return this.hiv_enrollment_uuid;
				}
				
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public int regimen_id;

				public int getRegimen_id () {
					return this.regimen_id;
				}
				
			    public int regimen_type_id;

				public int getRegimen_type_id () {
					return this.regimen_type_id;
				}
				
			    public String extra;

				public String getExtra () {
					return this.extra;
				}
				
			    public String notes;

				public String getNotes () {
					return this.notes;
				}
				
			    public Integer tb_status;

				public Integer getTb_status () {
					return this.tb_status;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final clinic_stage_recordStruct other = (clinic_stage_recordStruct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(clinic_stage_recordStruct other) {

		other.created_date = this.created_date;
	            other.created_by = this.created_by;
	            other.last_modified_date = this.last_modified_date;
	            other.last_modified_by = this.last_modified_by;
	            other.uuid = this.uuid;
	            other.archived = this.archived;
	            other.visit_date = this.visit_date;
	            other.cd_4 = this.cd_4;
	            other.cd_4_percentage = this.cd_4_percentage;
	            other.is_commencement = this.is_commencement;
	            other.oi_screened = this.oi_screened;
	            other.sti_ids = this.sti_ids;
	            other.sti_treated = this.sti_treated;
	            other.opportunistic_infections = this.opportunistic_infections;
	            other.adr_screened = this.adr_screened;
	            other.adverse_drug_reactions = this.adverse_drug_reactions;
	            other.adherence_level = this.adherence_level;
	            other.adheres = this.adheres;
	            other.next_appointment = this.next_appointment;
	            other.lmp_date = this.lmp_date;
	            other.functional_status = this.functional_status;
	            other.clinical_stage = this.clinical_stage;
	            other.datim_id = this.datim_id;
	            other.hiv_enrollment_uuid = this.hiv_enrollment_uuid;
	            other.visit_id = this.visit_id;
	            other.person_uuid = this.person_uuid;
	            other.id = this.id;
	            other.regimen_id = this.regimen_id;
	            other.regimen_type_id = this.regimen_type_id;
	            other.extra = this.extra;
	            other.notes = this.notes;
	            other.tb_status = this.tb_status;
	            
	}

	public void copyKeysDataTo(clinic_stage_recordStruct other) {

		other.id = this.id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical) {

        	try {

        		int length = 0;
		
					this.created_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.last_modified_by = readString(dis);
					
					this.uuid = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.visit_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd_4 = null;
           				} else {
           			    	this.cd_4 = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd_4_percentage = null;
           				} else {
           			    	this.cd_4_percentage = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_commencement = null;
           				} else {
           			    	this.is_commencement = dis.readBoolean();
           				}
					
					this.oi_screened = readString(dis);
					
					this.sti_ids = readString(dis);
					
					this.sti_treated = readString(dis);
					
					this.opportunistic_infections = readString(dis);
					
					this.adr_screened = readString(dis);
					
					this.adverse_drug_reactions = readString(dis);
					
					this.adherence_level = readString(dis);
					
					this.adheres = readString(dis);
					
					this.next_appointment = readDate(dis);
					
					this.lmp_date = readDate(dis);
					
					this.functional_status = readString(dis);
					
					this.clinical_stage = readString(dis);
					
					this.datim_id = readString(dis);
					
					this.hiv_enrollment_uuid = readString(dis);
					
					this.visit_id = readString(dis);
					
					this.person_uuid = readString(dis);
					
						this.id = readInteger(dis);
					
			        this.regimen_id = dis.readInt();
					
			        this.regimen_type_id = dis.readInt();
					
					this.extra = readString(dis);
					
					this.notes = readString(dis);
					
						this.tb_status = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// Double
				
						if(this.cd_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.cd_4);
		            	}
					
					// Double
				
						if(this.cd_4_percentage == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.cd_4_percentage);
		            	}
					
					// Boolean
				
						if(this.is_commencement == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_commencement);
		            	}
					
					// String
				
						writeString(this.oi_screened,dos);
					
					// String
				
						writeString(this.sti_ids,dos);
					
					// String
				
						writeString(this.sti_treated,dos);
					
					// String
				
						writeString(this.opportunistic_infections,dos);
					
					// String
				
						writeString(this.adr_screened,dos);
					
					// String
				
						writeString(this.adverse_drug_reactions,dos);
					
					// String
				
						writeString(this.adherence_level,dos);
					
					// String
				
						writeString(this.adheres,dos);
					
					// java.util.Date
				
						writeDate(this.next_appointment,dos);
					
					// java.util.Date
				
						writeDate(this.lmp_date,dos);
					
					// String
				
						writeString(this.functional_status,dos);
					
					// String
				
						writeString(this.clinical_stage,dos);
					
					// String
				
						writeString(this.datim_id,dos);
					
					// String
				
						writeString(this.hiv_enrollment_uuid,dos);
					
					// String
				
						writeString(this.visit_id,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// Integer
				
						writeInteger(this.id,dos);
					
					// int
				
		            	dos.writeInt(this.regimen_id);
					
					// int
				
		            	dos.writeInt(this.regimen_type_id);
					
					// String
				
						writeString(this.extra,dos);
					
					// String
				
						writeString(this.notes,dos);
					
					// Integer
				
						writeInteger(this.tb_status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("created_date="+String.valueOf(created_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",uuid="+uuid);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",cd_4="+String.valueOf(cd_4));
		sb.append(",cd_4_percentage="+String.valueOf(cd_4_percentage));
		sb.append(",is_commencement="+String.valueOf(is_commencement));
		sb.append(",oi_screened="+oi_screened);
		sb.append(",sti_ids="+sti_ids);
		sb.append(",sti_treated="+sti_treated);
		sb.append(",opportunistic_infections="+opportunistic_infections);
		sb.append(",adr_screened="+adr_screened);
		sb.append(",adverse_drug_reactions="+adverse_drug_reactions);
		sb.append(",adherence_level="+adherence_level);
		sb.append(",adheres="+adheres);
		sb.append(",next_appointment="+String.valueOf(next_appointment));
		sb.append(",lmp_date="+String.valueOf(lmp_date));
		sb.append(",functional_status="+functional_status);
		sb.append(",clinical_stage="+clinical_stage);
		sb.append(",datim_id="+datim_id);
		sb.append(",hiv_enrollment_uuid="+hiv_enrollment_uuid);
		sb.append(",visit_id="+visit_id);
		sb.append(",person_uuid="+person_uuid);
		sb.append(",id="+String.valueOf(id));
		sb.append(",regimen_id="+String.valueOf(regimen_id));
		sb.append(",regimen_type_id="+String.valueOf(regimen_type_id));
		sb.append(",extra="+extra);
		sb.append(",notes="+notes);
		sb.append(",tb_status="+String.valueOf(tb_status));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(clinic_stage_recordStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class hiv_art_clinic_dataStruct implements routines.system.IPersistableRow<hiv_art_clinic_dataStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];

	
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public Double cd_4;

				public Double getCd_4 () {
					return this.cd_4;
				}
				
			    public Double cd_4_percentage;

				public Double getCd_4_percentage () {
					return this.cd_4_percentage;
				}
				
			    public Boolean is_commencement;

				public Boolean getIs_commencement () {
					return this.is_commencement;
				}
				
			    public String oi_screened;

				public String getOi_screened () {
					return this.oi_screened;
				}
				
			    public String sti_ids;

				public String getSti_ids () {
					return this.sti_ids;
				}
				
			    public String sti_treated;

				public String getSti_treated () {
					return this.sti_treated;
				}
				
			    public String opportunistic_infections;

				public String getOpportunistic_infections () {
					return this.opportunistic_infections;
				}
				
			    public String adr_screened;

				public String getAdr_screened () {
					return this.adr_screened;
				}
				
			    public String adverse_drug_reactions;

				public String getAdverse_drug_reactions () {
					return this.adverse_drug_reactions;
				}
				
			    public String adherence_level;

				public String getAdherence_level () {
					return this.adherence_level;
				}
				
			    public String adheres;

				public String getAdheres () {
					return this.adheres;
				}
				
			    public java.util.Date next_appointment;

				public java.util.Date getNext_appointment () {
					return this.next_appointment;
				}
				
			    public java.util.Date lmp_date;

				public java.util.Date getLmp_date () {
					return this.lmp_date;
				}
				
			    public String functional_status;

				public String getFunctional_status () {
					return this.functional_status;
				}
				
			    public String clinical_stage;

				public String getClinical_stage () {
					return this.clinical_stage;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				
			    public String hiv_enrollment_uuid;

				public String getHiv_enrollment_uuid () {
					return this.hiv_enrollment_uuid;
				}
				
			    public int regimen_id;

				public int getRegimen_id () {
					return this.regimen_id;
				}
				
			    public int regimen_type_id;

				public int getRegimen_type_id () {
					return this.regimen_type_id;
				}
				
			    public String extra;

				public String getExtra () {
					return this.extra;
				}
				
			    public String notes;

				public String getNotes () {
					return this.notes;
				}
				
			    public String tb_status;

				public String getTb_status () {
					return this.tb_status;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical) {

        	try {

        		int length = 0;
		
					this.created_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.last_modified_by = readString(dis);
					
					this.person_uuid = readString(dis);
					
					this.uuid = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.visit_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd_4 = null;
           				} else {
           			    	this.cd_4 = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd_4_percentage = null;
           				} else {
           			    	this.cd_4_percentage = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_commencement = null;
           				} else {
           			    	this.is_commencement = dis.readBoolean();
           				}
					
					this.oi_screened = readString(dis);
					
					this.sti_ids = readString(dis);
					
					this.sti_treated = readString(dis);
					
					this.opportunistic_infections = readString(dis);
					
					this.adr_screened = readString(dis);
					
					this.adverse_drug_reactions = readString(dis);
					
					this.adherence_level = readString(dis);
					
					this.adheres = readString(dis);
					
					this.next_appointment = readDate(dis);
					
					this.lmp_date = readDate(dis);
					
					this.functional_status = readString(dis);
					
					this.clinical_stage = readString(dis);
					
					this.datim_id = readString(dis);
					
					this.hiv_enrollment_uuid = readString(dis);
					
			        this.regimen_id = dis.readInt();
					
			        this.regimen_type_id = dis.readInt();
					
					this.extra = readString(dis);
					
					this.notes = readString(dis);
					
					this.tb_status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// Double
				
						if(this.cd_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.cd_4);
		            	}
					
					// Double
				
						if(this.cd_4_percentage == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.cd_4_percentage);
		            	}
					
					// Boolean
				
						if(this.is_commencement == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_commencement);
		            	}
					
					// String
				
						writeString(this.oi_screened,dos);
					
					// String
				
						writeString(this.sti_ids,dos);
					
					// String
				
						writeString(this.sti_treated,dos);
					
					// String
				
						writeString(this.opportunistic_infections,dos);
					
					// String
				
						writeString(this.adr_screened,dos);
					
					// String
				
						writeString(this.adverse_drug_reactions,dos);
					
					// String
				
						writeString(this.adherence_level,dos);
					
					// String
				
						writeString(this.adheres,dos);
					
					// java.util.Date
				
						writeDate(this.next_appointment,dos);
					
					// java.util.Date
				
						writeDate(this.lmp_date,dos);
					
					// String
				
						writeString(this.functional_status,dos);
					
					// String
				
						writeString(this.clinical_stage,dos);
					
					// String
				
						writeString(this.datim_id,dos);
					
					// String
				
						writeString(this.hiv_enrollment_uuid,dos);
					
					// int
				
		            	dos.writeInt(this.regimen_id);
					
					// int
				
		            	dos.writeInt(this.regimen_type_id);
					
					// String
				
						writeString(this.extra,dos);
					
					// String
				
						writeString(this.notes,dos);
					
					// String
				
						writeString(this.tb_status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("created_date="+String.valueOf(created_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",person_uuid="+person_uuid);
		sb.append(",uuid="+uuid);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",cd_4="+String.valueOf(cd_4));
		sb.append(",cd_4_percentage="+String.valueOf(cd_4_percentage));
		sb.append(",is_commencement="+String.valueOf(is_commencement));
		sb.append(",oi_screened="+oi_screened);
		sb.append(",sti_ids="+sti_ids);
		sb.append(",sti_treated="+sti_treated);
		sb.append(",opportunistic_infections="+opportunistic_infections);
		sb.append(",adr_screened="+adr_screened);
		sb.append(",adverse_drug_reactions="+adverse_drug_reactions);
		sb.append(",adherence_level="+adherence_level);
		sb.append(",adheres="+adheres);
		sb.append(",next_appointment="+String.valueOf(next_appointment));
		sb.append(",lmp_date="+String.valueOf(lmp_date));
		sb.append(",functional_status="+functional_status);
		sb.append(",clinical_stage="+clinical_stage);
		sb.append(",datim_id="+datim_id);
		sb.append(",hiv_enrollment_uuid="+hiv_enrollment_uuid);
		sb.append(",regimen_id="+String.valueOf(regimen_id));
		sb.append(",regimen_type_id="+String.valueOf(regimen_type_id));
		sb.append(",extra="+extra);
		sb.append(",notes="+notes);
		sb.append(",tb_status="+tb_status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(hiv_art_clinic_dataStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class clinicStruct implements routines.system.IPersistableRow<clinicStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];

	
			    public String tb_status;

				public String getTb_status () {
					return this.tb_status;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String composition;

				public String getComposition () {
					return this.composition;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public Double cd_4;

				public Double getCd_4 () {
					return this.cd_4;
				}
				
			    public Double cd_4_percentage;

				public Double getCd_4_percentage () {
					return this.cd_4_percentage;
				}
				
			    public boolean is_commencement;

				public boolean getIs_commencement () {
					return this.is_commencement;
				}
				
			    public String oi_screened;

				public String getOi_screened () {
					return this.oi_screened;
				}
				
			    public String sti_ids;

				public String getSti_ids () {
					return this.sti_ids;
				}
				
			    public String sti_treated;

				public String getSti_treated () {
					return this.sti_treated;
				}
				
			    public String opportunistic_infections;

				public String getOpportunistic_infections () {
					return this.opportunistic_infections;
				}
				
			    public String adr_screened;

				public String getAdr_screened () {
					return this.adr_screened;
				}
				
			    public String adverse_drug_reactions;

				public String getAdverse_drug_reactions () {
					return this.adverse_drug_reactions;
				}
				
			    public String adherence_level;

				public String getAdherence_level () {
					return this.adherence_level;
				}
				
			    public String adheres;

				public String getAdheres () {
					return this.adheres;
				}
				
			    public java.util.Date next_appointment;

				public java.util.Date getNext_appointment () {
					return this.next_appointment;
				}
				
			    public java.util.Date lmp_date;

				public java.util.Date getLmp_date () {
					return this.lmp_date;
				}
				
			    public String functional_status;

				public String getFunctional_status () {
					return this.functional_status;
				}
				
			    public String clinical_stage;

				public String getClinical_stage () {
					return this.clinical_stage;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				
			    public String extra;

				public String getExtra () {
					return this.extra;
				}
				
			    public String notes;

				public String getNotes () {
					return this.notes;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical) {

        	try {

        		int length = 0;
		
					this.tb_status = readString(dis);
					
					this.description = readString(dis);
					
					this.composition = readString(dis);
					
					this.created_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.last_modified_by = readString(dis);
					
					this.person_uuid = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.uuid = readString(dis);
					
					this.visit_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd_4 = null;
           				} else {
           			    	this.cd_4 = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd_4_percentage = null;
           				} else {
           			    	this.cd_4_percentage = dis.readDouble();
           				}
					
			        this.is_commencement = dis.readBoolean();
					
					this.oi_screened = readString(dis);
					
					this.sti_ids = readString(dis);
					
					this.sti_treated = readString(dis);
					
					this.opportunistic_infections = readString(dis);
					
					this.adr_screened = readString(dis);
					
					this.adverse_drug_reactions = readString(dis);
					
					this.adherence_level = readString(dis);
					
					this.adheres = readString(dis);
					
					this.next_appointment = readDate(dis);
					
					this.lmp_date = readDate(dis);
					
					this.functional_status = readString(dis);
					
					this.clinical_stage = readString(dis);
					
					this.datim_id = readString(dis);
					
					this.extra = readString(dis);
					
					this.notes = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.tb_status,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.composition,dos);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// Double
				
						if(this.cd_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.cd_4);
		            	}
					
					// Double
				
						if(this.cd_4_percentage == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.cd_4_percentage);
		            	}
					
					// boolean
				
		            	dos.writeBoolean(this.is_commencement);
					
					// String
				
						writeString(this.oi_screened,dos);
					
					// String
				
						writeString(this.sti_ids,dos);
					
					// String
				
						writeString(this.sti_treated,dos);
					
					// String
				
						writeString(this.opportunistic_infections,dos);
					
					// String
				
						writeString(this.adr_screened,dos);
					
					// String
				
						writeString(this.adverse_drug_reactions,dos);
					
					// String
				
						writeString(this.adherence_level,dos);
					
					// String
				
						writeString(this.adheres,dos);
					
					// java.util.Date
				
						writeDate(this.next_appointment,dos);
					
					// java.util.Date
				
						writeDate(this.lmp_date,dos);
					
					// String
				
						writeString(this.functional_status,dos);
					
					// String
				
						writeString(this.clinical_stage,dos);
					
					// String
				
						writeString(this.datim_id,dos);
					
					// String
				
						writeString(this.extra,dos);
					
					// String
				
						writeString(this.notes,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("tb_status="+tb_status);
		sb.append(",description="+description);
		sb.append(",composition="+composition);
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",person_uuid="+person_uuid);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",uuid="+uuid);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",cd_4="+String.valueOf(cd_4));
		sb.append(",cd_4_percentage="+String.valueOf(cd_4_percentage));
		sb.append(",is_commencement="+String.valueOf(is_commencement));
		sb.append(",oi_screened="+oi_screened);
		sb.append(",sti_ids="+sti_ids);
		sb.append(",sti_treated="+sti_treated);
		sb.append(",opportunistic_infections="+opportunistic_infections);
		sb.append(",adr_screened="+adr_screened);
		sb.append(",adverse_drug_reactions="+adverse_drug_reactions);
		sb.append(",adherence_level="+adherence_level);
		sb.append(",adheres="+adheres);
		sb.append(",next_appointment="+String.valueOf(next_appointment));
		sb.append(",lmp_date="+String.valueOf(lmp_date));
		sb.append(",functional_status="+functional_status);
		sb.append(",clinical_stage="+clinical_stage);
		sb.append(",datim_id="+datim_id);
		sb.append(",extra="+extra);
		sb.append(",notes="+notes);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(clinicStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_8Struct implements routines.system.IPersistableRow<after_tDBInput_8Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];

	
			    public String tb_status;

				public String getTb_status () {
					return this.tb_status;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String composition;

				public String getComposition () {
					return this.composition;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public java.util.Date visit_date;

				public java.util.Date getVisit_date () {
					return this.visit_date;
				}
				
			    public Double cd_4;

				public Double getCd_4 () {
					return this.cd_4;
				}
				
			    public Double cd_4_percentage;

				public Double getCd_4_percentage () {
					return this.cd_4_percentage;
				}
				
			    public boolean is_commencement;

				public boolean getIs_commencement () {
					return this.is_commencement;
				}
				
			    public String oi_screened;

				public String getOi_screened () {
					return this.oi_screened;
				}
				
			    public String sti_ids;

				public String getSti_ids () {
					return this.sti_ids;
				}
				
			    public String sti_treated;

				public String getSti_treated () {
					return this.sti_treated;
				}
				
			    public String opportunistic_infections;

				public String getOpportunistic_infections () {
					return this.opportunistic_infections;
				}
				
			    public String adr_screened;

				public String getAdr_screened () {
					return this.adr_screened;
				}
				
			    public String adverse_drug_reactions;

				public String getAdverse_drug_reactions () {
					return this.adverse_drug_reactions;
				}
				
			    public String adherence_level;

				public String getAdherence_level () {
					return this.adherence_level;
				}
				
			    public String adheres;

				public String getAdheres () {
					return this.adheres;
				}
				
			    public java.util.Date next_appointment;

				public java.util.Date getNext_appointment () {
					return this.next_appointment;
				}
				
			    public java.util.Date lmp_date;

				public java.util.Date getLmp_date () {
					return this.lmp_date;
				}
				
			    public String functional_status;

				public String getFunctional_status () {
					return this.functional_status;
				}
				
			    public String clinical_stage;

				public String getClinical_stage () {
					return this.clinical_stage;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				
			    public String extra;

				public String getExtra () {
					return this.extra;
				}
				
			    public String notes;

				public String getNotes () {
					return this.notes;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical) {

        	try {

        		int length = 0;
		
					this.tb_status = readString(dis);
					
					this.description = readString(dis);
					
					this.composition = readString(dis);
					
					this.created_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.last_modified_by = readString(dis);
					
					this.person_uuid = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.uuid = readString(dis);
					
					this.visit_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd_4 = null;
           				} else {
           			    	this.cd_4 = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cd_4_percentage = null;
           				} else {
           			    	this.cd_4_percentage = dis.readDouble();
           				}
					
			        this.is_commencement = dis.readBoolean();
					
					this.oi_screened = readString(dis);
					
					this.sti_ids = readString(dis);
					
					this.sti_treated = readString(dis);
					
					this.opportunistic_infections = readString(dis);
					
					this.adr_screened = readString(dis);
					
					this.adverse_drug_reactions = readString(dis);
					
					this.adherence_level = readString(dis);
					
					this.adheres = readString(dis);
					
					this.next_appointment = readDate(dis);
					
					this.lmp_date = readDate(dis);
					
					this.functional_status = readString(dis);
					
					this.clinical_stage = readString(dis);
					
					this.datim_id = readString(dis);
					
					this.extra = readString(dis);
					
					this.notes = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.tb_status,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.composition,dos);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// java.util.Date
				
						writeDate(this.visit_date,dos);
					
					// Double
				
						if(this.cd_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.cd_4);
		            	}
					
					// Double
				
						if(this.cd_4_percentage == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.cd_4_percentage);
		            	}
					
					// boolean
				
		            	dos.writeBoolean(this.is_commencement);
					
					// String
				
						writeString(this.oi_screened,dos);
					
					// String
				
						writeString(this.sti_ids,dos);
					
					// String
				
						writeString(this.sti_treated,dos);
					
					// String
				
						writeString(this.opportunistic_infections,dos);
					
					// String
				
						writeString(this.adr_screened,dos);
					
					// String
				
						writeString(this.adverse_drug_reactions,dos);
					
					// String
				
						writeString(this.adherence_level,dos);
					
					// String
				
						writeString(this.adheres,dos);
					
					// java.util.Date
				
						writeDate(this.next_appointment,dos);
					
					// java.util.Date
				
						writeDate(this.lmp_date,dos);
					
					// String
				
						writeString(this.functional_status,dos);
					
					// String
				
						writeString(this.clinical_stage,dos);
					
					// String
				
						writeString(this.datim_id,dos);
					
					// String
				
						writeString(this.extra,dos);
					
					// String
				
						writeString(this.notes,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("tb_status="+tb_status);
		sb.append(",description="+description);
		sb.append(",composition="+composition);
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",person_uuid="+person_uuid);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",uuid="+uuid);
		sb.append(",visit_date="+String.valueOf(visit_date));
		sb.append(",cd_4="+String.valueOf(cd_4));
		sb.append(",cd_4_percentage="+String.valueOf(cd_4_percentage));
		sb.append(",is_commencement="+String.valueOf(is_commencement));
		sb.append(",oi_screened="+oi_screened);
		sb.append(",sti_ids="+sti_ids);
		sb.append(",sti_treated="+sti_treated);
		sb.append(",opportunistic_infections="+opportunistic_infections);
		sb.append(",adr_screened="+adr_screened);
		sb.append(",adverse_drug_reactions="+adverse_drug_reactions);
		sb.append(",adherence_level="+adherence_level);
		sb.append(",adheres="+adheres);
		sb.append(",next_appointment="+String.valueOf(next_appointment));
		sb.append(",lmp_date="+String.valueOf(lmp_date));
		sb.append(",functional_status="+functional_status);
		sb.append(",clinical_stage="+clinical_stage);
		sb.append(",datim_id="+datim_id);
		sb.append(",extra="+extra);
		sb.append(",notes="+notes);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_9Process(globalMap);
		tDBInput_10Process(globalMap);
		tDBInput_11Process(globalMap);
		tDBInput_13Process(globalMap);

		clinicStruct clinic = new clinicStruct();
hiv_art_clinic_dataStruct hiv_art_clinic_data = new hiv_art_clinic_dataStruct();
clinic_stage_recordStruct clinic_stage_record = new clinic_stage_recordStruct();






	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"clinic_stage_record");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = context.LAMISPlus_Schema;
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("etl_hiv_art_clinical_stage");
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("etl_hiv_art_clinical_stage");
}

        int updateKeyCount_tDBOutput_3 = 1;
        if(updateKeyCount_tDBOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_3 = "jdbc:postgresql://"+context.LAMISPlus_Server+":"+context.LAMISPlus_Port+"/"+context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
    dbUser_tDBOutput_3 = context.LAMISPlus_Login;

	final String decryptedPassword_tDBOutput_3 = context.LAMISPlus_Password; 

    String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;

    conn_tDBOutput_3 = java.sql.DriverManager.getConnection(url_tDBOutput_3,dbUser_tDBOutput_3,dbPwd_tDBOutput_3);
	
	resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
        conn_tDBOutput_3.setAutoCommit(false);
        int commitEvery_tDBOutput_3 = 10000;
        int commitCounter_tDBOutput_3 = 0;



int count_tDBOutput_3=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_3 = conn_tDBOutput_3.getMetaData();
                                boolean whetherExist_tDBOutput_3 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_3 = dbMetaData_tDBOutput_3.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_3 = "public";
                                    if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_3 = conn_tDBOutput_3.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_3 = stmtSchema_tDBOutput_3.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_3.next()){
                                                defaultSchema_tDBOutput_3 = rsSchema_tDBOutput_3.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_3.next()) {
                                        String table_tDBOutput_3 = rsTable_tDBOutput_3.getString("TABLE_NAME");
                                        String schema_tDBOutput_3 = rsTable_tDBOutput_3.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_3.equals(("etl_hiv_art_clinical_stage"))
                                            && (schema_tDBOutput_3.equals(dbschema_tDBOutput_3) || ((dbschema_tDBOutput_3 ==null || dbschema_tDBOutput_3.trim().length() ==0) && defaultSchema_tDBOutput_3.equals(schema_tDBOutput_3)))) {
                                            whetherExist_tDBOutput_3 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_3) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
                                        stmtCreate_tDBOutput_3.execute("CREATE TABLE \"" + tableName_tDBOutput_3 + "\"(\"created_date\" TIMESTAMP(29)   not null ,\"created_by\" VARCHAR(100)  ,\"last_modified_date\" TIMESTAMP(29)   not null ,\"last_modified_by\" VARCHAR(100)  ,\"uuid\" VARCHAR(100)  ,\"archived\" INT4 ,\"visit_date\" DATE ,\"cd_4\" FLOAT8 ,\"cd_4_percentage\" FLOAT8 ,\"is_commencement\" BOOL ,\"oi_screened\" VARCHAR(2000)  ,\"sti_ids\" VARCHAR(2000)  ,\"sti_treated\" VARCHAR(2000)  ,\"" + "opportunistic_infections" + "\" VARCHAR(2000),\"adr_screened\" VARCHAR(2000)  ,\"" + "adverse_drug_reactions" + "\" VARCHAR(2000),\"adherence_level\" VARCHAR(2000)  ,\"" + "adheres" + "\" VARCHAR(2000),\"next_appointment\" DATE ,\"lmp_date\" DATE ,\"functional_status\" VARCHAR(500)  ,\"clinical_stage\" VARCHAR(500)  ,\"datim_id\" VARCHAR(100)   not null ,\"hiv_enrollment_uuid\" VARCHAR(255)   not null ,\"visit_id\" VARCHAR(255)   not null ,\"person_uuid\" VARCHAR(255)   not null ,\"id\" INT4 ,\"regimen_id\" BIGSERIAL  not null ,\"regimen_type_id\" INT4  not null ,\"" + "extra" + "\" VARCHAR(2000),\"notes\" VARCHAR(2000)  ,\"tb_status\" INT4 ,primary key(\"id\"))");
                                    }
                                }
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_3 + "\" WHERE \"id\" = ?");
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    String insert_tDBOutput_3 = "INSERT INTO \"" + tableName_tDBOutput_3 + "\" (\"created_date\",\"created_by\",\"last_modified_date\",\"last_modified_by\",\"uuid\",\"archived\",\"visit_date\",\"cd_4\",\"cd_4_percentage\",\"is_commencement\",\"oi_screened\",\"sti_ids\",\"sti_treated\",\"" + "opportunistic_infections" + "\",\"adr_screened\",\"" + "adverse_drug_reactions" + "\",\"adherence_level\",\"" + "adheres" + "\",\"next_appointment\",\"lmp_date\",\"functional_status\",\"clinical_stage\",\"datim_id\",\"hiv_enrollment_uuid\",\"visit_id\",\"person_uuid\",\"id\",\"regimen_id\",\"regimen_type_id\",\"" + "extra" + "\",\"notes\",\"tb_status\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?," + "?::jsonb" + ",?," + "?::jsonb" + ",?," + "?::jsonb" + ",?,?,?,?,?,?,?,?,?,?,?," + "?::jsonb" + ",?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
	    resourceMap.put("pstmtInsert_tDBOutput_3", pstmtInsert_tDBOutput_3);
	    String update_tDBOutput_3 = "UPDATE \"" + tableName_tDBOutput_3 + "\" SET \"created_date\" = ?,\"created_by\" = ?,\"last_modified_date\" = ?,\"last_modified_by\" = ?,\"uuid\" = ?,\"archived\" = ?,\"visit_date\" = ?,\"cd_4\" = ?,\"cd_4_percentage\" = ?,\"is_commencement\" = ?,\"oi_screened\" = ?,\"sti_ids\" = ?,\"sti_treated\" = ?,\"" + "opportunistic_infections" + "\" = " + "?::jsonb" + ",\"adr_screened\" = ?,\"" + "adverse_drug_reactions" + "\" = " + "?::jsonb" + ",\"adherence_level\" = ?,\"" + "adheres" + "\" = " + "?::jsonb" + ",\"next_appointment\" = ?,\"lmp_date\" = ?,\"functional_status\" = ?,\"clinical_stage\" = ?,\"datim_id\" = ?,\"hiv_enrollment_uuid\" = ?,\"visit_id\" = ?,\"person_uuid\" = ?,\"regimen_id\" = ?,\"regimen_type_id\" = ?,\"" + "extra" + "\" = " + "?::jsonb" + ",\"notes\" = ?,\"tb_status\" = ? WHERE \"id\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(update_tDBOutput_3);
	    resourceMap.put("pstmtUpdate_tDBOutput_3", pstmtUpdate_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"hiv_art_clinic_data");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<patient_visit_for_clinicStruct> tHash_Lookup_patient_visit_for_clinic = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<patient_visit_for_clinicStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<patient_visit_for_clinicStruct>) 
					globalMap.get( "tHash_Lookup_patient_visit_for_clinic" ))
					;					
					
	

patient_visit_for_clinicStruct patient_visit_for_clinicHashKey = new patient_visit_for_clinicStruct();
patient_visit_for_clinicStruct patient_visit_for_clinicDefault = new patient_visit_for_clinicStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) 
					globalMap.get( "tHash_Lookup_row1" ))
					;					
					
	

row1Struct row1HashKey = new row1Struct();
row1Struct row1Default = new row1Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
clinic_stage_recordStruct clinic_stage_record_tmp = new clinic_stage_recordStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"clinic");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<hiv_enrollmentStruct> tHash_Lookup_hiv_enrollment = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<hiv_enrollmentStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<hiv_enrollmentStruct>) 
					globalMap.get( "tHash_Lookup_hiv_enrollment" ))
					;					
					
	

hiv_enrollmentStruct hiv_enrollmentHashKey = new hiv_enrollmentStruct();
hiv_enrollmentStruct hiv_enrollmentDefault = new hiv_enrollmentStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<CompostionStruct> tHash_Lookup_Compostion = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<CompostionStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<CompostionStruct>) 
					globalMap.get( "tHash_Lookup_Compostion" ))
					;					
					
	

CompostionStruct CompostionHashKey = new CompostionStruct();
CompostionStruct CompostionDefault = new CompostionStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
hiv_art_clinic_dataStruct hiv_art_clinic_data_tmp = new hiv_art_clinic_dataStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tDBInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_8", false);
		start_Hash.put("tDBInput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_8";

	
		int tos_count_tDBInput_8 = 0;
		
	
    
	
		    int nb_line_tDBInput_8 = 0;
		    java.sql.Connection conn_tDBInput_8 = null;
				String driverClass_tDBInput_8 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_8 = java.lang.Class.forName(driverClass_tDBInput_8);
				String dbUser_tDBInput_8 = context.LAMIS3_Login;
				
				
	final String decryptedPassword_tDBInput_8 = context.LAMIS3_Password; 
				
				String dbPwd_tDBInput_8 = decryptedPassword_tDBInput_8;
				
				String url_tDBInput_8 = "jdbc:postgresql://" + context.LAMIS3_Server + ":" + context.LAMIS3_Port + "/" + context.LAMIS3_Database + "?" + context.LAMIS3_AdditionalParams;
				
				conn_tDBInput_8 = java.sql.DriverManager.getConnection(url_tDBInput_8,dbUser_tDBInput_8,dbPwd_tDBInput_8);
		        
				conn_tDBInput_8.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8.createStatement();

		    String dbquery_tDBInput_8 = "SELECT LOWER(TRIM(c.tb_status)) as tb_status, r.description, r.composition, c.last_modified as created_date, 'ETL' as c"
+"reated_by, c.last_modified as last_modified_date, \n'ETL' as last_modified_by,  \np.uuid as person_uuid, c.archived::int"
+"eger, ''::VARCHAR as uuid,\nc.date_visit as visit_date,  c.cd4 as cd_4, c.cd4p as cd_4_percentage, c.commence as is_comm"
+"encement, \nc.oi_screened, c.sti_ids,  c.sti_treated, c.opportunistic_infections, c.adr_screened, \nc.adverse_drug_react"
+"ions, c.adherence_level, c.adheres, c.next_appointment, c.lmp as lmp_date, \nc.func_status as functional_status, c.clini"
+"c_stage as clinical_stage,  n.datim_id as datim_id, c.extra, c.notes\nFROM clinic c\n\nJOIN patient p ON p.id = c.patien"
+"t_id \nINNER JOIN ndr_facility n ON n.id=p.facility_id\nLEFT JOIN regimen r ON r.id = c.regimen_id\nWHERE p.extra->>'art"
+"'='true'";
			

            	globalMap.put("tDBInput_8_QUERY",dbquery_tDBInput_8);
		    java.sql.ResultSet rs_tDBInput_8 = null;

		    try {
		    	rs_tDBInput_8 = stmt_tDBInput_8.executeQuery(dbquery_tDBInput_8);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8.getMetaData();
		    	int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8.getColumnCount();

		    String tmpContent_tDBInput_8 = null;
		    
		    
		    while (rs_tDBInput_8.next()) {
		        nb_line_tDBInput_8++;
		        
							if(colQtyInRs_tDBInput_8 < 1) {
								clinic.tb_status = null;
							} else {
	                         		
        	clinic.tb_status = routines.system.JDBCUtil.getString(rs_tDBInput_8, 1, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 2) {
								clinic.description = null;
							} else {
	                         		
        	clinic.description = routines.system.JDBCUtil.getString(rs_tDBInput_8, 2, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 3) {
								clinic.composition = null;
							} else {
	                         		
        	clinic.composition = routines.system.JDBCUtil.getString(rs_tDBInput_8, 3, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 4) {
								clinic.created_date = null;
							} else {
										
			clinic.created_date = routines.system.JDBCUtil.getDate(rs_tDBInput_8, 4);
		                    }
							if(colQtyInRs_tDBInput_8 < 5) {
								clinic.created_by = null;
							} else {
	                         		
        	clinic.created_by = routines.system.JDBCUtil.getString(rs_tDBInput_8, 5, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 6) {
								clinic.last_modified_date = null;
							} else {
										
			clinic.last_modified_date = routines.system.JDBCUtil.getDate(rs_tDBInput_8, 6);
		                    }
							if(colQtyInRs_tDBInput_8 < 7) {
								clinic.last_modified_by = null;
							} else {
	                         		
        	clinic.last_modified_by = routines.system.JDBCUtil.getString(rs_tDBInput_8, 7, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 8) {
								clinic.person_uuid = null;
							} else {
	                         		
        	clinic.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_8, 8, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 9) {
								clinic.archived = null;
							} else {
		                          
            clinic.archived = rs_tDBInput_8.getInt(9);
            if(rs_tDBInput_8.wasNull()){
                    clinic.archived = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 10) {
								clinic.uuid = null;
							} else {
	                         		
        	clinic.uuid = routines.system.JDBCUtil.getString(rs_tDBInput_8, 10, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 11) {
								clinic.visit_date = null;
							} else {
										
			clinic.visit_date = routines.system.JDBCUtil.getDate(rs_tDBInput_8, 11);
		                    }
							if(colQtyInRs_tDBInput_8 < 12) {
								clinic.cd_4 = null;
							} else {
	                         		
            clinic.cd_4 = rs_tDBInput_8.getDouble(12);
            if(rs_tDBInput_8.wasNull()){
                    clinic.cd_4 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 13) {
								clinic.cd_4_percentage = null;
							} else {
	                         		
            clinic.cd_4_percentage = rs_tDBInput_8.getDouble(13);
            if(rs_tDBInput_8.wasNull()){
                    clinic.cd_4_percentage = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 14) {
								clinic.is_commencement = false;
							} else {
	                         		
            clinic.is_commencement = rs_tDBInput_8.getBoolean(14);
            if(rs_tDBInput_8.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 15) {
								clinic.oi_screened = null;
							} else {
	                         		
        	clinic.oi_screened = routines.system.JDBCUtil.getString(rs_tDBInput_8, 15, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 16) {
								clinic.sti_ids = null;
							} else {
	                         		
        	clinic.sti_ids = routines.system.JDBCUtil.getString(rs_tDBInput_8, 16, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 17) {
								clinic.sti_treated = null;
							} else {
	                         		
        	clinic.sti_treated = routines.system.JDBCUtil.getString(rs_tDBInput_8, 17, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 18) {
								clinic.opportunistic_infections = null;
							} else {
	                         		
        	clinic.opportunistic_infections = routines.system.JDBCUtil.getString(rs_tDBInput_8, 18, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 19) {
								clinic.adr_screened = null;
							} else {
	                         		
        	clinic.adr_screened = routines.system.JDBCUtil.getString(rs_tDBInput_8, 19, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 20) {
								clinic.adverse_drug_reactions = null;
							} else {
	                         		
        	clinic.adverse_drug_reactions = routines.system.JDBCUtil.getString(rs_tDBInput_8, 20, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 21) {
								clinic.adherence_level = null;
							} else {
	                         		
        	clinic.adherence_level = routines.system.JDBCUtil.getString(rs_tDBInput_8, 21, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 22) {
								clinic.adheres = null;
							} else {
	                         		
        	clinic.adheres = routines.system.JDBCUtil.getString(rs_tDBInput_8, 22, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 23) {
								clinic.next_appointment = null;
							} else {
										
			clinic.next_appointment = routines.system.JDBCUtil.getDate(rs_tDBInput_8, 23);
		                    }
							if(colQtyInRs_tDBInput_8 < 24) {
								clinic.lmp_date = null;
							} else {
										
			clinic.lmp_date = routines.system.JDBCUtil.getDate(rs_tDBInput_8, 24);
		                    }
							if(colQtyInRs_tDBInput_8 < 25) {
								clinic.functional_status = null;
							} else {
	                         		
        	clinic.functional_status = routines.system.JDBCUtil.getString(rs_tDBInput_8, 25, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 26) {
								clinic.clinical_stage = null;
							} else {
	                         		
        	clinic.clinical_stage = routines.system.JDBCUtil.getString(rs_tDBInput_8, 26, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 27) {
								clinic.datim_id = null;
							} else {
	                         		
        	clinic.datim_id = routines.system.JDBCUtil.getString(rs_tDBInput_8, 27, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 28) {
								clinic.extra = null;
							} else {
	                         		
        	clinic.extra = routines.system.JDBCUtil.getString(rs_tDBInput_8, 28, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 29) {
								clinic.notes = null;
							} else {
	                         		
        	clinic.notes = routines.system.JDBCUtil.getString(rs_tDBInput_8, 29, false);
		                    }
					


 



/**
 * [tDBInput_8 begin ] stop
 */
	
	/**
	 * [tDBInput_8 main ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 


	tos_count_tDBInput_8++;

/**
 * [tDBInput_8 main ] stop
 */
	
	/**
	 * [tDBInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"clinic");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "hiv_enrollment" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoophiv_enrollment = false;
       		  	    	
       		  	    	
 							hiv_enrollmentStruct hiv_enrollmentObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    hiv_enrollmentHashKey.person_uuid = clinic.person_uuid ;
                        		    		

								
		                        	hiv_enrollmentHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_hiv_enrollment.lookup( hiv_enrollmentHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_hiv_enrollment != null && tHash_Lookup_hiv_enrollment.getCount(hiv_enrollmentHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'hiv_enrollment' and it contains more one result from keys :  hiv_enrollment.person_uuid = '" + hiv_enrollmentHashKey.person_uuid + "'");
								} // G 071
							

							hiv_enrollmentStruct hiv_enrollment = null;
                    		  	 
							   
                    		  	 
	       		  	    	hiv_enrollmentStruct fromLookup_hiv_enrollment = null;
							hiv_enrollment = hiv_enrollmentDefault;
										 
							
								 
							
							
								if (tHash_Lookup_hiv_enrollment !=null && tHash_Lookup_hiv_enrollment.hasNext()) { // G 099
								
							
								
								fromLookup_hiv_enrollment = tHash_Lookup_hiv_enrollment.next();

							
							
								} // G 099
							
							

							if(fromLookup_hiv_enrollment != null) {
								hiv_enrollment = fromLookup_hiv_enrollment;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "Compostion" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopCompostion = false;
       		  	    	
       		  	    	
 							CompostionStruct CompostionObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    CompostionHashKey.description = clinic.description ;
                        		    		
                        		    		    CompostionHashKey.composition = clinic.composition ;
                        		    		

								
		                        	CompostionHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_Compostion.lookup( CompostionHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_Compostion != null && tHash_Lookup_Compostion.getCount(CompostionHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'Compostion' and it contains more one result from keys :  Compostion.description = '" + CompostionHashKey.description + "', Compostion.composition = '" + CompostionHashKey.composition + "'");
								} // G 071
							

							CompostionStruct Compostion = null;
                    		  	 
							   
                    		  	 
	       		  	    	CompostionStruct fromLookup_Compostion = null;
							Compostion = CompostionDefault;
										 
							
								 
							
							
								if (tHash_Lookup_Compostion !=null && tHash_Lookup_Compostion.hasNext()) { // G 099
								
							
								
								fromLookup_Compostion = tHash_Lookup_Compostion.next();

							
							
								} // G 099
							
							

							if(fromLookup_Compostion != null) {
								Compostion = fromLookup_Compostion;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

hiv_art_clinic_data = null;


// # Output table : 'hiv_art_clinic_data'
hiv_art_clinic_data_tmp.created_date = clinic.created_date ;
hiv_art_clinic_data_tmp.created_by = clinic.created_by ;
hiv_art_clinic_data_tmp.last_modified_date = clinic.last_modified_date ;
hiv_art_clinic_data_tmp.last_modified_by = clinic.last_modified_by ;
hiv_art_clinic_data_tmp.person_uuid = clinic.person_uuid ;
hiv_art_clinic_data_tmp.uuid = java.util.UUID.randomUUID().toString() ;
hiv_art_clinic_data_tmp.archived = clinic.archived ;
hiv_art_clinic_data_tmp.visit_date = clinic.visit_date ;
hiv_art_clinic_data_tmp.cd_4 = (clinic.cd_4 == null)? 0.0 : clinic.cd_4 ;
hiv_art_clinic_data_tmp.cd_4_percentage = (clinic.cd_4_percentage==null)? 0.0 : clinic.cd_4_percentage ;
hiv_art_clinic_data_tmp.is_commencement = clinic.is_commencement ;
hiv_art_clinic_data_tmp.oi_screened = clinic.oi_screened ;
hiv_art_clinic_data_tmp.sti_ids = clinic.sti_ids ;
hiv_art_clinic_data_tmp.sti_treated = clinic.sti_treated ;
hiv_art_clinic_data_tmp.opportunistic_infections = clinic.opportunistic_infections ;
hiv_art_clinic_data_tmp.adr_screened = clinic.adr_screened ;
hiv_art_clinic_data_tmp.adverse_drug_reactions = clinic.adverse_drug_reactions ;
hiv_art_clinic_data_tmp.adherence_level = clinic.adherence_level ;
hiv_art_clinic_data_tmp.adheres = clinic.adheres ;
hiv_art_clinic_data_tmp.next_appointment = clinic.next_appointment ;
hiv_art_clinic_data_tmp.lmp_date = clinic.lmp_date ;
hiv_art_clinic_data_tmp.functional_status = clinic.functional_status ;
hiv_art_clinic_data_tmp.clinical_stage = clinic.clinical_stage ;
hiv_art_clinic_data_tmp.datim_id = clinic.datim_id ;
hiv_art_clinic_data_tmp.hiv_enrollment_uuid = hiv_enrollment.uuid ;
hiv_art_clinic_data_tmp.regimen_id = Compostion.id ;
hiv_art_clinic_data_tmp.regimen_type_id = Compostion.regimen_type_id ;
hiv_art_clinic_data_tmp.extra = clinic.extra ;
hiv_art_clinic_data_tmp.notes = clinic.notes ;
hiv_art_clinic_data_tmp.tb_status = clinic.tb_status ;
hiv_art_clinic_data = hiv_art_clinic_data_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "hiv_art_clinic_data"
if(hiv_art_clinic_data != null) { 



	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"hiv_art_clinic_data");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "patient_visit_for_clinic" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooppatient_visit_for_clinic = false;
       		  	    	
       		  	    	
 							patient_visit_for_clinicStruct patient_visit_for_clinicObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    patient_visit_for_clinicHashKey.person_uuid = hiv_art_clinic_data.person_uuid ;
                        		    		
                        		    		    patient_visit_for_clinicHashKey.visit_start_date = hiv_art_clinic_data.visit_date == null ? null : new java.util.Date(hiv_art_clinic_data.visit_date.getTime());
                        		    		

								
		                        	patient_visit_for_clinicHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_patient_visit_for_clinic.lookup( patient_visit_for_clinicHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_patient_visit_for_clinic != null && tHash_Lookup_patient_visit_for_clinic.getCount(patient_visit_for_clinicHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'patient_visit_for_clinic' and it contains more one result from keys :  patient_visit_for_clinic.person_uuid = '" + patient_visit_for_clinicHashKey.person_uuid + "', patient_visit_for_clinic.visit_start_date = '" + patient_visit_for_clinicHashKey.visit_start_date + "'");
								} // G 071
							

							patient_visit_for_clinicStruct patient_visit_for_clinic = null;
                    		  	 
							   
                    		  	 
	       		  	    	patient_visit_for_clinicStruct fromLookup_patient_visit_for_clinic = null;
							patient_visit_for_clinic = patient_visit_for_clinicDefault;
										 
							
								 
							
							
								if (tHash_Lookup_patient_visit_for_clinic !=null && tHash_Lookup_patient_visit_for_clinic.hasNext()) { // G 099
								
							
								
								fromLookup_patient_visit_for_clinic = tHash_Lookup_patient_visit_for_clinic.next();

							
							
								} // G 099
							
							

							if(fromLookup_patient_visit_for_clinic != null) {
								patient_visit_for_clinic = fromLookup_patient_visit_for_clinic;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row1" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow1 = false;
       		  	    	
       		  	    	
 							row1Struct row1ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row1HashKey.display = hiv_art_clinic_data.tb_status;
                        		    		

								
		                        	row1HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row1.lookup( row1HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row1 != null && tHash_Lookup_row1.getCount(row1HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row1' and it contains more one result from keys :  row1.display = '" + row1HashKey.display + "'");
								} // G 071
							

							row1Struct row1 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row1Struct fromLookup_row1 = null;
							row1 = row1Default;
										 
							
								 
							
							
								if (tHash_Lookup_row1 !=null && tHash_Lookup_row1.hasNext()) { // G 099
								
							
								
								fromLookup_row1 = tHash_Lookup_row1.next();

							
							
								} // G 099
							
							

							if(fromLookup_row1 != null) {
								row1 = fromLookup_row1;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

clinic_stage_record = null;


// # Output table : 'clinic_stage_record'
clinic_stage_record_tmp.created_date = hiv_art_clinic_data.created_date ;
clinic_stage_record_tmp.created_by = hiv_art_clinic_data.created_by ;
clinic_stage_record_tmp.last_modified_date = hiv_art_clinic_data.last_modified_date ;
clinic_stage_record_tmp.last_modified_by = hiv_art_clinic_data.last_modified_by ;
clinic_stage_record_tmp.uuid = hiv_art_clinic_data.uuid ;
clinic_stage_record_tmp.archived = hiv_art_clinic_data.archived ;
clinic_stage_record_tmp.visit_date = hiv_art_clinic_data.visit_date ;
clinic_stage_record_tmp.cd_4 = hiv_art_clinic_data.cd_4 ;
clinic_stage_record_tmp.cd_4_percentage = hiv_art_clinic_data.cd_4_percentage ;
clinic_stage_record_tmp.is_commencement = hiv_art_clinic_data.is_commencement ;
clinic_stage_record_tmp.oi_screened = hiv_art_clinic_data.oi_screened ;
clinic_stage_record_tmp.sti_ids = hiv_art_clinic_data.sti_ids ;
clinic_stage_record_tmp.sti_treated = hiv_art_clinic_data.sti_treated ;
clinic_stage_record_tmp.opportunistic_infections = hiv_art_clinic_data.opportunistic_infections ;
clinic_stage_record_tmp.adr_screened = hiv_art_clinic_data.adr_screened ;
clinic_stage_record_tmp.adverse_drug_reactions = hiv_art_clinic_data.adverse_drug_reactions ;
clinic_stage_record_tmp.adherence_level = hiv_art_clinic_data.adherence_level ;
clinic_stage_record_tmp.adheres = hiv_art_clinic_data.adheres ;
clinic_stage_record_tmp.next_appointment = hiv_art_clinic_data.next_appointment ;
clinic_stage_record_tmp.lmp_date = hiv_art_clinic_data.lmp_date ;
clinic_stage_record_tmp.functional_status = hiv_art_clinic_data.functional_status ;
clinic_stage_record_tmp.clinical_stage = hiv_art_clinic_data.clinical_stage ;
clinic_stage_record_tmp.datim_id = hiv_art_clinic_data.datim_id ;
clinic_stage_record_tmp.hiv_enrollment_uuid = hiv_art_clinic_data.hiv_enrollment_uuid ;
clinic_stage_record_tmp.visit_id = patient_visit_for_clinic.visit_id ;
clinic_stage_record_tmp.person_uuid = patient_visit_for_clinic.person_uuid ;
clinic_stage_record_tmp.id = Numeric.sequence("id",1,1);
clinic_stage_record_tmp.regimen_id = hiv_art_clinic_data.regimen_id ;
clinic_stage_record_tmp.regimen_type_id = hiv_art_clinic_data.regimen_type_id ;
clinic_stage_record_tmp.extra = hiv_art_clinic_data.extra ;
clinic_stage_record_tmp.notes = hiv_art_clinic_data.notes ;
clinic_stage_record_tmp.tb_status = row1.id;
clinic_stage_record = clinic_stage_record_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "clinic_stage_record"
if(clinic_stage_record != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"clinic_stage_record");
					}
					



        whetherReject_tDBOutput_3 = false;
                    if(clinic_stage_record.id == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setInt(1, clinic_stage_record.id);
}

            int checkCount_tDBOutput_3 = -1;
            try (java.sql.ResultSet rs_tDBOutput_3 = pstmt_tDBOutput_3.executeQuery()) {
                while(rs_tDBOutput_3.next()) {
                    checkCount_tDBOutput_3 = rs_tDBOutput_3.getInt(1);
                }
            }
            if(checkCount_tDBOutput_3 > 0) {
                        if(clinic_stage_record.created_date != null) {
pstmtUpdate_tDBOutput_3.setTimestamp(1, new java.sql.Timestamp(clinic_stage_record.created_date.getTime()));
} else {
pstmtUpdate_tDBOutput_3.setNull(1, java.sql.Types.TIMESTAMP);
}

                        if(clinic_stage_record.created_by == null) {
pstmtUpdate_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(2, clinic_stage_record.created_by);
}

                        if(clinic_stage_record.last_modified_date != null) {
pstmtUpdate_tDBOutput_3.setTimestamp(3, new java.sql.Timestamp(clinic_stage_record.last_modified_date.getTime()));
} else {
pstmtUpdate_tDBOutput_3.setNull(3, java.sql.Types.TIMESTAMP);
}

                        if(clinic_stage_record.last_modified_by == null) {
pstmtUpdate_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(4, clinic_stage_record.last_modified_by);
}

                        if(clinic_stage_record.uuid == null) {
pstmtUpdate_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(5, clinic_stage_record.uuid);
}

                        if(clinic_stage_record.archived == null) {
pstmtUpdate_tDBOutput_3.setNull(6, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_3.setInt(6, clinic_stage_record.archived);
}

                        if(clinic_stage_record.visit_date != null) {
pstmtUpdate_tDBOutput_3.setTimestamp(7, new java.sql.Timestamp(clinic_stage_record.visit_date.getTime()));
} else {
pstmtUpdate_tDBOutput_3.setNull(7, java.sql.Types.TIMESTAMP);
}

                        if(clinic_stage_record.cd_4 == null) {
pstmtUpdate_tDBOutput_3.setNull(8, java.sql.Types.DOUBLE);
} else {pstmtUpdate_tDBOutput_3.setDouble(8, clinic_stage_record.cd_4);
}

                        if(clinic_stage_record.cd_4_percentage == null) {
pstmtUpdate_tDBOutput_3.setNull(9, java.sql.Types.DOUBLE);
} else {pstmtUpdate_tDBOutput_3.setDouble(9, clinic_stage_record.cd_4_percentage);
}

                        if(clinic_stage_record.is_commencement == null) {
pstmtUpdate_tDBOutput_3.setNull(10, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tDBOutput_3.setBoolean(10, clinic_stage_record.is_commencement);
}

                        if(clinic_stage_record.oi_screened == null) {
pstmtUpdate_tDBOutput_3.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(11, clinic_stage_record.oi_screened);
}

                        if(clinic_stage_record.sti_ids == null) {
pstmtUpdate_tDBOutput_3.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(12, clinic_stage_record.sti_ids);
}

                        if(clinic_stage_record.sti_treated == null) {
pstmtUpdate_tDBOutput_3.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(13, clinic_stage_record.sti_treated);
}

                        if(clinic_stage_record.opportunistic_infections == null) {
pstmtUpdate_tDBOutput_3.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(14, clinic_stage_record.opportunistic_infections);
}

                        if(clinic_stage_record.adr_screened == null) {
pstmtUpdate_tDBOutput_3.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(15, clinic_stage_record.adr_screened);
}

                        if(clinic_stage_record.adverse_drug_reactions == null) {
pstmtUpdate_tDBOutput_3.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(16, clinic_stage_record.adverse_drug_reactions);
}

                        if(clinic_stage_record.adherence_level == null) {
pstmtUpdate_tDBOutput_3.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(17, clinic_stage_record.adherence_level);
}

                        if(clinic_stage_record.adheres == null) {
pstmtUpdate_tDBOutput_3.setNull(18, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(18, clinic_stage_record.adheres);
}

                        if(clinic_stage_record.next_appointment != null) {
pstmtUpdate_tDBOutput_3.setTimestamp(19, new java.sql.Timestamp(clinic_stage_record.next_appointment.getTime()));
} else {
pstmtUpdate_tDBOutput_3.setNull(19, java.sql.Types.TIMESTAMP);
}

                        if(clinic_stage_record.lmp_date != null) {
pstmtUpdate_tDBOutput_3.setTimestamp(20, new java.sql.Timestamp(clinic_stage_record.lmp_date.getTime()));
} else {
pstmtUpdate_tDBOutput_3.setNull(20, java.sql.Types.TIMESTAMP);
}

                        if(clinic_stage_record.functional_status == null) {
pstmtUpdate_tDBOutput_3.setNull(21, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(21, clinic_stage_record.functional_status);
}

                        if(clinic_stage_record.clinical_stage == null) {
pstmtUpdate_tDBOutput_3.setNull(22, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(22, clinic_stage_record.clinical_stage);
}

                        if(clinic_stage_record.datim_id == null) {
pstmtUpdate_tDBOutput_3.setNull(23, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(23, clinic_stage_record.datim_id);
}

                        if(clinic_stage_record.hiv_enrollment_uuid == null) {
pstmtUpdate_tDBOutput_3.setNull(24, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(24, clinic_stage_record.hiv_enrollment_uuid);
}

                        if(clinic_stage_record.visit_id == null) {
pstmtUpdate_tDBOutput_3.setNull(25, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(25, clinic_stage_record.visit_id);
}

                        if(clinic_stage_record.person_uuid == null) {
pstmtUpdate_tDBOutput_3.setNull(26, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(26, clinic_stage_record.person_uuid);
}

                        pstmtUpdate_tDBOutput_3.setInt(27, clinic_stage_record.regimen_id);

                        pstmtUpdate_tDBOutput_3.setInt(28, clinic_stage_record.regimen_type_id);

                        if(clinic_stage_record.extra == null) {
pstmtUpdate_tDBOutput_3.setNull(29, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(29, clinic_stage_record.extra);
}

                        if(clinic_stage_record.notes == null) {
pstmtUpdate_tDBOutput_3.setNull(30, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(30, clinic_stage_record.notes);
}

                        if(clinic_stage_record.tb_status == null) {
pstmtUpdate_tDBOutput_3.setNull(31, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_3.setInt(31, clinic_stage_record.tb_status);
}

                        if(clinic_stage_record.id == null) {
pstmtUpdate_tDBOutput_3.setNull(32 + count_tDBOutput_3, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_3.setInt(32 + count_tDBOutput_3, clinic_stage_record.id);
}

                try {
					
                    updatedCount_tDBOutput_3 = updatedCount_tDBOutput_3 + pstmtUpdate_tDBOutput_3.executeUpdate();
                    nb_line_tDBOutput_3++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_3 = true;
                        nb_line_tDBOutput_3++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(clinic_stage_record.created_date != null) {
pstmtInsert_tDBOutput_3.setTimestamp(1, new java.sql.Timestamp(clinic_stage_record.created_date.getTime()));
} else {
pstmtInsert_tDBOutput_3.setNull(1, java.sql.Types.TIMESTAMP);
}

                        if(clinic_stage_record.created_by == null) {
pstmtInsert_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(2, clinic_stage_record.created_by);
}

                        if(clinic_stage_record.last_modified_date != null) {
pstmtInsert_tDBOutput_3.setTimestamp(3, new java.sql.Timestamp(clinic_stage_record.last_modified_date.getTime()));
} else {
pstmtInsert_tDBOutput_3.setNull(3, java.sql.Types.TIMESTAMP);
}

                        if(clinic_stage_record.last_modified_by == null) {
pstmtInsert_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(4, clinic_stage_record.last_modified_by);
}

                        if(clinic_stage_record.uuid == null) {
pstmtInsert_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(5, clinic_stage_record.uuid);
}

                        if(clinic_stage_record.archived == null) {
pstmtInsert_tDBOutput_3.setNull(6, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_3.setInt(6, clinic_stage_record.archived);
}

                        if(clinic_stage_record.visit_date != null) {
pstmtInsert_tDBOutput_3.setTimestamp(7, new java.sql.Timestamp(clinic_stage_record.visit_date.getTime()));
} else {
pstmtInsert_tDBOutput_3.setNull(7, java.sql.Types.TIMESTAMP);
}

                        if(clinic_stage_record.cd_4 == null) {
pstmtInsert_tDBOutput_3.setNull(8, java.sql.Types.DOUBLE);
} else {pstmtInsert_tDBOutput_3.setDouble(8, clinic_stage_record.cd_4);
}

                        if(clinic_stage_record.cd_4_percentage == null) {
pstmtInsert_tDBOutput_3.setNull(9, java.sql.Types.DOUBLE);
} else {pstmtInsert_tDBOutput_3.setDouble(9, clinic_stage_record.cd_4_percentage);
}

                        if(clinic_stage_record.is_commencement == null) {
pstmtInsert_tDBOutput_3.setNull(10, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_3.setBoolean(10, clinic_stage_record.is_commencement);
}

                        if(clinic_stage_record.oi_screened == null) {
pstmtInsert_tDBOutput_3.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(11, clinic_stage_record.oi_screened);
}

                        if(clinic_stage_record.sti_ids == null) {
pstmtInsert_tDBOutput_3.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(12, clinic_stage_record.sti_ids);
}

                        if(clinic_stage_record.sti_treated == null) {
pstmtInsert_tDBOutput_3.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(13, clinic_stage_record.sti_treated);
}

                        if(clinic_stage_record.opportunistic_infections == null) {
pstmtInsert_tDBOutput_3.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(14, clinic_stage_record.opportunistic_infections);
}

                        if(clinic_stage_record.adr_screened == null) {
pstmtInsert_tDBOutput_3.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(15, clinic_stage_record.adr_screened);
}

                        if(clinic_stage_record.adverse_drug_reactions == null) {
pstmtInsert_tDBOutput_3.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(16, clinic_stage_record.adverse_drug_reactions);
}

                        if(clinic_stage_record.adherence_level == null) {
pstmtInsert_tDBOutput_3.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(17, clinic_stage_record.adherence_level);
}

                        if(clinic_stage_record.adheres == null) {
pstmtInsert_tDBOutput_3.setNull(18, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(18, clinic_stage_record.adheres);
}

                        if(clinic_stage_record.next_appointment != null) {
pstmtInsert_tDBOutput_3.setTimestamp(19, new java.sql.Timestamp(clinic_stage_record.next_appointment.getTime()));
} else {
pstmtInsert_tDBOutput_3.setNull(19, java.sql.Types.TIMESTAMP);
}

                        if(clinic_stage_record.lmp_date != null) {
pstmtInsert_tDBOutput_3.setTimestamp(20, new java.sql.Timestamp(clinic_stage_record.lmp_date.getTime()));
} else {
pstmtInsert_tDBOutput_3.setNull(20, java.sql.Types.TIMESTAMP);
}

                        if(clinic_stage_record.functional_status == null) {
pstmtInsert_tDBOutput_3.setNull(21, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(21, clinic_stage_record.functional_status);
}

                        if(clinic_stage_record.clinical_stage == null) {
pstmtInsert_tDBOutput_3.setNull(22, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(22, clinic_stage_record.clinical_stage);
}

                        if(clinic_stage_record.datim_id == null) {
pstmtInsert_tDBOutput_3.setNull(23, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(23, clinic_stage_record.datim_id);
}

                        if(clinic_stage_record.hiv_enrollment_uuid == null) {
pstmtInsert_tDBOutput_3.setNull(24, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(24, clinic_stage_record.hiv_enrollment_uuid);
}

                        if(clinic_stage_record.visit_id == null) {
pstmtInsert_tDBOutput_3.setNull(25, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(25, clinic_stage_record.visit_id);
}

                        if(clinic_stage_record.person_uuid == null) {
pstmtInsert_tDBOutput_3.setNull(26, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(26, clinic_stage_record.person_uuid);
}

                        if(clinic_stage_record.id == null) {
pstmtInsert_tDBOutput_3.setNull(27, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_3.setInt(27, clinic_stage_record.id);
}

                        pstmtInsert_tDBOutput_3.setInt(28, clinic_stage_record.regimen_id);

                        pstmtInsert_tDBOutput_3.setInt(29, clinic_stage_record.regimen_type_id);

                        if(clinic_stage_record.extra == null) {
pstmtInsert_tDBOutput_3.setNull(30, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(30, clinic_stage_record.extra);
}

                        if(clinic_stage_record.notes == null) {
pstmtInsert_tDBOutput_3.setNull(31, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(31, clinic_stage_record.notes);
}

                        if(clinic_stage_record.tb_status == null) {
pstmtInsert_tDBOutput_3.setNull(32, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_3.setInt(32, clinic_stage_record.tb_status);
}

                try {
					
                    insertedCount_tDBOutput_3 = insertedCount_tDBOutput_3 + pstmtInsert_tDBOutput_3.executeUpdate();
                    nb_line_tDBOutput_3++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_3 = true;
                        nb_line_tDBOutput_3++;
                            System.err.print(e.getMessage());
                }
            }
    		    commitCounter_tDBOutput_3++;
                if(commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {
                	conn_tDBOutput_3.commit();
                	
                	commitCounter_tDBOutput_3=0;
                }

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "clinic_stage_record"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */

} // End of branch "hiv_art_clinic_data"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_8 end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

	}
}finally{
	if (rs_tDBInput_8 != null) {
		rs_tDBInput_8.close();
	}
	if (stmt_tDBInput_8 != null) {
		stmt_tDBInput_8.close();
	}
	if(conn_tDBInput_8 != null && !conn_tDBInput_8.isClosed()) {
		
			conn_tDBInput_8.commit();
			
		
			conn_tDBInput_8.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_8_NB_LINE",nb_line_tDBInput_8);
 

ok_Hash.put("tDBInput_8", true);
end_Hash.put("tDBInput_8", System.currentTimeMillis());

   			if (globalMap.get("tDBInput_8_NB_LINE") != null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				tJava_1Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}



/**
 * [tDBInput_8 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_hiv_enrollment != null) {
						tHash_Lookup_hiv_enrollment.endGet();
					}
					globalMap.remove( "tHash_Lookup_hiv_enrollment" );

					
					
				
					if(tHash_Lookup_Compostion != null) {
						tHash_Lookup_Compostion.endGet();
					}
					globalMap.remove( "tHash_Lookup_Compostion" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"clinic");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_patient_visit_for_clinic != null) {
						tHash_Lookup_patient_visit_for_clinic.endGet();
					}
					globalMap.remove( "tHash_Lookup_patient_visit_for_clinic" );

					
					
				
					if(tHash_Lookup_row1 != null) {
						tHash_Lookup_row1.endGet();
					}
					globalMap.remove( "tHash_Lookup_row1" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"hiv_art_clinic_data");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



        if(pstmtUpdate_tDBOutput_3 != null){
            pstmtUpdate_tDBOutput_3.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_3");
        }
        if(pstmtInsert_tDBOutput_3 != null){
            pstmtInsert_tDBOutput_3.close();
            resourceMap.remove("pstmtInsert_tDBOutput_3");
        }
        if(pstmt_tDBOutput_3 != null) {
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);
			
			conn_tDBOutput_3.commit();
			
		
    	conn_tDBOutput_3 .close();
    	
    	resourceMap.put("finish_tDBOutput_3", true);
    	

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"clinic_stage_record");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_8:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_patient_visit_for_clinic"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row1"); 
				     			
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_hiv_enrollment"); 
				     			
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_Compostion"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_3 = null;
                if ((pstmtUpdateToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_3")) != null) {
                    pstmtUpdateToClose_tDBOutput_3.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_3 = null;
                if ((pstmtInsertToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_3")) != null) {
                    pstmtInsertToClose_tDBOutput_3.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_3") == null){
            java.sql.Connection ctn_tDBOutput_3 = null;
            if((ctn_tDBOutput_3 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_3")) != null){
                try {
                    ctn_tDBOutput_3.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_3) {
                    String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :" + sqlEx_tDBOutput_3.getMessage();
                    System.err.println(errorMessage_tDBOutput_3);
                }
            }
        }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


System.out.println("*****************************************************************");
System.out.println("***********HIV_ART_CLINIC MIGRATION REPORT START*****************");

java.time.LocalDateTime startTime = java.time.LocalDateTime.now();
globalMap.put("startTime", startTime);
System.out.println("Start time - "+ startTime);

System.out.println("Total HIV ART Clinicals fetched from LAMIS3 clinic - "+globalMap.get("tDBInput_8_NB_LINE"));
System.out.println();
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class hiv_enrollmentStruct implements routines.system.IPersistableComparableLookupRow<hiv_enrollmentStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public java.util.Date date_of_registration;

				public java.util.Date getDate_of_registration () {
					return this.date_of_registration;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.person_uuid == null) ? 0 : this.person_uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final hiv_enrollmentStruct other = (hiv_enrollmentStruct) obj;
		
						if (this.person_uuid == null) {
							if (other.person_uuid != null)
								return false;
						
						} else if (!this.person_uuid.equals(other.person_uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(hiv_enrollmentStruct other) {

		other.person_uuid = this.person_uuid;
	            other.uuid = this.uuid;
	            other.date_of_registration = this.date_of_registration;
	            
	}

	public void copyKeysDataTo(hiv_enrollmentStruct other) {

		other.person_uuid = this.person_uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.uuid = readString(dis,ois);
					
						this.date_of_registration = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.uuid, dos, oos);
					
						writeDate(this.date_of_registration, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",uuid="+uuid);
		sb.append(",date_of_registration="+String.valueOf(date_of_registration));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(hiv_enrollmentStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.person_uuid, other.person_uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		hiv_enrollmentStruct hiv_enrollment = new hiv_enrollmentStruct();




	
	/**
	 * [tAdvancedHash_hiv_enrollment begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_hiv_enrollment", false);
		start_Hash.put("tAdvancedHash_hiv_enrollment", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_hiv_enrollment";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"hiv_enrollment");
					}
				
		int tos_count_tAdvancedHash_hiv_enrollment = 0;
		

			   		// connection name:hiv_enrollment
			   		// source node:tDBInput_9 - inputs:(after_tDBInput_8) outputs:(hiv_enrollment,hiv_enrollment) | target node:tAdvancedHash_hiv_enrollment - inputs:(hiv_enrollment) outputs:()
			   		// linked node: tMap_5 - inputs:(clinic,hiv_enrollment,Compostion) outputs:(hiv_art_clinic_data)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_hiv_enrollment = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<hiv_enrollmentStruct> tHash_Lookup_hiv_enrollment =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<hiv_enrollmentStruct>getLookup(matchingModeEnum_hiv_enrollment);
	   						   
		   	   	   globalMap.put("tHash_Lookup_hiv_enrollment", tHash_Lookup_hiv_enrollment);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_hiv_enrollment begin ] stop
 */



	
	/**
	 * [tDBInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_9", false);
		start_Hash.put("tDBInput_9", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_9";

	
		int tos_count_tDBInput_9 = 0;
		
	
    
	
		    int nb_line_tDBInput_9 = 0;
		    java.sql.Connection conn_tDBInput_9 = null;
				String driverClass_tDBInput_9 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_9 = java.lang.Class.forName(driverClass_tDBInput_9);
				String dbUser_tDBInput_9 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_9 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_9 = decryptedPassword_tDBInput_9;
				
				String url_tDBInput_9 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_9 = java.sql.DriverManager.getConnection(url_tDBInput_9,dbUser_tDBInput_9,dbPwd_tDBInput_9);
		        
				conn_tDBInput_9.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9.createStatement();

		    String dbquery_tDBInput_9 = "select person_uuid, uuid, date_of_registration from hiv_enrollment";
			

            	globalMap.put("tDBInput_9_QUERY",dbquery_tDBInput_9);
		    java.sql.ResultSet rs_tDBInput_9 = null;

		    try {
		    	rs_tDBInput_9 = stmt_tDBInput_9.executeQuery(dbquery_tDBInput_9);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9.getMetaData();
		    	int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9.getColumnCount();

		    String tmpContent_tDBInput_9 = null;
		    
		    
		    while (rs_tDBInput_9.next()) {
		        nb_line_tDBInput_9++;
		        
							if(colQtyInRs_tDBInput_9 < 1) {
								hiv_enrollment.person_uuid = null;
							} else {
	                         		
        	hiv_enrollment.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_9, 1, false);
		                    }
							if(colQtyInRs_tDBInput_9 < 2) {
								hiv_enrollment.uuid = null;
							} else {
	                         		
        	hiv_enrollment.uuid = routines.system.JDBCUtil.getString(rs_tDBInput_9, 2, false);
		                    }
							if(colQtyInRs_tDBInput_9 < 3) {
								hiv_enrollment.date_of_registration = null;
							} else {
										
			hiv_enrollment.date_of_registration = routines.system.JDBCUtil.getDate(rs_tDBInput_9, 3);
		                    }
					


 



/**
 * [tDBInput_9 begin ] stop
 */
	
	/**
	 * [tDBInput_9 main ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 


	tos_count_tDBInput_9++;

/**
 * [tDBInput_9 main ] stop
 */
	
	/**
	 * [tDBInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_hiv_enrollment main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_hiv_enrollment";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"hiv_enrollment");
					}
					


			   
			   

					hiv_enrollmentStruct hiv_enrollment_HashRow = new hiv_enrollmentStruct();
		   	   	   
				
				hiv_enrollment_HashRow.person_uuid = hiv_enrollment.person_uuid;
				
				hiv_enrollment_HashRow.uuid = hiv_enrollment.uuid;
				
				hiv_enrollment_HashRow.date_of_registration = hiv_enrollment.date_of_registration;
				
			tHash_Lookup_hiv_enrollment.put(hiv_enrollment_HashRow);
			
            




 


	tos_count_tAdvancedHash_hiv_enrollment++;

/**
 * [tAdvancedHash_hiv_enrollment main ] stop
 */
	
	/**
	 * [tAdvancedHash_hiv_enrollment process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_hiv_enrollment";

	

 



/**
 * [tAdvancedHash_hiv_enrollment process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_hiv_enrollment process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_hiv_enrollment";

	

 



/**
 * [tAdvancedHash_hiv_enrollment process_data_end ] stop
 */



	
	/**
	 * [tDBInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_9 end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

	}
}finally{
	if (rs_tDBInput_9 != null) {
		rs_tDBInput_9.close();
	}
	if (stmt_tDBInput_9 != null) {
		stmt_tDBInput_9.close();
	}
	if(conn_tDBInput_9 != null && !conn_tDBInput_9.isClosed()) {
		
			conn_tDBInput_9.commit();
			
		
			conn_tDBInput_9.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_9_NB_LINE",nb_line_tDBInput_9);
 

ok_Hash.put("tDBInput_9", true);
end_Hash.put("tDBInput_9", System.currentTimeMillis());




/**
 * [tDBInput_9 end ] stop
 */

	
	/**
	 * [tAdvancedHash_hiv_enrollment end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_hiv_enrollment";

	

tHash_Lookup_hiv_enrollment.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"hiv_enrollment");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_hiv_enrollment", true);
end_Hash.put("tAdvancedHash_hiv_enrollment", System.currentTimeMillis());




/**
 * [tAdvancedHash_hiv_enrollment end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_9 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_hiv_enrollment finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_hiv_enrollment";

	

 



/**
 * [tAdvancedHash_hiv_enrollment finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class patient_visit_for_clinicStruct implements routines.system.IPersistableComparableLookupRow<patient_visit_for_clinicStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public java.util.Date visit_start_date;

				public java.util.Date getVisit_start_date () {
					return this.visit_start_date;
				}
				
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.person_uuid == null) ? 0 : this.person_uuid.hashCode());
					
						result = prime * result + ((this.visit_start_date == null) ? 0 : this.visit_start_date.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final patient_visit_for_clinicStruct other = (patient_visit_for_clinicStruct) obj;
		
						if (this.person_uuid == null) {
							if (other.person_uuid != null)
								return false;
						
						} else if (!this.person_uuid.equals(other.person_uuid))
						
							return false;
					
						if (this.visit_start_date == null) {
							if (other.visit_start_date != null)
								return false;
						
						} else if (!this.visit_start_date.equals(other.visit_start_date))
						
							return false;
					

		return true;
    }

	public void copyDataTo(patient_visit_for_clinicStruct other) {

		other.person_uuid = this.person_uuid;
	            other.visit_start_date = this.visit_start_date;
	            other.visit_id = this.visit_id;
	            
	}

	public void copyKeysDataTo(patient_visit_for_clinicStruct other) {

		other.person_uuid = this.person_uuid;
	            	other.visit_start_date = this.visit_start_date;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
					this.visit_start_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
					// java.util.Date
				
						writeDate(this.visit_start_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.visit_id = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.visit_id, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",visit_start_date="+String.valueOf(visit_start_date));
		sb.append(",visit_id="+visit_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(patient_visit_for_clinicStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.person_uuid, other.person_uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.visit_start_date, other.visit_start_date);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		patient_visit_for_clinicStruct patient_visit_for_clinic = new patient_visit_for_clinicStruct();




	
	/**
	 * [tAdvancedHash_patient_visit_for_clinic begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_patient_visit_for_clinic", false);
		start_Hash.put("tAdvancedHash_patient_visit_for_clinic", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_patient_visit_for_clinic";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"patient_visit_for_clinic");
					}
				
		int tos_count_tAdvancedHash_patient_visit_for_clinic = 0;
		

			   		// connection name:patient_visit_for_clinic
			   		// source node:tDBInput_10 - inputs:(after_tDBInput_8) outputs:(patient_visit_for_clinic,patient_visit_for_clinic) | target node:tAdvancedHash_patient_visit_for_clinic - inputs:(patient_visit_for_clinic) outputs:()
			   		// linked node: tMap_6 - inputs:(hiv_art_clinic_data,patient_visit_for_clinic,row1) outputs:(clinic_stage_record)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_patient_visit_for_clinic = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<patient_visit_for_clinicStruct> tHash_Lookup_patient_visit_for_clinic =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<patient_visit_for_clinicStruct>getLookup(matchingModeEnum_patient_visit_for_clinic);
	   						   
		   	   	   globalMap.put("tHash_Lookup_patient_visit_for_clinic", tHash_Lookup_patient_visit_for_clinic);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_patient_visit_for_clinic begin ] stop
 */



	
	/**
	 * [tDBInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_10", false);
		start_Hash.put("tDBInput_10", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_10";

	
		int tos_count_tDBInput_10 = 0;
		
	
    
	
		    int nb_line_tDBInput_10 = 0;
		    java.sql.Connection conn_tDBInput_10 = null;
				String driverClass_tDBInput_10 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_10 = java.lang.Class.forName(driverClass_tDBInput_10);
				String dbUser_tDBInput_10 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_10 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_10 = decryptedPassword_tDBInput_10;
				
				String url_tDBInput_10 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_10 = java.sql.DriverManager.getConnection(url_tDBInput_10,dbUser_tDBInput_10,dbPwd_tDBInput_10);
		        
				conn_tDBInput_10.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_10 = conn_tDBInput_10.createStatement();

		    String dbquery_tDBInput_10 = "select person_uuid, visit_start_date, uuid as visit_id FROM patient_visit";
			

            	globalMap.put("tDBInput_10_QUERY",dbquery_tDBInput_10);
		    java.sql.ResultSet rs_tDBInput_10 = null;

		    try {
		    	rs_tDBInput_10 = stmt_tDBInput_10.executeQuery(dbquery_tDBInput_10);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_10 = rs_tDBInput_10.getMetaData();
		    	int colQtyInRs_tDBInput_10 = rsmd_tDBInput_10.getColumnCount();

		    String tmpContent_tDBInput_10 = null;
		    
		    
		    while (rs_tDBInput_10.next()) {
		        nb_line_tDBInput_10++;
		        
							if(colQtyInRs_tDBInput_10 < 1) {
								patient_visit_for_clinic.person_uuid = null;
							} else {
	                         		
        	patient_visit_for_clinic.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_10, 1, false);
		                    }
							if(colQtyInRs_tDBInput_10 < 2) {
								patient_visit_for_clinic.visit_start_date = null;
							} else {
										
			patient_visit_for_clinic.visit_start_date = routines.system.JDBCUtil.getDate(rs_tDBInput_10, 2);
		                    }
							if(colQtyInRs_tDBInput_10 < 3) {
								patient_visit_for_clinic.visit_id = null;
							} else {
	                         		
        	patient_visit_for_clinic.visit_id = routines.system.JDBCUtil.getString(rs_tDBInput_10, 3, false);
		                    }
					


 



/**
 * [tDBInput_10 begin ] stop
 */
	
	/**
	 * [tDBInput_10 main ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 


	tos_count_tDBInput_10++;

/**
 * [tDBInput_10 main ] stop
 */
	
	/**
	 * [tDBInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_patient_visit_for_clinic main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_patient_visit_for_clinic";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"patient_visit_for_clinic");
					}
					


			   
			   

					patient_visit_for_clinicStruct patient_visit_for_clinic_HashRow = new patient_visit_for_clinicStruct();
		   	   	   
				
				patient_visit_for_clinic_HashRow.person_uuid = patient_visit_for_clinic.person_uuid;
				
				patient_visit_for_clinic_HashRow.visit_start_date = patient_visit_for_clinic.visit_start_date;
				
				patient_visit_for_clinic_HashRow.visit_id = patient_visit_for_clinic.visit_id;
				
			tHash_Lookup_patient_visit_for_clinic.put(patient_visit_for_clinic_HashRow);
			
            




 


	tos_count_tAdvancedHash_patient_visit_for_clinic++;

/**
 * [tAdvancedHash_patient_visit_for_clinic main ] stop
 */
	
	/**
	 * [tAdvancedHash_patient_visit_for_clinic process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_patient_visit_for_clinic";

	

 



/**
 * [tAdvancedHash_patient_visit_for_clinic process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_patient_visit_for_clinic process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_patient_visit_for_clinic";

	

 



/**
 * [tAdvancedHash_patient_visit_for_clinic process_data_end ] stop
 */



	
	/**
	 * [tDBInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_10 end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

	}
}finally{
	if (rs_tDBInput_10 != null) {
		rs_tDBInput_10.close();
	}
	if (stmt_tDBInput_10 != null) {
		stmt_tDBInput_10.close();
	}
	if(conn_tDBInput_10 != null && !conn_tDBInput_10.isClosed()) {
		
			conn_tDBInput_10.commit();
			
		
			conn_tDBInput_10.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_10_NB_LINE",nb_line_tDBInput_10);
 

ok_Hash.put("tDBInput_10", true);
end_Hash.put("tDBInput_10", System.currentTimeMillis());




/**
 * [tDBInput_10 end ] stop
 */

	
	/**
	 * [tAdvancedHash_patient_visit_for_clinic end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_patient_visit_for_clinic";

	

tHash_Lookup_patient_visit_for_clinic.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"patient_visit_for_clinic");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_patient_visit_for_clinic", true);
end_Hash.put("tAdvancedHash_patient_visit_for_clinic", System.currentTimeMillis());




/**
 * [tAdvancedHash_patient_visit_for_clinic end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_10 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_patient_visit_for_clinic finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_patient_visit_for_clinic";

	

 



/**
 * [tAdvancedHash_patient_visit_for_clinic finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class CompostionStruct implements routines.system.IPersistableComparableLookupRow<CompostionStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public int regimen_type_id;

				public int getRegimen_type_id () {
					return this.regimen_type_id;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String composition;

				public String getComposition () {
					return this.composition;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.description == null) ? 0 : this.description.hashCode());
					
						result = prime * result + ((this.composition == null) ? 0 : this.composition.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final CompostionStruct other = (CompostionStruct) obj;
		
						if (this.description == null) {
							if (other.description != null)
								return false;
						
						} else if (!this.description.equals(other.description))
						
							return false;
					
						if (this.composition == null) {
							if (other.composition != null)
								return false;
						
						} else if (!this.composition.equals(other.composition))
						
							return false;
					

		return true;
    }

	public void copyDataTo(CompostionStruct other) {

		other.id = this.id;
	            other.regimen_type_id = this.regimen_type_id;
	            other.description = this.description;
	            other.composition = this.composition;
	            
	}

	public void copyKeysDataTo(CompostionStruct other) {

		other.description = this.description;
	            	other.composition = this.composition;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical) {

        	try {

        		int length = 0;
		
					this.description = readString(dis);
					
					this.composition = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.composition,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
			            this.regimen_type_id = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
		            	dos.writeInt(this.regimen_type_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",regimen_type_id="+String.valueOf(regimen_type_id));
		sb.append(",description="+description);
		sb.append(",composition="+composition);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CompostionStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.description, other.description);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.composition, other.composition);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		CompostionStruct Compostion = new CompostionStruct();




	
	/**
	 * [tAdvancedHash_Compostion begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_Compostion", false);
		start_Hash.put("tAdvancedHash_Compostion", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_Compostion";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Compostion");
					}
				
		int tos_count_tAdvancedHash_Compostion = 0;
		

			   		// connection name:Compostion
			   		// source node:tDBInput_11 - inputs:(after_tDBInput_8) outputs:(Compostion,Compostion) | target node:tAdvancedHash_Compostion - inputs:(Compostion) outputs:()
			   		// linked node: tMap_5 - inputs:(clinic,hiv_enrollment,Compostion) outputs:(hiv_art_clinic_data)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_Compostion = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<CompostionStruct> tHash_Lookup_Compostion =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<CompostionStruct>getLookup(matchingModeEnum_Compostion);
	   						   
		   	   	   globalMap.put("tHash_Lookup_Compostion", tHash_Lookup_Compostion);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_Compostion begin ] stop
 */



	
	/**
	 * [tDBInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_11", false);
		start_Hash.put("tDBInput_11", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_11";

	
		int tos_count_tDBInput_11 = 0;
		
	
    
	
		    int nb_line_tDBInput_11 = 0;
		    java.sql.Connection conn_tDBInput_11 = null;
				String driverClass_tDBInput_11 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_11 = java.lang.Class.forName(driverClass_tDBInput_11);
				String dbUser_tDBInput_11 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_11 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_11 = decryptedPassword_tDBInput_11;
				
				String url_tDBInput_11 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_11 = java.sql.DriverManager.getConnection(url_tDBInput_11,dbUser_tDBInput_11,dbPwd_tDBInput_11);
		        
				conn_tDBInput_11.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_11 = conn_tDBInput_11.createStatement();

		    String dbquery_tDBInput_11 = "SELECT r.id, r.regimen_type_id, trim(r.description) as description, trim(r.composition) as composition  from hiv_regime"
+"n r";
			

            	globalMap.put("tDBInput_11_QUERY",dbquery_tDBInput_11);
		    java.sql.ResultSet rs_tDBInput_11 = null;

		    try {
		    	rs_tDBInput_11 = stmt_tDBInput_11.executeQuery(dbquery_tDBInput_11);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_11 = rs_tDBInput_11.getMetaData();
		    	int colQtyInRs_tDBInput_11 = rsmd_tDBInput_11.getColumnCount();

		    String tmpContent_tDBInput_11 = null;
		    
		    
		    while (rs_tDBInput_11.next()) {
		        nb_line_tDBInput_11++;
		        
							if(colQtyInRs_tDBInput_11 < 1) {
								Compostion.id = 0;
							} else {
		                          
            Compostion.id = rs_tDBInput_11.getInt(1);
            if(rs_tDBInput_11.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_11 < 2) {
								Compostion.regimen_type_id = 0;
							} else {
		                          
            Compostion.regimen_type_id = rs_tDBInput_11.getInt(2);
            if(rs_tDBInput_11.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_11 < 3) {
								Compostion.description = null;
							} else {
	                         		
        	Compostion.description = routines.system.JDBCUtil.getString(rs_tDBInput_11, 3, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 4) {
								Compostion.composition = null;
							} else {
	                         		
        	Compostion.composition = routines.system.JDBCUtil.getString(rs_tDBInput_11, 4, false);
		                    }
					


 



/**
 * [tDBInput_11 begin ] stop
 */
	
	/**
	 * [tDBInput_11 main ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 


	tos_count_tDBInput_11++;

/**
 * [tDBInput_11 main ] stop
 */
	
	/**
	 * [tDBInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_Compostion main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Compostion";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Compostion");
					}
					


			   
			   

					CompostionStruct Compostion_HashRow = new CompostionStruct();
		   	   	   
				
				Compostion_HashRow.id = Compostion.id;
				
				Compostion_HashRow.regimen_type_id = Compostion.regimen_type_id;
				
				Compostion_HashRow.description = Compostion.description;
				
				Compostion_HashRow.composition = Compostion.composition;
				
			tHash_Lookup_Compostion.put(Compostion_HashRow);
			
            




 


	tos_count_tAdvancedHash_Compostion++;

/**
 * [tAdvancedHash_Compostion main ] stop
 */
	
	/**
	 * [tAdvancedHash_Compostion process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Compostion";

	

 



/**
 * [tAdvancedHash_Compostion process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_Compostion process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Compostion";

	

 



/**
 * [tAdvancedHash_Compostion process_data_end ] stop
 */



	
	/**
	 * [tDBInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_11 end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

	}
}finally{
	if (rs_tDBInput_11 != null) {
		rs_tDBInput_11.close();
	}
	if (stmt_tDBInput_11 != null) {
		stmt_tDBInput_11.close();
	}
	if(conn_tDBInput_11 != null && !conn_tDBInput_11.isClosed()) {
		
			conn_tDBInput_11.commit();
			
		
			conn_tDBInput_11.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_11_NB_LINE",nb_line_tDBInput_11);
 

ok_Hash.put("tDBInput_11", true);
end_Hash.put("tDBInput_11", System.currentTimeMillis());




/**
 * [tDBInput_11 end ] stop
 */

	
	/**
	 * [tAdvancedHash_Compostion end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Compostion";

	

tHash_Lookup_Compostion.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Compostion");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_Compostion", true);
end_Hash.put("tAdvancedHash_Compostion", System.currentTimeMillis());




/**
 * [tAdvancedHash_Compostion end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_11 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_Compostion finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Compostion";

	

 



/**
 * [tAdvancedHash_Compostion finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableComparableLookupRow<row1Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String display;

				public String getDisplay () {
					return this.display;
				}
				
			    public String code;

				public String getCode () {
					return this.code;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.display == null) ? 0 : this.display.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.display == null) {
							if (other.display != null)
								return false;
						
						} else if (!this.display.equals(other.display))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.id = this.id;
	            other.display = this.display;
	            other.code = this.code;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.display = this.display;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_ART_Clinical, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_ART_Clinical) {

        	try {

        		int length = 0;
		
					this.display = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.display,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
						this.code = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
						writeString(this.code, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",display="+display);
		sb.append(",code="+code);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.display, other.display);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tAdvancedHash_row1 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row1", false);
		start_Hash.put("tAdvancedHash_row1", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tAdvancedHash_row1 = 0;
		

			   		// connection name:row1
			   		// source node:tDBInput_13 - inputs:(after_tDBInput_8) outputs:(row1,row1) | target node:tAdvancedHash_row1 - inputs:(row1) outputs:()
			   		// linked node: tMap_6 - inputs:(hiv_art_clinic_data,patient_visit_for_clinic,row1) outputs:(clinic_stage_record)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row1 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row1Struct>getLookup(matchingModeEnum_row1);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row1", tHash_Lookup_row1);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row1 begin ] stop
 */



	
	/**
	 * [tDBInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_13", false);
		start_Hash.put("tDBInput_13", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_13";

	
		int tos_count_tDBInput_13 = 0;
		
	
    
	
		    int nb_line_tDBInput_13 = 0;
		    java.sql.Connection conn_tDBInput_13 = null;
				String driverClass_tDBInput_13 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_13 = java.lang.Class.forName(driverClass_tDBInput_13);
				String dbUser_tDBInput_13 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_13 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_13 = decryptedPassword_tDBInput_13;
				
				String url_tDBInput_13 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_13 = java.sql.DriverManager.getConnection(url_tDBInput_13,dbUser_tDBInput_13,dbPwd_tDBInput_13);
		        
				conn_tDBInput_13.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_13 = conn_tDBInput_13.createStatement();

		    String dbquery_tDBInput_13 = "SELECT id, LOWER(TRIM(display)) as display, code FROM base_application_codeset \nWHERE codeset_group='TB_STATUS'";
			

            	globalMap.put("tDBInput_13_QUERY",dbquery_tDBInput_13);
		    java.sql.ResultSet rs_tDBInput_13 = null;

		    try {
		    	rs_tDBInput_13 = stmt_tDBInput_13.executeQuery(dbquery_tDBInput_13);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_13 = rs_tDBInput_13.getMetaData();
		    	int colQtyInRs_tDBInput_13 = rsmd_tDBInput_13.getColumnCount();

		    String tmpContent_tDBInput_13 = null;
		    
		    
		    while (rs_tDBInput_13.next()) {
		        nb_line_tDBInput_13++;
		        
							if(colQtyInRs_tDBInput_13 < 1) {
								row1.id = 0;
							} else {
		                          
            row1.id = rs_tDBInput_13.getInt(1);
            if(rs_tDBInput_13.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_13 < 2) {
								row1.display = null;
							} else {
	                         		
        	row1.display = routines.system.JDBCUtil.getString(rs_tDBInput_13, 2, false);
		                    }
							if(colQtyInRs_tDBInput_13 < 3) {
								row1.code = null;
							} else {
	                         		
        	row1.code = routines.system.JDBCUtil.getString(rs_tDBInput_13, 3, false);
		                    }
					


 



/**
 * [tDBInput_13 begin ] stop
 */
	
	/**
	 * [tDBInput_13 main ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 


	tos_count_tDBInput_13++;

/**
 * [tDBInput_13 main ] stop
 */
	
	/**
	 * [tDBInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row1 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					


			   
			   

					row1Struct row1_HashRow = new row1Struct();
		   	   	   
				
				row1_HashRow.id = row1.id;
				
				row1_HashRow.display = row1.display;
				
				row1_HashRow.code = row1.code;
				
			tHash_Lookup_row1.put(row1_HashRow);
			
            




 


	tos_count_tAdvancedHash_row1++;

/**
 * [tAdvancedHash_row1 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	

 



/**
 * [tAdvancedHash_row1 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row1 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	

 



/**
 * [tAdvancedHash_row1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_13 end ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

	}
}finally{
	if (rs_tDBInput_13 != null) {
		rs_tDBInput_13.close();
	}
	if (stmt_tDBInput_13 != null) {
		stmt_tDBInput_13.close();
	}
	if(conn_tDBInput_13 != null && !conn_tDBInput_13.isClosed()) {
		
			conn_tDBInput_13.commit();
			
		
			conn_tDBInput_13.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_13_NB_LINE",nb_line_tDBInput_13);
 

ok_Hash.put("tDBInput_13", true);
end_Hash.put("tDBInput_13", System.currentTimeMillis());




/**
 * [tDBInput_13 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row1 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	

tHash_Lookup_row1.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row1", true);
end_Hash.put("tAdvancedHash_row1", System.currentTimeMillis());




/**
 * [tAdvancedHash_row1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_13 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row1 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	

 



/**
 * [tAdvancedHash_row1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_13_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Lamisplus";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final HIV_ART_Clinical HIV_ART_ClinicalClass = new HIV_ART_Clinical();

        int exitCode = HIV_ART_ClinicalClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = HIV_ART_Clinical.class.getClassLoader().getResourceAsStream("lamisplus_etl/hiv_art_clinical_6_0/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = HIV_ART_Clinical.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("LAMISPlus_AdditionalParams", "id_String");
                            context.LAMISPlus_AdditionalParams=(String) context.getProperty("LAMISPlus_AdditionalParams");
                        context.setContextType("LAMISPlus_Database", "id_String");
                            context.LAMISPlus_Database=(String) context.getProperty("LAMISPlus_Database");
                        context.setContextType("LAMISPlus_Login", "id_String");
                            context.LAMISPlus_Login=(String) context.getProperty("LAMISPlus_Login");
                        context.setContextType("LAMISPlus_Password", "id_Password");
                            String pwd_LAMISPlus_Password_value = context.getProperty("LAMISPlus_Password");
                            context.LAMISPlus_Password = null;
                            if(pwd_LAMISPlus_Password_value!=null) {
                                if(context_param.containsKey("LAMISPlus_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.LAMISPlus_Password = pwd_LAMISPlus_Password_value;
                                } else if (!pwd_LAMISPlus_Password_value.isEmpty()) {
                                    try {
                                        context.LAMISPlus_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_LAMISPlus_Password_value);
                                        context.put("LAMISPlus_Password",context.LAMISPlus_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("LAMISPlus_Port", "id_String");
                            context.LAMISPlus_Port=(String) context.getProperty("LAMISPlus_Port");
                        context.setContextType("LAMISPlus_Schema", "id_String");
                            context.LAMISPlus_Schema=(String) context.getProperty("LAMISPlus_Schema");
                        context.setContextType("LAMISPlus_Server", "id_String");
                            context.LAMISPlus_Server=(String) context.getProperty("LAMISPlus_Server");
                        context.setContextType("LAMIS3_AdditionalParams", "id_String");
                            context.LAMIS3_AdditionalParams=(String) context.getProperty("LAMIS3_AdditionalParams");
                        context.setContextType("LAMIS3_Database", "id_String");
                            context.LAMIS3_Database=(String) context.getProperty("LAMIS3_Database");
                        context.setContextType("LAMIS3_Login", "id_String");
                            context.LAMIS3_Login=(String) context.getProperty("LAMIS3_Login");
                        context.setContextType("LAMIS3_Password", "id_Password");
                            String pwd_LAMIS3_Password_value = context.getProperty("LAMIS3_Password");
                            context.LAMIS3_Password = null;
                            if(pwd_LAMIS3_Password_value!=null) {
                                if(context_param.containsKey("LAMIS3_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.LAMIS3_Password = pwd_LAMIS3_Password_value;
                                } else if (!pwd_LAMIS3_Password_value.isEmpty()) {
                                    try {
                                        context.LAMIS3_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_LAMIS3_Password_value);
                                        context.put("LAMIS3_Password",context.LAMIS3_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("LAMIS3_Port", "id_String");
                            context.LAMIS3_Port=(String) context.getProperty("LAMIS3_Port");
                        context.setContextType("LAMIS3_Schema", "id_String");
                            context.LAMIS3_Schema=(String) context.getProperty("LAMIS3_Schema");
                        context.setContextType("LAMIS3_Server", "id_String");
                            context.LAMIS3_Server=(String) context.getProperty("LAMIS3_Server");
                        context.setContextType("Lamisplus2_sinkdb_connection_Database", "id_String");
                            context.Lamisplus2_sinkdb_connection_Database=(String) context.getProperty("Lamisplus2_sinkdb_connection_Database");
                        context.setContextType("Lamisplus2_sinkdb_connection_Login", "id_String");
                            context.Lamisplus2_sinkdb_connection_Login=(String) context.getProperty("Lamisplus2_sinkdb_connection_Login");
                        context.setContextType("Lamisplus2_sinkdb_connection_Password", "id_Password");
                            String pwd_Lamisplus2_sinkdb_connection_Password_value = context.getProperty("Lamisplus2_sinkdb_connection_Password");
                            context.Lamisplus2_sinkdb_connection_Password = null;
                            if(pwd_Lamisplus2_sinkdb_connection_Password_value!=null) {
                                if(context_param.containsKey("Lamisplus2_sinkdb_connection_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.Lamisplus2_sinkdb_connection_Password = pwd_Lamisplus2_sinkdb_connection_Password_value;
                                } else if (!pwd_Lamisplus2_sinkdb_connection_Password_value.isEmpty()) {
                                    try {
                                        context.Lamisplus2_sinkdb_connection_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_Lamisplus2_sinkdb_connection_Password_value);
                                        context.put("Lamisplus2_sinkdb_connection_Password",context.Lamisplus2_sinkdb_connection_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("Lamisplus2_sinkdb_connection_Port", "id_String");
                            context.Lamisplus2_sinkdb_connection_Port=(String) context.getProperty("Lamisplus2_sinkdb_connection_Port");
                        context.setContextType("Lamisplus2_sinkdb_connection_Schema", "id_String");
                            context.Lamisplus2_sinkdb_connection_Schema=(String) context.getProperty("Lamisplus2_sinkdb_connection_Schema");
                        context.setContextType("Lamisplus2_sinkdb_connection_Server", "id_String");
                            context.Lamisplus2_sinkdb_connection_Server=(String) context.getProperty("Lamisplus2_sinkdb_connection_Server");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("LAMISPlus_AdditionalParams")) {
                context.LAMISPlus_AdditionalParams = (String) parentContextMap.get("LAMISPlus_AdditionalParams");
            }if (parentContextMap.containsKey("LAMISPlus_Database")) {
                context.LAMISPlus_Database = (String) parentContextMap.get("LAMISPlus_Database");
            }if (parentContextMap.containsKey("LAMISPlus_Login")) {
                context.LAMISPlus_Login = (String) parentContextMap.get("LAMISPlus_Login");
            }if (parentContextMap.containsKey("LAMISPlus_Password")) {
                context.LAMISPlus_Password = (java.lang.String) parentContextMap.get("LAMISPlus_Password");
            }if (parentContextMap.containsKey("LAMISPlus_Port")) {
                context.LAMISPlus_Port = (String) parentContextMap.get("LAMISPlus_Port");
            }if (parentContextMap.containsKey("LAMISPlus_Schema")) {
                context.LAMISPlus_Schema = (String) parentContextMap.get("LAMISPlus_Schema");
            }if (parentContextMap.containsKey("LAMISPlus_Server")) {
                context.LAMISPlus_Server = (String) parentContextMap.get("LAMISPlus_Server");
            }if (parentContextMap.containsKey("LAMIS3_AdditionalParams")) {
                context.LAMIS3_AdditionalParams = (String) parentContextMap.get("LAMIS3_AdditionalParams");
            }if (parentContextMap.containsKey("LAMIS3_Database")) {
                context.LAMIS3_Database = (String) parentContextMap.get("LAMIS3_Database");
            }if (parentContextMap.containsKey("LAMIS3_Login")) {
                context.LAMIS3_Login = (String) parentContextMap.get("LAMIS3_Login");
            }if (parentContextMap.containsKey("LAMIS3_Password")) {
                context.LAMIS3_Password = (java.lang.String) parentContextMap.get("LAMIS3_Password");
            }if (parentContextMap.containsKey("LAMIS3_Port")) {
                context.LAMIS3_Port = (String) parentContextMap.get("LAMIS3_Port");
            }if (parentContextMap.containsKey("LAMIS3_Schema")) {
                context.LAMIS3_Schema = (String) parentContextMap.get("LAMIS3_Schema");
            }if (parentContextMap.containsKey("LAMIS3_Server")) {
                context.LAMIS3_Server = (String) parentContextMap.get("LAMIS3_Server");
            }if (parentContextMap.containsKey("Lamisplus2_sinkdb_connection_Database")) {
                context.Lamisplus2_sinkdb_connection_Database = (String) parentContextMap.get("Lamisplus2_sinkdb_connection_Database");
            }if (parentContextMap.containsKey("Lamisplus2_sinkdb_connection_Login")) {
                context.Lamisplus2_sinkdb_connection_Login = (String) parentContextMap.get("Lamisplus2_sinkdb_connection_Login");
            }if (parentContextMap.containsKey("Lamisplus2_sinkdb_connection_Password")) {
                context.Lamisplus2_sinkdb_connection_Password = (java.lang.String) parentContextMap.get("Lamisplus2_sinkdb_connection_Password");
            }if (parentContextMap.containsKey("Lamisplus2_sinkdb_connection_Port")) {
                context.Lamisplus2_sinkdb_connection_Port = (String) parentContextMap.get("Lamisplus2_sinkdb_connection_Port");
            }if (parentContextMap.containsKey("Lamisplus2_sinkdb_connection_Schema")) {
                context.Lamisplus2_sinkdb_connection_Schema = (String) parentContextMap.get("Lamisplus2_sinkdb_connection_Schema");
            }if (parentContextMap.containsKey("Lamisplus2_sinkdb_connection_Server")) {
                context.Lamisplus2_sinkdb_connection_Server = (String) parentContextMap.get("Lamisplus2_sinkdb_connection_Server");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("LAMISPlus_Password");
			parametersToEncrypt.add("LAMIS3_Password");
			parametersToEncrypt.add("Lamisplus2_sinkdb_connection_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_8Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_8) {
globalMap.put("tDBInput_8_SUBPROCESS_STATE", -1);

e_tDBInput_8.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : HIV_ART_Clinical");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     532668 characters generated by Talend Open Studio for Big Data 
 *     on the January 16, 2023 10:25:00 PM WAT
 ************************************************************************************************/