// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package lamisplus_etl.eac_6_0;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_10
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_9
	//import java.util.List;

	//the import part of tJava_8
	//import java.util.List;

	//the import part of tJava_7
	//import java.util.List;

	//the import part of tJava_5
	//import java.util.List;

	//the import part of tJava_6
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJava_4
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: EAC Purpose: EAC<br>
 * Description: EAC <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class EAC implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(LAMISPlus_Schema != null){
				
					this.setProperty("LAMISPlus_Schema", LAMISPlus_Schema.toString());
				
			}
			
			if(LAMISPlus_AdditionalParams != null){
				
					this.setProperty("LAMISPlus_AdditionalParams", LAMISPlus_AdditionalParams.toString());
				
			}
			
			if(LAMISPlus_Database != null){
				
					this.setProperty("LAMISPlus_Database", LAMISPlus_Database.toString());
				
			}
			
			if(LAMISPlus_Login != null){
				
					this.setProperty("LAMISPlus_Login", LAMISPlus_Login.toString());
				
			}
			
			if(LAMISPlus_Server != null){
				
					this.setProperty("LAMISPlus_Server", LAMISPlus_Server.toString());
				
			}
			
			if(LAMISPlus_Password != null){
				
					this.setProperty("LAMISPlus_Password", LAMISPlus_Password.toString());
				
			}
			
			if(LAMISPlus_Port != null){
				
					this.setProperty("LAMISPlus_Port", LAMISPlus_Port.toString());
				
			}
			
			if(LAMIS3_Login != null){
				
					this.setProperty("LAMIS3_Login", LAMIS3_Login.toString());
				
			}
			
			if(LAMIS3_Port != null){
				
					this.setProperty("LAMIS3_Port", LAMIS3_Port.toString());
				
			}
			
			if(LAMIS3_AdditionalParams != null){
				
					this.setProperty("LAMIS3_AdditionalParams", LAMIS3_AdditionalParams.toString());
				
			}
			
			if(LAMIS3_Database != null){
				
					this.setProperty("LAMIS3_Database", LAMIS3_Database.toString());
				
			}
			
			if(LAMIS3_Password != null){
				
					this.setProperty("LAMIS3_Password", LAMIS3_Password.toString());
				
			}
			
			if(LAMIS3_Server != null){
				
					this.setProperty("LAMIS3_Server", LAMIS3_Server.toString());
				
			}
			
			if(LAMIS3_Schema != null){
				
					this.setProperty("LAMIS3_Schema", LAMIS3_Schema.toString());
				
			}
			
		}

public String LAMISPlus_Schema;
public String getLAMISPlus_Schema(){
	return this.LAMISPlus_Schema;
}
public String LAMISPlus_AdditionalParams;
public String getLAMISPlus_AdditionalParams(){
	return this.LAMISPlus_AdditionalParams;
}
public String LAMISPlus_Database;
public String getLAMISPlus_Database(){
	return this.LAMISPlus_Database;
}
public String LAMISPlus_Login;
public String getLAMISPlus_Login(){
	return this.LAMISPlus_Login;
}
public String LAMISPlus_Server;
public String getLAMISPlus_Server(){
	return this.LAMISPlus_Server;
}
public java.lang.String LAMISPlus_Password;
public java.lang.String getLAMISPlus_Password(){
	return this.LAMISPlus_Password;
}
public String LAMISPlus_Port;
public String getLAMISPlus_Port(){
	return this.LAMISPlus_Port;
}
public String LAMIS3_Login;
public String getLAMIS3_Login(){
	return this.LAMIS3_Login;
}
public String LAMIS3_Port;
public String getLAMIS3_Port(){
	return this.LAMIS3_Port;
}
public String LAMIS3_AdditionalParams;
public String getLAMIS3_AdditionalParams(){
	return this.LAMIS3_AdditionalParams;
}
public String LAMIS3_Database;
public String getLAMIS3_Database(){
	return this.LAMIS3_Database;
}
public java.lang.String LAMIS3_Password;
public java.lang.String getLAMIS3_Password(){
	return this.LAMIS3_Password;
}
public String LAMIS3_Server;
public String getLAMIS3_Server(){
	return this.LAMIS3_Server;
}
public String LAMIS3_Schema;
public String getLAMIS3_Schema(){
	return this.LAMIS3_Schema;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "6.0";
	private final String jobName = "EAC";
	private final String projectName = "LAMISPLUS_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				EAC.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(EAC.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_facility_records_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_patient_visit_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_facility_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_visit_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_facility_eac3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_visit3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_facility2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_16_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class eac_visitsStruct implements routines.system.IPersistableRow<eac_visitsStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public int facility_id;

				public int getFacility_id () {
					return this.facility_id;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public int archived;

				public int getArchived () {
					return this.archived;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public Double last_viral_load;

				public Double getLast_viral_load () {
					return this.last_viral_load;
				}
				
			    public java.util.Date date_of_last_viral_load;

				public java.util.Date getDate_of_last_viral_load () {
					return this.date_of_last_viral_load;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final eac_visitsStruct other = (eac_visitsStruct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(eac_visitsStruct other) {

		other.id = this.id;
	            other.person_uuid = this.person_uuid;
	            other.facility_id = this.facility_id;
	            other.created_date = this.created_date;
	            other.last_modified_date = this.last_modified_date;
	            other.archived = this.archived;
	            other.created_by = this.created_by;
	            other.last_modified_by = this.last_modified_by;
	            other.last_viral_load = this.last_viral_load;
	            other.date_of_last_viral_load = this.date_of_last_viral_load;
	            other.uuid = this.uuid;
	            other.status = this.status;
	            other.visit_id = this.visit_id;
	            
	}

	public void copyKeysDataTo(eac_visitsStruct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_EAC.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_EAC.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_EAC, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_EAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.person_uuid = readString(dis);
					
			        this.facility_id = dis.readInt();
					
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
			        this.archived = dis.readInt();
					
					this.created_by = readString(dis);
					
					this.last_modified_by = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_viral_load = null;
           				} else {
           			    	this.last_viral_load = dis.readDouble();
           				}
					
					this.date_of_last_viral_load = readDate(dis);
					
					this.uuid = readString(dis);
					
					this.status = readString(dis);
					
					this.visit_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// int
				
		            	dos.writeInt(this.facility_id);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// int
				
		            	dos.writeInt(this.archived);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// Double
				
						if(this.last_viral_load == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.last_viral_load);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_of_last_viral_load,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.visit_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",last_viral_load="+String.valueOf(last_viral_load));
		sb.append(",date_of_last_viral_load="+String.valueOf(date_of_last_viral_load));
		sb.append(",uuid="+uuid);
		sb.append(",status="+status);
		sb.append(",visit_id="+visit_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(eac_visitsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class eac_facility_extractStruct implements routines.system.IPersistableRow<eac_facility_extractStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public int facility_id;

				public int getFacility_id () {
					return this.facility_id;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public int archived;

				public int getArchived () {
					return this.archived;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public Double last_viral_load;

				public Double getLast_viral_load () {
					return this.last_viral_load;
				}
				
			    public java.util.Date date_of_last_viral_load;

				public java.util.Date getDate_of_last_viral_load () {
					return this.date_of_last_viral_load;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public java.util.Date date_eac;

				public java.util.Date getDate_eac () {
					return this.date_eac;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_EAC.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_EAC.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_EAC, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_EAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.person_uuid = readString(dis);
					
			        this.facility_id = dis.readInt();
					
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
			        this.archived = dis.readInt();
					
					this.created_by = readString(dis);
					
					this.last_modified_by = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_viral_load = null;
           				} else {
           			    	this.last_viral_load = dis.readDouble();
           				}
					
					this.date_of_last_viral_load = readDate(dis);
					
					this.uuid = readString(dis);
					
					this.status = readString(dis);
					
					this.date_eac = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// int
				
		            	dos.writeInt(this.facility_id);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// int
				
		            	dos.writeInt(this.archived);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// Double
				
						if(this.last_viral_load == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.last_viral_load);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_of_last_viral_load,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// java.util.Date
				
						writeDate(this.date_eac,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",last_viral_load="+String.valueOf(last_viral_load));
		sb.append(",date_of_last_viral_load="+String.valueOf(date_of_last_viral_load));
		sb.append(",uuid="+uuid);
		sb.append(",status="+status);
		sb.append(",date_eac="+String.valueOf(date_eac));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(eac_facility_extractStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class eac_extractStruct implements routines.system.IPersistableRow<eac_extractStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public Double last_viral_load;

				public Double getLast_viral_load () {
					return this.last_viral_load;
				}
				
			    public java.util.Date date_of_last_viral_load;

				public java.util.Date getDate_of_last_viral_load () {
					return this.date_of_last_viral_load;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public int archived;

				public int getArchived () {
					return this.archived;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public java.util.Date date_eac;

				public java.util.Date getDate_eac () {
					return this.date_eac;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_EAC.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_EAC.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_EAC, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_EAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_by = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_viral_load = null;
           				} else {
           			    	this.last_viral_load = dis.readDouble();
           				}
					
					this.date_of_last_viral_load = readDate(dis);
					
					this.uuid = readString(dis);
					
			        this.archived = dis.readInt();
					
					this.status = readString(dis);
					
					this.date_eac = readDate(dis);
					
					this.person_uuid = readString(dis);
					
					this.datim_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// Double
				
						if(this.last_viral_load == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.last_viral_load);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_of_last_viral_load,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// int
				
		            	dos.writeInt(this.archived);
					
					// String
				
						writeString(this.status,dos);
					
					// java.util.Date
				
						writeDate(this.date_eac,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.datim_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",last_viral_load="+String.valueOf(last_viral_load));
		sb.append(",date_of_last_viral_load="+String.valueOf(date_of_last_viral_load));
		sb.append(",uuid="+uuid);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",status="+status);
		sb.append(",date_eac="+String.valueOf(date_eac));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",datim_id="+datim_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(eac_extractStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public Double last_viral_load;

				public Double getLast_viral_load () {
					return this.last_viral_load;
				}
				
			    public java.util.Date date_of_last_viral_load;

				public java.util.Date getDate_of_last_viral_load () {
					return this.date_of_last_viral_load;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public int archived;

				public int getArchived () {
					return this.archived;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public java.util.Date date_eac;

				public java.util.Date getDate_eac () {
					return this.date_eac;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tDBInput_1Struct other = (after_tDBInput_1Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(after_tDBInput_1Struct other) {

		other.id = this.id;
	            other.created_date = this.created_date;
	            other.last_modified_date = this.last_modified_date;
	            other.created_by = this.created_by;
	            other.last_modified_by = this.last_modified_by;
	            other.last_viral_load = this.last_viral_load;
	            other.date_of_last_viral_load = this.date_of_last_viral_load;
	            other.uuid = this.uuid;
	            other.archived = this.archived;
	            other.status = this.status;
	            other.date_eac = this.date_eac;
	            other.person_uuid = this.person_uuid;
	            other.datim_id = this.datim_id;
	            
	}

	public void copyKeysDataTo(after_tDBInput_1Struct other) {

		other.id = this.id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_EAC.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_EAC.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_EAC, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_EAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_by = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_viral_load = null;
           				} else {
           			    	this.last_viral_load = dis.readDouble();
           				}
					
					this.date_of_last_viral_load = readDate(dis);
					
					this.uuid = readString(dis);
					
			        this.archived = dis.readInt();
					
					this.status = readString(dis);
					
					this.date_eac = readDate(dis);
					
					this.person_uuid = readString(dis);
					
					this.datim_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// Double
				
						if(this.last_viral_load == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.last_viral_load);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_of_last_viral_load,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// int
				
		            	dos.writeInt(this.archived);
					
					// String
				
						writeString(this.status,dos);
					
					// java.util.Date
				
						writeDate(this.date_eac,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.datim_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",last_viral_load="+String.valueOf(last_viral_load));
		sb.append(",date_of_last_viral_load="+String.valueOf(date_of_last_viral_load));
		sb.append(",uuid="+uuid);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",status="+status);
		sb.append(",date_eac="+String.valueOf(date_eac));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",datim_id="+datim_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_2Process(globalMap);
		tDBInput_3Process(globalMap);

		eac_extractStruct eac_extract = new eac_extractStruct();
eac_facility_extractStruct eac_facility_extract = new eac_facility_extractStruct();
eac_visitsStruct eac_visits = new eac_visitsStruct();






	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"eac_visits");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = context.LAMISPlus_Schema;
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("hiv_eac");
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("hiv_eac");
}

        int updateKeyCount_tDBOutput_1 = 1;
        if(updateKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_1 = "jdbc:postgresql://"+context.LAMISPlus_Server+":"+context.LAMISPlus_Port+"/"+context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
    dbUser_tDBOutput_1 = context.LAMISPlus_Login;

	final String decryptedPassword_tDBOutput_1 = context.LAMISPlus_Password; 

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;



int count_tDBOutput_1=0;
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_1 + "\" WHERE \"id\" = ?");
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1 + "\" (\"id\",\"person_uuid\",\"facility_id\",\"created_date\",\"last_modified_date\",\"archived\",\"created_by\",\"last_modified_by\",\"last_viral_load\",\"date_of_last_viral_load\",\"uuid\",\"status\",\"visit_id\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
	    String update_tDBOutput_1 = "UPDATE \"" + tableName_tDBOutput_1 + "\" SET \"id\" = ?,\"person_uuid\" = ?,\"facility_id\" = ?,\"created_date\" = ?,\"last_modified_date\" = ?,\"archived\" = ?,\"created_by\" = ?,\"last_modified_by\" = ?,\"last_viral_load\" = ?,\"date_of_last_viral_load\" = ?,\"uuid\" = ?,\"status\" = ?,\"visit_id\" = ? WHERE \"id\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
	    resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"eac_facility_extract");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<patient_visitStruct> tHash_Lookup_patient_visit = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<patient_visitStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<patient_visitStruct>) 
					globalMap.get( "tHash_Lookup_patient_visit" ))
					;					
					
	

patient_visitStruct patient_visitHashKey = new patient_visitStruct();
patient_visitStruct patient_visitDefault = new patient_visitStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
eac_visitsStruct eac_visits_tmp = new eac_visitsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"eac_extract");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<facility_recordsStruct> tHash_Lookup_facility_records = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<facility_recordsStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<facility_recordsStruct>) 
					globalMap.get( "tHash_Lookup_facility_records" ))
					;					
					
	

facility_recordsStruct facility_recordsHashKey = new facility_recordsStruct();
facility_recordsStruct facility_recordsDefault = new facility_recordsStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
eac_facility_extractStruct eac_facility_extract_tmp = new eac_facility_extractStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.LAMIS3_Login;
				
				
	final String decryptedPassword_tDBInput_1 = context.LAMIS3_Password; 
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
				String url_tDBInput_1 = "jdbc:postgresql://" + context.LAMIS3_Server + ":" + context.LAMIS3_Port + "/" + context.LAMIS3_Database + "?" + context.LAMIS3_AdditionalParams;
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
				conn_tDBInput_1.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT e.id, e.last_modified as created_date, e.last_modified as last_modified_date,\n'ETL' as created_by, 'ETL' as las"
+"t_modified_by, e.last_viral_load,\ne.date_last_viral_load as date_of_last_viral_load, e.uuid, e.archived::INTEGER,\n  CA"
+"SE\n    WHEN date_eac3 is not null THEN 'COMPLETED'\n	WHEN date_eac2 is not null AND date_eac3 is null THEN 'SECOND EAC "
+"COMPLETED'\n	WHEN date_eac1 is not null AND date_eac2 is null AND date_eac3 is null THEN 'FIRST EAC COMPLETED'\n	ELSE\n	"
+"'INCOMPLETE'\n  END \n  AS status,\n   e.date_eac1 date_eac,\n  p.uuid as person_uuid,\nn.datim_id FROM eac e\n    INNER"
+" JOIN patient p ON p.id = e.patient_id\n    INNER JOIN ndr_facility n ON n.id=e.facility_id\nWHERE p.extra->>'art'='true"
+"'";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								eac_extract.id = 0;
							} else {
		                          
            eac_extract.id = rs_tDBInput_1.getInt(1);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								eac_extract.created_date = null;
							} else {
										
			eac_extract.created_date = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 2);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								eac_extract.last_modified_date = null;
							} else {
										
			eac_extract.last_modified_date = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 3);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								eac_extract.created_by = null;
							} else {
	                         		
        	eac_extract.created_by = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								eac_extract.last_modified_by = null;
							} else {
	                         		
        	eac_extract.last_modified_by = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								eac_extract.last_viral_load = null;
							} else {
	                         		
            eac_extract.last_viral_load = rs_tDBInput_1.getDouble(6);
            if(rs_tDBInput_1.wasNull()){
                    eac_extract.last_viral_load = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								eac_extract.date_of_last_viral_load = null;
							} else {
										
			eac_extract.date_of_last_viral_load = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 7);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								eac_extract.uuid = null;
							} else {
	                         		
        	eac_extract.uuid = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								eac_extract.archived = 0;
							} else {
		                          
            eac_extract.archived = rs_tDBInput_1.getInt(9);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								eac_extract.status = null;
							} else {
	                         		
        	eac_extract.status = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								eac_extract.date_eac = null;
							} else {
										
			eac_extract.date_eac = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 11);
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								eac_extract.person_uuid = null;
							} else {
	                         		
        	eac_extract.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								eac_extract.datim_id = null;
							} else {
	                         		
        	eac_extract.datim_id = routines.system.JDBCUtil.getString(rs_tDBInput_1, 13, false);
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"eac_extract");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "facility_records" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopfacility_records = false;
       		  	    	
       		  	    	
 							facility_recordsStruct facility_recordsObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    facility_recordsHashKey.datim_id = eac_extract.datim_id ;
                        		    		

								
		                        	facility_recordsHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_facility_records.lookup( facility_recordsHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_facility_records != null && tHash_Lookup_facility_records.getCount(facility_recordsHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'facility_records' and it contains more one result from keys :  facility_records.datim_id = '" + facility_recordsHashKey.datim_id + "'");
								} // G 071
							

							facility_recordsStruct facility_records = null;
                    		  	 
							   
                    		  	 
	       		  	    	facility_recordsStruct fromLookup_facility_records = null;
							facility_records = facility_recordsDefault;
										 
							
								 
							
							
								if (tHash_Lookup_facility_records !=null && tHash_Lookup_facility_records.hasNext()) { // G 099
								
							
								
								fromLookup_facility_records = tHash_Lookup_facility_records.next();

							
							
								} // G 099
							
							

							if(fromLookup_facility_records != null) {
								facility_records = fromLookup_facility_records;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

eac_facility_extract = null;


// # Output table : 'eac_facility_extract'
eac_facility_extract_tmp.id = eac_extract.id ;
eac_facility_extract_tmp.person_uuid = eac_extract.person_uuid ;
eac_facility_extract_tmp.facility_id = facility_records.id ;
eac_facility_extract_tmp.created_date = eac_extract.created_date;
eac_facility_extract_tmp.last_modified_date = eac_extract.last_modified_date;
eac_facility_extract_tmp.archived = eac_extract.archived ;
eac_facility_extract_tmp.created_by = eac_extract.created_by;
eac_facility_extract_tmp.last_modified_by = eac_extract.last_modified_by;
eac_facility_extract_tmp.last_viral_load = eac_extract.last_viral_load ;
eac_facility_extract_tmp.date_of_last_viral_load = eac_extract.date_of_last_viral_load ;
eac_facility_extract_tmp.uuid = eac_extract.uuid ;
eac_facility_extract_tmp.status = eac_extract.status ;
eac_facility_extract_tmp.date_eac = eac_extract.date_eac ;
eac_facility_extract = eac_facility_extract_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "eac_facility_extract"
if(eac_facility_extract != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"eac_facility_extract");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "patient_visit" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooppatient_visit = false;
       		  	    	
       		  	    	
 							patient_visitStruct patient_visitObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    patient_visitHashKey.visit_start_date = eac_facility_extract.date_eac  == null ? null : new java.util.Date(eac_facility_extract.date_eac .getTime());
                        		    		
                        		    		    patient_visitHashKey.person_uuid = eac_facility_extract.person_uuid ;
                        		    		

								
		                        	patient_visitHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_patient_visit.lookup( patient_visitHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_patient_visit != null && tHash_Lookup_patient_visit.getCount(patient_visitHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'patient_visit' and it contains more one result from keys :  patient_visit.visit_start_date = '" + patient_visitHashKey.visit_start_date + "', patient_visit.person_uuid = '" + patient_visitHashKey.person_uuid + "'");
								} // G 071
							

							patient_visitStruct patient_visit = null;
                    		  	 
							   
                    		  	 
	       		  	    	patient_visitStruct fromLookup_patient_visit = null;
							patient_visit = patient_visitDefault;
										 
							
								 
							
							
								if (tHash_Lookup_patient_visit !=null && tHash_Lookup_patient_visit.hasNext()) { // G 099
								
							
								
								fromLookup_patient_visit = tHash_Lookup_patient_visit.next();

							
							
								} // G 099
							
							

							if(fromLookup_patient_visit != null) {
								patient_visit = fromLookup_patient_visit;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

eac_visits = null;


// # Output table : 'eac_visits'
eac_visits_tmp.id = eac_facility_extract.id ;
eac_visits_tmp.person_uuid = eac_facility_extract.person_uuid ;
eac_visits_tmp.facility_id = eac_facility_extract.facility_id ;
eac_visits_tmp.created_date = eac_facility_extract.created_date ;
eac_visits_tmp.last_modified_date = eac_facility_extract.last_modified_date ;
eac_visits_tmp.archived = eac_facility_extract.archived ;
eac_visits_tmp.created_by = eac_facility_extract.created_by ;
eac_visits_tmp.last_modified_by = eac_facility_extract.last_modified_by ;
eac_visits_tmp.last_viral_load = eac_facility_extract.last_viral_load ;
eac_visits_tmp.date_of_last_viral_load = eac_facility_extract.date_of_last_viral_load ;
eac_visits_tmp.uuid = eac_facility_extract.uuid ;
eac_visits_tmp.status = eac_facility_extract.status ;
eac_visits_tmp.visit_id = patient_visit.visit_id ;
eac_visits = eac_visits_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "eac_visits"
if(eac_visits != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"eac_visits");
					}
					



        whetherReject_tDBOutput_1 = false;
                    pstmt_tDBOutput_1.setInt(1, eac_visits.id);

            int checkCount_tDBOutput_1 = -1;
            try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
                while(rs_tDBOutput_1.next()) {
                    checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
                }
            }
            if(checkCount_tDBOutput_1 > 0) {
                        pstmtUpdate_tDBOutput_1.setInt(1, eac_visits.id);

                        if(eac_visits.person_uuid == null) {
pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(2, eac_visits.person_uuid);
}

                        pstmtUpdate_tDBOutput_1.setInt(3, eac_visits.facility_id);

                        if(eac_visits.created_date != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(4, new java.sql.Timestamp(eac_visits.created_date.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(4, java.sql.Types.TIMESTAMP);
}

                        if(eac_visits.last_modified_date != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(5, new java.sql.Timestamp(eac_visits.last_modified_date.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(5, java.sql.Types.TIMESTAMP);
}

                        pstmtUpdate_tDBOutput_1.setInt(6, eac_visits.archived);

                        if(eac_visits.created_by == null) {
pstmtUpdate_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(7, eac_visits.created_by);
}

                        if(eac_visits.last_modified_by == null) {
pstmtUpdate_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(8, eac_visits.last_modified_by);
}

                        if(eac_visits.last_viral_load == null) {
pstmtUpdate_tDBOutput_1.setNull(9, java.sql.Types.DOUBLE);
} else {pstmtUpdate_tDBOutput_1.setDouble(9, eac_visits.last_viral_load);
}

                        if(eac_visits.date_of_last_viral_load != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(10, new java.sql.Timestamp(eac_visits.date_of_last_viral_load.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(10, java.sql.Types.TIMESTAMP);
}

                        if(eac_visits.uuid == null) {
pstmtUpdate_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(11, eac_visits.uuid);
}

                        if(eac_visits.status == null) {
pstmtUpdate_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(12, eac_visits.status);
}

                        if(eac_visits.visit_id == null) {
pstmtUpdate_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(13, eac_visits.visit_id);
}

                        pstmtUpdate_tDBOutput_1.setInt(14 + count_tDBOutput_1, eac_visits.id);

                try {
					
                    updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1 + pstmtUpdate_tDBOutput_1.executeUpdate();
                    nb_line_tDBOutput_1++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_1 = true;
                        nb_line_tDBOutput_1++;
                            System.err.print(e.getMessage());
                }
            } else {
                        pstmtInsert_tDBOutput_1.setInt(1, eac_visits.id);

                        if(eac_visits.person_uuid == null) {
pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(2, eac_visits.person_uuid);
}

                        pstmtInsert_tDBOutput_1.setInt(3, eac_visits.facility_id);

                        if(eac_visits.created_date != null) {
pstmtInsert_tDBOutput_1.setTimestamp(4, new java.sql.Timestamp(eac_visits.created_date.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.TIMESTAMP);
}

                        if(eac_visits.last_modified_date != null) {
pstmtInsert_tDBOutput_1.setTimestamp(5, new java.sql.Timestamp(eac_visits.last_modified_date.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(5, java.sql.Types.TIMESTAMP);
}

                        pstmtInsert_tDBOutput_1.setInt(6, eac_visits.archived);

                        if(eac_visits.created_by == null) {
pstmtInsert_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(7, eac_visits.created_by);
}

                        if(eac_visits.last_modified_by == null) {
pstmtInsert_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(8, eac_visits.last_modified_by);
}

                        if(eac_visits.last_viral_load == null) {
pstmtInsert_tDBOutput_1.setNull(9, java.sql.Types.DOUBLE);
} else {pstmtInsert_tDBOutput_1.setDouble(9, eac_visits.last_viral_load);
}

                        if(eac_visits.date_of_last_viral_load != null) {
pstmtInsert_tDBOutput_1.setTimestamp(10, new java.sql.Timestamp(eac_visits.date_of_last_viral_load.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(10, java.sql.Types.TIMESTAMP);
}

                        if(eac_visits.uuid == null) {
pstmtInsert_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(11, eac_visits.uuid);
}

                        if(eac_visits.status == null) {
pstmtInsert_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(12, eac_visits.status);
}

                        if(eac_visits.visit_id == null) {
pstmtInsert_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(13, eac_visits.visit_id);
}

                try {
					
                    insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1 + pstmtInsert_tDBOutput_1.executeUpdate();
                    nb_line_tDBOutput_1++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_1 = true;
                        nb_line_tDBOutput_1++;
                            System.err.print(e.getMessage());
                }
            }
            if(!whetherReject_tDBOutput_1) {
            }
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                	conn_tDBOutput_1.commit();
                	
                	commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "eac_visits"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "eac_facility_extract"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
	if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
		
			conn_tDBInput_1.commit();
			
		
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());

   			if (globalMap.get("tDBInput_1_NB_LINE") != null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				tJava_1Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}



/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_facility_records != null) {
						tHash_Lookup_facility_records.endGet();
					}
					globalMap.remove( "tHash_Lookup_facility_records" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"eac_extract");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_patient_visit != null) {
						tHash_Lookup_patient_visit.endGet();
					}
					globalMap.remove( "tHash_Lookup_patient_visit" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"eac_facility_extract");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



        if(pstmtUpdate_tDBOutput_1 != null){
            pstmtUpdate_tDBOutput_1.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_1");
        }
        if(pstmtInsert_tDBOutput_1 != null){
            pstmtInsert_tDBOutput_1.close();
            resourceMap.remove("pstmtInsert_tDBOutput_1");
        }
        if(pstmt_tDBOutput_1 != null) {
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
			
			conn_tDBOutput_1.commit();
			
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"eac_visits");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tJava_10Process(globalMap);



/**
 * [tDBOutput_1 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tDBInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_patient_visit"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_facility_records"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
                if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_1")) != null) {
                    pstmtUpdateToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
                if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_1")) != null) {
                    pstmtInsertToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_10", false);
		start_Hash.put("tJava_10", System.currentTimeMillis());
		
	
	currentComponent="tJava_10";

	
		int tos_count_tJava_10 = 0;
		


int totalMigrated = globalMap.get("tDBOutput_1_NB_LINE_UPDATED") != null ? (Integer)globalMap.get("tDBOutput_1_NB_LINE_UPDATED") : 0;

System.out.println("Total HIV_EAC already migrated "+totalMigrated);

System.out.println("Total new records migrated - "+globalMap.get("tDBOutput_1_NB_LINE_INSERTED"));
if(globalMap.get("tDBOutput_1_ERROR_MESSAGE") != null){
System.out.println("Migration Error - "+globalMap.get("tDBOutput_1_ERROR_MESSAGE"));
}
System.out.println("Total erroneous records not migrated - "+globalMap.get("tFileOutputDelimited_1_NB_LINE"));
System.out.println("*************EAC 1 SESSION MIGRATION REPORT END*****************");
System.out.println();

 



/**
 * [tJava_10 begin ] stop
 */
	
	/**
	 * [tJava_10 main ] start
	 */

	

	
	
	currentComponent="tJava_10";

	

 


	tos_count_tJava_10++;

/**
 * [tJava_10 main ] stop
 */
	
	/**
	 * [tJava_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_10";

	

 



/**
 * [tJava_10 process_data_begin ] stop
 */
	
	/**
	 * [tJava_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_10";

	

 



/**
 * [tJava_10 process_data_end ] stop
 */
	
	/**
	 * [tJava_10 end ] start
	 */

	

	
	
	currentComponent="tJava_10";

	

 

ok_Hash.put("tJava_10", true);
end_Hash.put("tJava_10", System.currentTimeMillis());




/**
 * [tJava_10 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_10 finally ] start
	 */

	

	
	
	currentComponent="tJava_10";

	

 



/**
 * [tJava_10 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_10_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


System.out.println("*****************************************************************");
System.out.println("***********EAC MIGRATION REPORT START*****************");
java.time.LocalDateTime startTime = java.time.LocalDateTime.now();
globalMap.put("startTime", startTime);
System.out.println("Start time - "+ startTime);
System.out.println();
System.out.println("Total EAC records fetched from LAMIS3 eac - "+globalMap.get("tDBInput_1_NB_LINE"));
System.out.println();
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class eac1_visitStruct implements routines.system.IPersistableRow<eac1_visitStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String eac_id;

				public String getEac_id () {
					return this.eac_id;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public java.util.Date eac_session_date;

				public java.util.Date getEac_session_date () {
					return this.eac_session_date;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final eac1_visitStruct other = (eac1_visitStruct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(eac1_visitStruct other) {

		other.id = this.id;
	            other.created_date = this.created_date;
	            other.last_modified_date = this.last_modified_date;
	            other.created_by = this.created_by;
	            other.last_modified_by = this.last_modified_by;
	            other.eac_id = this.eac_id;
	            other.archived = this.archived;
	            other.status = this.status;
	            other.uuid = this.uuid;
	            other.eac_session_date = this.eac_session_date;
	            other.person_uuid = this.person_uuid;
	            other.visit_id = this.visit_id;
	            
	}

	public void copyKeysDataTo(eac1_visitStruct other) {

		other.id = this.id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_EAC.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_EAC.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_EAC, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_EAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_by = readString(dis);
					
					this.eac_id = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.status = readString(dis);
					
					this.uuid = readString(dis);
					
					this.eac_session_date = readDate(dis);
					
					this.person_uuid = readString(dis);
					
					this.visit_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.eac_id,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// java.util.Date
				
						writeDate(this.eac_session_date,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.visit_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",eac_id="+eac_id);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",status="+status);
		sb.append(",uuid="+uuid);
		sb.append(",eac_session_date="+String.valueOf(eac_session_date));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",visit_id="+visit_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(eac1_visitStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class eac1_vsistStruct implements routines.system.IPersistableRow<eac1_vsistStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String eac_id;

				public String getEac_id () {
					return this.eac_id;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public java.util.Date eac_session_date;

				public java.util.Date getEac_session_date () {
					return this.eac_session_date;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public int facility_id;

				public int getFacility_id () {
					return this.facility_id;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_EAC.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_EAC.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_EAC, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_EAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_by = readString(dis);
					
					this.eac_id = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.status = readString(dis);
					
					this.uuid = readString(dis);
					
					this.eac_session_date = readDate(dis);
					
					this.person_uuid = readString(dis);
					
			        this.facility_id = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.eac_id,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// java.util.Date
				
						writeDate(this.eac_session_date,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// int
				
		            	dos.writeInt(this.facility_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",eac_id="+eac_id);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",status="+status);
		sb.append(",uuid="+uuid);
		sb.append(",eac_session_date="+String.valueOf(eac_session_date));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",facility_id="+String.valueOf(facility_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(eac1_vsistStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class eac1_extractStruct implements routines.system.IPersistableRow<eac1_extractStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String eac_id;

				public String getEac_id () {
					return this.eac_id;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public java.util.Date eac_session_date;

				public java.util.Date getEac_session_date () {
					return this.eac_session_date;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_EAC.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_EAC.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_EAC, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_EAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_by = readString(dis);
					
					this.eac_id = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.status = readString(dis);
					
					this.uuid = readString(dis);
					
					this.eac_session_date = readDate(dis);
					
					this.person_uuid = readString(dis);
					
					this.datim_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.eac_id,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// java.util.Date
				
						writeDate(this.eac_session_date,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.datim_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",eac_id="+eac_id);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",status="+status);
		sb.append(",uuid="+uuid);
		sb.append(",eac_session_date="+String.valueOf(eac_session_date));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",datim_id="+datim_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(eac1_extractStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_4Struct implements routines.system.IPersistableRow<after_tDBInput_4Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String eac_id;

				public String getEac_id () {
					return this.eac_id;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public java.util.Date eac_session_date;

				public java.util.Date getEac_session_date () {
					return this.eac_session_date;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tDBInput_4Struct other = (after_tDBInput_4Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(after_tDBInput_4Struct other) {

		other.id = this.id;
	            other.created_date = this.created_date;
	            other.last_modified_date = this.last_modified_date;
	            other.created_by = this.created_by;
	            other.last_modified_by = this.last_modified_by;
	            other.eac_id = this.eac_id;
	            other.archived = this.archived;
	            other.status = this.status;
	            other.uuid = this.uuid;
	            other.eac_session_date = this.eac_session_date;
	            other.person_uuid = this.person_uuid;
	            other.datim_id = this.datim_id;
	            
	}

	public void copyKeysDataTo(after_tDBInput_4Struct other) {

		other.id = this.id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_EAC.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_EAC.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_EAC, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_EAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_by = readString(dis);
					
					this.eac_id = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.status = readString(dis);
					
					this.uuid = readString(dis);
					
					this.eac_session_date = readDate(dis);
					
					this.person_uuid = readString(dis);
					
					this.datim_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.eac_id,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// java.util.Date
				
						writeDate(this.eac_session_date,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.datim_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",eac_id="+eac_id);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",status="+status);
		sb.append(",uuid="+uuid);
		sb.append(",eac_session_date="+String.valueOf(eac_session_date));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",datim_id="+datim_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_6Process(globalMap);
		tDBInput_5Process(globalMap);

		eac1_extractStruct eac1_extract = new eac1_extractStruct();
eac1_vsistStruct eac1_vsist = new eac1_vsistStruct();
eac1_visitStruct eac1_visit = new eac1_visitStruct();






	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"eac1_visit");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = context.LAMISPlus_Schema;
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("hiv_eac_session");
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("hiv_eac_session");
}

        int updateKeyCount_tDBOutput_2 = 1;
        if(updateKeyCount_tDBOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_2 = "jdbc:postgresql://"+context.LAMISPlus_Server+":"+context.LAMISPlus_Port+"/"+context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
    dbUser_tDBOutput_2 = context.LAMISPlus_Login;

	final String decryptedPassword_tDBOutput_2 = context.LAMISPlus_Password; 

    String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;

    conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2,dbUser_tDBOutput_2,dbPwd_tDBOutput_2);
	
	resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
        conn_tDBOutput_2.setAutoCommit(false);
        int commitEvery_tDBOutput_2 = 10000;
        int commitCounter_tDBOutput_2 = 0;



int count_tDBOutput_2=0;
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_2 + "\" WHERE \"id\" = ?");
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2 + "\" (\"id\",\"created_date\",\"last_modified_date\",\"created_by\",\"last_modified_by\",\"eac_id\",\"archived\",\"status\",\"uuid\",\"eac_session_date\",\"person_uuid\",\"visit_id\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmtInsert_tDBOutput_2", pstmtInsert_tDBOutput_2);
	    String update_tDBOutput_2 = "UPDATE \"" + tableName_tDBOutput_2 + "\" SET \"id\" = ?,\"created_date\" = ?,\"last_modified_date\" = ?,\"created_by\" = ?,\"last_modified_by\" = ?,\"eac_id\" = ?,\"archived\" = ?,\"status\" = ?,\"uuid\" = ?,\"eac_session_date\" = ?,\"person_uuid\" = ?,\"visit_id\" = ? WHERE \"id\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(update_tDBOutput_2);
	    resourceMap.put("pstmtUpdate_tDBOutput_2", pstmtUpdate_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"eac1_vsist");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<visitStruct> tHash_Lookup_visit = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<visitStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<visitStruct>) 
					globalMap.get( "tHash_Lookup_visit" ))
					;					
					
	

visitStruct visitHashKey = new visitStruct();
visitStruct visitDefault = new visitStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
eac1_visitStruct eac1_visit_tmp = new eac1_visitStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"eac1_extract");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<facilityStruct> tHash_Lookup_facility = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<facilityStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<facilityStruct>) 
					globalMap.get( "tHash_Lookup_facility" ))
					;					
					
	

facilityStruct facilityHashKey = new facilityStruct();
facilityStruct facilityDefault = new facilityStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
eac1_vsistStruct eac1_vsist_tmp = new eac1_vsistStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = context.LAMIS3_Login;
				
				
	final String decryptedPassword_tDBInput_4 = context.LAMIS3_Password; 
				
				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
				
				String url_tDBInput_4 = "jdbc:postgresql://" + context.LAMIS3_Server + ":" + context.LAMIS3_Port + "/" + context.LAMIS3_Database + "?" + context.LAMIS3_AdditionalParams;
				
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4,dbUser_tDBInput_4,dbPwd_tDBInput_4);
		        
				conn_tDBInput_4.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT e.id, e.last_modified as created_date, e.last_modified as last_modified_date,\n'ETL' as created_by, 'ETL' as las"
+"t_modified_by, \ne.uuid as eac_id, e.archived::INTEGER,\n'FIRST EAC' as status, '' as uuid, e.date_eac1 eac_session_date"
+",\n  p.uuid as person_uuid,\nn.datim_id FROM eac e\n    INNER JOIN patient p ON p.id = e.patient_id\n    INNER JOIN ndr_"
+"facility n ON n.id=e.facility_id\n	WHERE e.date_eac1 is not null AND  p.extra->>'art'='true'";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								eac1_extract.id = 0;
							} else {
		                          
            eac1_extract.id = rs_tDBInput_4.getInt(1);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								eac1_extract.created_date = null;
							} else {
										
			eac1_extract.created_date = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 2);
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								eac1_extract.last_modified_date = null;
							} else {
										
			eac1_extract.last_modified_date = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 3);
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								eac1_extract.created_by = null;
							} else {
	                         		
        	eac1_extract.created_by = routines.system.JDBCUtil.getString(rs_tDBInput_4, 4, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 5) {
								eac1_extract.last_modified_by = null;
							} else {
	                         		
        	eac1_extract.last_modified_by = routines.system.JDBCUtil.getString(rs_tDBInput_4, 5, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 6) {
								eac1_extract.eac_id = null;
							} else {
	                         		
        	eac1_extract.eac_id = routines.system.JDBCUtil.getString(rs_tDBInput_4, 6, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 7) {
								eac1_extract.archived = null;
							} else {
		                          
            eac1_extract.archived = rs_tDBInput_4.getInt(7);
            if(rs_tDBInput_4.wasNull()){
                    eac1_extract.archived = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 8) {
								eac1_extract.status = null;
							} else {
	                         		
        	eac1_extract.status = routines.system.JDBCUtil.getString(rs_tDBInput_4, 8, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 9) {
								eac1_extract.uuid = null;
							} else {
	                         		
        	eac1_extract.uuid = routines.system.JDBCUtil.getString(rs_tDBInput_4, 9, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 10) {
								eac1_extract.eac_session_date = null;
							} else {
										
			eac1_extract.eac_session_date = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 10);
		                    }
							if(colQtyInRs_tDBInput_4 < 11) {
								eac1_extract.person_uuid = null;
							} else {
	                         		
        	eac1_extract.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_4, 11, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 12) {
								eac1_extract.datim_id = null;
							} else {
	                         		
        	eac1_extract.datim_id = routines.system.JDBCUtil.getString(rs_tDBInput_4, 12, false);
		                    }
					


 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"eac1_extract");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "facility" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopfacility = false;
       		  	    	
       		  	    	
 							facilityStruct facilityObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    facilityHashKey.datim_id = eac1_extract.datim_id ;
                        		    		

								
		                        	facilityHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_facility.lookup( facilityHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_facility != null && tHash_Lookup_facility.getCount(facilityHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'facility' and it contains more one result from keys :  facility.datim_id = '" + facilityHashKey.datim_id + "'");
								} // G 071
							

							facilityStruct facility = null;
                    		  	 
							   
                    		  	 
	       		  	    	facilityStruct fromLookup_facility = null;
							facility = facilityDefault;
										 
							
								 
							
							
								if (tHash_Lookup_facility !=null && tHash_Lookup_facility.hasNext()) { // G 099
								
							
								
								fromLookup_facility = tHash_Lookup_facility.next();

							
							
								} // G 099
							
							

							if(fromLookup_facility != null) {
								facility = fromLookup_facility;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

eac1_vsist = null;


// # Output table : 'eac1_vsist'
eac1_vsist_tmp.id = Numeric.sequence("s1",1,1) ;
eac1_vsist_tmp.created_date = eac1_extract.created_date ;
eac1_vsist_tmp.last_modified_date = eac1_extract.last_modified_date ;
eac1_vsist_tmp.created_by = eac1_extract.created_by ;
eac1_vsist_tmp.last_modified_by = eac1_extract.last_modified_by ;
eac1_vsist_tmp.eac_id = eac1_extract.eac_id ;
eac1_vsist_tmp.archived = eac1_extract.archived ;
eac1_vsist_tmp.status = eac1_extract.status ;
eac1_vsist_tmp.uuid = java.util.UUID.randomUUID().toString() ;
eac1_vsist_tmp.eac_session_date = eac1_extract.eac_session_date ;
eac1_vsist_tmp.person_uuid = eac1_extract.person_uuid ;
eac1_vsist_tmp.facility_id = facility.id ;
eac1_vsist = eac1_vsist_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "eac1_vsist"
if(eac1_vsist != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"eac1_vsist");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "visit" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopvisit = false;
       		  	    	
       		  	    	
 							visitStruct visitObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    visitHashKey.visit_start_date = eac1_vsist.eac_session_date  == null ? null : new java.util.Date(eac1_vsist.eac_session_date .getTime());
                        		    		
                        		    		    visitHashKey.person_uuid = eac1_vsist.person_uuid ;
                        		    		

								
		                        	visitHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_visit.lookup( visitHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_visit != null && tHash_Lookup_visit.getCount(visitHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'visit' and it contains more one result from keys :  visit.visit_start_date = '" + visitHashKey.visit_start_date + "', visit.person_uuid = '" + visitHashKey.person_uuid + "'");
								} // G 071
							

							visitStruct visit = null;
                    		  	 
							   
                    		  	 
	       		  	    	visitStruct fromLookup_visit = null;
							visit = visitDefault;
										 
							
								 
							
							
								if (tHash_Lookup_visit !=null && tHash_Lookup_visit.hasNext()) { // G 099
								
							
								
								fromLookup_visit = tHash_Lookup_visit.next();

							
							
								} // G 099
							
							

							if(fromLookup_visit != null) {
								visit = fromLookup_visit;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

eac1_visit = null;


// # Output table : 'eac1_visit'
eac1_visit_tmp.id = eac1_vsist.id ;
eac1_visit_tmp.created_date = eac1_vsist.created_date ;
eac1_visit_tmp.last_modified_date = eac1_vsist.last_modified_date ;
eac1_visit_tmp.created_by = eac1_vsist.created_by ;
eac1_visit_tmp.last_modified_by = eac1_vsist.last_modified_by ;
eac1_visit_tmp.eac_id = eac1_vsist.eac_id ;
eac1_visit_tmp.archived = eac1_vsist.archived ;
eac1_visit_tmp.status = eac1_vsist.status ;
eac1_visit_tmp.uuid = eac1_vsist.uuid ;
eac1_visit_tmp.eac_session_date = eac1_vsist.eac_session_date ;
eac1_visit_tmp.person_uuid = eac1_vsist.person_uuid ;
eac1_visit_tmp.visit_id = visit.visit_id ;
eac1_visit = eac1_visit_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "eac1_visit"
if(eac1_visit != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"eac1_visit");
					}
					



        whetherReject_tDBOutput_2 = false;
                    pstmt_tDBOutput_2.setInt(1, eac1_visit.id);

            int checkCount_tDBOutput_2 = -1;
            try (java.sql.ResultSet rs_tDBOutput_2 = pstmt_tDBOutput_2.executeQuery()) {
                while(rs_tDBOutput_2.next()) {
                    checkCount_tDBOutput_2 = rs_tDBOutput_2.getInt(1);
                }
            }
            if(checkCount_tDBOutput_2 > 0) {
                        pstmtUpdate_tDBOutput_2.setInt(1, eac1_visit.id);

                        if(eac1_visit.created_date != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(2, new java.sql.Timestamp(eac1_visit.created_date.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(2, java.sql.Types.TIMESTAMP);
}

                        if(eac1_visit.last_modified_date != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(3, new java.sql.Timestamp(eac1_visit.last_modified_date.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(3, java.sql.Types.TIMESTAMP);
}

                        if(eac1_visit.created_by == null) {
pstmtUpdate_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(4, eac1_visit.created_by);
}

                        if(eac1_visit.last_modified_by == null) {
pstmtUpdate_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(5, eac1_visit.last_modified_by);
}

                        if(eac1_visit.eac_id == null) {
pstmtUpdate_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(6, eac1_visit.eac_id);
}

                        if(eac1_visit.archived == null) {
pstmtUpdate_tDBOutput_2.setNull(7, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setInt(7, eac1_visit.archived);
}

                        if(eac1_visit.status == null) {
pstmtUpdate_tDBOutput_2.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(8, eac1_visit.status);
}

                        if(eac1_visit.uuid == null) {
pstmtUpdate_tDBOutput_2.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(9, eac1_visit.uuid);
}

                        if(eac1_visit.eac_session_date != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(10, new java.sql.Timestamp(eac1_visit.eac_session_date.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(10, java.sql.Types.TIMESTAMP);
}

                        if(eac1_visit.person_uuid == null) {
pstmtUpdate_tDBOutput_2.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(11, eac1_visit.person_uuid);
}

                        if(eac1_visit.visit_id == null) {
pstmtUpdate_tDBOutput_2.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(12, eac1_visit.visit_id);
}

                        pstmtUpdate_tDBOutput_2.setInt(13 + count_tDBOutput_2, eac1_visit.id);

                try {
					
                    updatedCount_tDBOutput_2 = updatedCount_tDBOutput_2 + pstmtUpdate_tDBOutput_2.executeUpdate();
                    nb_line_tDBOutput_2++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_2 = true;
                        nb_line_tDBOutput_2++;
                            System.err.print(e.getMessage());
                }
            } else {
                        pstmtInsert_tDBOutput_2.setInt(1, eac1_visit.id);

                        if(eac1_visit.created_date != null) {
pstmtInsert_tDBOutput_2.setTimestamp(2, new java.sql.Timestamp(eac1_visit.created_date.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(2, java.sql.Types.TIMESTAMP);
}

                        if(eac1_visit.last_modified_date != null) {
pstmtInsert_tDBOutput_2.setTimestamp(3, new java.sql.Timestamp(eac1_visit.last_modified_date.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(3, java.sql.Types.TIMESTAMP);
}

                        if(eac1_visit.created_by == null) {
pstmtInsert_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(4, eac1_visit.created_by);
}

                        if(eac1_visit.last_modified_by == null) {
pstmtInsert_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(5, eac1_visit.last_modified_by);
}

                        if(eac1_visit.eac_id == null) {
pstmtInsert_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(6, eac1_visit.eac_id);
}

                        if(eac1_visit.archived == null) {
pstmtInsert_tDBOutput_2.setNull(7, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setInt(7, eac1_visit.archived);
}

                        if(eac1_visit.status == null) {
pstmtInsert_tDBOutput_2.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(8, eac1_visit.status);
}

                        if(eac1_visit.uuid == null) {
pstmtInsert_tDBOutput_2.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(9, eac1_visit.uuid);
}

                        if(eac1_visit.eac_session_date != null) {
pstmtInsert_tDBOutput_2.setTimestamp(10, new java.sql.Timestamp(eac1_visit.eac_session_date.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(10, java.sql.Types.TIMESTAMP);
}

                        if(eac1_visit.person_uuid == null) {
pstmtInsert_tDBOutput_2.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(11, eac1_visit.person_uuid);
}

                        if(eac1_visit.visit_id == null) {
pstmtInsert_tDBOutput_2.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(12, eac1_visit.visit_id);
}

                try {
					
                    insertedCount_tDBOutput_2 = insertedCount_tDBOutput_2 + pstmtInsert_tDBOutput_2.executeUpdate();
                    nb_line_tDBOutput_2++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_2 = true;
                        nb_line_tDBOutput_2++;
                            System.err.print(e.getMessage());
                }
            }
            if(!whetherReject_tDBOutput_2) {
            }
    		    commitCounter_tDBOutput_2++;
                if(commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
                	conn_tDBOutput_2.commit();
                	
                	commitCounter_tDBOutput_2=0;
                }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "eac1_visit"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "eac1_vsist"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
	if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
		
			conn_tDBInput_4.commit();
			
		
			conn_tDBInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);
 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());

   			if (globalMap.get("tDBInput_4_NB_LINE") != null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				tJava_3Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}



/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_facility != null) {
						tHash_Lookup_facility.endGet();
					}
					globalMap.remove( "tHash_Lookup_facility" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"eac1_extract");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_visit != null) {
						tHash_Lookup_visit.endGet();
					}
					globalMap.remove( "tHash_Lookup_visit" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"eac1_vsist");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



        if(pstmtUpdate_tDBOutput_2 != null){
            pstmtUpdate_tDBOutput_2.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_2");
        }
        if(pstmtInsert_tDBOutput_2 != null){
            pstmtInsert_tDBOutput_2.close();
            resourceMap.remove("pstmtInsert_tDBOutput_2");
        }
        if(pstmt_tDBOutput_2 != null) {
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);
			
			conn_tDBOutput_2.commit();
			
		
    	conn_tDBOutput_2 .close();
    	
    	resourceMap.put("finish_tDBOutput_2", true);
    	

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"eac1_visit");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tJava_9Process(globalMap);



/**
 * [tDBOutput_2 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBInput_10Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_visit"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_facility"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_2 = null;
                if ((pstmtUpdateToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_2")) != null) {
                    pstmtUpdateToClose_tDBOutput_2.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_2 = null;
                if ((pstmtInsertToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_2")) != null) {
                    pstmtInsertToClose_tDBOutput_2.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_2") == null){
            java.sql.Connection ctn_tDBOutput_2 = null;
            if((ctn_tDBOutput_2 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_2")) != null){
                try {
                    ctn_tDBOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_2) {
                    String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :" + sqlEx_tDBOutput_2.getMessage();
                    System.err.println(errorMessage_tDBOutput_2);
                }
            }
        }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	

public void tJava_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_9", false);
		start_Hash.put("tJava_9", System.currentTimeMillis());
		
	
	currentComponent="tJava_9";

	
		int tos_count_tJava_9 = 0;
		


int totalMigrated = globalMap.get("tDBOutput_2_NB_LINE_UPDATED") != null ? (Integer)globalMap.get("tDBOutput_2_NB_LINE_UPDATED") : 0;

System.out.println("Total EAC 1 session already migrated "+totalMigrated);

System.out.println("Total new records migrated - "+globalMap.get("tDBOutput_2_NB_LINE_INSERTED"));

int eacCount = totalMigrated == 0 ? (Integer)globalMap.get("tDBOutput_2_NB_LINE_INSERTED") : totalMigrated;

globalMap.put("eacCount", eacCount);

if(globalMap.get("tDBOutput_2_ERROR_MESSAGE") != null){
System.out.println("Migration Error - "+globalMap.get("tDBOutput_2_ERROR_MESSAGE"));
}
System.out.println("Total erroneous records not migrated - "+globalMap.get("tFileOutputDelimited_2_NB_LINE"));
System.out.println("*************EAC 1 SESSION MIGRATION REPORT END*****************");
System.out.println();
 



/**
 * [tJava_9 begin ] stop
 */
	
	/**
	 * [tJava_9 main ] start
	 */

	

	
	
	currentComponent="tJava_9";

	

 


	tos_count_tJava_9++;

/**
 * [tJava_9 main ] stop
 */
	
	/**
	 * [tJava_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_9";

	

 



/**
 * [tJava_9 process_data_begin ] stop
 */
	
	/**
	 * [tJava_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_9";

	

 



/**
 * [tJava_9 process_data_end ] stop
 */
	
	/**
	 * [tJava_9 end ] start
	 */

	

	
	
	currentComponent="tJava_9";

	

 

ok_Hash.put("tJava_9", true);
end_Hash.put("tJava_9", System.currentTimeMillis());




/**
 * [tJava_9 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_9 finally ] start
	 */

	

	
	
	currentComponent="tJava_9";

	

 



/**
 * [tJava_9 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_9_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfeac2_visitStruct implements routines.system.IPersistableRow<copyOfeac2_visitStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String eac_id;

				public String getEac_id () {
					return this.eac_id;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public java.util.Date eac_session_date;

				public java.util.Date getEac_session_date () {
					return this.eac_session_date;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public int facility_id;

				public int getFacility_id () {
					return this.facility_id;
				}
				
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final copyOfeac2_visitStruct other = (copyOfeac2_visitStruct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(copyOfeac2_visitStruct other) {

		other.id = this.id;
	            other.created_date = this.created_date;
	            other.last_modified_date = this.last_modified_date;
	            other.created_by = this.created_by;
	            other.last_modified_by = this.last_modified_by;
	            other.eac_id = this.eac_id;
	            other.archived = this.archived;
	            other.status = this.status;
	            other.uuid = this.uuid;
	            other.eac_session_date = this.eac_session_date;
	            other.person_uuid = this.person_uuid;
	            other.facility_id = this.facility_id;
	            other.visit_id = this.visit_id;
	            
	}

	public void copyKeysDataTo(copyOfeac2_visitStruct other) {

		other.id = this.id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_EAC.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_EAC.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_EAC, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_EAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_by = readString(dis);
					
					this.eac_id = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.status = readString(dis);
					
					this.uuid = readString(dis);
					
					this.eac_session_date = readDate(dis);
					
					this.person_uuid = readString(dis);
					
			        this.facility_id = dis.readInt();
					
					this.visit_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.eac_id,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// java.util.Date
				
						writeDate(this.eac_session_date,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// int
				
		            	dos.writeInt(this.facility_id);
					
					// String
				
						writeString(this.visit_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",eac_id="+eac_id);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",status="+status);
		sb.append(",uuid="+uuid);
		sb.append(",eac_session_date="+String.valueOf(eac_session_date));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",visit_id="+visit_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfeac2_visitStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class eac2_facility_extractStruct implements routines.system.IPersistableRow<eac2_facility_extractStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String eac_id;

				public String getEac_id () {
					return this.eac_id;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public java.util.Date eac_session_date;

				public java.util.Date getEac_session_date () {
					return this.eac_session_date;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public int facility_id;

				public int getFacility_id () {
					return this.facility_id;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_EAC.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_EAC.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_EAC, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_EAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_by = readString(dis);
					
					this.eac_id = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.status = readString(dis);
					
					this.uuid = readString(dis);
					
					this.eac_session_date = readDate(dis);
					
					this.person_uuid = readString(dis);
					
			        this.facility_id = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.eac_id,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// java.util.Date
				
						writeDate(this.eac_session_date,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// int
				
		            	dos.writeInt(this.facility_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",eac_id="+eac_id);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",status="+status);
		sb.append(",uuid="+uuid);
		sb.append(",eac_session_date="+String.valueOf(eac_session_date));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",facility_id="+String.valueOf(facility_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(eac2_facility_extractStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class eac2_extractStruct implements routines.system.IPersistableRow<eac2_extractStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];

	
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String eac_id;

				public String getEac_id () {
					return this.eac_id;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public java.util.Date eac_session_date;

				public java.util.Date getEac_session_date () {
					return this.eac_session_date;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_EAC.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_EAC.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_EAC, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_EAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_by = readString(dis);
					
					this.eac_id = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.status = readString(dis);
					
					this.uuid = readString(dis);
					
					this.eac_session_date = readDate(dis);
					
					this.person_uuid = readString(dis);
					
					this.datim_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.eac_id,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// java.util.Date
				
						writeDate(this.eac_session_date,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.datim_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",eac_id="+eac_id);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",status="+status);
		sb.append(",uuid="+uuid);
		sb.append(",eac_session_date="+String.valueOf(eac_session_date));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",datim_id="+datim_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(eac2_extractStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_10Struct implements routines.system.IPersistableRow<after_tDBInput_10Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];

	
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String eac_id;

				public String getEac_id () {
					return this.eac_id;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public java.util.Date eac_session_date;

				public java.util.Date getEac_session_date () {
					return this.eac_session_date;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_EAC.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_EAC.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_EAC, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_EAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_by = readString(dis);
					
					this.eac_id = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.status = readString(dis);
					
					this.uuid = readString(dis);
					
					this.eac_session_date = readDate(dis);
					
					this.person_uuid = readString(dis);
					
					this.datim_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.eac_id,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// java.util.Date
				
						writeDate(this.eac_session_date,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.datim_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",eac_id="+eac_id);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",status="+status);
		sb.append(",uuid="+uuid);
		sb.append(",eac_session_date="+String.valueOf(eac_session_date));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",datim_id="+datim_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_13Process(globalMap);
		tDBInput_14Process(globalMap);
		tDBInput_17Process(globalMap);

		eac2_extractStruct eac2_extract = new eac2_extractStruct();
eac2_facility_extractStruct eac2_facility_extract = new eac2_facility_extractStruct();
copyOfeac2_visitStruct copyOfeac2_visit = new copyOfeac2_visitStruct();






	
	/**
	 * [tDBOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_4", false);
		start_Hash.put("tDBOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfeac2_visit");
					}
				
		int tos_count_tDBOutput_4 = 0;
		





String dbschema_tDBOutput_4 = null;
	dbschema_tDBOutput_4 = context.LAMISPlus_Schema;
	

String tableName_tDBOutput_4 = null;
if(dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
	tableName_tDBOutput_4 = ("hiv_eac_session");
} else {
	tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "\".\"" + ("hiv_eac_session");
}

        int updateKeyCount_tDBOutput_4 = 1;
        if(updateKeyCount_tDBOutput_4 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_4 = 0;
int nb_line_update_tDBOutput_4 = 0;
int nb_line_inserted_tDBOutput_4 = 0;
int nb_line_deleted_tDBOutput_4 = 0;
int nb_line_rejected_tDBOutput_4 = 0;

int deletedCount_tDBOutput_4=0;
int updatedCount_tDBOutput_4=0;
int insertedCount_tDBOutput_4=0;
int rejectedCount_tDBOutput_4=0;

boolean whetherReject_tDBOutput_4 = false;

java.sql.Connection conn_tDBOutput_4 = null;
String dbUser_tDBOutput_4 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_4 = "jdbc:postgresql://"+context.LAMISPlus_Server+":"+context.LAMISPlus_Port+"/"+context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
    dbUser_tDBOutput_4 = context.LAMISPlus_Login;

	final String decryptedPassword_tDBOutput_4 = context.LAMISPlus_Password; 

    String dbPwd_tDBOutput_4 = decryptedPassword_tDBOutput_4;

    conn_tDBOutput_4 = java.sql.DriverManager.getConnection(url_tDBOutput_4,dbUser_tDBOutput_4,dbPwd_tDBOutput_4);
	
	resourceMap.put("conn_tDBOutput_4", conn_tDBOutput_4);
        conn_tDBOutput_4.setAutoCommit(false);
        int commitEvery_tDBOutput_4 = 10000;
        int commitCounter_tDBOutput_4 = 0;



int count_tDBOutput_4=0;
	    java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_4 + "\" WHERE \"id\" = ?");
	    resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);
	    String insert_tDBOutput_4 = "INSERT INTO \"" + tableName_tDBOutput_4 + "\" (\"id\",\"created_date\",\"last_modified_date\",\"created_by\",\"last_modified_by\",\"eac_id\",\"archived\",\"status\",\"uuid\",\"eac_session_date\",\"person_uuid\",\"facility_id\",\"visit_id\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
	    resourceMap.put("pstmtInsert_tDBOutput_4", pstmtInsert_tDBOutput_4);
	    String update_tDBOutput_4 = "UPDATE \"" + tableName_tDBOutput_4 + "\" SET \"id\" = ?,\"created_date\" = ?,\"last_modified_date\" = ?,\"created_by\" = ?,\"last_modified_by\" = ?,\"eac_id\" = ?,\"archived\" = ?,\"status\" = ?,\"uuid\" = ?,\"eac_session_date\" = ?,\"person_uuid\" = ?,\"facility_id\" = ?,\"visit_id\" = ? WHERE \"id\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(update_tDBOutput_4);
	    resourceMap.put("pstmtUpdate_tDBOutput_4", pstmtUpdate_tDBOutput_4);
	    

 



/**
 * [tDBOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"eac2_facility_extract");
					}
				
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
					globalMap.get( "tHash_Lookup_row3" ))
					;					
					
	

row3Struct row3HashKey = new row3Struct();
row3Struct row3Default = new row3Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfeac2_visitStruct copyOfeac2_visit_tmp = new copyOfeac2_visitStruct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"eac2_extract");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<facility2Struct> tHash_Lookup_facility2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<facility2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<facility2Struct>) 
					globalMap.get( "tHash_Lookup_facility2" ))
					;					
					
	

facility2Struct facility2HashKey = new facility2Struct();
facility2Struct facility2Default = new facility2Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) 
					globalMap.get( "tHash_Lookup_row1" ))
					;					
					
	
		tHash_Lookup_row1.initGet();
	

row1Struct row1HashKey = new row1Struct();
row1Struct row1Default = new row1Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
eac2_facility_extractStruct eac2_facility_extract_tmp = new eac2_facility_extractStruct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tDBInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_10", false);
		start_Hash.put("tDBInput_10", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_10";

	
		int tos_count_tDBInput_10 = 0;
		
	
    
	
		    int nb_line_tDBInput_10 = 0;
		    java.sql.Connection conn_tDBInput_10 = null;
				String driverClass_tDBInput_10 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_10 = java.lang.Class.forName(driverClass_tDBInput_10);
				String dbUser_tDBInput_10 = context.LAMIS3_Login;
				
				
	final String decryptedPassword_tDBInput_10 = context.LAMIS3_Password; 
				
				String dbPwd_tDBInput_10 = decryptedPassword_tDBInput_10;
				
				String url_tDBInput_10 = "jdbc:postgresql://" + context.LAMIS3_Server + ":" + context.LAMIS3_Port + "/" + context.LAMIS3_Database + "?" + context.LAMIS3_AdditionalParams;
				
				conn_tDBInput_10 = java.sql.DriverManager.getConnection(url_tDBInput_10,dbUser_tDBInput_10,dbPwd_tDBInput_10);
		        
				conn_tDBInput_10.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_10 = conn_tDBInput_10.createStatement();

		    String dbquery_tDBInput_10 = "SELECT e.last_modified as created_date, e.last_modified as last_modified_date,\n'ETL' as created_by, 'ETL' as last_modi"
+"fied_by, \ne.uuid as eac_id, e.archived::INTEGER,\n'SECOND  EAC' as status, '' as uuid, e.date_eac2 eac_session_date,\n "
+" p.uuid as person_uuid,\nn.datim_id FROM eac e\n    INNER JOIN patient p ON p.id = e.patient_id\n    INNER JOIN ndr_faci"
+"lity n ON n.id=e.facility_id\n	WHERE e.date_eac2 is not null AND p.extra->>'art'='true'";
			

            	globalMap.put("tDBInput_10_QUERY",dbquery_tDBInput_10);
		    java.sql.ResultSet rs_tDBInput_10 = null;

		    try {
		    	rs_tDBInput_10 = stmt_tDBInput_10.executeQuery(dbquery_tDBInput_10);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_10 = rs_tDBInput_10.getMetaData();
		    	int colQtyInRs_tDBInput_10 = rsmd_tDBInput_10.getColumnCount();

		    String tmpContent_tDBInput_10 = null;
		    
		    
		    while (rs_tDBInput_10.next()) {
		        nb_line_tDBInput_10++;
		        
							if(colQtyInRs_tDBInput_10 < 1) {
								eac2_extract.created_date = null;
							} else {
										
			eac2_extract.created_date = routines.system.JDBCUtil.getDate(rs_tDBInput_10, 1);
		                    }
							if(colQtyInRs_tDBInput_10 < 2) {
								eac2_extract.last_modified_date = null;
							} else {
										
			eac2_extract.last_modified_date = routines.system.JDBCUtil.getDate(rs_tDBInput_10, 2);
		                    }
							if(colQtyInRs_tDBInput_10 < 3) {
								eac2_extract.created_by = null;
							} else {
	                         		
        	eac2_extract.created_by = routines.system.JDBCUtil.getString(rs_tDBInput_10, 3, false);
		                    }
							if(colQtyInRs_tDBInput_10 < 4) {
								eac2_extract.last_modified_by = null;
							} else {
	                         		
        	eac2_extract.last_modified_by = routines.system.JDBCUtil.getString(rs_tDBInput_10, 4, false);
		                    }
							if(colQtyInRs_tDBInput_10 < 5) {
								eac2_extract.eac_id = null;
							} else {
	                         		
        	eac2_extract.eac_id = routines.system.JDBCUtil.getString(rs_tDBInput_10, 5, false);
		                    }
							if(colQtyInRs_tDBInput_10 < 6) {
								eac2_extract.archived = null;
							} else {
		                          
            eac2_extract.archived = rs_tDBInput_10.getInt(6);
            if(rs_tDBInput_10.wasNull()){
                    eac2_extract.archived = null;
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 7) {
								eac2_extract.status = null;
							} else {
	                         		
        	eac2_extract.status = routines.system.JDBCUtil.getString(rs_tDBInput_10, 7, false);
		                    }
							if(colQtyInRs_tDBInput_10 < 8) {
								eac2_extract.uuid = null;
							} else {
	                         		
        	eac2_extract.uuid = routines.system.JDBCUtil.getString(rs_tDBInput_10, 8, false);
		                    }
							if(colQtyInRs_tDBInput_10 < 9) {
								eac2_extract.eac_session_date = null;
							} else {
										
			eac2_extract.eac_session_date = routines.system.JDBCUtil.getDate(rs_tDBInput_10, 9);
		                    }
							if(colQtyInRs_tDBInput_10 < 10) {
								eac2_extract.person_uuid = null;
							} else {
	                         		
        	eac2_extract.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_10, 10, false);
		                    }
							if(colQtyInRs_tDBInput_10 < 11) {
								eac2_extract.datim_id = null;
							} else {
	                         		
        	eac2_extract.datim_id = routines.system.JDBCUtil.getString(rs_tDBInput_10, 11, false);
		                    }
					


 



/**
 * [tDBInput_10 begin ] stop
 */
	
	/**
	 * [tDBInput_10 main ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 


	tos_count_tDBInput_10++;

/**
 * [tDBInput_10 main ] stop
 */
	
	/**
	 * [tDBInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"eac2_extract");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "facility2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopfacility2 = false;
       		  	    	
       		  	    	
 							facility2Struct facility2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		    facility2HashKey.datim_id = eac2_extract.datim_id ;
                        		    		

								
		                        	facility2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_facility2.lookup( facility2HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_facility2 != null && tHash_Lookup_facility2.getCount(facility2HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'facility2' and it contains more one result from keys :  facility2.datim_id = '" + facility2HashKey.datim_id + "'");
								} // G 071
							

							facility2Struct facility2 = null;
                    		  	 
							   
                    		  	 
	       		  	    	facility2Struct fromLookup_facility2 = null;
							facility2 = facility2Default;
										 
							
								 
							
							
								if (tHash_Lookup_facility2 !=null && tHash_Lookup_facility2.hasNext()) { // G 099
								
							
								
								fromLookup_facility2 = tHash_Lookup_facility2.next();

							
							
								} // G 099
							
							

							if(fromLookup_facility2 != null) {
								facility2 = fromLookup_facility2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row1" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow1 = false;
       		  	    	
       		  	    	
 							row1Struct row1ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row1.lookup( row1HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row1.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow1 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow1 = true;
			           		  	} // G 21
                    		  	
                    		

							row1Struct row1 = null;
                    		  	 
							

								while ((tHash_Lookup_row1 != null && tHash_Lookup_row1.hasNext()) || forceLooprow1) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row1'
									
                    		  	 
							   
                    		  	 
	       		  	    	row1Struct fromLookup_row1 = null;
							row1 = row1Default;
										 
							
								
								if(!forceLooprow1) { // G 46
								
							
								 
							
								
								fromLookup_row1 = tHash_Lookup_row1.next();

							

							if(fromLookup_row1 != null) {
								row1 = fromLookup_row1;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow1 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

eac2_facility_extract = null;


// # Output table : 'eac2_facility_extract'
eac2_facility_extract_tmp.id = Numeric.sequence("id",(Integer)row1.eacone,1) ;
eac2_facility_extract_tmp.created_date = eac2_extract.created_date ;
eac2_facility_extract_tmp.last_modified_date = eac2_extract.last_modified_date ;
eac2_facility_extract_tmp.created_by = eac2_extract.created_by ;
eac2_facility_extract_tmp.last_modified_by = eac2_extract.last_modified_by ;
eac2_facility_extract_tmp.eac_id = eac2_extract.eac_id ;
eac2_facility_extract_tmp.archived = eac2_extract.archived ;
eac2_facility_extract_tmp.status = eac2_extract.status ;
eac2_facility_extract_tmp.uuid = java.util.UUID.randomUUID().toString() ;
eac2_facility_extract_tmp.eac_session_date = eac2_extract.eac_session_date ;
eac2_facility_extract_tmp.person_uuid = eac2_extract.person_uuid ;
eac2_facility_extract_tmp.facility_id = facility2.id ;
eac2_facility_extract = eac2_facility_extract_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "eac2_facility_extract"
if(eac2_facility_extract != null) { 



	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"eac2_facility_extract");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_9 = false;
		  boolean mainRowRejected_tMap_9 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row3" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow3 = false;
       		  	    	
       		  	    	
 							row3Struct row3ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_9) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_9 = false;
								
                        		    		    row3HashKey.visit_start_date = eac2_facility_extract.eac_session_date  == null ? null : new java.util.Date(eac2_facility_extract.eac_session_date .getTime());
                        		    		
                        		    		    row3HashKey.person_uuid = eac2_facility_extract.person_uuid ;
                        		    		

								
		                        	row3HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row3.lookup( row3HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row3 != null && tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3' and it contains more one result from keys :  row3.visit_start_date = '" + row3HashKey.visit_start_date + "', row3.person_uuid = '" + row3HashKey.person_uuid + "'");
								} // G 071
							

							row3Struct row3 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row3Struct fromLookup_row3 = null;
							row3 = row3Default;
										 
							
								 
							
							
								if (tHash_Lookup_row3 !=null && tHash_Lookup_row3.hasNext()) { // G 099
								
							
								
								fromLookup_row3 = tHash_Lookup_row3.next();

							
							
								} // G 099
							
							

							if(fromLookup_row3 != null) {
								row3 = fromLookup_row3;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

copyOfeac2_visit = null;


// # Output table : 'copyOfeac2_visit'
copyOfeac2_visit_tmp.id = eac2_facility_extract.id ;
copyOfeac2_visit_tmp.created_date = eac2_facility_extract.created_date ;
copyOfeac2_visit_tmp.last_modified_date = eac2_facility_extract.last_modified_date ;
copyOfeac2_visit_tmp.created_by = eac2_facility_extract.created_by ;
copyOfeac2_visit_tmp.last_modified_by = eac2_facility_extract.last_modified_by ;
copyOfeac2_visit_tmp.eac_id = eac2_facility_extract.eac_id ;
copyOfeac2_visit_tmp.archived = eac2_facility_extract.archived ;
copyOfeac2_visit_tmp.status = eac2_facility_extract.status ;
copyOfeac2_visit_tmp.uuid = eac2_facility_extract.uuid ;
copyOfeac2_visit_tmp.eac_session_date = eac2_facility_extract.eac_session_date ;
copyOfeac2_visit_tmp.person_uuid = eac2_facility_extract.person_uuid ;
copyOfeac2_visit_tmp.facility_id = eac2_facility_extract.facility_id ;
copyOfeac2_visit_tmp.visit_id = row3.visit_id ;
copyOfeac2_visit = copyOfeac2_visit_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "copyOfeac2_visit"
if(copyOfeac2_visit != null) { 



	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfeac2_visit");
					}
					



        whetherReject_tDBOutput_4 = false;
                    pstmt_tDBOutput_4.setInt(1, copyOfeac2_visit.id);

            int checkCount_tDBOutput_4 = -1;
            try (java.sql.ResultSet rs_tDBOutput_4 = pstmt_tDBOutput_4.executeQuery()) {
                while(rs_tDBOutput_4.next()) {
                    checkCount_tDBOutput_4 = rs_tDBOutput_4.getInt(1);
                }
            }
            if(checkCount_tDBOutput_4 > 0) {
                        pstmtUpdate_tDBOutput_4.setInt(1, copyOfeac2_visit.id);

                        if(copyOfeac2_visit.created_date != null) {
pstmtUpdate_tDBOutput_4.setTimestamp(2, new java.sql.Timestamp(copyOfeac2_visit.created_date.getTime()));
} else {
pstmtUpdate_tDBOutput_4.setNull(2, java.sql.Types.TIMESTAMP);
}

                        if(copyOfeac2_visit.last_modified_date != null) {
pstmtUpdate_tDBOutput_4.setTimestamp(3, new java.sql.Timestamp(copyOfeac2_visit.last_modified_date.getTime()));
} else {
pstmtUpdate_tDBOutput_4.setNull(3, java.sql.Types.TIMESTAMP);
}

                        if(copyOfeac2_visit.created_by == null) {
pstmtUpdate_tDBOutput_4.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(4, copyOfeac2_visit.created_by);
}

                        if(copyOfeac2_visit.last_modified_by == null) {
pstmtUpdate_tDBOutput_4.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(5, copyOfeac2_visit.last_modified_by);
}

                        if(copyOfeac2_visit.eac_id == null) {
pstmtUpdate_tDBOutput_4.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(6, copyOfeac2_visit.eac_id);
}

                        if(copyOfeac2_visit.archived == null) {
pstmtUpdate_tDBOutput_4.setNull(7, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_4.setInt(7, copyOfeac2_visit.archived);
}

                        if(copyOfeac2_visit.status == null) {
pstmtUpdate_tDBOutput_4.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(8, copyOfeac2_visit.status);
}

                        if(copyOfeac2_visit.uuid == null) {
pstmtUpdate_tDBOutput_4.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(9, copyOfeac2_visit.uuid);
}

                        if(copyOfeac2_visit.eac_session_date != null) {
pstmtUpdate_tDBOutput_4.setTimestamp(10, new java.sql.Timestamp(copyOfeac2_visit.eac_session_date.getTime()));
} else {
pstmtUpdate_tDBOutput_4.setNull(10, java.sql.Types.TIMESTAMP);
}

                        if(copyOfeac2_visit.person_uuid == null) {
pstmtUpdate_tDBOutput_4.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(11, copyOfeac2_visit.person_uuid);
}

                        pstmtUpdate_tDBOutput_4.setInt(12, copyOfeac2_visit.facility_id);

                        if(copyOfeac2_visit.visit_id == null) {
pstmtUpdate_tDBOutput_4.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(13, copyOfeac2_visit.visit_id);
}

                        pstmtUpdate_tDBOutput_4.setInt(14 + count_tDBOutput_4, copyOfeac2_visit.id);

                try {
					
                    updatedCount_tDBOutput_4 = updatedCount_tDBOutput_4 + pstmtUpdate_tDBOutput_4.executeUpdate();
                    nb_line_tDBOutput_4++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_4 = true;
                        nb_line_tDBOutput_4++;
                            System.err.print(e.getMessage());
                }
            } else {
                        pstmtInsert_tDBOutput_4.setInt(1, copyOfeac2_visit.id);

                        if(copyOfeac2_visit.created_date != null) {
pstmtInsert_tDBOutput_4.setTimestamp(2, new java.sql.Timestamp(copyOfeac2_visit.created_date.getTime()));
} else {
pstmtInsert_tDBOutput_4.setNull(2, java.sql.Types.TIMESTAMP);
}

                        if(copyOfeac2_visit.last_modified_date != null) {
pstmtInsert_tDBOutput_4.setTimestamp(3, new java.sql.Timestamp(copyOfeac2_visit.last_modified_date.getTime()));
} else {
pstmtInsert_tDBOutput_4.setNull(3, java.sql.Types.TIMESTAMP);
}

                        if(copyOfeac2_visit.created_by == null) {
pstmtInsert_tDBOutput_4.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(4, copyOfeac2_visit.created_by);
}

                        if(copyOfeac2_visit.last_modified_by == null) {
pstmtInsert_tDBOutput_4.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(5, copyOfeac2_visit.last_modified_by);
}

                        if(copyOfeac2_visit.eac_id == null) {
pstmtInsert_tDBOutput_4.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(6, copyOfeac2_visit.eac_id);
}

                        if(copyOfeac2_visit.archived == null) {
pstmtInsert_tDBOutput_4.setNull(7, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_4.setInt(7, copyOfeac2_visit.archived);
}

                        if(copyOfeac2_visit.status == null) {
pstmtInsert_tDBOutput_4.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(8, copyOfeac2_visit.status);
}

                        if(copyOfeac2_visit.uuid == null) {
pstmtInsert_tDBOutput_4.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(9, copyOfeac2_visit.uuid);
}

                        if(copyOfeac2_visit.eac_session_date != null) {
pstmtInsert_tDBOutput_4.setTimestamp(10, new java.sql.Timestamp(copyOfeac2_visit.eac_session_date.getTime()));
} else {
pstmtInsert_tDBOutput_4.setNull(10, java.sql.Types.TIMESTAMP);
}

                        if(copyOfeac2_visit.person_uuid == null) {
pstmtInsert_tDBOutput_4.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(11, copyOfeac2_visit.person_uuid);
}

                        pstmtInsert_tDBOutput_4.setInt(12, copyOfeac2_visit.facility_id);

                        if(copyOfeac2_visit.visit_id == null) {
pstmtInsert_tDBOutput_4.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(13, copyOfeac2_visit.visit_id);
}

                try {
					
                    insertedCount_tDBOutput_4 = insertedCount_tDBOutput_4 + pstmtInsert_tDBOutput_4.executeUpdate();
                    nb_line_tDBOutput_4++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_4 = true;
                        nb_line_tDBOutput_4++;
                            System.err.print(e.getMessage());
                }
            }
            if(!whetherReject_tDBOutput_4) {
            }
    		    commitCounter_tDBOutput_4++;
                if(commitEvery_tDBOutput_4 <= commitCounter_tDBOutput_4) {
                	conn_tDBOutput_4.commit();
                	
                	commitCounter_tDBOutput_4=0;
                }

 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */

} // End of branch "copyOfeac2_visit"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_end ] stop
 */

} // End of branch "eac2_facility_extract"



	
		} // close loop of lookup 'row1' // G_TM_M_043
	
	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_10 end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

	}
}finally{
	if (rs_tDBInput_10 != null) {
		rs_tDBInput_10.close();
	}
	if (stmt_tDBInput_10 != null) {
		stmt_tDBInput_10.close();
	}
	if(conn_tDBInput_10 != null && !conn_tDBInput_10.isClosed()) {
		
			conn_tDBInput_10.commit();
			
		
			conn_tDBInput_10.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_10_NB_LINE",nb_line_tDBInput_10);
 

ok_Hash.put("tDBInput_10", true);
end_Hash.put("tDBInput_10", System.currentTimeMillis());

   			if (globalMap.get("tDBInput_10_NB_LINE") != null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If3", 0, "true");
					}
				tJava_4Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "false");
					}   	 
   				}



/**
 * [tDBInput_10 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_facility2 != null) {
						tHash_Lookup_facility2.endGet();
					}
					globalMap.remove( "tHash_Lookup_facility2" );

					
					
				
					if(tHash_Lookup_row1 != null) {
						tHash_Lookup_row1.endGet();
					}
					globalMap.remove( "tHash_Lookup_row1" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"eac2_extract");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row3 != null) {
						tHash_Lookup_row3.endGet();
					}
					globalMap.remove( "tHash_Lookup_row3" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"eac2_facility_extract");
			  	}
			  	
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tDBOutput_4 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



        if(pstmtUpdate_tDBOutput_4 != null){
            pstmtUpdate_tDBOutput_4.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_4");
        }
        if(pstmtInsert_tDBOutput_4 != null){
            pstmtInsert_tDBOutput_4.close();
            resourceMap.remove("pstmtInsert_tDBOutput_4");
        }
        if(pstmt_tDBOutput_4 != null) {
            pstmt_tDBOutput_4.close();
            resourceMap.remove("pstmt_tDBOutput_4");
        }
    resourceMap.put("statementClosed_tDBOutput_4", true);
			
			conn_tDBOutput_4.commit();
			
		
    	conn_tDBOutput_4 .close();
    	
    	resourceMap.put("finish_tDBOutput_4", true);
    	

	nb_line_deleted_tDBOutput_4=nb_line_deleted_tDBOutput_4+ deletedCount_tDBOutput_4;
	nb_line_update_tDBOutput_4=nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
	nb_line_inserted_tDBOutput_4=nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
	nb_line_rejected_tDBOutput_4=nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;
	
        globalMap.put("tDBOutput_4_NB_LINE",nb_line_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_UPDATED",nb_line_update_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_DELETED",nb_line_deleted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfeac2_visit");
			  	}
			  	
 

ok_Hash.put("tDBOutput_4", true);
end_Hash.put("tDBOutput_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tJava_8Process(globalMap);



/**
 * [tDBOutput_4 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_10:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tDBInput_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_9"
					     			globalMap.remove("tHash_Lookup_row3"); 
				     			
					     			//free memory for "tMap_8"
					     			globalMap.remove("tHash_Lookup_facility2"); 
				     			
					     			//free memory for "tMap_8"
					     			globalMap.remove("tHash_Lookup_row1"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_10 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tDBOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_4 = null;
                if ((pstmtUpdateToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_4")) != null) {
                    pstmtUpdateToClose_tDBOutput_4.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_4 = null;
                if ((pstmtInsertToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_4")) != null) {
                    pstmtInsertToClose_tDBOutput_4.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
                if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_4")) != null) {
                    pstmtToClose_tDBOutput_4.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_4") == null){
            java.sql.Connection ctn_tDBOutput_4 = null;
            if((ctn_tDBOutput_4 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_4")) != null){
                try {
                    ctn_tDBOutput_4.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_4) {
                    String errorMessage_tDBOutput_4 = "failed to close the connection in tDBOutput_4 :" + sqlEx_tDBOutput_4.getMessage();
                    System.err.println(errorMessage_tDBOutput_4);
                }
            }
        }
    }
 



/**
 * [tDBOutput_4 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 1);
	}
	

public void tJava_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_8", false);
		start_Hash.put("tJava_8", System.currentTimeMillis());
		
	
	currentComponent="tJava_8";

	
		int tos_count_tJava_8 = 0;
		


int totalMigrated = globalMap.get("tDBOutput_3_NB_LINE_UPDATED") != null ? (Integer)globalMap.get("tDBOutput_4_NB_LINE_UPDATED") : 0;

System.out.println("Total EAC 2 session already migrated "+totalMigrated);

System.out.println("Total new records migrated - "+globalMap.get("tDBOutput_4_NB_LINE_INSERTED"));

int eacCount = totalMigrated == 0 ? (Integer)globalMap.get("tDBOutput_4_NB_LINE_INSERTED") : totalMigrated;

eacCount = (Integer)globalMap.put("eacCount", eacCount) + eacCount;

globalMap.put("eacCount", eacCount);

if(globalMap.get("tDBOutput_4_ERROR_MESSAGE") != null){
System.out.println("Migration Error - "+globalMap.get("tDBOutput_4_ERROR_MESSAGE"));
}
System.out.println("Total erroneous records not migrated - "+globalMap.get("tFileOutputDelimited_4_NB_LINE"));
System.out.println("*************EAC 2 SESSION MIGRATION REPORT END*****************");
System.out.println();
 



/**
 * [tJava_8 begin ] stop
 */
	
	/**
	 * [tJava_8 main ] start
	 */

	

	
	
	currentComponent="tJava_8";

	

 


	tos_count_tJava_8++;

/**
 * [tJava_8 main ] stop
 */
	
	/**
	 * [tJava_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_8";

	

 



/**
 * [tJava_8 process_data_begin ] stop
 */
	
	/**
	 * [tJava_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_8";

	

 



/**
 * [tJava_8 process_data_end ] stop
 */
	
	/**
	 * [tJava_8 end ] start
	 */

	

	
	
	currentComponent="tJava_8";

	

 

ok_Hash.put("tJava_8", true);
end_Hash.put("tJava_8", System.currentTimeMillis());




/**
 * [tJava_8 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_8 finally ] start
	 */

	

	
	
	currentComponent="tJava_8";

	

 



/**
 * [tJava_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_8_SUBPROCESS_STATE", 1);
	}
	


public static class eac3_visitStruct implements routines.system.IPersistableRow<eac3_visitStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String eac_id;

				public String getEac_id () {
					return this.eac_id;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public java.util.Date eac_session_date;

				public java.util.Date getEac_session_date () {
					return this.eac_session_date;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public int facility_id;

				public int getFacility_id () {
					return this.facility_id;
				}
				
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final eac3_visitStruct other = (eac3_visitStruct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(eac3_visitStruct other) {

		other.id = this.id;
	            other.created_date = this.created_date;
	            other.last_modified_date = this.last_modified_date;
	            other.created_by = this.created_by;
	            other.last_modified_by = this.last_modified_by;
	            other.eac_id = this.eac_id;
	            other.archived = this.archived;
	            other.status = this.status;
	            other.uuid = this.uuid;
	            other.eac_session_date = this.eac_session_date;
	            other.person_uuid = this.person_uuid;
	            other.facility_id = this.facility_id;
	            other.visit_id = this.visit_id;
	            
	}

	public void copyKeysDataTo(eac3_visitStruct other) {

		other.id = this.id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_EAC.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_EAC.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_EAC, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_EAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_by = readString(dis);
					
					this.eac_id = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.status = readString(dis);
					
					this.uuid = readString(dis);
					
					this.eac_session_date = readDate(dis);
					
					this.person_uuid = readString(dis);
					
			        this.facility_id = dis.readInt();
					
					this.visit_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.eac_id,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// java.util.Date
				
						writeDate(this.eac_session_date,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// int
				
		            	dos.writeInt(this.facility_id);
					
					// String
				
						writeString(this.visit_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",eac_id="+eac_id);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",status="+status);
		sb.append(",uuid="+uuid);
		sb.append(",eac_session_date="+String.valueOf(eac_session_date));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",visit_id="+visit_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(eac3_visitStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class eac3_facilityStruct implements routines.system.IPersistableRow<eac3_facilityStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String eac_id;

				public String getEac_id () {
					return this.eac_id;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public java.util.Date eac_session_date;

				public java.util.Date getEac_session_date () {
					return this.eac_session_date;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public int facility_id;

				public int getFacility_id () {
					return this.facility_id;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_EAC.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_EAC.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_EAC, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_EAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_by = readString(dis);
					
					this.eac_id = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.status = readString(dis);
					
					this.uuid = readString(dis);
					
					this.eac_session_date = readDate(dis);
					
					this.person_uuid = readString(dis);
					
			        this.facility_id = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.eac_id,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// java.util.Date
				
						writeDate(this.eac_session_date,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// int
				
		            	dos.writeInt(this.facility_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",eac_id="+eac_id);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",status="+status);
		sb.append(",uuid="+uuid);
		sb.append(",eac_session_date="+String.valueOf(eac_session_date));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",facility_id="+String.valueOf(facility_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(eac3_facilityStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class eac3_extractStruct implements routines.system.IPersistableRow<eac3_extractStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];

	
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String eac_id;

				public String getEac_id () {
					return this.eac_id;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public java.util.Date eac_session_date;

				public java.util.Date getEac_session_date () {
					return this.eac_session_date;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_EAC.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_EAC.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_EAC, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_EAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_by = readString(dis);
					
					this.eac_id = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.status = readString(dis);
					
					this.uuid = readString(dis);
					
					this.eac_session_date = readDate(dis);
					
					this.person_uuid = readString(dis);
					
					this.datim_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.eac_id,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// java.util.Date
				
						writeDate(this.eac_session_date,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.datim_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",eac_id="+eac_id);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",status="+status);
		sb.append(",uuid="+uuid);
		sb.append(",eac_session_date="+String.valueOf(eac_session_date));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",datim_id="+datim_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(eac3_extractStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_7Struct implements routines.system.IPersistableRow<after_tDBInput_7Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];

	
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String eac_id;

				public String getEac_id () {
					return this.eac_id;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public java.util.Date eac_session_date;

				public java.util.Date getEac_session_date () {
					return this.eac_session_date;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_EAC.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_EAC.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_EAC, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_EAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_by = readString(dis);
					
					this.eac_id = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.status = readString(dis);
					
					this.uuid = readString(dis);
					
					this.eac_session_date = readDate(dis);
					
					this.person_uuid = readString(dis);
					
					this.datim_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.eac_id,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// java.util.Date
				
						writeDate(this.eac_session_date,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.datim_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",eac_id="+eac_id);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",status="+status);
		sb.append(",uuid="+uuid);
		sb.append(",eac_session_date="+String.valueOf(eac_session_date));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",datim_id="+datim_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_8Process(globalMap);
		tDBInput_9Process(globalMap);
		tDBInput_18Process(globalMap);

		eac3_extractStruct eac3_extract = new eac3_extractStruct();
eac3_facilityStruct eac3_facility = new eac3_facilityStruct();
eac3_visitStruct eac3_visit = new eac3_visitStruct();






	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"eac3_visit");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = context.LAMISPlus_Schema;
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("hiv_eac_session");
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("hiv_eac_session");
}

        int updateKeyCount_tDBOutput_3 = 1;
        if(updateKeyCount_tDBOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_3 = "jdbc:postgresql://"+context.LAMISPlus_Server+":"+context.LAMISPlus_Port+"/"+context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
    dbUser_tDBOutput_3 = context.LAMISPlus_Login;

	final String decryptedPassword_tDBOutput_3 = context.LAMISPlus_Password; 

    String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;

    conn_tDBOutput_3 = java.sql.DriverManager.getConnection(url_tDBOutput_3,dbUser_tDBOutput_3,dbPwd_tDBOutput_3);
	
	resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
        conn_tDBOutput_3.setAutoCommit(false);
        int commitEvery_tDBOutput_3 = 10000;
        int commitCounter_tDBOutput_3 = 0;



int count_tDBOutput_3=0;
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_3 + "\" WHERE \"id\" = ?");
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    String insert_tDBOutput_3 = "INSERT INTO \"" + tableName_tDBOutput_3 + "\" (\"id\",\"created_date\",\"last_modified_date\",\"created_by\",\"last_modified_by\",\"eac_id\",\"archived\",\"status\",\"uuid\",\"eac_session_date\",\"person_uuid\",\"facility_id\",\"visit_id\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
	    resourceMap.put("pstmtInsert_tDBOutput_3", pstmtInsert_tDBOutput_3);
	    String update_tDBOutput_3 = "UPDATE \"" + tableName_tDBOutput_3 + "\" SET \"id\" = ?,\"created_date\" = ?,\"last_modified_date\" = ?,\"created_by\" = ?,\"last_modified_by\" = ?,\"eac_id\" = ?,\"archived\" = ?,\"status\" = ?,\"uuid\" = ?,\"eac_session_date\" = ?,\"person_uuid\" = ?,\"facility_id\" = ?,\"visit_id\" = ? WHERE \"id\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(update_tDBOutput_3);
	    resourceMap.put("pstmtUpdate_tDBOutput_3", pstmtUpdate_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"eac3_facility");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<visit3Struct> tHash_Lookup_visit3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<visit3Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<visit3Struct>) 
					globalMap.get( "tHash_Lookup_visit3" ))
					;					
					
	

visit3Struct visit3HashKey = new visit3Struct();
visit3Struct visit3Default = new visit3Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
eac3_visitStruct eac3_visit_tmp = new eac3_visitStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"eac3_extract");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<facility_eac3Struct> tHash_Lookup_facility_eac3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<facility_eac3Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<facility_eac3Struct>) 
					globalMap.get( "tHash_Lookup_facility_eac3" ))
					;					
					
	

facility_eac3Struct facility_eac3HashKey = new facility_eac3Struct();
facility_eac3Struct facility_eac3Default = new facility_eac3Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
					globalMap.get( "tHash_Lookup_row5" ))
					;					
					
	
		tHash_Lookup_row5.initGet();
	

row5Struct row5HashKey = new row5Struct();
row5Struct row5Default = new row5Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
eac3_facilityStruct eac3_facility_tmp = new eac3_facilityStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tDBInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_7", false);
		start_Hash.put("tDBInput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_7";

	
		int tos_count_tDBInput_7 = 0;
		
	
    
	
		    int nb_line_tDBInput_7 = 0;
		    java.sql.Connection conn_tDBInput_7 = null;
				String driverClass_tDBInput_7 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_7 = java.lang.Class.forName(driverClass_tDBInput_7);
				String dbUser_tDBInput_7 = context.LAMIS3_Login;
				
				
	final String decryptedPassword_tDBInput_7 = context.LAMIS3_Password; 
				
				String dbPwd_tDBInput_7 = decryptedPassword_tDBInput_7;
				
				String url_tDBInput_7 = "jdbc:postgresql://" + context.LAMIS3_Server + ":" + context.LAMIS3_Port + "/" + context.LAMIS3_Database + "?" + context.LAMIS3_AdditionalParams;
				
				conn_tDBInput_7 = java.sql.DriverManager.getConnection(url_tDBInput_7,dbUser_tDBInput_7,dbPwd_tDBInput_7);
		        
				conn_tDBInput_7.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

		    String dbquery_tDBInput_7 = "SELECT e.last_modified as created_date, e.last_modified as last_modified_date,\n'ETL' as created_by, 'ETL' as last_modi"
+"fied_by, \ne.uuid as eac_id, e.archived::INTEGER,\n'THIRD EAC' as status, '' as uuid, e.date_eac3 eac_session_date,\n  p"
+".uuid as person_uuid,\nn.datim_id FROM eac e\n    INNER JOIN patient p ON p.id = e.patient_id\n    INNER JOIN ndr_facili"
+"ty n ON n.id=e.facility_id\n	WHERE e.date_eac3 is not null AND p.extra->>'art'='true'";
			

            	globalMap.put("tDBInput_7_QUERY",dbquery_tDBInput_7);
		    java.sql.ResultSet rs_tDBInput_7 = null;

		    try {
		    	rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
		    	int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

		    String tmpContent_tDBInput_7 = null;
		    
		    
		    while (rs_tDBInput_7.next()) {
		        nb_line_tDBInput_7++;
		        
							if(colQtyInRs_tDBInput_7 < 1) {
								eac3_extract.created_date = null;
							} else {
										
			eac3_extract.created_date = routines.system.JDBCUtil.getDate(rs_tDBInput_7, 1);
		                    }
							if(colQtyInRs_tDBInput_7 < 2) {
								eac3_extract.last_modified_date = null;
							} else {
										
			eac3_extract.last_modified_date = routines.system.JDBCUtil.getDate(rs_tDBInput_7, 2);
		                    }
							if(colQtyInRs_tDBInput_7 < 3) {
								eac3_extract.created_by = null;
							} else {
	                         		
        	eac3_extract.created_by = routines.system.JDBCUtil.getString(rs_tDBInput_7, 3, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 4) {
								eac3_extract.last_modified_by = null;
							} else {
	                         		
        	eac3_extract.last_modified_by = routines.system.JDBCUtil.getString(rs_tDBInput_7, 4, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 5) {
								eac3_extract.eac_id = null;
							} else {
	                         		
        	eac3_extract.eac_id = routines.system.JDBCUtil.getString(rs_tDBInput_7, 5, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 6) {
								eac3_extract.archived = null;
							} else {
		                          
            eac3_extract.archived = rs_tDBInput_7.getInt(6);
            if(rs_tDBInput_7.wasNull()){
                    eac3_extract.archived = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 7) {
								eac3_extract.status = null;
							} else {
	                         		
        	eac3_extract.status = routines.system.JDBCUtil.getString(rs_tDBInput_7, 7, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 8) {
								eac3_extract.uuid = null;
							} else {
	                         		
        	eac3_extract.uuid = routines.system.JDBCUtil.getString(rs_tDBInput_7, 8, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 9) {
								eac3_extract.eac_session_date = null;
							} else {
										
			eac3_extract.eac_session_date = routines.system.JDBCUtil.getDate(rs_tDBInput_7, 9);
		                    }
							if(colQtyInRs_tDBInput_7 < 10) {
								eac3_extract.person_uuid = null;
							} else {
	                         		
        	eac3_extract.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_7, 10, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 11) {
								eac3_extract.datim_id = null;
							} else {
	                         		
        	eac3_extract.datim_id = routines.system.JDBCUtil.getString(rs_tDBInput_7, 11, false);
		                    }
					


 



/**
 * [tDBInput_7 begin ] stop
 */
	
	/**
	 * [tDBInput_7 main ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 


	tos_count_tDBInput_7++;

/**
 * [tDBInput_7 main ] stop
 */
	
	/**
	 * [tDBInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"eac3_extract");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "facility_eac3" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopfacility_eac3 = false;
       		  	    	
       		  	    	
 							facility_eac3Struct facility_eac3ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    facility_eac3HashKey.datim_id = eac3_extract.datim_id ;
                        		    		

								
		                        	facility_eac3HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_facility_eac3.lookup( facility_eac3HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_facility_eac3 != null && tHash_Lookup_facility_eac3.getCount(facility_eac3HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'facility_eac3' and it contains more one result from keys :  facility_eac3.datim_id = '" + facility_eac3HashKey.datim_id + "'");
								} // G 071
							

							facility_eac3Struct facility_eac3 = null;
                    		  	 
							   
                    		  	 
	       		  	    	facility_eac3Struct fromLookup_facility_eac3 = null;
							facility_eac3 = facility_eac3Default;
										 
							
								 
							
							
								if (tHash_Lookup_facility_eac3 !=null && tHash_Lookup_facility_eac3.hasNext()) { // G 099
								
							
								
								fromLookup_facility_eac3 = tHash_Lookup_facility_eac3.next();

							
							
								} // G 099
							
							

							if(fromLookup_facility_eac3 != null) {
								facility_eac3 = fromLookup_facility_eac3;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row5" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow5 = false;
       		  	    	
       		  	    	
 							row5Struct row5ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row5.lookup( row5HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row5.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow5 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow5 = true;
			           		  	} // G 21
                    		  	
                    		

							row5Struct row5 = null;
                    		  	 
							

								while ((tHash_Lookup_row5 != null && tHash_Lookup_row5.hasNext()) || forceLooprow5) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row5'
									
                    		  	 
							   
                    		  	 
	       		  	    	row5Struct fromLookup_row5 = null;
							row5 = row5Default;
										 
							
								
								if(!forceLooprow5) { // G 46
								
							
								 
							
								
								fromLookup_row5 = tHash_Lookup_row5.next();

							

							if(fromLookup_row5 != null) {
								row5 = fromLookup_row5;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow5 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

eac3_facility = null;


// # Output table : 'eac3_facility'
eac3_facility_tmp.id = Numeric.sequence("s1",(Integer)row5.eactwo ,1) ;
eac3_facility_tmp.created_date = eac3_extract.created_date ;
eac3_facility_tmp.last_modified_date = eac3_extract.last_modified_date ;
eac3_facility_tmp.created_by = eac3_extract.created_by ;
eac3_facility_tmp.last_modified_by = eac3_extract.last_modified_by ;
eac3_facility_tmp.eac_id = eac3_extract.eac_id ;
eac3_facility_tmp.archived = eac3_extract.archived ;
eac3_facility_tmp.status = eac3_extract.status ;
eac3_facility_tmp.uuid = java.util.UUID.randomUUID().toString() ;
eac3_facility_tmp.eac_session_date = eac3_extract.eac_session_date ;
eac3_facility_tmp.person_uuid = eac3_extract.person_uuid ;
eac3_facility_tmp.facility_id = facility_eac3.id ;
eac3_facility = eac3_facility_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "eac3_facility"
if(eac3_facility != null) { 



	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"eac3_facility");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "visit3" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopvisit3 = false;
       		  	    	
       		  	    	
 							visit3Struct visit3ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_7 = false;
								
                        		    		    visit3HashKey.visit_start_date = eac3_facility.eac_session_date  == null ? null : new java.util.Date(eac3_facility.eac_session_date .getTime());
                        		    		
                        		    		    visit3HashKey.person_uuid = eac3_facility.person_uuid ;
                        		    		

								
		                        	visit3HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_visit3.lookup( visit3HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_visit3 != null && tHash_Lookup_visit3.getCount(visit3HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'visit3' and it contains more one result from keys :  visit3.visit_start_date = '" + visit3HashKey.visit_start_date + "', visit3.person_uuid = '" + visit3HashKey.person_uuid + "'");
								} // G 071
							

							visit3Struct visit3 = null;
                    		  	 
							   
                    		  	 
	       		  	    	visit3Struct fromLookup_visit3 = null;
							visit3 = visit3Default;
										 
							
								 
							
							
								if (tHash_Lookup_visit3 !=null && tHash_Lookup_visit3.hasNext()) { // G 099
								
							
								
								fromLookup_visit3 = tHash_Lookup_visit3.next();

							
							
								} // G 099
							
							

							if(fromLookup_visit3 != null) {
								visit3 = fromLookup_visit3;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

eac3_visit = null;


// # Output table : 'eac3_visit'
eac3_visit_tmp.id = eac3_facility.id ;
eac3_visit_tmp.created_date = eac3_facility.created_date ;
eac3_visit_tmp.last_modified_date = eac3_facility.last_modified_date ;
eac3_visit_tmp.created_by = eac3_facility.created_by ;
eac3_visit_tmp.last_modified_by = eac3_facility.last_modified_by ;
eac3_visit_tmp.eac_id = eac3_facility.eac_id ;
eac3_visit_tmp.archived = eac3_facility.archived ;
eac3_visit_tmp.status = eac3_facility.status ;
eac3_visit_tmp.uuid = eac3_facility.uuid ;
eac3_visit_tmp.eac_session_date = eac3_facility.eac_session_date ;
eac3_visit_tmp.person_uuid = eac3_facility.person_uuid ;
eac3_visit_tmp.facility_id = eac3_facility.facility_id ;
eac3_visit_tmp.visit_id = visit3.visit_id ;
eac3_visit = eac3_visit_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "eac3_visit"
if(eac3_visit != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"eac3_visit");
					}
					



        whetherReject_tDBOutput_3 = false;
                    pstmt_tDBOutput_3.setInt(1, eac3_visit.id);

            int checkCount_tDBOutput_3 = -1;
            try (java.sql.ResultSet rs_tDBOutput_3 = pstmt_tDBOutput_3.executeQuery()) {
                while(rs_tDBOutput_3.next()) {
                    checkCount_tDBOutput_3 = rs_tDBOutput_3.getInt(1);
                }
            }
            if(checkCount_tDBOutput_3 > 0) {
                        pstmtUpdate_tDBOutput_3.setInt(1, eac3_visit.id);

                        if(eac3_visit.created_date != null) {
pstmtUpdate_tDBOutput_3.setTimestamp(2, new java.sql.Timestamp(eac3_visit.created_date.getTime()));
} else {
pstmtUpdate_tDBOutput_3.setNull(2, java.sql.Types.TIMESTAMP);
}

                        if(eac3_visit.last_modified_date != null) {
pstmtUpdate_tDBOutput_3.setTimestamp(3, new java.sql.Timestamp(eac3_visit.last_modified_date.getTime()));
} else {
pstmtUpdate_tDBOutput_3.setNull(3, java.sql.Types.TIMESTAMP);
}

                        if(eac3_visit.created_by == null) {
pstmtUpdate_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(4, eac3_visit.created_by);
}

                        if(eac3_visit.last_modified_by == null) {
pstmtUpdate_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(5, eac3_visit.last_modified_by);
}

                        if(eac3_visit.eac_id == null) {
pstmtUpdate_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(6, eac3_visit.eac_id);
}

                        if(eac3_visit.archived == null) {
pstmtUpdate_tDBOutput_3.setNull(7, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_3.setInt(7, eac3_visit.archived);
}

                        if(eac3_visit.status == null) {
pstmtUpdate_tDBOutput_3.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(8, eac3_visit.status);
}

                        if(eac3_visit.uuid == null) {
pstmtUpdate_tDBOutput_3.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(9, eac3_visit.uuid);
}

                        if(eac3_visit.eac_session_date != null) {
pstmtUpdate_tDBOutput_3.setTimestamp(10, new java.sql.Timestamp(eac3_visit.eac_session_date.getTime()));
} else {
pstmtUpdate_tDBOutput_3.setNull(10, java.sql.Types.TIMESTAMP);
}

                        if(eac3_visit.person_uuid == null) {
pstmtUpdate_tDBOutput_3.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(11, eac3_visit.person_uuid);
}

                        pstmtUpdate_tDBOutput_3.setInt(12, eac3_visit.facility_id);

                        if(eac3_visit.visit_id == null) {
pstmtUpdate_tDBOutput_3.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(13, eac3_visit.visit_id);
}

                        pstmtUpdate_tDBOutput_3.setInt(14 + count_tDBOutput_3, eac3_visit.id);

                try {
					
                    updatedCount_tDBOutput_3 = updatedCount_tDBOutput_3 + pstmtUpdate_tDBOutput_3.executeUpdate();
                    nb_line_tDBOutput_3++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_3 = true;
                        nb_line_tDBOutput_3++;
                            System.err.print(e.getMessage());
                }
            } else {
                        pstmtInsert_tDBOutput_3.setInt(1, eac3_visit.id);

                        if(eac3_visit.created_date != null) {
pstmtInsert_tDBOutput_3.setTimestamp(2, new java.sql.Timestamp(eac3_visit.created_date.getTime()));
} else {
pstmtInsert_tDBOutput_3.setNull(2, java.sql.Types.TIMESTAMP);
}

                        if(eac3_visit.last_modified_date != null) {
pstmtInsert_tDBOutput_3.setTimestamp(3, new java.sql.Timestamp(eac3_visit.last_modified_date.getTime()));
} else {
pstmtInsert_tDBOutput_3.setNull(3, java.sql.Types.TIMESTAMP);
}

                        if(eac3_visit.created_by == null) {
pstmtInsert_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(4, eac3_visit.created_by);
}

                        if(eac3_visit.last_modified_by == null) {
pstmtInsert_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(5, eac3_visit.last_modified_by);
}

                        if(eac3_visit.eac_id == null) {
pstmtInsert_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(6, eac3_visit.eac_id);
}

                        if(eac3_visit.archived == null) {
pstmtInsert_tDBOutput_3.setNull(7, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_3.setInt(7, eac3_visit.archived);
}

                        if(eac3_visit.status == null) {
pstmtInsert_tDBOutput_3.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(8, eac3_visit.status);
}

                        if(eac3_visit.uuid == null) {
pstmtInsert_tDBOutput_3.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(9, eac3_visit.uuid);
}

                        if(eac3_visit.eac_session_date != null) {
pstmtInsert_tDBOutput_3.setTimestamp(10, new java.sql.Timestamp(eac3_visit.eac_session_date.getTime()));
} else {
pstmtInsert_tDBOutput_3.setNull(10, java.sql.Types.TIMESTAMP);
}

                        if(eac3_visit.person_uuid == null) {
pstmtInsert_tDBOutput_3.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(11, eac3_visit.person_uuid);
}

                        pstmtInsert_tDBOutput_3.setInt(12, eac3_visit.facility_id);

                        if(eac3_visit.visit_id == null) {
pstmtInsert_tDBOutput_3.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(13, eac3_visit.visit_id);
}

                try {
					
                    insertedCount_tDBOutput_3 = insertedCount_tDBOutput_3 + pstmtInsert_tDBOutput_3.executeUpdate();
                    nb_line_tDBOutput_3++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_3 = true;
                        nb_line_tDBOutput_3++;
                            System.err.print(e.getMessage());
                }
            }
            if(!whetherReject_tDBOutput_3) {
            }
    		    commitCounter_tDBOutput_3++;
                if(commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {
                	conn_tDBOutput_3.commit();
                	
                	commitCounter_tDBOutput_3=0;
                }

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "eac3_visit"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_end ] stop
 */

} // End of branch "eac3_facility"



	
		} // close loop of lookup 'row5' // G_TM_M_043
	
	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_7 end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

	}
}finally{
	if (rs_tDBInput_7 != null) {
		rs_tDBInput_7.close();
	}
	if (stmt_tDBInput_7 != null) {
		stmt_tDBInput_7.close();
	}
	if(conn_tDBInput_7 != null && !conn_tDBInput_7.isClosed()) {
		
			conn_tDBInput_7.commit();
			
		
			conn_tDBInput_7.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_7_NB_LINE",nb_line_tDBInput_7);
 

ok_Hash.put("tDBInput_7", true);
end_Hash.put("tDBInput_7", System.currentTimeMillis());

   			if (globalMap.get("tDBInput_7_NB_LINE") != null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If4", 0, "true");
					}
				tJava_5Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If4", 0, "false");
					}   	 
   				}



/**
 * [tDBInput_7 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_facility_eac3 != null) {
						tHash_Lookup_facility_eac3.endGet();
					}
					globalMap.remove( "tHash_Lookup_facility_eac3" );

					
					
				
					if(tHash_Lookup_row5 != null) {
						tHash_Lookup_row5.endGet();
					}
					globalMap.remove( "tHash_Lookup_row5" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"eac3_extract");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_visit3 != null) {
						tHash_Lookup_visit3.endGet();
					}
					globalMap.remove( "tHash_Lookup_visit3" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"eac3_facility");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



        if(pstmtUpdate_tDBOutput_3 != null){
            pstmtUpdate_tDBOutput_3.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_3");
        }
        if(pstmtInsert_tDBOutput_3 != null){
            pstmtInsert_tDBOutput_3.close();
            resourceMap.remove("pstmtInsert_tDBOutput_3");
        }
        if(pstmt_tDBOutput_3 != null) {
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);
			
			conn_tDBOutput_3.commit();
			
		
    	conn_tDBOutput_3 .close();
    	
    	resourceMap.put("finish_tDBOutput_3", true);
    	

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"eac3_visit");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tJava_7Process(globalMap);



/**
 * [tDBOutput_3 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tDBInput_11Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_7"
					     			globalMap.remove("tHash_Lookup_visit3"); 
				     			
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_facility_eac3"); 
				     			
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row5"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_3 = null;
                if ((pstmtUpdateToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_3")) != null) {
                    pstmtUpdateToClose_tDBOutput_3.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_3 = null;
                if ((pstmtInsertToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_3")) != null) {
                    pstmtInsertToClose_tDBOutput_3.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_3") == null){
            java.sql.Connection ctn_tDBOutput_3 = null;
            if((ctn_tDBOutput_3 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_3")) != null){
                try {
                    ctn_tDBOutput_3.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_3) {
                    String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :" + sqlEx_tDBOutput_3.getMessage();
                    System.err.println(errorMessage_tDBOutput_3);
                }
            }
        }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}
	

public void tJava_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_7", false);
		start_Hash.put("tJava_7", System.currentTimeMillis());
		
	
	currentComponent="tJava_7";

	
		int tos_count_tJava_7 = 0;
		


int totalMigrated = globalMap.get("tDBOutput_3_NB_LINE_UPDATED") != null ? (Integer)globalMap.get("tDBOutput_3_NB_LINE_UPDATED") : 0;

System.out.println("Total EAC 3 session already migrated "+totalMigrated);

System.out.println("Total new records migrated - "+globalMap.get("tDBOutput_3_NB_LINE_INSERTED"));
if(globalMap.get("tDBOutput_3_ERROR_MESSAGE") != null){
System.out.println("Migration Error - "+globalMap.get("tDBOutput_3_ERROR_MESSAGE"));
}
System.out.println("Total erroneous records not migrated - "+globalMap.get("tFileOutputDelimited_3_NB_LINE"));
System.out.println("*************EAC 3 SESSION MIGRATION REPORT END*****************");
System.out.println();

 



/**
 * [tJava_7 begin ] stop
 */
	
	/**
	 * [tJava_7 main ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 


	tos_count_tJava_7++;

/**
 * [tJava_7 main ] stop
 */
	
	/**
	 * [tJava_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 



/**
 * [tJava_7 process_data_begin ] stop
 */
	
	/**
	 * [tJava_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 



/**
 * [tJava_7 process_data_end ] stop
 */
	
	/**
	 * [tJava_7 end ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 

ok_Hash.put("tJava_7", true);
end_Hash.put("tJava_7", System.currentTimeMillis());




/**
 * [tJava_7 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_7 finally ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 



/**
 * [tJava_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_7_SUBPROCESS_STATE", 1);
	}
	

public void tJava_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_5", false);
		start_Hash.put("tJava_5", System.currentTimeMillis());
		
	
	currentComponent="tJava_5";

	
		int tos_count_tJava_5 = 0;
		


System.out.println("***********EAC 3 SESSION MIGRATION REPORT START*****************");
System.out.println("Total EAC 3 session records fetched from LAMIS3 EAC - "+globalMap.get("tDBInput_7_NB_LINE"));
System.out.println();
 



/**
 * [tJava_5 begin ] stop
 */
	
	/**
	 * [tJava_5 main ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 


	tos_count_tJava_5++;

/**
 * [tJava_5 main ] stop
 */
	
	/**
	 * [tJava_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 process_data_begin ] stop
 */
	
	/**
	 * [tJava_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 process_data_end ] stop
 */
	
	/**
	 * [tJava_5 end ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 

ok_Hash.put("tJava_5", true);
end_Hash.put("tJava_5", System.currentTimeMillis());




/**
 * [tJava_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_5 finally ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}
	


public static class outcome_extractStruct implements routines.system.IPersistableRow<outcome_extractStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String eac_id;

				public String getEac_id () {
					return this.eac_id;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public int facility_id;

				public int getFacility_id () {
					return this.facility_id;
				}
				
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final outcome_extractStruct other = (outcome_extractStruct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(outcome_extractStruct other) {

		other.id = this.id;
	            other.created_date = this.created_date;
	            other.last_modified_date = this.last_modified_date;
	            other.created_by = this.created_by;
	            other.last_modified_by = this.last_modified_by;
	            other.eac_id = this.eac_id;
	            other.archived = this.archived;
	            other.person_uuid = this.person_uuid;
	            other.facility_id = this.facility_id;
	            other.visit_id = this.visit_id;
	            
	}

	public void copyKeysDataTo(outcome_extractStruct other) {

		other.id = this.id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_EAC.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_EAC.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_EAC, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_EAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_by = readString(dis);
					
					this.eac_id = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.person_uuid = readString(dis);
					
			        this.facility_id = dis.readInt();
					
					this.visit_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.eac_id,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// int
				
		            	dos.writeInt(this.facility_id);
					
					// String
				
						writeString(this.visit_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",eac_id="+eac_id);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",visit_id="+visit_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outcome_extractStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class eac_outcome_extractStruct implements routines.system.IPersistableRow<eac_outcome_extractStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String eac_id;

				public String getEac_id () {
					return this.eac_id;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public java.util.Date eac_session_date;

				public java.util.Date getEac_session_date () {
					return this.eac_session_date;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public int facility_id;

				public int getFacility_id () {
					return this.facility_id;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_EAC.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_EAC.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_EAC, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_EAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_by = readString(dis);
					
					this.eac_id = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.eac_session_date = readDate(dis);
					
					this.person_uuid = readString(dis);
					
			        this.facility_id = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.eac_id,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// java.util.Date
				
						writeDate(this.eac_session_date,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// int
				
		            	dos.writeInt(this.facility_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",eac_id="+eac_id);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",eac_session_date="+String.valueOf(eac_session_date));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",facility_id="+String.valueOf(facility_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(eac_outcome_extractStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class eac_extract_outcomeStruct implements routines.system.IPersistableRow<eac_extract_outcomeStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String eac_id;

				public String getEac_id () {
					return this.eac_id;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public java.util.Date eac_session_date;

				public java.util.Date getEac_session_date () {
					return this.eac_session_date;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_EAC.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_EAC.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_EAC, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_EAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_by = readString(dis);
					
					this.eac_id = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.eac_session_date = readDate(dis);
					
					this.person_uuid = readString(dis);
					
					this.datim_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.eac_id,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// java.util.Date
				
						writeDate(this.eac_session_date,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.datim_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",eac_id="+eac_id);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",eac_session_date="+String.valueOf(eac_session_date));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",datim_id="+datim_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(eac_extract_outcomeStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_11Struct implements routines.system.IPersistableRow<after_tDBInput_11Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String eac_id;

				public String getEac_id () {
					return this.eac_id;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public java.util.Date eac_session_date;

				public java.util.Date getEac_session_date () {
					return this.eac_session_date;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tDBInput_11Struct other = (after_tDBInput_11Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(after_tDBInput_11Struct other) {

		other.id = this.id;
	            other.created_date = this.created_date;
	            other.last_modified_date = this.last_modified_date;
	            other.created_by = this.created_by;
	            other.last_modified_by = this.last_modified_by;
	            other.eac_id = this.eac_id;
	            other.archived = this.archived;
	            other.eac_session_date = this.eac_session_date;
	            other.person_uuid = this.person_uuid;
	            other.datim_id = this.datim_id;
	            
	}

	public void copyKeysDataTo(after_tDBInput_11Struct other) {

		other.id = this.id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_EAC.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_EAC.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_EAC, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_EAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_by = readString(dis);
					
					this.eac_id = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.eac_session_date = readDate(dis);
					
					this.person_uuid = readString(dis);
					
					this.datim_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.eac_id,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// java.util.Date
				
						writeDate(this.eac_session_date,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.datim_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",eac_id="+eac_id);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",eac_session_date="+String.valueOf(eac_session_date));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",datim_id="+datim_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_11Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_12Process(globalMap);
		tDBInput_15Process(globalMap);

		eac_extract_outcomeStruct eac_extract_outcome = new eac_extract_outcomeStruct();
eac_outcome_extractStruct eac_outcome_extract = new eac_outcome_extractStruct();
outcome_extractStruct outcome_extract = new outcome_extractStruct();






	
	/**
	 * [tDBOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_5", false);
		start_Hash.put("tDBOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"outcome_extract");
					}
				
		int tos_count_tDBOutput_5 = 0;
		





String dbschema_tDBOutput_5 = null;
	dbschema_tDBOutput_5 = context.LAMISPlus_Schema;
	

String tableName_tDBOutput_5 = null;
if(dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
	tableName_tDBOutput_5 = ("hiv_eac_out_come");
} else {
	tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "\".\"" + ("hiv_eac_out_come");
}

        int updateKeyCount_tDBOutput_5 = 1;
        if(updateKeyCount_tDBOutput_5 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_5 = 0;
int nb_line_update_tDBOutput_5 = 0;
int nb_line_inserted_tDBOutput_5 = 0;
int nb_line_deleted_tDBOutput_5 = 0;
int nb_line_rejected_tDBOutput_5 = 0;

int deletedCount_tDBOutput_5=0;
int updatedCount_tDBOutput_5=0;
int insertedCount_tDBOutput_5=0;
int rejectedCount_tDBOutput_5=0;

boolean whetherReject_tDBOutput_5 = false;

java.sql.Connection conn_tDBOutput_5 = null;
String dbUser_tDBOutput_5 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_5 = "jdbc:postgresql://"+context.LAMISPlus_Server+":"+context.LAMISPlus_Port+"/"+context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
    dbUser_tDBOutput_5 = context.LAMISPlus_Login;

	final String decryptedPassword_tDBOutput_5 = context.LAMISPlus_Password; 

    String dbPwd_tDBOutput_5 = decryptedPassword_tDBOutput_5;

    conn_tDBOutput_5 = java.sql.DriverManager.getConnection(url_tDBOutput_5,dbUser_tDBOutput_5,dbPwd_tDBOutput_5);
	
	resourceMap.put("conn_tDBOutput_5", conn_tDBOutput_5);
        conn_tDBOutput_5.setAutoCommit(false);
        int commitEvery_tDBOutput_5 = 10000;
        int commitCounter_tDBOutput_5 = 0;



int count_tDBOutput_5=0;
	    java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_5 + "\" WHERE \"id\" = ?");
	    resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);
	    String insert_tDBOutput_5 = "INSERT INTO \"" + tableName_tDBOutput_5 + "\" (\"id\",\"created_date\",\"last_modified_date\",\"created_by\",\"last_modified_by\",\"eac_id\",\"archived\",\"person_uuid\",\"facility_id\",\"visit_id\") VALUES (?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);
	    resourceMap.put("pstmtInsert_tDBOutput_5", pstmtInsert_tDBOutput_5);
	    String update_tDBOutput_5 = "UPDATE \"" + tableName_tDBOutput_5 + "\" SET \"id\" = ?,\"created_date\" = ?,\"last_modified_date\" = ?,\"created_by\" = ?,\"last_modified_by\" = ?,\"eac_id\" = ?,\"archived\" = ?,\"person_uuid\" = ?,\"facility_id\" = ?,\"visit_id\" = ? WHERE \"id\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(update_tDBOutput_5);
	    resourceMap.put("pstmtUpdate_tDBOutput_5", pstmtUpdate_tDBOutput_5);
	    

 



/**
 * [tDBOutput_5 begin ] stop
 */



	
	/**
	 * [tMap_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_10", false);
		start_Hash.put("tMap_10", System.currentTimeMillis());
		
	
	currentComponent="tMap_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"eac_outcome_extract");
					}
				
		int tos_count_tMap_10 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
					globalMap.get( "tHash_Lookup_row4" ))
					;					
					
	

row4Struct row4HashKey = new row4Struct();
row4Struct row4Default = new row4Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_10__Struct  {
}
Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
outcome_extractStruct outcome_extract_tmp = new outcome_extractStruct();
// ###############################

        
        



        









 



/**
 * [tMap_10 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"eac_extract_outcome");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
eac_outcome_extractStruct eac_outcome_extract_tmp = new eac_outcome_extractStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tDBInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_11", false);
		start_Hash.put("tDBInput_11", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_11";

	
		int tos_count_tDBInput_11 = 0;
		
	
    
	
		    int nb_line_tDBInput_11 = 0;
		    java.sql.Connection conn_tDBInput_11 = null;
				String driverClass_tDBInput_11 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_11 = java.lang.Class.forName(driverClass_tDBInput_11);
				String dbUser_tDBInput_11 = context.LAMIS3_Login;
				
				
	final String decryptedPassword_tDBInput_11 = context.LAMIS3_Password; 
				
				String dbPwd_tDBInput_11 = decryptedPassword_tDBInput_11;
				
				String url_tDBInput_11 = "jdbc:postgresql://" + context.LAMIS3_Server + ":" + context.LAMIS3_Port + "/" + context.LAMIS3_Database + "?" + context.LAMIS3_AdditionalParams;
				
				conn_tDBInput_11 = java.sql.DriverManager.getConnection(url_tDBInput_11,dbUser_tDBInput_11,dbPwd_tDBInput_11);
		        
				conn_tDBInput_11.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_11 = conn_tDBInput_11.createStatement();

		    String dbquery_tDBInput_11 = "SELECT e.id, e.last_modified as created_date, e.last_modified as last_modified_date,\n'ETL' as created_by, 'ETL' as las"
+"t_modified_by, \ne.uuid as eac_id, e.archived::INTEGER,\ne.date_eac3 eac_session_date,\n  p.uuid as person_uuid,\nn.dati"
+"m_id FROM eac e\n    INNER JOIN patient p ON p.id = e.patient_id\n    INNER JOIN ndr_facility n ON n.id=e.facility_id\n	"
+"WHERE e.date_eac3 is not null AND p.extra->>'art'='true'";
			

            	globalMap.put("tDBInput_11_QUERY",dbquery_tDBInput_11);
		    java.sql.ResultSet rs_tDBInput_11 = null;

		    try {
		    	rs_tDBInput_11 = stmt_tDBInput_11.executeQuery(dbquery_tDBInput_11);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_11 = rs_tDBInput_11.getMetaData();
		    	int colQtyInRs_tDBInput_11 = rsmd_tDBInput_11.getColumnCount();

		    String tmpContent_tDBInput_11 = null;
		    
		    
		    while (rs_tDBInput_11.next()) {
		        nb_line_tDBInput_11++;
		        
							if(colQtyInRs_tDBInput_11 < 1) {
								eac_extract_outcome.id = 0;
							} else {
		                          
            eac_extract_outcome.id = rs_tDBInput_11.getInt(1);
            if(rs_tDBInput_11.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_11 < 2) {
								eac_extract_outcome.created_date = null;
							} else {
										
			eac_extract_outcome.created_date = routines.system.JDBCUtil.getDate(rs_tDBInput_11, 2);
		                    }
							if(colQtyInRs_tDBInput_11 < 3) {
								eac_extract_outcome.last_modified_date = null;
							} else {
										
			eac_extract_outcome.last_modified_date = routines.system.JDBCUtil.getDate(rs_tDBInput_11, 3);
		                    }
							if(colQtyInRs_tDBInput_11 < 4) {
								eac_extract_outcome.created_by = null;
							} else {
	                         		
        	eac_extract_outcome.created_by = routines.system.JDBCUtil.getString(rs_tDBInput_11, 4, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 5) {
								eac_extract_outcome.last_modified_by = null;
							} else {
	                         		
        	eac_extract_outcome.last_modified_by = routines.system.JDBCUtil.getString(rs_tDBInput_11, 5, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 6) {
								eac_extract_outcome.eac_id = null;
							} else {
	                         		
        	eac_extract_outcome.eac_id = routines.system.JDBCUtil.getString(rs_tDBInput_11, 6, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 7) {
								eac_extract_outcome.archived = null;
							} else {
		                          
            eac_extract_outcome.archived = rs_tDBInput_11.getInt(7);
            if(rs_tDBInput_11.wasNull()){
                    eac_extract_outcome.archived = null;
            }
		                    }
							if(colQtyInRs_tDBInput_11 < 8) {
								eac_extract_outcome.eac_session_date = null;
							} else {
										
			eac_extract_outcome.eac_session_date = routines.system.JDBCUtil.getDate(rs_tDBInput_11, 8);
		                    }
							if(colQtyInRs_tDBInput_11 < 9) {
								eac_extract_outcome.person_uuid = null;
							} else {
	                         		
        	eac_extract_outcome.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_11, 9, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 10) {
								eac_extract_outcome.datim_id = null;
							} else {
	                         		
        	eac_extract_outcome.datim_id = routines.system.JDBCUtil.getString(rs_tDBInput_11, 10, false);
		                    }
					


 



/**
 * [tDBInput_11 begin ] stop
 */
	
	/**
	 * [tDBInput_11 main ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 


	tos_count_tDBInput_11++;

/**
 * [tDBInput_11 main ] stop
 */
	
	/**
	 * [tDBInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"eac_extract_outcome");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row2HashKey.datim_id = eac_extract_outcome.datim_id ;
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.datim_id = '" + row2HashKey.datim_id + "'");
								} // G 071
							

							row2Struct row2 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								 
							
							
								if (tHash_Lookup_row2 !=null && tHash_Lookup_row2.hasNext()) { // G 099
								
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							
							
								} // G 099
							
							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

eac_outcome_extract = null;


// # Output table : 'eac_outcome_extract'
eac_outcome_extract_tmp.id = Numeric.sequence("s1",1,1) ;
eac_outcome_extract_tmp.created_date = eac_extract_outcome.created_date ;
eac_outcome_extract_tmp.last_modified_date = eac_extract_outcome.last_modified_date ;
eac_outcome_extract_tmp.created_by = eac_extract_outcome.created_by ;
eac_outcome_extract_tmp.last_modified_by = eac_extract_outcome.last_modified_by ;
eac_outcome_extract_tmp.eac_id = eac_extract_outcome.eac_id ;
eac_outcome_extract_tmp.archived = eac_extract_outcome.archived ;
eac_outcome_extract_tmp.eac_session_date = eac_extract_outcome.eac_session_date ;
eac_outcome_extract_tmp.person_uuid = eac_extract_outcome.person_uuid ;
eac_outcome_extract_tmp.facility_id = row2.id ;
eac_outcome_extract = eac_outcome_extract_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "eac_outcome_extract"
if(eac_outcome_extract != null) { 



	
	/**
	 * [tMap_10 main ] start
	 */

	

	
	
	currentComponent="tMap_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"eac_outcome_extract");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_10 = false;
		  boolean mainRowRejected_tMap_10 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_10) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_10 = false;
								
                        		    		    row4HashKey.visit_start_date = eac_outcome_extract.eac_session_date  == null ? null : new java.util.Date(eac_outcome_extract.eac_session_date .getTime());
                        		    		
                        		    		    row4HashKey.person_uuid = eac_outcome_extract.person_uuid ;
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.visit_start_date = '" + row4HashKey.visit_start_date + "', row4.person_uuid = '" + row4HashKey.person_uuid + "'");
								} // G 071
							

							row4Struct row4 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								 
							
							
								if (tHash_Lookup_row4 !=null && tHash_Lookup_row4.hasNext()) { // G 099
								
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							
							
								} // G 099
							
							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
        // ###############################
        // # Output tables

outcome_extract = null;


// # Output table : 'outcome_extract'
outcome_extract_tmp.id = eac_outcome_extract.id ;
outcome_extract_tmp.created_date = eac_outcome_extract.created_date ;
outcome_extract_tmp.last_modified_date = eac_outcome_extract.last_modified_date ;
outcome_extract_tmp.created_by = eac_outcome_extract.created_by ;
outcome_extract_tmp.last_modified_by = eac_outcome_extract.last_modified_by ;
outcome_extract_tmp.eac_id = eac_outcome_extract.eac_id ;
outcome_extract_tmp.archived = eac_outcome_extract.archived ;
outcome_extract_tmp.person_uuid = eac_outcome_extract.person_uuid ;
outcome_extract_tmp.facility_id = eac_outcome_extract.facility_id ;
outcome_extract_tmp.visit_id = row4.visit_id ;
outcome_extract = outcome_extract_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_10 = false;










 


	tos_count_tMap_10++;

/**
 * [tMap_10 main ] stop
 */
	
	/**
	 * [tMap_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_begin ] stop
 */
// Start of branch "outcome_extract"
if(outcome_extract != null) { 



	
	/**
	 * [tDBOutput_5 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"outcome_extract");
					}
					



        whetherReject_tDBOutput_5 = false;
                    pstmt_tDBOutput_5.setInt(1, outcome_extract.id);

            int checkCount_tDBOutput_5 = -1;
            try (java.sql.ResultSet rs_tDBOutput_5 = pstmt_tDBOutput_5.executeQuery()) {
                while(rs_tDBOutput_5.next()) {
                    checkCount_tDBOutput_5 = rs_tDBOutput_5.getInt(1);
                }
            }
            if(checkCount_tDBOutput_5 > 0) {
                        pstmtUpdate_tDBOutput_5.setInt(1, outcome_extract.id);

                        if(outcome_extract.created_date != null) {
pstmtUpdate_tDBOutput_5.setTimestamp(2, new java.sql.Timestamp(outcome_extract.created_date.getTime()));
} else {
pstmtUpdate_tDBOutput_5.setNull(2, java.sql.Types.TIMESTAMP);
}

                        if(outcome_extract.last_modified_date != null) {
pstmtUpdate_tDBOutput_5.setTimestamp(3, new java.sql.Timestamp(outcome_extract.last_modified_date.getTime()));
} else {
pstmtUpdate_tDBOutput_5.setNull(3, java.sql.Types.TIMESTAMP);
}

                        if(outcome_extract.created_by == null) {
pstmtUpdate_tDBOutput_5.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(4, outcome_extract.created_by);
}

                        if(outcome_extract.last_modified_by == null) {
pstmtUpdate_tDBOutput_5.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(5, outcome_extract.last_modified_by);
}

                        if(outcome_extract.eac_id == null) {
pstmtUpdate_tDBOutput_5.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(6, outcome_extract.eac_id);
}

                        if(outcome_extract.archived == null) {
pstmtUpdate_tDBOutput_5.setNull(7, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_5.setInt(7, outcome_extract.archived);
}

                        if(outcome_extract.person_uuid == null) {
pstmtUpdate_tDBOutput_5.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(8, outcome_extract.person_uuid);
}

                        pstmtUpdate_tDBOutput_5.setInt(9, outcome_extract.facility_id);

                        if(outcome_extract.visit_id == null) {
pstmtUpdate_tDBOutput_5.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(10, outcome_extract.visit_id);
}

                        pstmtUpdate_tDBOutput_5.setInt(11 + count_tDBOutput_5, outcome_extract.id);

                try {
					
                    updatedCount_tDBOutput_5 = updatedCount_tDBOutput_5 + pstmtUpdate_tDBOutput_5.executeUpdate();
                    nb_line_tDBOutput_5++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_5 = true;
                        nb_line_tDBOutput_5++;
                            System.err.print(e.getMessage());
                }
            } else {
                        pstmtInsert_tDBOutput_5.setInt(1, outcome_extract.id);

                        if(outcome_extract.created_date != null) {
pstmtInsert_tDBOutput_5.setTimestamp(2, new java.sql.Timestamp(outcome_extract.created_date.getTime()));
} else {
pstmtInsert_tDBOutput_5.setNull(2, java.sql.Types.TIMESTAMP);
}

                        if(outcome_extract.last_modified_date != null) {
pstmtInsert_tDBOutput_5.setTimestamp(3, new java.sql.Timestamp(outcome_extract.last_modified_date.getTime()));
} else {
pstmtInsert_tDBOutput_5.setNull(3, java.sql.Types.TIMESTAMP);
}

                        if(outcome_extract.created_by == null) {
pstmtInsert_tDBOutput_5.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(4, outcome_extract.created_by);
}

                        if(outcome_extract.last_modified_by == null) {
pstmtInsert_tDBOutput_5.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(5, outcome_extract.last_modified_by);
}

                        if(outcome_extract.eac_id == null) {
pstmtInsert_tDBOutput_5.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(6, outcome_extract.eac_id);
}

                        if(outcome_extract.archived == null) {
pstmtInsert_tDBOutput_5.setNull(7, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_5.setInt(7, outcome_extract.archived);
}

                        if(outcome_extract.person_uuid == null) {
pstmtInsert_tDBOutput_5.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(8, outcome_extract.person_uuid);
}

                        pstmtInsert_tDBOutput_5.setInt(9, outcome_extract.facility_id);

                        if(outcome_extract.visit_id == null) {
pstmtInsert_tDBOutput_5.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(10, outcome_extract.visit_id);
}

                try {
					
                    insertedCount_tDBOutput_5 = insertedCount_tDBOutput_5 + pstmtInsert_tDBOutput_5.executeUpdate();
                    nb_line_tDBOutput_5++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_5 = true;
                        nb_line_tDBOutput_5++;
                            System.err.print(e.getMessage());
                }
            }
    		    commitCounter_tDBOutput_5++;
                if(commitEvery_tDBOutput_5 <= commitCounter_tDBOutput_5) {
                	conn_tDBOutput_5.commit();
                	
                	commitCounter_tDBOutput_5=0;
                }

 


	tos_count_tDBOutput_5++;

/**
 * [tDBOutput_5 main ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_end ] stop
 */

} // End of branch "outcome_extract"




	
	/**
	 * [tMap_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_end ] stop
 */

} // End of branch "eac_outcome_extract"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_11 end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

	}
}finally{
	if (rs_tDBInput_11 != null) {
		rs_tDBInput_11.close();
	}
	if (stmt_tDBInput_11 != null) {
		stmt_tDBInput_11.close();
	}
	if(conn_tDBInput_11 != null && !conn_tDBInput_11.isClosed()) {
		
			conn_tDBInput_11.commit();
			
		
			conn_tDBInput_11.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_11_NB_LINE",nb_line_tDBInput_11);
 

ok_Hash.put("tDBInput_11", true);
end_Hash.put("tDBInput_11", System.currentTimeMillis());

   			if (globalMap.get("tDBInput_11_NB_LINE") != null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If5", 0, "true");
					}
				tJava_6Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If5", 0, "false");
					}   	 
   				}



/**
 * [tDBInput_11 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"eac_extract_outcome");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tMap_10 end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row4 != null) {
						tHash_Lookup_row4.endGet();
					}
					globalMap.remove( "tHash_Lookup_row4" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"eac_outcome_extract");
			  	}
			  	
 

ok_Hash.put("tMap_10", true);
end_Hash.put("tMap_10", System.currentTimeMillis());




/**
 * [tMap_10 end ] stop
 */

	
	/**
	 * [tDBOutput_5 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



        if(pstmtUpdate_tDBOutput_5 != null){
            pstmtUpdate_tDBOutput_5.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_5");
        }
        if(pstmtInsert_tDBOutput_5 != null){
            pstmtInsert_tDBOutput_5.close();
            resourceMap.remove("pstmtInsert_tDBOutput_5");
        }
        if(pstmt_tDBOutput_5 != null) {
            pstmt_tDBOutput_5.close();
            resourceMap.remove("pstmt_tDBOutput_5");
        }
    resourceMap.put("statementClosed_tDBOutput_5", true);
			
			conn_tDBOutput_5.commit();
			
		
    	conn_tDBOutput_5 .close();
    	
    	resourceMap.put("finish_tDBOutput_5", true);
    	

	nb_line_deleted_tDBOutput_5=nb_line_deleted_tDBOutput_5+ deletedCount_tDBOutput_5;
	nb_line_update_tDBOutput_5=nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
	nb_line_inserted_tDBOutput_5=nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
	nb_line_rejected_tDBOutput_5=nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;
	
        globalMap.put("tDBOutput_5_NB_LINE",nb_line_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_UPDATED",nb_line_update_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_DELETED",nb_line_deleted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"outcome_extract");
			  	}
			  	
 

ok_Hash.put("tDBOutput_5", true);
end_Hash.put("tDBOutput_5", System.currentTimeMillis());




/**
 * [tDBOutput_5 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_11:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tDBInput_16Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_10"
					     			globalMap.remove("tHash_Lookup_row4"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_11 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tMap_10 finally ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 finally ] stop
 */

	
	/**
	 * [tDBOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_5 = null;
                if ((pstmtUpdateToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_5")) != null) {
                    pstmtUpdateToClose_tDBOutput_5.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_5 = null;
                if ((pstmtInsertToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_5")) != null) {
                    pstmtInsertToClose_tDBOutput_5.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
                if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_5")) != null) {
                    pstmtToClose_tDBOutput_5.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_5") == null){
            java.sql.Connection ctn_tDBOutput_5 = null;
            if((ctn_tDBOutput_5 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_5")) != null){
                try {
                    ctn_tDBOutput_5.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_5) {
                    String errorMessage_tDBOutput_5 = "failed to close the connection in tDBOutput_5 :" + sqlEx_tDBOutput_5.getMessage();
                    System.err.println(errorMessage_tDBOutput_5);
                }
            }
        }
    }
 



/**
 * [tDBOutput_5 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 1);
	}
	

public void tJava_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_6", false);
		start_Hash.put("tJava_6", System.currentTimeMillis());
		
	
	currentComponent="tJava_6";

	
		int tos_count_tJava_6 = 0;
		


System.out.println("***********EAC OUTCOME MIGRATION REPORT START*****************");
System.out.println("Total EAC outcome records fetched from LAMIS3 eac - "+globalMap.get("tDBInput_11_NB_LINE"));
System.out.println();
 



/**
 * [tJava_6 begin ] stop
 */
	
	/**
	 * [tJava_6 main ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 


	tos_count_tJava_6++;

/**
 * [tJava_6 main ] stop
 */
	
	/**
	 * [tJava_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 



/**
 * [tJava_6 process_data_begin ] stop
 */
	
	/**
	 * [tJava_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 



/**
 * [tJava_6 process_data_end ] stop
 */
	
	/**
	 * [tJava_6 end ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 

ok_Hash.put("tJava_6", true);
end_Hash.put("tJava_6", System.currentTimeMillis());




/**
 * [tJava_6 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_6 finally ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 



/**
 * [tJava_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}
	


public static class sequence_extraStruct implements routines.system.IPersistableRow<sequence_extraStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long sequence_count;

				public Long getSequence_count () {
					return this.sequence_count;
				}
				
			    public String table_name;

				public String getTable_name () {
					return this.table_name;
				}
				
			    public java.util.Date date_time;

				public java.util.Date getDate_time () {
					return this.date_time;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.table_name == null) ? 0 : this.table_name.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final sequence_extraStruct other = (sequence_extraStruct) obj;
		
						if (this.table_name == null) {
							if (other.table_name != null)
								return false;
						
						} else if (!this.table_name.equals(other.table_name))
						
							return false;
					

		return true;
    }

	public void copyDataTo(sequence_extraStruct other) {

		other.sequence_count = this.sequence_count;
	            other.table_name = this.table_name;
	            other.date_time = this.date_time;
	            
	}

	public void copyKeysDataTo(sequence_extraStruct other) {

		other.table_name = this.table_name;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_EAC.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_EAC.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_EAC, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_EAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sequence_count = null;
           				} else {
           			    	this.sequence_count = dis.readLong();
           				}
					
					this.table_name = readString(dis);
					
					this.date_time = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.sequence_count == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.sequence_count);
		            	}
					
					// String
				
						writeString(this.table_name,dos);
					
					// java.util.Date
				
						writeDate(this.date_time,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("sequence_count="+String.valueOf(sequence_count));
		sb.append(",table_name="+table_name);
		sb.append(",date_time="+String.valueOf(date_time));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sequence_extraStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.table_name, other.table_name);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];

	
			    public Long sequence_count;

				public Long getSequence_count () {
					return this.sequence_count;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sequence_count = null;
           				} else {
           			    	this.sequence_count = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.sequence_count == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.sequence_count);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("sequence_count="+String.valueOf(sequence_count));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
sequence_extraStruct sequence_extra = new sequence_extraStruct();





	
	/**
	 * [tDBOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_6", false);
		start_Hash.put("tDBOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sequence_extra");
					}
				
		int tos_count_tDBOutput_6 = 0;
		





String dbschema_tDBOutput_6 = null;
	dbschema_tDBOutput_6 = context.LAMISPlus_Schema;
	

String tableName_tDBOutput_6 = null;
if(dbschema_tDBOutput_6 == null || dbschema_tDBOutput_6.trim().length() == 0) {
	tableName_tDBOutput_6 = ("etl_sequence");
} else {
	tableName_tDBOutput_6 = dbschema_tDBOutput_6 + "\".\"" + ("etl_sequence");
}

        int updateKeyCount_tDBOutput_6 = 1;
        if(updateKeyCount_tDBOutput_6 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_6 = 0;
int nb_line_update_tDBOutput_6 = 0;
int nb_line_inserted_tDBOutput_6 = 0;
int nb_line_deleted_tDBOutput_6 = 0;
int nb_line_rejected_tDBOutput_6 = 0;

int deletedCount_tDBOutput_6=0;
int updatedCount_tDBOutput_6=0;
int insertedCount_tDBOutput_6=0;
int rejectedCount_tDBOutput_6=0;

boolean whetherReject_tDBOutput_6 = false;

java.sql.Connection conn_tDBOutput_6 = null;
String dbUser_tDBOutput_6 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_6 = "jdbc:postgresql://"+context.LAMISPlus_Server+":"+context.LAMISPlus_Port+"/"+context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
    dbUser_tDBOutput_6 = context.LAMISPlus_Login;

	final String decryptedPassword_tDBOutput_6 = context.LAMISPlus_Password; 

    String dbPwd_tDBOutput_6 = decryptedPassword_tDBOutput_6;

    conn_tDBOutput_6 = java.sql.DriverManager.getConnection(url_tDBOutput_6,dbUser_tDBOutput_6,dbPwd_tDBOutput_6);
	
	resourceMap.put("conn_tDBOutput_6", conn_tDBOutput_6);
        conn_tDBOutput_6.setAutoCommit(false);
        int commitEvery_tDBOutput_6 = 10000;
        int commitCounter_tDBOutput_6 = 0;



int count_tDBOutput_6=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_6 = conn_tDBOutput_6.getMetaData();
                                boolean whetherExist_tDBOutput_6 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_6 = dbMetaData_tDBOutput_6.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_6 = "public";
                                    if(dbschema_tDBOutput_6 == null || dbschema_tDBOutput_6.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_6 = conn_tDBOutput_6.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_6 = stmtSchema_tDBOutput_6.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_6.next()){
                                                defaultSchema_tDBOutput_6 = rsSchema_tDBOutput_6.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_6.next()) {
                                        String table_tDBOutput_6 = rsTable_tDBOutput_6.getString("TABLE_NAME");
                                        String schema_tDBOutput_6 = rsTable_tDBOutput_6.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_6.equals(("etl_sequence"))
                                            && (schema_tDBOutput_6.equals(dbschema_tDBOutput_6) || ((dbschema_tDBOutput_6 ==null || dbschema_tDBOutput_6.trim().length() ==0) && defaultSchema_tDBOutput_6.equals(schema_tDBOutput_6)))) {
                                            whetherExist_tDBOutput_6 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_6) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_6 = conn_tDBOutput_6.createStatement()) {
                                        stmtCreate_tDBOutput_6.execute("CREATE TABLE \"" + tableName_tDBOutput_6 + "\"(\"sequence_count\" INT8 ,\"table_name\" VARCHAR ,\"date_time\" TIMESTAMP ,primary key(\"table_name\"))");
                                    }
                                }
	    java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_6 + "\" WHERE \"table_name\" = ?");
	    resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);
	    String insert_tDBOutput_6 = "INSERT INTO \"" + tableName_tDBOutput_6 + "\" (\"sequence_count\",\"table_name\",\"date_time\") VALUES (?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_6 = conn_tDBOutput_6.prepareStatement(insert_tDBOutput_6);
	    resourceMap.put("pstmtInsert_tDBOutput_6", pstmtInsert_tDBOutput_6);
	    String update_tDBOutput_6 = "UPDATE \"" + tableName_tDBOutput_6 + "\" SET \"sequence_count\" = ?,\"date_time\" = ? WHERE \"table_name\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_6 = conn_tDBOutput_6.prepareStatement(update_tDBOutput_6);
	    resourceMap.put("pstmtUpdate_tDBOutput_6", pstmtUpdate_tDBOutput_6);
	    

 



/**
 * [tDBOutput_6 begin ] stop
 */



	
	/**
	 * [tMap_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_11", false);
		start_Hash.put("tMap_11", System.currentTimeMillis());
		
	
	currentComponent="tMap_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_11 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_11__Struct  {
}
Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
sequence_extraStruct sequence_extra_tmp = new sequence_extraStruct();
// ###############################

        
        



        









 



/**
 * [tMap_11 begin ] stop
 */



	
	/**
	 * [tDBInput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_16", false);
		start_Hash.put("tDBInput_16", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_16";

	
		int tos_count_tDBInput_16 = 0;
		
	
    
	
		    int nb_line_tDBInput_16 = 0;
		    java.sql.Connection conn_tDBInput_16 = null;
				String driverClass_tDBInput_16 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_16 = java.lang.Class.forName(driverClass_tDBInput_16);
				String dbUser_tDBInput_16 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_16 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_16 = decryptedPassword_tDBInput_16;
				
				String url_tDBInput_16 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_16 = java.sql.DriverManager.getConnection(url_tDBInput_16,dbUser_tDBInput_16,dbPwd_tDBInput_16);
		        
				conn_tDBInput_16.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_16 = conn_tDBInput_16.createStatement();

		    String dbquery_tDBInput_16 = "SELECT (SELECT pg_catalog.setval('hiv_eac_id_seq', (SELECT MAX(id) FROM hiv_eac), true)) +\n\n(SELECT pg_catalog.setval"
+"('hiv_eac_session_id_seq', (SELECT MAX(id) FROM hiv_eac_session), true)) +\n\n(SELECT pg_catalog.setval('hiv_eac_out_com"
+"e_id_seq', (SELECT MAX(id) FROM hiv_eac_out_come), true)) as setval";
			

            	globalMap.put("tDBInput_16_QUERY",dbquery_tDBInput_16);
		    java.sql.ResultSet rs_tDBInput_16 = null;

		    try {
		    	rs_tDBInput_16 = stmt_tDBInput_16.executeQuery(dbquery_tDBInput_16);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_16 = rs_tDBInput_16.getMetaData();
		    	int colQtyInRs_tDBInput_16 = rsmd_tDBInput_16.getColumnCount();

		    String tmpContent_tDBInput_16 = null;
		    
		    
		    while (rs_tDBInput_16.next()) {
		        nb_line_tDBInput_16++;
		        
							if(colQtyInRs_tDBInput_16 < 1) {
								row6.sequence_count = null;
							} else {
		                          
            row6.sequence_count = rs_tDBInput_16.getLong(1);
            if(rs_tDBInput_16.wasNull()){
                    row6.sequence_count = null;
            }
		                    }
					


 



/**
 * [tDBInput_16 begin ] stop
 */
	
	/**
	 * [tDBInput_16 main ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

 


	tos_count_tDBInput_16++;

/**
 * [tDBInput_16 main ] stop
 */
	
	/**
	 * [tDBInput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

 



/**
 * [tDBInput_16 process_data_begin ] stop
 */

	
	/**
	 * [tMap_11 main ] start
	 */

	

	
	
	currentComponent="tMap_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_11 = false;
		  boolean mainRowRejected_tMap_11 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
        // ###############################
        // # Output tables

sequence_extra = null;


// # Output table : 'sequence_extra'
sequence_extra_tmp.sequence_count = row6.sequence_count ;
sequence_extra_tmp.table_name = "eac";
sequence_extra_tmp.date_time = java.sql.Timestamp.valueOf( java.time.LocalDateTime.now() );
sequence_extra = sequence_extra_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_11 = false;










 


	tos_count_tMap_11++;

/**
 * [tMap_11 main ] stop
 */
	
	/**
	 * [tMap_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_begin ] stop
 */
// Start of branch "sequence_extra"
if(sequence_extra != null) { 



	
	/**
	 * [tDBOutput_6 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sequence_extra");
					}
					



        whetherReject_tDBOutput_6 = false;
                    if(sequence_extra.table_name == null) {
pstmt_tDBOutput_6.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(1, sequence_extra.table_name);
}

            int checkCount_tDBOutput_6 = -1;
            try (java.sql.ResultSet rs_tDBOutput_6 = pstmt_tDBOutput_6.executeQuery()) {
                while(rs_tDBOutput_6.next()) {
                    checkCount_tDBOutput_6 = rs_tDBOutput_6.getInt(1);
                }
            }
            if(checkCount_tDBOutput_6 > 0) {
                        if(sequence_extra.sequence_count == null) {
pstmtUpdate_tDBOutput_6.setNull(1, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_6.setLong(1, sequence_extra.sequence_count);
}

                        if(sequence_extra.date_time != null) {
pstmtUpdate_tDBOutput_6.setTimestamp(2, new java.sql.Timestamp(sequence_extra.date_time.getTime()));
} else {
pstmtUpdate_tDBOutput_6.setNull(2, java.sql.Types.TIMESTAMP);
}

                        if(sequence_extra.table_name == null) {
pstmtUpdate_tDBOutput_6.setNull(3 + count_tDBOutput_6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_6.setString(3 + count_tDBOutput_6, sequence_extra.table_name);
}

                try {
					
                    updatedCount_tDBOutput_6 = updatedCount_tDBOutput_6 + pstmtUpdate_tDBOutput_6.executeUpdate();
                    nb_line_tDBOutput_6++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_6 = true;
                        nb_line_tDBOutput_6++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(sequence_extra.sequence_count == null) {
pstmtInsert_tDBOutput_6.setNull(1, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_6.setLong(1, sequence_extra.sequence_count);
}

                        if(sequence_extra.table_name == null) {
pstmtInsert_tDBOutput_6.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_6.setString(2, sequence_extra.table_name);
}

                        if(sequence_extra.date_time != null) {
pstmtInsert_tDBOutput_6.setTimestamp(3, new java.sql.Timestamp(sequence_extra.date_time.getTime()));
} else {
pstmtInsert_tDBOutput_6.setNull(3, java.sql.Types.TIMESTAMP);
}

                try {
					
                    insertedCount_tDBOutput_6 = insertedCount_tDBOutput_6 + pstmtInsert_tDBOutput_6.executeUpdate();
                    nb_line_tDBOutput_6++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_6 = true;
                        nb_line_tDBOutput_6++;
                            System.err.print(e.getMessage());
                }
            }
            if(!whetherReject_tDBOutput_6) {
            }
    		    commitCounter_tDBOutput_6++;
                if(commitEvery_tDBOutput_6 <= commitCounter_tDBOutput_6) {
                	conn_tDBOutput_6.commit();
                	
                	commitCounter_tDBOutput_6=0;
                }

 


	tos_count_tDBOutput_6++;

/**
 * [tDBOutput_6 main ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

 



/**
 * [tDBOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

 



/**
 * [tDBOutput_6 process_data_end ] stop
 */

} // End of branch "sequence_extra"




	
	/**
	 * [tMap_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

 



/**
 * [tDBInput_16 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_16 end ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

	}
}finally{
	if (rs_tDBInput_16 != null) {
		rs_tDBInput_16.close();
	}
	if (stmt_tDBInput_16 != null) {
		stmt_tDBInput_16.close();
	}
	if(conn_tDBInput_16 != null && !conn_tDBInput_16.isClosed()) {
		
			conn_tDBInput_16.commit();
			
		
			conn_tDBInput_16.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_16_NB_LINE",nb_line_tDBInput_16);
 

ok_Hash.put("tDBInput_16", true);
end_Hash.put("tDBInput_16", System.currentTimeMillis());




/**
 * [tDBInput_16 end ] stop
 */

	
	/**
	 * [tMap_11 end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_11", true);
end_Hash.put("tMap_11", System.currentTimeMillis());




/**
 * [tMap_11 end ] stop
 */

	
	/**
	 * [tDBOutput_6 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	



        if(pstmtUpdate_tDBOutput_6 != null){
            pstmtUpdate_tDBOutput_6.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_6");
        }
        if(pstmtInsert_tDBOutput_6 != null){
            pstmtInsert_tDBOutput_6.close();
            resourceMap.remove("pstmtInsert_tDBOutput_6");
        }
        if(pstmt_tDBOutput_6 != null) {
            pstmt_tDBOutput_6.close();
            resourceMap.remove("pstmt_tDBOutput_6");
        }
    resourceMap.put("statementClosed_tDBOutput_6", true);
			
			conn_tDBOutput_6.commit();
			
		
    	conn_tDBOutput_6 .close();
    	
    	resourceMap.put("finish_tDBOutput_6", true);
    	

	nb_line_deleted_tDBOutput_6=nb_line_deleted_tDBOutput_6+ deletedCount_tDBOutput_6;
	nb_line_update_tDBOutput_6=nb_line_update_tDBOutput_6 + updatedCount_tDBOutput_6;
	nb_line_inserted_tDBOutput_6=nb_line_inserted_tDBOutput_6 + insertedCount_tDBOutput_6;
	nb_line_rejected_tDBOutput_6=nb_line_rejected_tDBOutput_6 + rejectedCount_tDBOutput_6;
	
        globalMap.put("tDBOutput_6_NB_LINE",nb_line_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_UPDATED",nb_line_update_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_DELETED",nb_line_deleted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_6);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sequence_extra");
			  	}
			  	
 

ok_Hash.put("tDBOutput_6", true);
end_Hash.put("tDBOutput_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJava_2Process(globalMap);



/**
 * [tDBOutput_6 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_16 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

 



/**
 * [tDBInput_16 finally ] stop
 */

	
	/**
	 * [tMap_11 finally ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 finally ] stop
 */

	
	/**
	 * [tDBOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_6 = null;
                if ((pstmtUpdateToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_6")) != null) {
                    pstmtUpdateToClose_tDBOutput_6.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_6 = null;
                if ((pstmtInsertToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_6")) != null) {
                    pstmtInsertToClose_tDBOutput_6.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
                if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_6")) != null) {
                    pstmtToClose_tDBOutput_6.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_6") == null){
            java.sql.Connection ctn_tDBOutput_6 = null;
            if((ctn_tDBOutput_6 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_6")) != null){
                try {
                    ctn_tDBOutput_6.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_6) {
                    String errorMessage_tDBOutput_6 = "failed to close the connection in tDBOutput_6 :" + sqlEx_tDBOutput_6.getMessage();
                    System.err.println(errorMessage_tDBOutput_6);
                }
            }
        }
    }
 



/**
 * [tDBOutput_6 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_16_SUBPROCESS_STATE", 1);
	}
	

public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";

	
		int tos_count_tJava_2 = 0;
		


int totalMigrated = globalMap.get("tDBOutput_5_NB_LINE_UPDATED") != null ? (Integer)globalMap.get("tDBOutput_5_NB_LINE_UPDATED") : 0;

System.out.println("Total EAC already migrated "+totalMigrated);

System.out.println("Total new records migrated - "+globalMap.get("tDBOutput_5_NB_LINE_INSERTED"));
if(globalMap.get("tDBOutput_5_ERROR_MESSAGE") != null){
System.out.println("Migration Error - "+globalMap.get("tDBOutput_5_ERROR_MESSAGE"));
}
System.out.println("Total erroneous records not migrated - "+globalMap.get("tFileOutputDelimited_5_NB_LINE"));
System.out.println("End time - "+ java.time.LocalDateTime.now());
System.out.println("*************EAC MIGRATION REPORT END*****************");
System.out.println("****************************************************************");
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	

public void tJava_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_4", false);
		start_Hash.put("tJava_4", System.currentTimeMillis());
		
	
	currentComponent="tJava_4";

	
		int tos_count_tJava_4 = 0;
		


System.out.println("***********EAC 2 SESSION MIGRATION REPORT START*****************");
System.out.println("Total EAC 2 session records fetched from LAMIS3 eac - "+globalMap.get("tDBInput_10_NB_LINE"));
System.out.println();
 



/**
 * [tJava_4 begin ] stop
 */
	
	/**
	 * [tJava_4 main ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 


	tos_count_tJava_4++;

/**
 * [tJava_4 main ] stop
 */
	
	/**
	 * [tJava_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 process_data_begin ] stop
 */
	
	/**
	 * [tJava_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 process_data_end ] stop
 */
	
	/**
	 * [tJava_4 end ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 

ok_Hash.put("tJava_4", true);
end_Hash.put("tJava_4", System.currentTimeMillis());




/**
 * [tJava_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_4 finally ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}
	

public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";

	
		int tos_count_tJava_3 = 0;
		


System.out.println("***********EAC 1 SESSION MIGRATION REPORT START*****************");

System.out.println("Total EAC 1 session records fetched from LAMIS3 eac - "+globalMap.get("tDBInput_4_NB_LINE"));
System.out.println();
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());




/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	


public static class facility_recordsStruct implements routines.system.IPersistableComparableLookupRow<facility_recordsStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String facility_name;

				public String getFacility_name () {
					return this.facility_name;
				}
				
			    public String lga_name;

				public String getLga_name () {
					return this.lga_name;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.datim_id == null) ? 0 : this.datim_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final facility_recordsStruct other = (facility_recordsStruct) obj;
		
						if (this.datim_id == null) {
							if (other.datim_id != null)
								return false;
						
						} else if (!this.datim_id.equals(other.datim_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(facility_recordsStruct other) {

		other.id = this.id;
	            other.facility_name = this.facility_name;
	            other.lga_name = this.lga_name;
	            other.datim_id = this.datim_id;
	            
	}

	public void copyKeysDataTo(facility_recordsStruct other) {

		other.datim_id = this.datim_id;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_EAC.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_EAC.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_EAC, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_EAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
					this.datim_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.datim_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
						this.facility_name = readString(dis,ois);
					
						this.lga_name = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
						writeString(this.facility_name, dos, oos);
					
						writeString(this.lga_name, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",facility_name="+facility_name);
		sb.append(",lga_name="+lga_name);
		sb.append(",datim_id="+datim_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(facility_recordsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.datim_id, other.datim_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		facility_recordsStruct facility_records = new facility_recordsStruct();




	
	/**
	 * [tAdvancedHash_facility_records begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_facility_records", false);
		start_Hash.put("tAdvancedHash_facility_records", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_facility_records";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"facility_records");
					}
				
		int tos_count_tAdvancedHash_facility_records = 0;
		

			   		// connection name:facility_records
			   		// source node:tDBInput_2 - inputs:(after_tDBInput_1) outputs:(facility_records,facility_records) | target node:tAdvancedHash_facility_records - inputs:(facility_records) outputs:()
			   		// linked node: tMap_3 - inputs:(eac_extract,facility_records) outputs:(eac_facility_extract)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_facility_records = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<facility_recordsStruct> tHash_Lookup_facility_records =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<facility_recordsStruct>getLookup(matchingModeEnum_facility_records);
	   						   
		   	   	   globalMap.put("tHash_Lookup_facility_records", tHash_Lookup_facility_records);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_facility_records begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_2 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
				String url_tDBInput_2 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
				conn_tDBInput_2.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT iden.organisation_unit_id as id, ef.facility_name, ef.lga_name, ef.datim_id FROM etl_facility ef \nINNER JOIN ba"
+"se_organisation_unit_identifier iden ON iden.code = ef.datim_id";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								facility_records.id = 0;
							} else {
		                          
            facility_records.id = rs_tDBInput_2.getInt(1);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								facility_records.facility_name = null;
							} else {
	                         		
        	facility_records.facility_name = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								facility_records.lga_name = null;
							} else {
	                         		
        	facility_records.lga_name = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								facility_records.datim_id = null;
							} else {
	                         		
        	facility_records.datim_id = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
		                    }
					


 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_facility_records main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facility_records";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"facility_records");
					}
					


			   
			   

					facility_recordsStruct facility_records_HashRow = new facility_recordsStruct();
		   	   	   
				
				facility_records_HashRow.id = facility_records.id;
				
				facility_records_HashRow.facility_name = facility_records.facility_name;
				
				facility_records_HashRow.lga_name = facility_records.lga_name;
				
				facility_records_HashRow.datim_id = facility_records.datim_id;
				
			tHash_Lookup_facility_records.put(facility_records_HashRow);
			
            




 


	tos_count_tAdvancedHash_facility_records++;

/**
 * [tAdvancedHash_facility_records main ] stop
 */
	
	/**
	 * [tAdvancedHash_facility_records process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facility_records";

	

 



/**
 * [tAdvancedHash_facility_records process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_facility_records process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facility_records";

	

 



/**
 * [tAdvancedHash_facility_records process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
	if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
		
			conn_tDBInput_2.commit();
			
		
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_facility_records end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facility_records";

	

tHash_Lookup_facility_records.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"facility_records");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_facility_records", true);
end_Hash.put("tAdvancedHash_facility_records", System.currentTimeMillis());




/**
 * [tAdvancedHash_facility_records end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_facility_records finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facility_records";

	

 



/**
 * [tAdvancedHash_facility_records finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class patient_visitStruct implements routines.system.IPersistableComparableLookupRow<patient_visitStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				
			    public java.util.Date visit_start_date;

				public java.util.Date getVisit_start_date () {
					return this.visit_start_date;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.visit_start_date == null) ? 0 : this.visit_start_date.hashCode());
					
						result = prime * result + ((this.person_uuid == null) ? 0 : this.person_uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final patient_visitStruct other = (patient_visitStruct) obj;
		
						if (this.visit_start_date == null) {
							if (other.visit_start_date != null)
								return false;
						
						} else if (!this.visit_start_date.equals(other.visit_start_date))
						
							return false;
					
						if (this.person_uuid == null) {
							if (other.person_uuid != null)
								return false;
						
						} else if (!this.person_uuid.equals(other.person_uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(patient_visitStruct other) {

		other.visit_id = this.visit_id;
	            other.visit_start_date = this.visit_start_date;
	            other.person_uuid = this.person_uuid;
	            
	}

	public void copyKeysDataTo(patient_visitStruct other) {

		other.visit_start_date = this.visit_start_date;
	            	other.person_uuid = this.person_uuid;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_EAC.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_EAC.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_EAC, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_EAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
					this.visit_start_date = readDate(dis);
					
					this.person_uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.visit_start_date,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.visit_id = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.visit_id, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("visit_id="+visit_id);
		sb.append(",visit_start_date="+String.valueOf(visit_start_date));
		sb.append(",person_uuid="+person_uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(patient_visitStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.visit_start_date, other.visit_start_date);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.person_uuid, other.person_uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		patient_visitStruct patient_visit = new patient_visitStruct();




	
	/**
	 * [tAdvancedHash_patient_visit begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_patient_visit", false);
		start_Hash.put("tAdvancedHash_patient_visit", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_patient_visit";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"patient_visit");
					}
				
		int tos_count_tAdvancedHash_patient_visit = 0;
		

			   		// connection name:patient_visit
			   		// source node:tDBInput_3 - inputs:(after_tDBInput_1) outputs:(patient_visit,patient_visit) | target node:tAdvancedHash_patient_visit - inputs:(patient_visit) outputs:()
			   		// linked node: tMap_1 - inputs:(eac_facility_extract,patient_visit) outputs:(eac_visits)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_patient_visit = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<patient_visitStruct> tHash_Lookup_patient_visit =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<patient_visitStruct>getLookup(matchingModeEnum_patient_visit);
	   						   
		   	   	   globalMap.put("tHash_Lookup_patient_visit", tHash_Lookup_patient_visit);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_patient_visit begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_3 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				
				String url_tDBInput_3 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
				conn_tDBInput_3.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT uuid as visit_id, visit_start_date, person_uuid FROM patient_visit";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								patient_visit.visit_id = null;
							} else {
	                         		
        	patient_visit.visit_id = routines.system.JDBCUtil.getString(rs_tDBInput_3, 1, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								patient_visit.visit_start_date = null;
							} else {
										
			patient_visit.visit_start_date = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 2);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								patient_visit.person_uuid = null;
							} else {
	                         		
        	patient_visit.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
		                    }
					


 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_patient_visit main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_patient_visit";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"patient_visit");
					}
					


			   
			   

					patient_visitStruct patient_visit_HashRow = new patient_visitStruct();
		   	   	   
				
				patient_visit_HashRow.visit_id = patient_visit.visit_id;
				
				patient_visit_HashRow.visit_start_date = patient_visit.visit_start_date;
				
				patient_visit_HashRow.person_uuid = patient_visit.person_uuid;
				
			tHash_Lookup_patient_visit.put(patient_visit_HashRow);
			
            




 


	tos_count_tAdvancedHash_patient_visit++;

/**
 * [tAdvancedHash_patient_visit main ] stop
 */
	
	/**
	 * [tAdvancedHash_patient_visit process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_patient_visit";

	

 



/**
 * [tAdvancedHash_patient_visit process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_patient_visit process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_patient_visit";

	

 



/**
 * [tAdvancedHash_patient_visit process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
	if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
		
			conn_tDBInput_3.commit();
			
		
			conn_tDBInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_patient_visit end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_patient_visit";

	

tHash_Lookup_patient_visit.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"patient_visit");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_patient_visit", true);
end_Hash.put("tAdvancedHash_patient_visit", System.currentTimeMillis());




/**
 * [tAdvancedHash_patient_visit end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_patient_visit finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_patient_visit";

	

 



/**
 * [tAdvancedHash_patient_visit finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class facilityStruct implements routines.system.IPersistableComparableLookupRow<facilityStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String facility_name;

				public String getFacility_name () {
					return this.facility_name;
				}
				
			    public String lga_name;

				public String getLga_name () {
					return this.lga_name;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.datim_id == null) ? 0 : this.datim_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final facilityStruct other = (facilityStruct) obj;
		
						if (this.datim_id == null) {
							if (other.datim_id != null)
								return false;
						
						} else if (!this.datim_id.equals(other.datim_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(facilityStruct other) {

		other.id = this.id;
	            other.facility_name = this.facility_name;
	            other.lga_name = this.lga_name;
	            other.datim_id = this.datim_id;
	            
	}

	public void copyKeysDataTo(facilityStruct other) {

		other.datim_id = this.datim_id;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_EAC.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_EAC.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_EAC, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_EAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
					this.datim_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.datim_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
						this.facility_name = readString(dis,ois);
					
						this.lga_name = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
						writeString(this.facility_name, dos, oos);
					
						writeString(this.lga_name, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",facility_name="+facility_name);
		sb.append(",lga_name="+lga_name);
		sb.append(",datim_id="+datim_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(facilityStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.datim_id, other.datim_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		facilityStruct facility = new facilityStruct();




	
	/**
	 * [tAdvancedHash_facility begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_facility", false);
		start_Hash.put("tAdvancedHash_facility", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_facility";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"facility");
					}
				
		int tos_count_tAdvancedHash_facility = 0;
		

			   		// connection name:facility
			   		// source node:tDBInput_6 - inputs:(after_tDBInput_4) outputs:(facility,facility) | target node:tAdvancedHash_facility - inputs:(facility) outputs:()
			   		// linked node: tMap_2 - inputs:(eac1_extract,facility) outputs:(eac1_vsist)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_facility = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<facilityStruct> tHash_Lookup_facility =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<facilityStruct>getLookup(matchingModeEnum_facility);
	   						   
		   	   	   globalMap.put("tHash_Lookup_facility", tHash_Lookup_facility);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_facility begin ] stop
 */



	
	/**
	 * [tDBInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_6", false);
		start_Hash.put("tDBInput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_6";

	
		int tos_count_tDBInput_6 = 0;
		
	
    
	
		    int nb_line_tDBInput_6 = 0;
		    java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_6 = java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_6 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;
				
				String url_tDBInput_6 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_6 = java.sql.DriverManager.getConnection(url_tDBInput_6,dbUser_tDBInput_6,dbPwd_tDBInput_6);
		        
				conn_tDBInput_6.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

		    String dbquery_tDBInput_6 = "SELECT iden.organisation_unit_id as id, ef.facility_name, ef.lga_name, ef.datim_id FROM etl_facility ef \nINNER JOIN ba"
+"se_organisation_unit_identifier iden ON iden.code = ef.datim_id";
			

            	globalMap.put("tDBInput_6_QUERY",dbquery_tDBInput_6);
		    java.sql.ResultSet rs_tDBInput_6 = null;

		    try {
		    	rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
		    	int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

		    String tmpContent_tDBInput_6 = null;
		    
		    
		    while (rs_tDBInput_6.next()) {
		        nb_line_tDBInput_6++;
		        
							if(colQtyInRs_tDBInput_6 < 1) {
								facility.id = 0;
							} else {
		                          
            facility.id = rs_tDBInput_6.getInt(1);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 2) {
								facility.facility_name = null;
							} else {
	                         		
        	facility.facility_name = routines.system.JDBCUtil.getString(rs_tDBInput_6, 2, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 3) {
								facility.lga_name = null;
							} else {
	                         		
        	facility.lga_name = routines.system.JDBCUtil.getString(rs_tDBInput_6, 3, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 4) {
								facility.datim_id = null;
							} else {
	                         		
        	facility.datim_id = routines.system.JDBCUtil.getString(rs_tDBInput_6, 4, false);
		                    }
					


 



/**
 * [tDBInput_6 begin ] stop
 */
	
	/**
	 * [tDBInput_6 main ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 


	tos_count_tDBInput_6++;

/**
 * [tDBInput_6 main ] stop
 */
	
	/**
	 * [tDBInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_facility main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facility";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"facility");
					}
					


			   
			   

					facilityStruct facility_HashRow = new facilityStruct();
		   	   	   
				
				facility_HashRow.id = facility.id;
				
				facility_HashRow.facility_name = facility.facility_name;
				
				facility_HashRow.lga_name = facility.lga_name;
				
				facility_HashRow.datim_id = facility.datim_id;
				
			tHash_Lookup_facility.put(facility_HashRow);
			
            




 


	tos_count_tAdvancedHash_facility++;

/**
 * [tAdvancedHash_facility main ] stop
 */
	
	/**
	 * [tAdvancedHash_facility process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facility";

	

 



/**
 * [tAdvancedHash_facility process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_facility process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facility";

	

 



/**
 * [tAdvancedHash_facility process_data_end ] stop
 */



	
	/**
	 * [tDBInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_6 end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

	}
}finally{
	if (rs_tDBInput_6 != null) {
		rs_tDBInput_6.close();
	}
	if (stmt_tDBInput_6 != null) {
		stmt_tDBInput_6.close();
	}
	if(conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {
		
			conn_tDBInput_6.commit();
			
		
			conn_tDBInput_6.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_6_NB_LINE",nb_line_tDBInput_6);
 

ok_Hash.put("tDBInput_6", true);
end_Hash.put("tDBInput_6", System.currentTimeMillis());




/**
 * [tDBInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_facility end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facility";

	

tHash_Lookup_facility.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"facility");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_facility", true);
end_Hash.put("tAdvancedHash_facility", System.currentTimeMillis());




/**
 * [tAdvancedHash_facility end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_facility finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facility";

	

 



/**
 * [tAdvancedHash_facility finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class visitStruct implements routines.system.IPersistableComparableLookupRow<visitStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				
			    public java.util.Date visit_start_date;

				public java.util.Date getVisit_start_date () {
					return this.visit_start_date;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.visit_start_date == null) ? 0 : this.visit_start_date.hashCode());
					
						result = prime * result + ((this.person_uuid == null) ? 0 : this.person_uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final visitStruct other = (visitStruct) obj;
		
						if (this.visit_start_date == null) {
							if (other.visit_start_date != null)
								return false;
						
						} else if (!this.visit_start_date.equals(other.visit_start_date))
						
							return false;
					
						if (this.person_uuid == null) {
							if (other.person_uuid != null)
								return false;
						
						} else if (!this.person_uuid.equals(other.person_uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(visitStruct other) {

		other.visit_id = this.visit_id;
	            other.visit_start_date = this.visit_start_date;
	            other.person_uuid = this.person_uuid;
	            
	}

	public void copyKeysDataTo(visitStruct other) {

		other.visit_start_date = this.visit_start_date;
	            	other.person_uuid = this.person_uuid;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_EAC.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_EAC.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_EAC, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_EAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
					this.visit_start_date = readDate(dis);
					
					this.person_uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.visit_start_date,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.visit_id = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.visit_id, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("visit_id="+visit_id);
		sb.append(",visit_start_date="+String.valueOf(visit_start_date));
		sb.append(",person_uuid="+person_uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(visitStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.visit_start_date, other.visit_start_date);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.person_uuid, other.person_uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		visitStruct visit = new visitStruct();




	
	/**
	 * [tAdvancedHash_visit begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_visit", false);
		start_Hash.put("tAdvancedHash_visit", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_visit";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"visit");
					}
				
		int tos_count_tAdvancedHash_visit = 0;
		

			   		// connection name:visit
			   		// source node:tDBInput_5 - inputs:(after_tDBInput_4) outputs:(visit,visit) | target node:tAdvancedHash_visit - inputs:(visit) outputs:()
			   		// linked node: tMap_4 - inputs:(eac1_vsist,visit) outputs:(eac1_visit)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_visit = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<visitStruct> tHash_Lookup_visit =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<visitStruct>getLookup(matchingModeEnum_visit);
	   						   
		   	   	   globalMap.put("tHash_Lookup_visit", tHash_Lookup_visit);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_visit begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
    
	
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_5 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;
				
				String url_tDBInput_5 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5,dbUser_tDBInput_5,dbPwd_tDBInput_5);
		        
				conn_tDBInput_5.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "SELECT uuid as visit_id, visit_start_date, person_uuid FROM patient_visit";
			

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								visit.visit_id = null;
							} else {
	                         		
        	visit.visit_id = routines.system.JDBCUtil.getString(rs_tDBInput_5, 1, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								visit.visit_start_date = null;
							} else {
										
			visit.visit_start_date = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 2);
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								visit.person_uuid = null;
							} else {
	                         		
        	visit.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_5, 3, false);
		                    }
					


 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_visit main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_visit";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"visit");
					}
					


			   
			   

					visitStruct visit_HashRow = new visitStruct();
		   	   	   
				
				visit_HashRow.visit_id = visit.visit_id;
				
				visit_HashRow.visit_start_date = visit.visit_start_date;
				
				visit_HashRow.person_uuid = visit.person_uuid;
				
			tHash_Lookup_visit.put(visit_HashRow);
			
            




 


	tos_count_tAdvancedHash_visit++;

/**
 * [tAdvancedHash_visit main ] stop
 */
	
	/**
	 * [tAdvancedHash_visit process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_visit";

	

 



/**
 * [tAdvancedHash_visit process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_visit process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_visit";

	

 



/**
 * [tAdvancedHash_visit process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
	if(conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {
		
			conn_tDBInput_5.commit();
			
		
			conn_tDBInput_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);
 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_visit end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_visit";

	

tHash_Lookup_visit.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"visit");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_visit", true);
end_Hash.put("tAdvancedHash_visit", System.currentTimeMillis());




/**
 * [tAdvancedHash_visit end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_visit finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_visit";

	

 



/**
 * [tAdvancedHash_visit finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class facility_eac3Struct implements routines.system.IPersistableComparableLookupRow<facility_eac3Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String facility_name;

				public String getFacility_name () {
					return this.facility_name;
				}
				
			    public String lga_name;

				public String getLga_name () {
					return this.lga_name;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.datim_id == null) ? 0 : this.datim_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final facility_eac3Struct other = (facility_eac3Struct) obj;
		
						if (this.datim_id == null) {
							if (other.datim_id != null)
								return false;
						
						} else if (!this.datim_id.equals(other.datim_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(facility_eac3Struct other) {

		other.id = this.id;
	            other.facility_name = this.facility_name;
	            other.lga_name = this.lga_name;
	            other.datim_id = this.datim_id;
	            
	}

	public void copyKeysDataTo(facility_eac3Struct other) {

		other.datim_id = this.datim_id;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_EAC.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_EAC.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_EAC, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_EAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
					this.datim_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.datim_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
						this.facility_name = readString(dis,ois);
					
						this.lga_name = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
						writeString(this.facility_name, dos, oos);
					
						writeString(this.lga_name, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",facility_name="+facility_name);
		sb.append(",lga_name="+lga_name);
		sb.append(",datim_id="+datim_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(facility_eac3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.datim_id, other.datim_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		facility_eac3Struct facility_eac3 = new facility_eac3Struct();




	
	/**
	 * [tAdvancedHash_facility_eac3 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_facility_eac3", false);
		start_Hash.put("tAdvancedHash_facility_eac3", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_facility_eac3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"facility_eac3");
					}
				
		int tos_count_tAdvancedHash_facility_eac3 = 0;
		

			   		// connection name:facility_eac3
			   		// source node:tDBInput_8 - inputs:(after_tDBInput_7) outputs:(facility_eac3,facility_eac3) | target node:tAdvancedHash_facility_eac3 - inputs:(facility_eac3) outputs:()
			   		// linked node: tMap_5 - inputs:(eac3_extract,facility_eac3,row5) outputs:(eac3_facility)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_facility_eac3 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<facility_eac3Struct> tHash_Lookup_facility_eac3 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<facility_eac3Struct>getLookup(matchingModeEnum_facility_eac3);
	   						   
		   	   	   globalMap.put("tHash_Lookup_facility_eac3", tHash_Lookup_facility_eac3);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_facility_eac3 begin ] stop
 */



	
	/**
	 * [tDBInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_8", false);
		start_Hash.put("tDBInput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_8";

	
		int tos_count_tDBInput_8 = 0;
		
	
    
	
		    int nb_line_tDBInput_8 = 0;
		    java.sql.Connection conn_tDBInput_8 = null;
				String driverClass_tDBInput_8 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_8 = java.lang.Class.forName(driverClass_tDBInput_8);
				String dbUser_tDBInput_8 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_8 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_8 = decryptedPassword_tDBInput_8;
				
				String url_tDBInput_8 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_8 = java.sql.DriverManager.getConnection(url_tDBInput_8,dbUser_tDBInput_8,dbPwd_tDBInput_8);
		        
				conn_tDBInput_8.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8.createStatement();

		    String dbquery_tDBInput_8 = "SELECT iden.organisation_unit_id as id, ef.facility_name, ef.lga_name, ef.datim_id FROM etl_facility ef \nINNER JOIN ba"
+"se_organisation_unit_identifier iden ON iden.code = ef.datim_id";
			

            	globalMap.put("tDBInput_8_QUERY",dbquery_tDBInput_8);
		    java.sql.ResultSet rs_tDBInput_8 = null;

		    try {
		    	rs_tDBInput_8 = stmt_tDBInput_8.executeQuery(dbquery_tDBInput_8);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8.getMetaData();
		    	int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8.getColumnCount();

		    String tmpContent_tDBInput_8 = null;
		    
		    
		    while (rs_tDBInput_8.next()) {
		        nb_line_tDBInput_8++;
		        
							if(colQtyInRs_tDBInput_8 < 1) {
								facility_eac3.id = 0;
							} else {
		                          
            facility_eac3.id = rs_tDBInput_8.getInt(1);
            if(rs_tDBInput_8.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 2) {
								facility_eac3.facility_name = null;
							} else {
	                         		
        	facility_eac3.facility_name = routines.system.JDBCUtil.getString(rs_tDBInput_8, 2, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 3) {
								facility_eac3.lga_name = null;
							} else {
	                         		
        	facility_eac3.lga_name = routines.system.JDBCUtil.getString(rs_tDBInput_8, 3, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 4) {
								facility_eac3.datim_id = null;
							} else {
	                         		
        	facility_eac3.datim_id = routines.system.JDBCUtil.getString(rs_tDBInput_8, 4, false);
		                    }
					


 



/**
 * [tDBInput_8 begin ] stop
 */
	
	/**
	 * [tDBInput_8 main ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 


	tos_count_tDBInput_8++;

/**
 * [tDBInput_8 main ] stop
 */
	
	/**
	 * [tDBInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_facility_eac3 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facility_eac3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"facility_eac3");
					}
					


			   
			   

					facility_eac3Struct facility_eac3_HashRow = new facility_eac3Struct();
		   	   	   
				
				facility_eac3_HashRow.id = facility_eac3.id;
				
				facility_eac3_HashRow.facility_name = facility_eac3.facility_name;
				
				facility_eac3_HashRow.lga_name = facility_eac3.lga_name;
				
				facility_eac3_HashRow.datim_id = facility_eac3.datim_id;
				
			tHash_Lookup_facility_eac3.put(facility_eac3_HashRow);
			
            




 


	tos_count_tAdvancedHash_facility_eac3++;

/**
 * [tAdvancedHash_facility_eac3 main ] stop
 */
	
	/**
	 * [tAdvancedHash_facility_eac3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facility_eac3";

	

 



/**
 * [tAdvancedHash_facility_eac3 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_facility_eac3 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facility_eac3";

	

 



/**
 * [tAdvancedHash_facility_eac3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_8 end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

	}
}finally{
	if (rs_tDBInput_8 != null) {
		rs_tDBInput_8.close();
	}
	if (stmt_tDBInput_8 != null) {
		stmt_tDBInput_8.close();
	}
	if(conn_tDBInput_8 != null && !conn_tDBInput_8.isClosed()) {
		
			conn_tDBInput_8.commit();
			
		
			conn_tDBInput_8.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_8_NB_LINE",nb_line_tDBInput_8);
 

ok_Hash.put("tDBInput_8", true);
end_Hash.put("tDBInput_8", System.currentTimeMillis());




/**
 * [tDBInput_8 end ] stop
 */

	
	/**
	 * [tAdvancedHash_facility_eac3 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facility_eac3";

	

tHash_Lookup_facility_eac3.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"facility_eac3");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_facility_eac3", true);
end_Hash.put("tAdvancedHash_facility_eac3", System.currentTimeMillis());




/**
 * [tAdvancedHash_facility_eac3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_facility_eac3 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facility_eac3";

	

 



/**
 * [tAdvancedHash_facility_eac3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class visit3Struct implements routines.system.IPersistableComparableLookupRow<visit3Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				
			    public java.util.Date visit_start_date;

				public java.util.Date getVisit_start_date () {
					return this.visit_start_date;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.visit_start_date == null) ? 0 : this.visit_start_date.hashCode());
					
						result = prime * result + ((this.person_uuid == null) ? 0 : this.person_uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final visit3Struct other = (visit3Struct) obj;
		
						if (this.visit_start_date == null) {
							if (other.visit_start_date != null)
								return false;
						
						} else if (!this.visit_start_date.equals(other.visit_start_date))
						
							return false;
					
						if (this.person_uuid == null) {
							if (other.person_uuid != null)
								return false;
						
						} else if (!this.person_uuid.equals(other.person_uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(visit3Struct other) {

		other.visit_id = this.visit_id;
	            other.visit_start_date = this.visit_start_date;
	            other.person_uuid = this.person_uuid;
	            
	}

	public void copyKeysDataTo(visit3Struct other) {

		other.visit_start_date = this.visit_start_date;
	            	other.person_uuid = this.person_uuid;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_EAC.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_EAC.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_EAC, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_EAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
					this.visit_start_date = readDate(dis);
					
					this.person_uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.visit_start_date,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.visit_id = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.visit_id, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("visit_id="+visit_id);
		sb.append(",visit_start_date="+String.valueOf(visit_start_date));
		sb.append(",person_uuid="+person_uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(visit3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.visit_start_date, other.visit_start_date);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.person_uuid, other.person_uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		visit3Struct visit3 = new visit3Struct();




	
	/**
	 * [tAdvancedHash_visit3 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_visit3", false);
		start_Hash.put("tAdvancedHash_visit3", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_visit3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"visit3");
					}
				
		int tos_count_tAdvancedHash_visit3 = 0;
		

			   		// connection name:visit3
			   		// source node:tDBInput_9 - inputs:(after_tDBInput_7) outputs:(visit3,visit3) | target node:tAdvancedHash_visit3 - inputs:(visit3) outputs:()
			   		// linked node: tMap_7 - inputs:(eac3_facility,visit3) outputs:(eac3_visit)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_visit3 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<visit3Struct> tHash_Lookup_visit3 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<visit3Struct>getLookup(matchingModeEnum_visit3);
	   						   
		   	   	   globalMap.put("tHash_Lookup_visit3", tHash_Lookup_visit3);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_visit3 begin ] stop
 */



	
	/**
	 * [tDBInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_9", false);
		start_Hash.put("tDBInput_9", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_9";

	
		int tos_count_tDBInput_9 = 0;
		
	
    
	
		    int nb_line_tDBInput_9 = 0;
		    java.sql.Connection conn_tDBInput_9 = null;
				String driverClass_tDBInput_9 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_9 = java.lang.Class.forName(driverClass_tDBInput_9);
				String dbUser_tDBInput_9 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_9 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_9 = decryptedPassword_tDBInput_9;
				
				String url_tDBInput_9 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_9 = java.sql.DriverManager.getConnection(url_tDBInput_9,dbUser_tDBInput_9,dbPwd_tDBInput_9);
		        
				conn_tDBInput_9.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9.createStatement();

		    String dbquery_tDBInput_9 = "SELECT uuid as visit_id, visit_start_date, person_uuid FROM patient_visit";
			

            	globalMap.put("tDBInput_9_QUERY",dbquery_tDBInput_9);
		    java.sql.ResultSet rs_tDBInput_9 = null;

		    try {
		    	rs_tDBInput_9 = stmt_tDBInput_9.executeQuery(dbquery_tDBInput_9);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9.getMetaData();
		    	int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9.getColumnCount();

		    String tmpContent_tDBInput_9 = null;
		    
		    
		    while (rs_tDBInput_9.next()) {
		        nb_line_tDBInput_9++;
		        
							if(colQtyInRs_tDBInput_9 < 1) {
								visit3.visit_id = null;
							} else {
	                         		
        	visit3.visit_id = routines.system.JDBCUtil.getString(rs_tDBInput_9, 1, false);
		                    }
							if(colQtyInRs_tDBInput_9 < 2) {
								visit3.visit_start_date = null;
							} else {
										
			visit3.visit_start_date = routines.system.JDBCUtil.getDate(rs_tDBInput_9, 2);
		                    }
							if(colQtyInRs_tDBInput_9 < 3) {
								visit3.person_uuid = null;
							} else {
	                         		
        	visit3.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_9, 3, false);
		                    }
					


 



/**
 * [tDBInput_9 begin ] stop
 */
	
	/**
	 * [tDBInput_9 main ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 


	tos_count_tDBInput_9++;

/**
 * [tDBInput_9 main ] stop
 */
	
	/**
	 * [tDBInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_visit3 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_visit3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"visit3");
					}
					


			   
			   

					visit3Struct visit3_HashRow = new visit3Struct();
		   	   	   
				
				visit3_HashRow.visit_id = visit3.visit_id;
				
				visit3_HashRow.visit_start_date = visit3.visit_start_date;
				
				visit3_HashRow.person_uuid = visit3.person_uuid;
				
			tHash_Lookup_visit3.put(visit3_HashRow);
			
            




 


	tos_count_tAdvancedHash_visit3++;

/**
 * [tAdvancedHash_visit3 main ] stop
 */
	
	/**
	 * [tAdvancedHash_visit3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_visit3";

	

 



/**
 * [tAdvancedHash_visit3 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_visit3 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_visit3";

	

 



/**
 * [tAdvancedHash_visit3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_9 end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

	}
}finally{
	if (rs_tDBInput_9 != null) {
		rs_tDBInput_9.close();
	}
	if (stmt_tDBInput_9 != null) {
		stmt_tDBInput_9.close();
	}
	if(conn_tDBInput_9 != null && !conn_tDBInput_9.isClosed()) {
		
			conn_tDBInput_9.commit();
			
		
			conn_tDBInput_9.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_9_NB_LINE",nb_line_tDBInput_9);
 

ok_Hash.put("tDBInput_9", true);
end_Hash.put("tDBInput_9", System.currentTimeMillis());




/**
 * [tDBInput_9 end ] stop
 */

	
	/**
	 * [tAdvancedHash_visit3 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_visit3";

	

tHash_Lookup_visit3.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"visit3");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_visit3", true);
end_Hash.put("tAdvancedHash_visit3", System.currentTimeMillis());




/**
 * [tAdvancedHash_visit3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_9 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_visit3 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_visit3";

	

 



/**
 * [tAdvancedHash_visit3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];

	
			    public Integer eactwo;

				public Integer getEactwo () {
					return this.eactwo;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
						this.eactwo = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.eactwo,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("eactwo="+String.valueOf(eactwo));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_18_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tAdvancedHash_row5 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row5", false);
		start_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tAdvancedHash_row5 = 0;
		

			   		// connection name:row5
			   		// source node:tDBInput_18 - inputs:(after_tDBInput_7) outputs:(row5,row5) | target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
			   		// linked node: tMap_5 - inputs:(eac3_extract,facility_eac3,row5) outputs:(eac3_facility)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row5Struct>getLookup(matchingModeEnum_row5);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row5 begin ] stop
 */



	
	/**
	 * [tDBInput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_18", false);
		start_Hash.put("tDBInput_18", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_18";

	
		int tos_count_tDBInput_18 = 0;
		
	
    
	
		    int nb_line_tDBInput_18 = 0;
		    java.sql.Connection conn_tDBInput_18 = null;
				String driverClass_tDBInput_18 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_18 = java.lang.Class.forName(driverClass_tDBInput_18);
				String dbUser_tDBInput_18 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_18 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_18 = decryptedPassword_tDBInput_18;
				
				String url_tDBInput_18 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_18 = java.sql.DriverManager.getConnection(url_tDBInput_18,dbUser_tDBInput_18,dbPwd_tDBInput_18);
		        
				conn_tDBInput_18.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_18 = conn_tDBInput_18.createStatement();

		    String dbquery_tDBInput_18 = "SELECT (MAX(id) + 1) as eactwo FROM hiv_eac_session";
			

            	globalMap.put("tDBInput_18_QUERY",dbquery_tDBInput_18);
		    java.sql.ResultSet rs_tDBInput_18 = null;

		    try {
		    	rs_tDBInput_18 = stmt_tDBInput_18.executeQuery(dbquery_tDBInput_18);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_18 = rs_tDBInput_18.getMetaData();
		    	int colQtyInRs_tDBInput_18 = rsmd_tDBInput_18.getColumnCount();

		    String tmpContent_tDBInput_18 = null;
		    
		    
		    while (rs_tDBInput_18.next()) {
		        nb_line_tDBInput_18++;
		        
							if(colQtyInRs_tDBInput_18 < 1) {
								row5.eactwo = null;
							} else {
		                          
            row5.eactwo = rs_tDBInput_18.getInt(1);
            if(rs_tDBInput_18.wasNull()){
                    row5.eactwo = null;
            }
		                    }
					


 



/**
 * [tDBInput_18 begin ] stop
 */
	
	/**
	 * [tDBInput_18 main ] start
	 */

	

	
	
	currentComponent="tDBInput_18";

	

 


	tos_count_tDBInput_18++;

/**
 * [tDBInput_18 main ] stop
 */
	
	/**
	 * [tDBInput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_18";

	

 



/**
 * [tDBInput_18 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					


			   
			   

					row5Struct row5_HashRow = new row5Struct();
		   	   	   
				
				row5_HashRow.eactwo = row5.eactwo;
				
			tHash_Lookup_row5.put(row5_HashRow);
			
            




 


	tos_count_tAdvancedHash_row5++;

/**
 * [tAdvancedHash_row5 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_18";

	

 



/**
 * [tDBInput_18 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_18 end ] start
	 */

	

	
	
	currentComponent="tDBInput_18";

	

	}
}finally{
	if (rs_tDBInput_18 != null) {
		rs_tDBInput_18.close();
	}
	if (stmt_tDBInput_18 != null) {
		stmt_tDBInput_18.close();
	}
	if(conn_tDBInput_18 != null && !conn_tDBInput_18.isClosed()) {
		
			conn_tDBInput_18.commit();
			
		
			conn_tDBInput_18.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_18_NB_LINE",nb_line_tDBInput_18);
 

ok_Hash.put("tDBInput_18", true);
end_Hash.put("tDBInput_18", System.currentTimeMillis());




/**
 * [tDBInput_18 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

tHash_Lookup_row5.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row5", true);
end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());




/**
 * [tAdvancedHash_row5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_18 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_18";

	

 



/**
 * [tDBInput_18 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_18_SUBPROCESS_STATE", 1);
	}
	


public static class facility2Struct implements routines.system.IPersistableComparableLookupRow<facility2Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String facility_name;

				public String getFacility_name () {
					return this.facility_name;
				}
				
			    public String lga_name;

				public String getLga_name () {
					return this.lga_name;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.datim_id == null) ? 0 : this.datim_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final facility2Struct other = (facility2Struct) obj;
		
						if (this.datim_id == null) {
							if (other.datim_id != null)
								return false;
						
						} else if (!this.datim_id.equals(other.datim_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(facility2Struct other) {

		other.id = this.id;
	            other.facility_name = this.facility_name;
	            other.lga_name = this.lga_name;
	            other.datim_id = this.datim_id;
	            
	}

	public void copyKeysDataTo(facility2Struct other) {

		other.datim_id = this.datim_id;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_EAC.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_EAC.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_EAC, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_EAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
					this.datim_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.datim_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
						this.facility_name = readString(dis,ois);
					
						this.lga_name = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
						writeString(this.facility_name, dos, oos);
					
						writeString(this.lga_name, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",facility_name="+facility_name);
		sb.append(",lga_name="+lga_name);
		sb.append(",datim_id="+datim_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(facility2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.datim_id, other.datim_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		facility2Struct facility2 = new facility2Struct();




	
	/**
	 * [tAdvancedHash_facility2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_facility2", false);
		start_Hash.put("tAdvancedHash_facility2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_facility2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"facility2");
					}
				
		int tos_count_tAdvancedHash_facility2 = 0;
		

			   		// connection name:facility2
			   		// source node:tDBInput_13 - inputs:(after_tDBInput_10) outputs:(facility2,facility2) | target node:tAdvancedHash_facility2 - inputs:(facility2) outputs:()
			   		// linked node: tMap_8 - inputs:(eac2_extract,facility2,row1) outputs:(eac2_facility_extract)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_facility2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<facility2Struct> tHash_Lookup_facility2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<facility2Struct>getLookup(matchingModeEnum_facility2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_facility2", tHash_Lookup_facility2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_facility2 begin ] stop
 */



	
	/**
	 * [tDBInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_13", false);
		start_Hash.put("tDBInput_13", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_13";

	
		int tos_count_tDBInput_13 = 0;
		
	
    
	
		    int nb_line_tDBInput_13 = 0;
		    java.sql.Connection conn_tDBInput_13 = null;
				String driverClass_tDBInput_13 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_13 = java.lang.Class.forName(driverClass_tDBInput_13);
				String dbUser_tDBInput_13 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_13 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_13 = decryptedPassword_tDBInput_13;
				
				String url_tDBInput_13 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_13 = java.sql.DriverManager.getConnection(url_tDBInput_13,dbUser_tDBInput_13,dbPwd_tDBInput_13);
		        
				conn_tDBInput_13.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_13 = conn_tDBInput_13.createStatement();

		    String dbquery_tDBInput_13 = "SELECT iden.organisation_unit_id as id, ef.facility_name, ef.lga_name, ef.datim_id FROM etl_facility ef \nINNER JOIN ba"
+"se_organisation_unit_identifier iden ON iden.code = ef.datim_id";
			

            	globalMap.put("tDBInput_13_QUERY",dbquery_tDBInput_13);
		    java.sql.ResultSet rs_tDBInput_13 = null;

		    try {
		    	rs_tDBInput_13 = stmt_tDBInput_13.executeQuery(dbquery_tDBInput_13);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_13 = rs_tDBInput_13.getMetaData();
		    	int colQtyInRs_tDBInput_13 = rsmd_tDBInput_13.getColumnCount();

		    String tmpContent_tDBInput_13 = null;
		    
		    
		    while (rs_tDBInput_13.next()) {
		        nb_line_tDBInput_13++;
		        
							if(colQtyInRs_tDBInput_13 < 1) {
								facility2.id = 0;
							} else {
		                          
            facility2.id = rs_tDBInput_13.getInt(1);
            if(rs_tDBInput_13.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_13 < 2) {
								facility2.facility_name = null;
							} else {
	                         		
        	facility2.facility_name = routines.system.JDBCUtil.getString(rs_tDBInput_13, 2, false);
		                    }
							if(colQtyInRs_tDBInput_13 < 3) {
								facility2.lga_name = null;
							} else {
	                         		
        	facility2.lga_name = routines.system.JDBCUtil.getString(rs_tDBInput_13, 3, false);
		                    }
							if(colQtyInRs_tDBInput_13 < 4) {
								facility2.datim_id = null;
							} else {
	                         		
        	facility2.datim_id = routines.system.JDBCUtil.getString(rs_tDBInput_13, 4, false);
		                    }
					


 



/**
 * [tDBInput_13 begin ] stop
 */
	
	/**
	 * [tDBInput_13 main ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 


	tos_count_tDBInput_13++;

/**
 * [tDBInput_13 main ] stop
 */
	
	/**
	 * [tDBInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_facility2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facility2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"facility2");
					}
					


			   
			   

					facility2Struct facility2_HashRow = new facility2Struct();
		   	   	   
				
				facility2_HashRow.id = facility2.id;
				
				facility2_HashRow.facility_name = facility2.facility_name;
				
				facility2_HashRow.lga_name = facility2.lga_name;
				
				facility2_HashRow.datim_id = facility2.datim_id;
				
			tHash_Lookup_facility2.put(facility2_HashRow);
			
            




 


	tos_count_tAdvancedHash_facility2++;

/**
 * [tAdvancedHash_facility2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_facility2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facility2";

	

 



/**
 * [tAdvancedHash_facility2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_facility2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facility2";

	

 



/**
 * [tAdvancedHash_facility2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_13 end ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

	}
}finally{
	if (rs_tDBInput_13 != null) {
		rs_tDBInput_13.close();
	}
	if (stmt_tDBInput_13 != null) {
		stmt_tDBInput_13.close();
	}
	if(conn_tDBInput_13 != null && !conn_tDBInput_13.isClosed()) {
		
			conn_tDBInput_13.commit();
			
		
			conn_tDBInput_13.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_13_NB_LINE",nb_line_tDBInput_13);
 

ok_Hash.put("tDBInput_13", true);
end_Hash.put("tDBInput_13", System.currentTimeMillis());




/**
 * [tDBInput_13 end ] stop
 */

	
	/**
	 * [tAdvancedHash_facility2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facility2";

	

tHash_Lookup_facility2.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"facility2");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_facility2", true);
end_Hash.put("tAdvancedHash_facility2", System.currentTimeMillis());




/**
 * [tAdvancedHash_facility2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_13 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_facility2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facility2";

	

 



/**
 * [tAdvancedHash_facility2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_13_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				
			    public java.util.Date visit_start_date;

				public java.util.Date getVisit_start_date () {
					return this.visit_start_date;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.visit_start_date == null) ? 0 : this.visit_start_date.hashCode());
					
						result = prime * result + ((this.person_uuid == null) ? 0 : this.person_uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.visit_start_date == null) {
							if (other.visit_start_date != null)
								return false;
						
						} else if (!this.visit_start_date.equals(other.visit_start_date))
						
							return false;
					
						if (this.person_uuid == null) {
							if (other.person_uuid != null)
								return false;
						
						} else if (!this.person_uuid.equals(other.person_uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.visit_id = this.visit_id;
	            other.visit_start_date = this.visit_start_date;
	            other.person_uuid = this.person_uuid;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.visit_start_date = this.visit_start_date;
	            	other.person_uuid = this.person_uuid;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_EAC.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_EAC.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_EAC, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_EAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
					this.visit_start_date = readDate(dis);
					
					this.person_uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.visit_start_date,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.visit_id = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.visit_id, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("visit_id="+visit_id);
		sb.append(",visit_start_date="+String.valueOf(visit_start_date));
		sb.append(",person_uuid="+person_uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.visit_start_date, other.visit_start_date);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.person_uuid, other.person_uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tAdvancedHash_row3 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row3", false);
		start_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tAdvancedHash_row3 = 0;
		

			   		// connection name:row3
			   		// source node:tDBInput_14 - inputs:(after_tDBInput_10) outputs:(row3,row3) | target node:tAdvancedHash_row3 - inputs:(row3) outputs:()
			   		// linked node: tMap_9 - inputs:(eac2_facility_extract,row3) outputs:(copyOfeac2_visit)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row3Struct>getLookup(matchingModeEnum_row3);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row3 begin ] stop
 */



	
	/**
	 * [tDBInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_14", false);
		start_Hash.put("tDBInput_14", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_14";

	
		int tos_count_tDBInput_14 = 0;
		
	
    
	
		    int nb_line_tDBInput_14 = 0;
		    java.sql.Connection conn_tDBInput_14 = null;
				String driverClass_tDBInput_14 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_14 = java.lang.Class.forName(driverClass_tDBInput_14);
				String dbUser_tDBInput_14 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_14 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_14 = decryptedPassword_tDBInput_14;
				
				String url_tDBInput_14 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_14 = java.sql.DriverManager.getConnection(url_tDBInput_14,dbUser_tDBInput_14,dbPwd_tDBInput_14);
		        
				conn_tDBInput_14.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_14 = conn_tDBInput_14.createStatement();

		    String dbquery_tDBInput_14 = "SELECT uuid as visit_id, visit_start_date, person_uuid FROM patient_visit";
			

            	globalMap.put("tDBInput_14_QUERY",dbquery_tDBInput_14);
		    java.sql.ResultSet rs_tDBInput_14 = null;

		    try {
		    	rs_tDBInput_14 = stmt_tDBInput_14.executeQuery(dbquery_tDBInput_14);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_14 = rs_tDBInput_14.getMetaData();
		    	int colQtyInRs_tDBInput_14 = rsmd_tDBInput_14.getColumnCount();

		    String tmpContent_tDBInput_14 = null;
		    
		    
		    while (rs_tDBInput_14.next()) {
		        nb_line_tDBInput_14++;
		        
							if(colQtyInRs_tDBInput_14 < 1) {
								row3.visit_id = null;
							} else {
	                         		
        	row3.visit_id = routines.system.JDBCUtil.getString(rs_tDBInput_14, 1, false);
		                    }
							if(colQtyInRs_tDBInput_14 < 2) {
								row3.visit_start_date = null;
							} else {
										
			row3.visit_start_date = routines.system.JDBCUtil.getDate(rs_tDBInput_14, 2);
		                    }
							if(colQtyInRs_tDBInput_14 < 3) {
								row3.person_uuid = null;
							} else {
	                         		
        	row3.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_14, 3, false);
		                    }
					


 



/**
 * [tDBInput_14 begin ] stop
 */
	
	/**
	 * [tDBInput_14 main ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 


	tos_count_tDBInput_14++;

/**
 * [tDBInput_14 main ] stop
 */
	
	/**
	 * [tDBInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					


			   
			   

					row3Struct row3_HashRow = new row3Struct();
		   	   	   
				
				row3_HashRow.visit_id = row3.visit_id;
				
				row3_HashRow.visit_start_date = row3.visit_start_date;
				
				row3_HashRow.person_uuid = row3.person_uuid;
				
			tHash_Lookup_row3.put(row3_HashRow);
			
            




 


	tos_count_tAdvancedHash_row3++;

/**
 * [tAdvancedHash_row3 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_14 end ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

	}
}finally{
	if (rs_tDBInput_14 != null) {
		rs_tDBInput_14.close();
	}
	if (stmt_tDBInput_14 != null) {
		stmt_tDBInput_14.close();
	}
	if(conn_tDBInput_14 != null && !conn_tDBInput_14.isClosed()) {
		
			conn_tDBInput_14.commit();
			
		
			conn_tDBInput_14.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_14_NB_LINE",nb_line_tDBInput_14);
 

ok_Hash.put("tDBInput_14", true);
end_Hash.put("tDBInput_14", System.currentTimeMillis());




/**
 * [tDBInput_14 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

tHash_Lookup_row3.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row3", true);
end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());




/**
 * [tAdvancedHash_row3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_14 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_14_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];

	
			    public Integer eacone;

				public Integer getEacone () {
					return this.eacone;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
						this.eacone = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.eacone,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("eacone="+String.valueOf(eacone));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tAdvancedHash_row1 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row1", false);
		start_Hash.put("tAdvancedHash_row1", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tAdvancedHash_row1 = 0;
		

			   		// connection name:row1
			   		// source node:tDBInput_17 - inputs:(after_tDBInput_10) outputs:(row1,row1) | target node:tAdvancedHash_row1 - inputs:(row1) outputs:()
			   		// linked node: tMap_8 - inputs:(eac2_extract,facility2,row1) outputs:(eac2_facility_extract)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row1 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row1Struct>getLookup(matchingModeEnum_row1);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row1", tHash_Lookup_row1);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row1 begin ] stop
 */



	
	/**
	 * [tDBInput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_17", false);
		start_Hash.put("tDBInput_17", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_17";

	
		int tos_count_tDBInput_17 = 0;
		
	
    
	
		    int nb_line_tDBInput_17 = 0;
		    java.sql.Connection conn_tDBInput_17 = null;
				String driverClass_tDBInput_17 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_17 = java.lang.Class.forName(driverClass_tDBInput_17);
				String dbUser_tDBInput_17 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_17 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_17 = decryptedPassword_tDBInput_17;
				
				String url_tDBInput_17 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_17 = java.sql.DriverManager.getConnection(url_tDBInput_17,dbUser_tDBInput_17,dbPwd_tDBInput_17);
		        
				conn_tDBInput_17.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_17 = conn_tDBInput_17.createStatement();

		    String dbquery_tDBInput_17 = "SELECT(MAX(id) + 1) as eacone FROM hiv_eac_session";
			

            	globalMap.put("tDBInput_17_QUERY",dbquery_tDBInput_17);
		    java.sql.ResultSet rs_tDBInput_17 = null;

		    try {
		    	rs_tDBInput_17 = stmt_tDBInput_17.executeQuery(dbquery_tDBInput_17);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_17 = rs_tDBInput_17.getMetaData();
		    	int colQtyInRs_tDBInput_17 = rsmd_tDBInput_17.getColumnCount();

		    String tmpContent_tDBInput_17 = null;
		    
		    
		    while (rs_tDBInput_17.next()) {
		        nb_line_tDBInput_17++;
		        
							if(colQtyInRs_tDBInput_17 < 1) {
								row1.eacone = null;
							} else {
		                          
            row1.eacone = rs_tDBInput_17.getInt(1);
            if(rs_tDBInput_17.wasNull()){
                    row1.eacone = null;
            }
		                    }
					


 



/**
 * [tDBInput_17 begin ] stop
 */
	
	/**
	 * [tDBInput_17 main ] start
	 */

	

	
	
	currentComponent="tDBInput_17";

	

 


	tos_count_tDBInput_17++;

/**
 * [tDBInput_17 main ] stop
 */
	
	/**
	 * [tDBInput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_17";

	

 



/**
 * [tDBInput_17 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row1 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					


			   
			   

					row1Struct row1_HashRow = new row1Struct();
		   	   	   
				
				row1_HashRow.eacone = row1.eacone;
				
			tHash_Lookup_row1.put(row1_HashRow);
			
            




 


	tos_count_tAdvancedHash_row1++;

/**
 * [tAdvancedHash_row1 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	

 



/**
 * [tAdvancedHash_row1 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row1 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	

 



/**
 * [tAdvancedHash_row1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_17";

	

 



/**
 * [tDBInput_17 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_17 end ] start
	 */

	

	
	
	currentComponent="tDBInput_17";

	

	}
}finally{
	if (rs_tDBInput_17 != null) {
		rs_tDBInput_17.close();
	}
	if (stmt_tDBInput_17 != null) {
		stmt_tDBInput_17.close();
	}
	if(conn_tDBInput_17 != null && !conn_tDBInput_17.isClosed()) {
		
			conn_tDBInput_17.commit();
			
		
			conn_tDBInput_17.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_17_NB_LINE",nb_line_tDBInput_17);
 

ok_Hash.put("tDBInput_17", true);
end_Hash.put("tDBInput_17", System.currentTimeMillis());




/**
 * [tDBInput_17 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row1 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	

tHash_Lookup_row1.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row1", true);
end_Hash.put("tAdvancedHash_row1", System.currentTimeMillis());




/**
 * [tAdvancedHash_row1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_17 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_17";

	

 



/**
 * [tDBInput_17 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row1 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	

 



/**
 * [tAdvancedHash_row1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_17_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String facility_name;

				public String getFacility_name () {
					return this.facility_name;
				}
				
			    public String lga_name;

				public String getLga_name () {
					return this.lga_name;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.datim_id == null) ? 0 : this.datim_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.datim_id == null) {
							if (other.datim_id != null)
								return false;
						
						} else if (!this.datim_id.equals(other.datim_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.id = this.id;
	            other.facility_name = this.facility_name;
	            other.lga_name = this.lga_name;
	            other.datim_id = this.datim_id;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.datim_id = this.datim_id;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_EAC.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_EAC.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_EAC, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_EAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
					this.datim_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.datim_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
						this.facility_name = readString(dis,ois);
					
						this.lga_name = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
						writeString(this.facility_name, dos, oos);
					
						writeString(this.lga_name, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",facility_name="+facility_name);
		sb.append(",lga_name="+lga_name);
		sb.append(",datim_id="+datim_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.datim_id, other.datim_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tDBInput_12 - inputs:(after_tDBInput_11) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_6 - inputs:(eac_extract_outcome,row2) outputs:(eac_outcome_extract)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tDBInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_12", false);
		start_Hash.put("tDBInput_12", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_12";

	
		int tos_count_tDBInput_12 = 0;
		
	
    
	
		    int nb_line_tDBInput_12 = 0;
		    java.sql.Connection conn_tDBInput_12 = null;
				String driverClass_tDBInput_12 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_12 = java.lang.Class.forName(driverClass_tDBInput_12);
				String dbUser_tDBInput_12 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_12 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_12 = decryptedPassword_tDBInput_12;
				
				String url_tDBInput_12 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_12 = java.sql.DriverManager.getConnection(url_tDBInput_12,dbUser_tDBInput_12,dbPwd_tDBInput_12);
		        
				conn_tDBInput_12.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_12 = conn_tDBInput_12.createStatement();

		    String dbquery_tDBInput_12 = "SELECT iden.organisation_unit_id as id, ef.facility_name, ef.lga_name, ef.datim_id FROM etl_facility ef \nINNER JOIN ba"
+"se_organisation_unit_identifier iden ON iden.code = ef.datim_id";
			

            	globalMap.put("tDBInput_12_QUERY",dbquery_tDBInput_12);
		    java.sql.ResultSet rs_tDBInput_12 = null;

		    try {
		    	rs_tDBInput_12 = stmt_tDBInput_12.executeQuery(dbquery_tDBInput_12);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_12 = rs_tDBInput_12.getMetaData();
		    	int colQtyInRs_tDBInput_12 = rsmd_tDBInput_12.getColumnCount();

		    String tmpContent_tDBInput_12 = null;
		    
		    
		    while (rs_tDBInput_12.next()) {
		        nb_line_tDBInput_12++;
		        
							if(colQtyInRs_tDBInput_12 < 1) {
								row2.id = 0;
							} else {
		                          
            row2.id = rs_tDBInput_12.getInt(1);
            if(rs_tDBInput_12.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_12 < 2) {
								row2.facility_name = null;
							} else {
	                         		
        	row2.facility_name = routines.system.JDBCUtil.getString(rs_tDBInput_12, 2, false);
		                    }
							if(colQtyInRs_tDBInput_12 < 3) {
								row2.lga_name = null;
							} else {
	                         		
        	row2.lga_name = routines.system.JDBCUtil.getString(rs_tDBInput_12, 3, false);
		                    }
							if(colQtyInRs_tDBInput_12 < 4) {
								row2.datim_id = null;
							} else {
	                         		
        	row2.datim_id = routines.system.JDBCUtil.getString(rs_tDBInput_12, 4, false);
		                    }
					


 



/**
 * [tDBInput_12 begin ] stop
 */
	
	/**
	 * [tDBInput_12 main ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 


	tos_count_tDBInput_12++;

/**
 * [tDBInput_12 main ] stop
 */
	
	/**
	 * [tDBInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.id = row2.id;
				
				row2_HashRow.facility_name = row2.facility_name;
				
				row2_HashRow.lga_name = row2.lga_name;
				
				row2_HashRow.datim_id = row2.datim_id;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_12 end ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

	}
}finally{
	if (rs_tDBInput_12 != null) {
		rs_tDBInput_12.close();
	}
	if (stmt_tDBInput_12 != null) {
		stmt_tDBInput_12.close();
	}
	if(conn_tDBInput_12 != null && !conn_tDBInput_12.isClosed()) {
		
			conn_tDBInput_12.commit();
			
		
			conn_tDBInput_12.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_12_NB_LINE",nb_line_tDBInput_12);
 

ok_Hash.put("tDBInput_12", true);
end_Hash.put("tDBInput_12", System.currentTimeMillis());




/**
 * [tDBInput_12 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

tHash_Lookup_row2.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_12 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_12_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_EAC = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_EAC = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				
			    public java.util.Date visit_start_date;

				public java.util.Date getVisit_start_date () {
					return this.visit_start_date;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.visit_start_date == null) ? 0 : this.visit_start_date.hashCode());
					
						result = prime * result + ((this.person_uuid == null) ? 0 : this.person_uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.visit_start_date == null) {
							if (other.visit_start_date != null)
								return false;
						
						} else if (!this.visit_start_date.equals(other.visit_start_date))
						
							return false;
					
						if (this.person_uuid == null) {
							if (other.person_uuid != null)
								return false;
						
						} else if (!this.person_uuid.equals(other.person_uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.visit_id = this.visit_id;
	            other.visit_start_date = this.visit_start_date;
	            other.person_uuid = this.person_uuid;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.visit_start_date = this.visit_start_date;
	            	other.person_uuid = this.person_uuid;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_EAC.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_EAC.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_EAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_EAC, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_EAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_EAC) {

        	try {

        		int length = 0;
		
					this.visit_start_date = readDate(dis);
					
					this.person_uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.visit_start_date,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.visit_id = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.visit_id, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("visit_id="+visit_id);
		sb.append(",visit_start_date="+String.valueOf(visit_start_date));
		sb.append(",person_uuid="+person_uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.visit_start_date, other.visit_start_date);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.person_uuid, other.person_uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tAdvancedHash_row4 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row4", false);
		start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tAdvancedHash_row4 = 0;
		

			   		// connection name:row4
			   		// source node:tDBInput_15 - inputs:(after_tDBInput_11) outputs:(row4,row4) | target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
			   		// linked node: tMap_10 - inputs:(eac_outcome_extract,row4) outputs:(outcome_extract)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row4Struct>getLookup(matchingModeEnum_row4);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row4 begin ] stop
 */



	
	/**
	 * [tDBInput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_15", false);
		start_Hash.put("tDBInput_15", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_15";

	
		int tos_count_tDBInput_15 = 0;
		
	
    
	
		    int nb_line_tDBInput_15 = 0;
		    java.sql.Connection conn_tDBInput_15 = null;
				String driverClass_tDBInput_15 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_15 = java.lang.Class.forName(driverClass_tDBInput_15);
				String dbUser_tDBInput_15 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_15 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_15 = decryptedPassword_tDBInput_15;
				
				String url_tDBInput_15 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_15 = java.sql.DriverManager.getConnection(url_tDBInput_15,dbUser_tDBInput_15,dbPwd_tDBInput_15);
		        
				conn_tDBInput_15.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_15 = conn_tDBInput_15.createStatement();

		    String dbquery_tDBInput_15 = "SELECT uuid as visit_id, visit_start_date, person_uuid FROM patient_visit";
			

            	globalMap.put("tDBInput_15_QUERY",dbquery_tDBInput_15);
		    java.sql.ResultSet rs_tDBInput_15 = null;

		    try {
		    	rs_tDBInput_15 = stmt_tDBInput_15.executeQuery(dbquery_tDBInput_15);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_15 = rs_tDBInput_15.getMetaData();
		    	int colQtyInRs_tDBInput_15 = rsmd_tDBInput_15.getColumnCount();

		    String tmpContent_tDBInput_15 = null;
		    
		    
		    while (rs_tDBInput_15.next()) {
		        nb_line_tDBInput_15++;
		        
							if(colQtyInRs_tDBInput_15 < 1) {
								row4.visit_id = null;
							} else {
	                         		
        	row4.visit_id = routines.system.JDBCUtil.getString(rs_tDBInput_15, 1, false);
		                    }
							if(colQtyInRs_tDBInput_15 < 2) {
								row4.visit_start_date = null;
							} else {
										
			row4.visit_start_date = routines.system.JDBCUtil.getDate(rs_tDBInput_15, 2);
		                    }
							if(colQtyInRs_tDBInput_15 < 3) {
								row4.person_uuid = null;
							} else {
	                         		
        	row4.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_15, 3, false);
		                    }
					


 



/**
 * [tDBInput_15 begin ] stop
 */
	
	/**
	 * [tDBInput_15 main ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

 


	tos_count_tDBInput_15++;

/**
 * [tDBInput_15 main ] stop
 */
	
	/**
	 * [tDBInput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

 



/**
 * [tDBInput_15 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					


			   
			   

					row4Struct row4_HashRow = new row4Struct();
		   	   	   
				
				row4_HashRow.visit_id = row4.visit_id;
				
				row4_HashRow.visit_start_date = row4.visit_start_date;
				
				row4_HashRow.person_uuid = row4.person_uuid;
				
			tHash_Lookup_row4.put(row4_HashRow);
			
            




 


	tos_count_tAdvancedHash_row4++;

/**
 * [tAdvancedHash_row4 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

 



/**
 * [tDBInput_15 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_15 end ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

	}
}finally{
	if (rs_tDBInput_15 != null) {
		rs_tDBInput_15.close();
	}
	if (stmt_tDBInput_15 != null) {
		stmt_tDBInput_15.close();
	}
	if(conn_tDBInput_15 != null && !conn_tDBInput_15.isClosed()) {
		
			conn_tDBInput_15.commit();
			
		
			conn_tDBInput_15.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_15_NB_LINE",nb_line_tDBInput_15);
 

ok_Hash.put("tDBInput_15", true);
end_Hash.put("tDBInput_15", System.currentTimeMillis());




/**
 * [tDBInput_15 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

tHash_Lookup_row4.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row4", true);
end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());




/**
 * [tAdvancedHash_row4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_15 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

 



/**
 * [tDBInput_15 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_15_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Lamisplus";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final EAC EACClass = new EAC();

        int exitCode = EACClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = EAC.class.getClassLoader().getResourceAsStream("lamisplus_etl/eac_6_0/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = EAC.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("LAMISPlus_Schema", "id_String");
                            context.LAMISPlus_Schema=(String) context.getProperty("LAMISPlus_Schema");
                        context.setContextType("LAMISPlus_AdditionalParams", "id_String");
                            context.LAMISPlus_AdditionalParams=(String) context.getProperty("LAMISPlus_AdditionalParams");
                        context.setContextType("LAMISPlus_Database", "id_String");
                            context.LAMISPlus_Database=(String) context.getProperty("LAMISPlus_Database");
                        context.setContextType("LAMISPlus_Login", "id_String");
                            context.LAMISPlus_Login=(String) context.getProperty("LAMISPlus_Login");
                        context.setContextType("LAMISPlus_Server", "id_String");
                            context.LAMISPlus_Server=(String) context.getProperty("LAMISPlus_Server");
                        context.setContextType("LAMISPlus_Password", "id_Password");
                            String pwd_LAMISPlus_Password_value = context.getProperty("LAMISPlus_Password");
                            context.LAMISPlus_Password = null;
                            if(pwd_LAMISPlus_Password_value!=null) {
                                if(context_param.containsKey("LAMISPlus_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.LAMISPlus_Password = pwd_LAMISPlus_Password_value;
                                } else if (!pwd_LAMISPlus_Password_value.isEmpty()) {
                                    try {
                                        context.LAMISPlus_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_LAMISPlus_Password_value);
                                        context.put("LAMISPlus_Password",context.LAMISPlus_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("LAMISPlus_Port", "id_String");
                            context.LAMISPlus_Port=(String) context.getProperty("LAMISPlus_Port");
                        context.setContextType("LAMIS3_Login", "id_String");
                            context.LAMIS3_Login=(String) context.getProperty("LAMIS3_Login");
                        context.setContextType("LAMIS3_Port", "id_String");
                            context.LAMIS3_Port=(String) context.getProperty("LAMIS3_Port");
                        context.setContextType("LAMIS3_AdditionalParams", "id_String");
                            context.LAMIS3_AdditionalParams=(String) context.getProperty("LAMIS3_AdditionalParams");
                        context.setContextType("LAMIS3_Database", "id_String");
                            context.LAMIS3_Database=(String) context.getProperty("LAMIS3_Database");
                        context.setContextType("LAMIS3_Password", "id_Password");
                            String pwd_LAMIS3_Password_value = context.getProperty("LAMIS3_Password");
                            context.LAMIS3_Password = null;
                            if(pwd_LAMIS3_Password_value!=null) {
                                if(context_param.containsKey("LAMIS3_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.LAMIS3_Password = pwd_LAMIS3_Password_value;
                                } else if (!pwd_LAMIS3_Password_value.isEmpty()) {
                                    try {
                                        context.LAMIS3_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_LAMIS3_Password_value);
                                        context.put("LAMIS3_Password",context.LAMIS3_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("LAMIS3_Server", "id_String");
                            context.LAMIS3_Server=(String) context.getProperty("LAMIS3_Server");
                        context.setContextType("LAMIS3_Schema", "id_String");
                            context.LAMIS3_Schema=(String) context.getProperty("LAMIS3_Schema");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("LAMISPlus_Schema")) {
                context.LAMISPlus_Schema = (String) parentContextMap.get("LAMISPlus_Schema");
            }if (parentContextMap.containsKey("LAMISPlus_AdditionalParams")) {
                context.LAMISPlus_AdditionalParams = (String) parentContextMap.get("LAMISPlus_AdditionalParams");
            }if (parentContextMap.containsKey("LAMISPlus_Database")) {
                context.LAMISPlus_Database = (String) parentContextMap.get("LAMISPlus_Database");
            }if (parentContextMap.containsKey("LAMISPlus_Login")) {
                context.LAMISPlus_Login = (String) parentContextMap.get("LAMISPlus_Login");
            }if (parentContextMap.containsKey("LAMISPlus_Server")) {
                context.LAMISPlus_Server = (String) parentContextMap.get("LAMISPlus_Server");
            }if (parentContextMap.containsKey("LAMISPlus_Password")) {
                context.LAMISPlus_Password = (java.lang.String) parentContextMap.get("LAMISPlus_Password");
            }if (parentContextMap.containsKey("LAMISPlus_Port")) {
                context.LAMISPlus_Port = (String) parentContextMap.get("LAMISPlus_Port");
            }if (parentContextMap.containsKey("LAMIS3_Login")) {
                context.LAMIS3_Login = (String) parentContextMap.get("LAMIS3_Login");
            }if (parentContextMap.containsKey("LAMIS3_Port")) {
                context.LAMIS3_Port = (String) parentContextMap.get("LAMIS3_Port");
            }if (parentContextMap.containsKey("LAMIS3_AdditionalParams")) {
                context.LAMIS3_AdditionalParams = (String) parentContextMap.get("LAMIS3_AdditionalParams");
            }if (parentContextMap.containsKey("LAMIS3_Database")) {
                context.LAMIS3_Database = (String) parentContextMap.get("LAMIS3_Database");
            }if (parentContextMap.containsKey("LAMIS3_Password")) {
                context.LAMIS3_Password = (java.lang.String) parentContextMap.get("LAMIS3_Password");
            }if (parentContextMap.containsKey("LAMIS3_Server")) {
                context.LAMIS3_Server = (String) parentContextMap.get("LAMIS3_Server");
            }if (parentContextMap.containsKey("LAMIS3_Schema")) {
                context.LAMIS3_Schema = (String) parentContextMap.get("LAMIS3_Schema");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("LAMISPlus_Password");
			parametersToEncrypt.add("LAMIS3_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : EAC");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     649461 characters generated by Talend Open Studio for Big Data 
 *     on the December 12, 2022 8:03:10 PM WAT
 ************************************************************************************************/