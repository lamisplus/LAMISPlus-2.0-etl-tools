// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package lamisplus_etl.laboratory_6_0;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJava_4
	//import java.util.List;

	//the import part of tJava_5
	//import java.util.List;

	//the import part of tJava_8
	//import java.util.List;

	//the import part of tJava_7
	//import java.util.List;

	//the import part of tJava_6
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: Laboratory Purpose: Laboratory<br>
 * Description: Laboratory <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class Laboratory implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(LAMISPlus_Schema != null){
				
					this.setProperty("LAMISPlus_Schema", LAMISPlus_Schema.toString());
				
			}
			
			if(LAMISPlus_AdditionalParams != null){
				
					this.setProperty("LAMISPlus_AdditionalParams", LAMISPlus_AdditionalParams.toString());
				
			}
			
			if(LAMISPlus_Database != null){
				
					this.setProperty("LAMISPlus_Database", LAMISPlus_Database.toString());
				
			}
			
			if(LAMISPlus_Login != null){
				
					this.setProperty("LAMISPlus_Login", LAMISPlus_Login.toString());
				
			}
			
			if(LAMISPlus_Server != null){
				
					this.setProperty("LAMISPlus_Server", LAMISPlus_Server.toString());
				
			}
			
			if(LAMISPlus_Password != null){
				
					this.setProperty("LAMISPlus_Password", LAMISPlus_Password.toString());
				
			}
			
			if(LAMISPlus_Port != null){
				
					this.setProperty("LAMISPlus_Port", LAMISPlus_Port.toString());
				
			}
			
			if(LAMIS3_Login != null){
				
					this.setProperty("LAMIS3_Login", LAMIS3_Login.toString());
				
			}
			
			if(LAMIS3_Port != null){
				
					this.setProperty("LAMIS3_Port", LAMIS3_Port.toString());
				
			}
			
			if(LAMIS3_AdditionalParams != null){
				
					this.setProperty("LAMIS3_AdditionalParams", LAMIS3_AdditionalParams.toString());
				
			}
			
			if(LAMIS3_Database != null){
				
					this.setProperty("LAMIS3_Database", LAMIS3_Database.toString());
				
			}
			
			if(LAMIS3_Password != null){
				
					this.setProperty("LAMIS3_Password", LAMIS3_Password.toString());
				
			}
			
			if(LAMIS3_Server != null){
				
					this.setProperty("LAMIS3_Server", LAMIS3_Server.toString());
				
			}
			
			if(LAMIS3_Schema != null){
				
					this.setProperty("LAMIS3_Schema", LAMIS3_Schema.toString());
				
			}
			
		}

public String LAMISPlus_Schema;
public String getLAMISPlus_Schema(){
	return this.LAMISPlus_Schema;
}
public String LAMISPlus_AdditionalParams;
public String getLAMISPlus_AdditionalParams(){
	return this.LAMISPlus_AdditionalParams;
}
public String LAMISPlus_Database;
public String getLAMISPlus_Database(){
	return this.LAMISPlus_Database;
}
public String LAMISPlus_Login;
public String getLAMISPlus_Login(){
	return this.LAMISPlus_Login;
}
public String LAMISPlus_Server;
public String getLAMISPlus_Server(){
	return this.LAMISPlus_Server;
}
public java.lang.String LAMISPlus_Password;
public java.lang.String getLAMISPlus_Password(){
	return this.LAMISPlus_Password;
}
public String LAMISPlus_Port;
public String getLAMISPlus_Port(){
	return this.LAMISPlus_Port;
}
public String LAMIS3_Login;
public String getLAMIS3_Login(){
	return this.LAMIS3_Login;
}
public String LAMIS3_Port;
public String getLAMIS3_Port(){
	return this.LAMIS3_Port;
}
public String LAMIS3_AdditionalParams;
public String getLAMIS3_AdditionalParams(){
	return this.LAMIS3_AdditionalParams;
}
public String LAMIS3_Database;
public String getLAMIS3_Database(){
	return this.LAMIS3_Database;
}
public java.lang.String LAMIS3_Password;
public java.lang.String getLAMIS3_Password(){
	return this.LAMIS3_Password;
}
public String LAMIS3_Server;
public String getLAMIS3_Server(){
	return this.LAMIS3_Server;
}
public String LAMIS3_Schema;
public String getLAMIS3_Schema(){
	return this.LAMIS3_Schema;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "6.0";
	private final String jobName = "Laboratory";
	private final String projectName = "LAMISPLUS_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Laboratory.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Laboratory.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_patient_visit_lookup_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_patient_person_lookup_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_application_codest_lookup_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_labtest_group_id_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_person_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_laboratory_order_ids_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_laboratory_order_data_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_laboratory_order_result_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_patient_person_data_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class laboratory_orde_finalStruct implements routines.system.IPersistableRow<laboratory_orde_finalStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Laboratory = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public java.util.Date date_created;

				public java.util.Date getDate_created () {
					return this.date_created;
				}
				
			    public java.util.Date date_modified;

				public java.util.Date getDate_modified () {
					return this.date_modified;
				}
				
			    public String modified_by;

				public String getModified_by () {
					return this.modified_by;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public java.util.Date order_date;

				public java.util.Date getOrder_date () {
					return this.order_date;
				}
				
			    public int facility_id;

				public int getFacility_id () {
					return this.facility_id;
				}
				
			    public String patient_uuid;

				public String getPatient_uuid () {
					return this.patient_uuid;
				}
				
			    public int visit_id;

				public int getVisit_id () {
					return this.visit_id;
				}
				
			    public int patient_id;

				public int getPatient_id () {
					return this.patient_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final laboratory_orde_finalStruct other = (laboratory_orde_finalStruct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(laboratory_orde_finalStruct other) {

		other.id = this.id;
	            other.date_created = this.date_created;
	            other.date_modified = this.date_modified;
	            other.modified_by = this.modified_by;
	            other.created_by = this.created_by;
	            other.archived = this.archived;
	            other.uuid = this.uuid;
	            other.order_date = this.order_date;
	            other.facility_id = this.facility_id;
	            other.patient_uuid = this.patient_uuid;
	            other.visit_id = this.visit_id;
	            other.patient_id = this.patient_id;
	            
	}

	public void copyKeysDataTo(laboratory_orde_finalStruct other) {

		other.id = this.id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Laboratory.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Laboratory.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Laboratory) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
					this.date_created = readDate(dis);
					
					this.date_modified = readDate(dis);
					
					this.modified_by = readString(dis);
					
					this.created_by = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.uuid = readString(dis);
					
					this.order_date = readDate(dis);
					
			        this.facility_id = dis.readInt();
					
					this.patient_uuid = readString(dis);
					
			        this.visit_id = dis.readInt();
					
			        this.patient_id = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
					// java.util.Date
				
						writeDate(this.date_created,dos);
					
					// java.util.Date
				
						writeDate(this.date_modified,dos);
					
					// String
				
						writeString(this.modified_by,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// java.util.Date
				
						writeDate(this.order_date,dos);
					
					// int
				
		            	dos.writeInt(this.facility_id);
					
					// String
				
						writeString(this.patient_uuid,dos);
					
					// int
				
		            	dos.writeInt(this.visit_id);
					
					// int
				
		            	dos.writeInt(this.patient_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",date_created="+String.valueOf(date_created));
		sb.append(",date_modified="+String.valueOf(date_modified));
		sb.append(",modified_by="+modified_by);
		sb.append(",created_by="+created_by);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",uuid="+uuid);
		sb.append(",order_date="+String.valueOf(order_date));
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",patient_uuid="+patient_uuid);
		sb.append(",visit_id="+String.valueOf(visit_id));
		sb.append(",patient_id="+String.valueOf(patient_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(laboratory_orde_finalStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class laboratory_order_visitStruct implements routines.system.IPersistableRow<laboratory_order_visitStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Laboratory = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[0];

	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public java.util.Date date_created;

				public java.util.Date getDate_created () {
					return this.date_created;
				}
				
			    public java.util.Date date_modified;

				public java.util.Date getDate_modified () {
					return this.date_modified;
				}
				
			    public String modified_by;

				public String getModified_by () {
					return this.modified_by;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public java.util.Date order_date;

				public java.util.Date getOrder_date () {
					return this.order_date;
				}
				
			    public int facility_id;

				public int getFacility_id () {
					return this.facility_id;
				}
				
			    public String patient_uuid;

				public String getPatient_uuid () {
					return this.patient_uuid;
				}
				
			    public int visit_id;

				public int getVisit_id () {
					return this.visit_id;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Laboratory.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Laboratory.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Laboratory) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
					this.date_created = readDate(dis);
					
					this.date_modified = readDate(dis);
					
					this.modified_by = readString(dis);
					
					this.created_by = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.uuid = readString(dis);
					
					this.order_date = readDate(dis);
					
			        this.facility_id = dis.readInt();
					
					this.patient_uuid = readString(dis);
					
			        this.visit_id = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
					// java.util.Date
				
						writeDate(this.date_created,dos);
					
					// java.util.Date
				
						writeDate(this.date_modified,dos);
					
					// String
				
						writeString(this.modified_by,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// java.util.Date
				
						writeDate(this.order_date,dos);
					
					// int
				
		            	dos.writeInt(this.facility_id);
					
					// String
				
						writeString(this.patient_uuid,dos);
					
					// int
				
		            	dos.writeInt(this.visit_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",date_created="+String.valueOf(date_created));
		sb.append(",date_modified="+String.valueOf(date_modified));
		sb.append(",modified_by="+modified_by);
		sb.append(",created_by="+created_by);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",uuid="+uuid);
		sb.append(",order_date="+String.valueOf(order_date));
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",patient_uuid="+patient_uuid);
		sb.append(",visit_id="+String.valueOf(visit_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(laboratory_order_visitStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class laboratory_order_extractStruct implements routines.system.IPersistableRow<laboratory_order_extractStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Laboratory = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[0];

	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public java.util.Date date_created;

				public java.util.Date getDate_created () {
					return this.date_created;
				}
				
			    public java.util.Date date_modified;

				public java.util.Date getDate_modified () {
					return this.date_modified;
				}
				
			    public String modified_by;

				public String getModified_by () {
					return this.modified_by;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public java.util.Date order_date;

				public java.util.Date getOrder_date () {
					return this.order_date;
				}
				
			    public int facility_id;

				public int getFacility_id () {
					return this.facility_id;
				}
				
			    public String patient_uuid;

				public String getPatient_uuid () {
					return this.patient_uuid;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Laboratory.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Laboratory.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Laboratory) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
					this.date_created = readDate(dis);
					
					this.date_modified = readDate(dis);
					
					this.modified_by = readString(dis);
					
					this.created_by = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.uuid = readString(dis);
					
					this.order_date = readDate(dis);
					
			        this.facility_id = dis.readInt();
					
					this.patient_uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
					// java.util.Date
				
						writeDate(this.date_created,dos);
					
					// java.util.Date
				
						writeDate(this.date_modified,dos);
					
					// String
				
						writeString(this.modified_by,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// java.util.Date
				
						writeDate(this.order_date,dos);
					
					// int
				
		            	dos.writeInt(this.facility_id);
					
					// String
				
						writeString(this.patient_uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",date_created="+String.valueOf(date_created));
		sb.append(",date_modified="+String.valueOf(date_modified));
		sb.append(",modified_by="+modified_by);
		sb.append(",created_by="+created_by);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",uuid="+uuid);
		sb.append(",order_date="+String.valueOf(order_date));
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",patient_uuid="+patient_uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(laboratory_order_extractStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class laboratory_orderStruct implements routines.system.IPersistableRow<laboratory_orderStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Laboratory = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[0];

	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public java.util.Date date_modified;

				public java.util.Date getDate_modified () {
					return this.date_modified;
				}
				
			    public String modified_by;

				public String getModified_by () {
					return this.modified_by;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public java.util.Date order_date;

				public java.util.Date getOrder_date () {
					return this.order_date;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				
			    public String patient_uuid;

				public String getPatient_uuid () {
					return this.patient_uuid;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Laboratory.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Laboratory.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Laboratory) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
					this.create_date = readDate(dis);
					
					this.date_modified = readDate(dis);
					
					this.modified_by = readString(dis);
					
					this.created_by = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.uuid = readString(dis);
					
					this.order_date = readDate(dis);
					
					this.datim_id = readString(dis);
					
					this.patient_uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// java.util.Date
				
						writeDate(this.date_modified,dos);
					
					// String
				
						writeString(this.modified_by,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// java.util.Date
				
						writeDate(this.order_date,dos);
					
					// String
				
						writeString(this.datim_id,dos);
					
					// String
				
						writeString(this.patient_uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",date_modified="+String.valueOf(date_modified));
		sb.append(",modified_by="+modified_by);
		sb.append(",created_by="+created_by);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",uuid="+uuid);
		sb.append(",order_date="+String.valueOf(order_date));
		sb.append(",datim_id="+datim_id);
		sb.append(",patient_uuid="+patient_uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(laboratory_orderStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Laboratory = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public java.util.Date create_date;

				public java.util.Date getCreate_date () {
					return this.create_date;
				}
				
			    public java.util.Date date_modified;

				public java.util.Date getDate_modified () {
					return this.date_modified;
				}
				
			    public String modified_by;

				public String getModified_by () {
					return this.modified_by;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public java.util.Date order_date;

				public java.util.Date getOrder_date () {
					return this.order_date;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				
			    public String patient_uuid;

				public String getPatient_uuid () {
					return this.patient_uuid;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tDBInput_1Struct other = (after_tDBInput_1Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(after_tDBInput_1Struct other) {

		other.id = this.id;
	            other.create_date = this.create_date;
	            other.date_modified = this.date_modified;
	            other.modified_by = this.modified_by;
	            other.created_by = this.created_by;
	            other.archived = this.archived;
	            other.uuid = this.uuid;
	            other.order_date = this.order_date;
	            other.datim_id = this.datim_id;
	            other.patient_uuid = this.patient_uuid;
	            
	}

	public void copyKeysDataTo(after_tDBInput_1Struct other) {

		other.id = this.id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Laboratory.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Laboratory.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Laboratory) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
					this.create_date = readDate(dis);
					
					this.date_modified = readDate(dis);
					
					this.modified_by = readString(dis);
					
					this.created_by = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.uuid = readString(dis);
					
					this.order_date = readDate(dis);
					
					this.datim_id = readString(dis);
					
					this.patient_uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
					// java.util.Date
				
						writeDate(this.create_date,dos);
					
					// java.util.Date
				
						writeDate(this.date_modified,dos);
					
					// String
				
						writeString(this.modified_by,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// java.util.Date
				
						writeDate(this.order_date,dos);
					
					// String
				
						writeString(this.datim_id,dos);
					
					// String
				
						writeString(this.patient_uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",create_date="+String.valueOf(create_date));
		sb.append(",date_modified="+String.valueOf(date_modified));
		sb.append(",modified_by="+modified_by);
		sb.append(",created_by="+created_by);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",uuid="+uuid);
		sb.append(",order_date="+String.valueOf(order_date));
		sb.append(",datim_id="+datim_id);
		sb.append(",patient_uuid="+patient_uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_2Process(globalMap);
		tDBInput_3Process(globalMap);
		tDBInput_6Process(globalMap);

		laboratory_orderStruct laboratory_order = new laboratory_orderStruct();
laboratory_order_extractStruct laboratory_order_extract = new laboratory_order_extractStruct();
laboratory_order_visitStruct laboratory_order_visit = new laboratory_order_visitStruct();
laboratory_orde_finalStruct laboratory_orde_final = new laboratory_orde_finalStruct();







	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"laboratory_orde_final");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = context.LAMISPlus_Schema;
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("laboratory_order");
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("laboratory_order");
}

        int updateKeyCount_tDBOutput_2 = 1;
        if(updateKeyCount_tDBOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_2 = "jdbc:postgresql://"+context.LAMISPlus_Server+":"+context.LAMISPlus_Port+"/"+context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
    dbUser_tDBOutput_2 = context.LAMISPlus_Login;

	final String decryptedPassword_tDBOutput_2 = context.LAMISPlus_Password; 

    String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;

    conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2,dbUser_tDBOutput_2,dbPwd_tDBOutput_2);
	
	resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
        conn_tDBOutput_2.setAutoCommit(false);
        int commitEvery_tDBOutput_2 = 10000;
        int commitCounter_tDBOutput_2 = 0;



int count_tDBOutput_2=0;
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_2 + "\" WHERE \"id\" = ?");
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2 + "\" (\"id\",\"date_created\",\"date_modified\",\"modified_by\",\"created_by\",\"archived\",\"uuid\",\"order_date\",\"facility_id\",\"patient_uuid\",\"visit_id\",\"patient_id\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmtInsert_tDBOutput_2", pstmtInsert_tDBOutput_2);
	    String update_tDBOutput_2 = "UPDATE \"" + tableName_tDBOutput_2 + "\" SET \"date_created\" = ?,\"date_modified\" = ?,\"modified_by\" = ?,\"created_by\" = ?,\"archived\" = ?,\"uuid\" = ?,\"order_date\" = ?,\"facility_id\" = ?,\"patient_uuid\" = ?,\"visit_id\" = ?,\"patient_id\" = ? WHERE \"id\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(update_tDBOutput_2);
	    resourceMap.put("pstmtUpdate_tDBOutput_2", pstmtUpdate_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"laboratory_order_visit");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<patient_person_lookupStruct> tHash_Lookup_patient_person_lookup = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<patient_person_lookupStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<patient_person_lookupStruct>) 
					globalMap.get( "tHash_Lookup_patient_person_lookup" ))
					;					
					
	

patient_person_lookupStruct patient_person_lookupHashKey = new patient_person_lookupStruct();
patient_person_lookupStruct patient_person_lookupDefault = new patient_person_lookupStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
laboratory_orde_finalStruct laboratory_orde_final_tmp = new laboratory_orde_finalStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"laboratory_order_extract");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<patient_visit_lookupStruct> tHash_Lookup_patient_visit_lookup = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<patient_visit_lookupStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<patient_visit_lookupStruct>) 
					globalMap.get( "tHash_Lookup_patient_visit_lookup" ))
					;					
					
	

patient_visit_lookupStruct patient_visit_lookupHashKey = new patient_visit_lookupStruct();
patient_visit_lookupStruct patient_visit_lookupDefault = new patient_visit_lookupStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
laboratory_order_visitStruct laboratory_order_visit_tmp = new laboratory_order_visitStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"laboratory_order");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) 
					globalMap.get( "tHash_Lookup_row1" ))
					;					
					
	

row1Struct row1HashKey = new row1Struct();
row1Struct row1Default = new row1Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
laboratory_order_extractStruct laboratory_order_extract_tmp = new laboratory_order_extractStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.LAMIS3_Login;
				
				
	final String decryptedPassword_tDBInput_1 = context.LAMIS3_Password; 
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
				String url_tDBInput_1 = "jdbc:postgresql://" + context.LAMIS3_Server + ":" + context.LAMIS3_Port + "/" + context.LAMIS3_Database + "?" + context.LAMIS3_AdditionalParams;
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
				conn_tDBInput_1.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT l.id, l.last_modified as create_date, l.last_modified as date_modified, \n'ETL'::VARCHAR as modified_by, 'ETL'::"
+"VARCHAR as created_by, l.archived::integer, l.uuid, \nl.date_sample_collected as order_date, n.datim_id, p.uuid as patie"
+"nt_uuid\n	FROM laboratory l\n	INNER JOIN patient P ON P.id = l.patient_id\n	INNER JOIN ndr_facility n ON n.id = l.facili"
+"ty_id\nWHERE p.extra->>'art'='true'";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								laboratory_order.id = 0;
							} else {
		                          
            laboratory_order.id = rs_tDBInput_1.getLong(1);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								laboratory_order.create_date = null;
							} else {
										
			laboratory_order.create_date = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 2);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								laboratory_order.date_modified = null;
							} else {
										
			laboratory_order.date_modified = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 3);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								laboratory_order.modified_by = null;
							} else {
	                         		
        	laboratory_order.modified_by = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								laboratory_order.created_by = null;
							} else {
	                         		
        	laboratory_order.created_by = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								laboratory_order.archived = null;
							} else {
		                          
            laboratory_order.archived = rs_tDBInput_1.getInt(6);
            if(rs_tDBInput_1.wasNull()){
                    laboratory_order.archived = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								laboratory_order.uuid = null;
							} else {
	                         		
        	laboratory_order.uuid = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								laboratory_order.order_date = null;
							} else {
										
			laboratory_order.order_date = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 8);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								laboratory_order.datim_id = null;
							} else {
	                         		
        	laboratory_order.datim_id = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								laboratory_order.patient_uuid = null;
							} else {
	                         		
        	laboratory_order.patient_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"laboratory_order");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row1" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow1 = false;
       		  	    	
       		  	    	
 							row1Struct row1ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row1HashKey.datim_code = laboratory_order.datim_id ;
                        		    		

								
		                        	row1HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row1.lookup( row1HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row1 != null && tHash_Lookup_row1.getCount(row1HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row1' and it contains more one result from keys :  row1.datim_code = '" + row1HashKey.datim_code + "'");
								} // G 071
							

							row1Struct row1 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row1Struct fromLookup_row1 = null;
							row1 = row1Default;
										 
							
								 
							
							
								if (tHash_Lookup_row1 !=null && tHash_Lookup_row1.hasNext()) { // G 099
								
							
								
								fromLookup_row1 = tHash_Lookup_row1.next();

							
							
								} // G 099
							
							

							if(fromLookup_row1 != null) {
								row1 = fromLookup_row1;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

laboratory_order_extract = null;


// # Output table : 'laboratory_order_extract'
laboratory_order_extract_tmp.id = laboratory_order.id ;
laboratory_order_extract_tmp.date_created = laboratory_order.create_date ;
laboratory_order_extract_tmp.date_modified = laboratory_order.date_modified ;
laboratory_order_extract_tmp.modified_by = laboratory_order.modified_by ;
laboratory_order_extract_tmp.created_by = laboratory_order.created_by ;
laboratory_order_extract_tmp.archived = laboratory_order.archived ;
laboratory_order_extract_tmp.uuid = laboratory_order.uuid ;
laboratory_order_extract_tmp.order_date = laboratory_order.order_date ;
laboratory_order_extract_tmp.facility_id = row1.id ;
laboratory_order_extract_tmp.patient_uuid = laboratory_order.patient_uuid ;
laboratory_order_extract = laboratory_order_extract_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "laboratory_order_extract"
if(laboratory_order_extract != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"laboratory_order_extract");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "patient_visit_lookup" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooppatient_visit_lookup = false;
       		  	    	
       		  	    	
 							patient_visit_lookupStruct patient_visit_lookupObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    patient_visit_lookupHashKey.visit_start_date = laboratory_order_extract.order_date  == null ? null : new java.util.Date(laboratory_order_extract.order_date .getTime());
                        		    		
                        		    		    patient_visit_lookupHashKey.person_uuid = laboratory_order_extract.patient_uuid ;
                        		    		

								
		                        	patient_visit_lookupHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_patient_visit_lookup.lookup( patient_visit_lookupHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_patient_visit_lookup != null && tHash_Lookup_patient_visit_lookup.getCount(patient_visit_lookupHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'patient_visit_lookup' and it contains more one result from keys :  patient_visit_lookup.visit_start_date = '" + patient_visit_lookupHashKey.visit_start_date + "', patient_visit_lookup.person_uuid = '" + patient_visit_lookupHashKey.person_uuid + "'");
								} // G 071
							

							patient_visit_lookupStruct patient_visit_lookup = null;
                    		  	 
							   
                    		  	 
	       		  	    	patient_visit_lookupStruct fromLookup_patient_visit_lookup = null;
							patient_visit_lookup = patient_visit_lookupDefault;
										 
							
								 
							
							
								if (tHash_Lookup_patient_visit_lookup !=null && tHash_Lookup_patient_visit_lookup.hasNext()) { // G 099
								
							
								
								fromLookup_patient_visit_lookup = tHash_Lookup_patient_visit_lookup.next();

							
							
								} // G 099
							
							

							if(fromLookup_patient_visit_lookup != null) {
								patient_visit_lookup = fromLookup_patient_visit_lookup;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

laboratory_order_visit = null;


// # Output table : 'laboratory_order_visit'
laboratory_order_visit_tmp.id = laboratory_order_extract.id ;
laboratory_order_visit_tmp.date_created = laboratory_order_extract.date_created ;
laboratory_order_visit_tmp.date_modified = laboratory_order_extract.date_modified ;
laboratory_order_visit_tmp.modified_by = laboratory_order_extract.modified_by ;
laboratory_order_visit_tmp.created_by = laboratory_order_extract.created_by ;
laboratory_order_visit_tmp.archived = laboratory_order_extract.archived ;
laboratory_order_visit_tmp.uuid = laboratory_order_extract.uuid ;
laboratory_order_visit_tmp.order_date = laboratory_order_extract.order_date ;
laboratory_order_visit_tmp.facility_id = laboratory_order_extract.facility_id ;
laboratory_order_visit_tmp.patient_uuid = laboratory_order_extract.patient_uuid ;
laboratory_order_visit_tmp.visit_id = patient_visit_lookup.id ;
laboratory_order_visit = laboratory_order_visit_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "laboratory_order_visit"
if(laboratory_order_visit != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"laboratory_order_visit");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "patient_person_lookup" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooppatient_person_lookup = false;
       		  	    	
       		  	    	
 							patient_person_lookupStruct patient_person_lookupObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    patient_person_lookupHashKey.uuid = laboratory_order_visit.patient_uuid ;
                        		    		

								
		                        	patient_person_lookupHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_patient_person_lookup.lookup( patient_person_lookupHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_patient_person_lookup != null && tHash_Lookup_patient_person_lookup.getCount(patient_person_lookupHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'patient_person_lookup' and it contains more one result from keys :  patient_person_lookup.uuid = '" + patient_person_lookupHashKey.uuid + "'");
								} // G 071
							

							patient_person_lookupStruct patient_person_lookup = null;
                    		  	 
							   
                    		  	 
	       		  	    	patient_person_lookupStruct fromLookup_patient_person_lookup = null;
							patient_person_lookup = patient_person_lookupDefault;
										 
							
								 
							
							
								if (tHash_Lookup_patient_person_lookup !=null && tHash_Lookup_patient_person_lookup.hasNext()) { // G 099
								
							
								
								fromLookup_patient_person_lookup = tHash_Lookup_patient_person_lookup.next();

							
							
								} // G 099
							
							

							if(fromLookup_patient_person_lookup != null) {
								patient_person_lookup = fromLookup_patient_person_lookup;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

laboratory_orde_final = null;


// # Output table : 'laboratory_orde_final'
laboratory_orde_final_tmp.id = laboratory_order_visit.id ;
laboratory_orde_final_tmp.date_created = laboratory_order_visit.date_created ;
laboratory_orde_final_tmp.date_modified = laboratory_order_visit.date_modified ;
laboratory_orde_final_tmp.modified_by = laboratory_order_visit.modified_by ;
laboratory_orde_final_tmp.created_by = laboratory_order_visit.created_by ;
laboratory_orde_final_tmp.archived = laboratory_order_visit.archived ;
laboratory_orde_final_tmp.uuid = laboratory_order_visit.uuid ;
laboratory_orde_final_tmp.order_date = laboratory_order_visit.order_date ;
laboratory_orde_final_tmp.facility_id = laboratory_order_visit.facility_id ;
laboratory_orde_final_tmp.patient_uuid = laboratory_order_visit.patient_uuid ;
laboratory_orde_final_tmp.visit_id = laboratory_order_visit.visit_id ;
laboratory_orde_final_tmp.patient_id = patient_person_lookup.id ;
laboratory_orde_final = laboratory_orde_final_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "laboratory_orde_final"
if(laboratory_orde_final != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"laboratory_orde_final");
					}
					



        whetherReject_tDBOutput_2 = false;
                    pstmt_tDBOutput_2.setLong(1, laboratory_orde_final.id);

            int checkCount_tDBOutput_2 = -1;
            try (java.sql.ResultSet rs_tDBOutput_2 = pstmt_tDBOutput_2.executeQuery()) {
                while(rs_tDBOutput_2.next()) {
                    checkCount_tDBOutput_2 = rs_tDBOutput_2.getInt(1);
                }
            }
            if(checkCount_tDBOutput_2 > 0) {
                        if(laboratory_orde_final.date_created != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(1, new java.sql.Timestamp(laboratory_orde_final.date_created.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(1, java.sql.Types.TIMESTAMP);
}

                        if(laboratory_orde_final.date_modified != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(2, new java.sql.Timestamp(laboratory_orde_final.date_modified.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(2, java.sql.Types.TIMESTAMP);
}

                        if(laboratory_orde_final.modified_by == null) {
pstmtUpdate_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(3, laboratory_orde_final.modified_by);
}

                        if(laboratory_orde_final.created_by == null) {
pstmtUpdate_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(4, laboratory_orde_final.created_by);
}

                        if(laboratory_orde_final.archived == null) {
pstmtUpdate_tDBOutput_2.setNull(5, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setInt(5, laboratory_orde_final.archived);
}

                        if(laboratory_orde_final.uuid == null) {
pstmtUpdate_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(6, laboratory_orde_final.uuid);
}

                        if(laboratory_orde_final.order_date != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(7, new java.sql.Timestamp(laboratory_orde_final.order_date.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(7, java.sql.Types.TIMESTAMP);
}

                        pstmtUpdate_tDBOutput_2.setInt(8, laboratory_orde_final.facility_id);

                        if(laboratory_orde_final.patient_uuid == null) {
pstmtUpdate_tDBOutput_2.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(9, laboratory_orde_final.patient_uuid);
}

                        pstmtUpdate_tDBOutput_2.setInt(10, laboratory_orde_final.visit_id);

                        pstmtUpdate_tDBOutput_2.setInt(11, laboratory_orde_final.patient_id);

                        pstmtUpdate_tDBOutput_2.setLong(12 + count_tDBOutput_2, laboratory_orde_final.id);

                try {
					
                    updatedCount_tDBOutput_2 = updatedCount_tDBOutput_2 + pstmtUpdate_tDBOutput_2.executeUpdate();
                    nb_line_tDBOutput_2++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_2 = true;
                        nb_line_tDBOutput_2++;
                            System.err.print(e.getMessage());
                }
            } else {
                        pstmtInsert_tDBOutput_2.setLong(1, laboratory_orde_final.id);

                        if(laboratory_orde_final.date_created != null) {
pstmtInsert_tDBOutput_2.setTimestamp(2, new java.sql.Timestamp(laboratory_orde_final.date_created.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(2, java.sql.Types.TIMESTAMP);
}

                        if(laboratory_orde_final.date_modified != null) {
pstmtInsert_tDBOutput_2.setTimestamp(3, new java.sql.Timestamp(laboratory_orde_final.date_modified.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(3, java.sql.Types.TIMESTAMP);
}

                        if(laboratory_orde_final.modified_by == null) {
pstmtInsert_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(4, laboratory_orde_final.modified_by);
}

                        if(laboratory_orde_final.created_by == null) {
pstmtInsert_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(5, laboratory_orde_final.created_by);
}

                        if(laboratory_orde_final.archived == null) {
pstmtInsert_tDBOutput_2.setNull(6, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setInt(6, laboratory_orde_final.archived);
}

                        if(laboratory_orde_final.uuid == null) {
pstmtInsert_tDBOutput_2.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(7, laboratory_orde_final.uuid);
}

                        if(laboratory_orde_final.order_date != null) {
pstmtInsert_tDBOutput_2.setTimestamp(8, new java.sql.Timestamp(laboratory_orde_final.order_date.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(8, java.sql.Types.TIMESTAMP);
}

                        pstmtInsert_tDBOutput_2.setInt(9, laboratory_orde_final.facility_id);

                        if(laboratory_orde_final.patient_uuid == null) {
pstmtInsert_tDBOutput_2.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(10, laboratory_orde_final.patient_uuid);
}

                        pstmtInsert_tDBOutput_2.setInt(11, laboratory_orde_final.visit_id);

                        pstmtInsert_tDBOutput_2.setInt(12, laboratory_orde_final.patient_id);

                try {
					
                    insertedCount_tDBOutput_2 = insertedCount_tDBOutput_2 + pstmtInsert_tDBOutput_2.executeUpdate();
                    nb_line_tDBOutput_2++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_2 = true;
                        nb_line_tDBOutput_2++;
                            System.err.print(e.getMessage());
                }
            }
            if(!whetherReject_tDBOutput_2) {
            }
    		    commitCounter_tDBOutput_2++;
                if(commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
                	conn_tDBOutput_2.commit();
                	
                	commitCounter_tDBOutput_2=0;
                }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "laboratory_orde_final"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "laboratory_order_visit"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "laboratory_order_extract"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
	if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
		
			conn_tDBInput_1.commit();
			
		
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());

   			if (globalMap.get("tDBInput_1_NB_LINE") != null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				tJava_1Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}



/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row1 != null) {
						tHash_Lookup_row1.endGet();
					}
					globalMap.remove( "tHash_Lookup_row1" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"laboratory_order");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_patient_visit_lookup != null) {
						tHash_Lookup_patient_visit_lookup.endGet();
					}
					globalMap.remove( "tHash_Lookup_patient_visit_lookup" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"laboratory_order_extract");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_patient_person_lookup != null) {
						tHash_Lookup_patient_person_lookup.endGet();
					}
					globalMap.remove( "tHash_Lookup_patient_person_lookup" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"laboratory_order_visit");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



        if(pstmtUpdate_tDBOutput_2 != null){
            pstmtUpdate_tDBOutput_2.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_2");
        }
        if(pstmtInsert_tDBOutput_2 != null){
            pstmtInsert_tDBOutput_2.close();
            resourceMap.remove("pstmtInsert_tDBOutput_2");
        }
        if(pstmt_tDBOutput_2 != null) {
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);
			
			conn_tDBOutput_2.commit();
			
		
    	conn_tDBOutput_2 .close();
    	
    	resourceMap.put("finish_tDBOutput_2", true);
    	

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"laboratory_orde_final");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJava_2Process(globalMap);



/**
 * [tDBOutput_2 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_patient_person_lookup"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_patient_visit_lookup"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row1"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_2 = null;
                if ((pstmtUpdateToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_2")) != null) {
                    pstmtUpdateToClose_tDBOutput_2.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_2 = null;
                if ((pstmtInsertToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_2")) != null) {
                    pstmtInsertToClose_tDBOutput_2.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_2") == null){
            java.sql.Connection ctn_tDBOutput_2 = null;
            if((ctn_tDBOutput_2 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_2")) != null){
                try {
                    ctn_tDBOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_2) {
                    String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :" + sqlEx_tDBOutput_2.getMessage();
                    System.err.println(errorMessage_tDBOutput_2);
                }
            }
        }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";

	
		int tos_count_tJava_2 = 0;
		


int totalMigrated = globalMap.get("tDBOutput_2_NB_LINE_UPDATED") != null ? (Integer)globalMap.get("tDBOutput_2_NB_LINE_UPDATED") : 0;

System.out.println("Total laboratory order already migrated "+totalMigrated);

System.out.println("Total new records migrated - "+globalMap.get("tDBOutput_2_NB_LINE_INSERTED"));
if(globalMap.get("tDBOutput_2_ERROR_MESSAGE") != null){
System.out.println("Migration Error - "+globalMap.get("tDBOutput_2_ERROR_MESSAGE"));
}
System.out.println("Total erroneous records not migrated - "+globalMap.get("tFileOutputDelimited_2_NB_LINE"));
System.out.println("*************LABORATORY ORDER MIGRATION REPORT END*****************");
System.out.println("****************************************************************");
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


System.out.println("*****************************************************************");
System.out.println("***********LABORATORY MIGRATION REPORT START*****************");
java.time.LocalDateTime startTime = java.time.LocalDateTime.now();
globalMap.put("startTime", startTime);
System.out.println("Start time - "+ startTime);
System.out.println("");System.out.println("*****************************************************************");
System.out.println("***********LABORATORY ORDER MIGRATION REPORT START*****************");
System.out.println("Total Laboratory records fetched from LAMIS3 laboratory - "+globalMap.get("tDBInput_1_NB_LINE"));
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class laboratory_test_finalStruct implements routines.system.IPersistableRow<laboratory_test_finalStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Laboratory = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public int viral_load_indication;

				public int getViral_load_indication () {
					return this.viral_load_indication;
				}
				
			    public int lab_test_id;

				public int getLab_test_id () {
					return this.lab_test_id;
				}
				
			    public String unit_measurement;

				public String getUnit_measurement () {
					return this.unit_measurement;
				}
				
			    public Integer lab_test_order_status;

				public Integer getLab_test_order_status () {
					return this.lab_test_order_status;
				}
				
			    public Integer order_priority;

				public Integer getOrder_priority () {
					return this.order_priority;
				}
				
			    public String lab_number;

				public String getLab_number () {
					return this.lab_number;
				}
				
			    public Integer lab_test_group_id;

				public Integer getLab_test_group_id () {
					return this.lab_test_group_id;
				}
				
			    public int patient_id;

				public int getPatient_id () {
					return this.patient_id;
				}
				
			    public int lab_order_id;

				public int getLab_order_id () {
					return this.lab_order_id;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Integer facility_id;

				public Integer getFacility_id () {
					return this.facility_id;
				}
				
			    public String patient_uuid;

				public String getPatient_uuid () {
					return this.patient_uuid;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public java.util.Date date_created;

				public java.util.Date getDate_created () {
					return this.date_created;
				}
				
			    public String modified_by;

				public String getModified_by () {
					return this.modified_by;
				}
				
			    public java.util.Date date_modified;

				public java.util.Date getDate_modified () {
					return this.date_modified;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final laboratory_test_finalStruct other = (laboratory_test_finalStruct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(laboratory_test_finalStruct other) {

		other.description = this.description;
	            other.viral_load_indication = this.viral_load_indication;
	            other.lab_test_id = this.lab_test_id;
	            other.unit_measurement = this.unit_measurement;
	            other.lab_test_order_status = this.lab_test_order_status;
	            other.order_priority = this.order_priority;
	            other.lab_number = this.lab_number;
	            other.lab_test_group_id = this.lab_test_group_id;
	            other.patient_id = this.patient_id;
	            other.lab_order_id = this.lab_order_id;
	            other.id = this.id;
	            other.uuid = this.uuid;
	            other.facility_id = this.facility_id;
	            other.patient_uuid = this.patient_uuid;
	            other.created_by = this.created_by;
	            other.date_created = this.date_created;
	            other.modified_by = this.modified_by;
	            other.date_modified = this.date_modified;
	            other.archived = this.archived;
	            
	}

	public void copyKeysDataTo(laboratory_test_finalStruct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Laboratory.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Laboratory.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Laboratory) {

        	try {

        		int length = 0;
		
					this.description = readString(dis);
					
			        this.viral_load_indication = dis.readInt();
					
			        this.lab_test_id = dis.readInt();
					
					this.unit_measurement = readString(dis);
					
						this.lab_test_order_status = readInteger(dis);
					
						this.order_priority = readInteger(dis);
					
					this.lab_number = readString(dis);
					
						this.lab_test_group_id = readInteger(dis);
					
			        this.patient_id = dis.readInt();
					
			        this.lab_order_id = dis.readInt();
					
			        this.id = dis.readInt();
					
					this.uuid = readString(dis);
					
						this.facility_id = readInteger(dis);
					
					this.patient_uuid = readString(dis);
					
					this.created_by = readString(dis);
					
					this.date_created = readDate(dis);
					
					this.modified_by = readString(dis);
					
					this.date_modified = readDate(dis);
					
						this.archived = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.description,dos);
					
					// int
				
		            	dos.writeInt(this.viral_load_indication);
					
					// int
				
		            	dos.writeInt(this.lab_test_id);
					
					// String
				
						writeString(this.unit_measurement,dos);
					
					// Integer
				
						writeInteger(this.lab_test_order_status,dos);
					
					// Integer
				
						writeInteger(this.order_priority,dos);
					
					// String
				
						writeString(this.lab_number,dos);
					
					// Integer
				
						writeInteger(this.lab_test_group_id,dos);
					
					// int
				
		            	dos.writeInt(this.patient_id);
					
					// int
				
		            	dos.writeInt(this.lab_order_id);
					
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.facility_id,dos);
					
					// String
				
						writeString(this.patient_uuid,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// java.util.Date
				
						writeDate(this.date_created,dos);
					
					// String
				
						writeString(this.modified_by,dos);
					
					// java.util.Date
				
						writeDate(this.date_modified,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("description="+description);
		sb.append(",viral_load_indication="+String.valueOf(viral_load_indication));
		sb.append(",lab_test_id="+String.valueOf(lab_test_id));
		sb.append(",unit_measurement="+unit_measurement);
		sb.append(",lab_test_order_status="+String.valueOf(lab_test_order_status));
		sb.append(",order_priority="+String.valueOf(order_priority));
		sb.append(",lab_number="+lab_number);
		sb.append(",lab_test_group_id="+String.valueOf(lab_test_group_id));
		sb.append(",patient_id="+String.valueOf(patient_id));
		sb.append(",lab_order_id="+String.valueOf(lab_order_id));
		sb.append(",id="+String.valueOf(id));
		sb.append(",uuid="+uuid);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",patient_uuid="+patient_uuid);
		sb.append(",created_by="+created_by);
		sb.append(",date_created="+String.valueOf(date_created));
		sb.append(",modified_by="+modified_by);
		sb.append(",date_modified="+String.valueOf(date_modified));
		sb.append(",archived="+String.valueOf(archived));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(laboratory_test_finalStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class laboratory_test_personStruct implements routines.system.IPersistableRow<laboratory_test_personStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Laboratory = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public int viral_load_indication;

				public int getViral_load_indication () {
					return this.viral_load_indication;
				}
				
			    public int lab_test_id;

				public int getLab_test_id () {
					return this.lab_test_id;
				}
				
			    public String unit_measurement;

				public String getUnit_measurement () {
					return this.unit_measurement;
				}
				
			    public Integer lab_test_order_status;

				public Integer getLab_test_order_status () {
					return this.lab_test_order_status;
				}
				
			    public Integer order_priority;

				public Integer getOrder_priority () {
					return this.order_priority;
				}
				
			    public String lab_number;

				public String getLab_number () {
					return this.lab_number;
				}
				
			    public Integer lab_test_group_id;

				public Integer getLab_test_group_id () {
					return this.lab_test_group_id;
				}
				
			    public int patient_id;

				public int getPatient_id () {
					return this.patient_id;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String patient_uuid;

				public String getPatient_uuid () {
					return this.patient_uuid;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Laboratory.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Laboratory.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Laboratory) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.description = readString(dis);
					
			        this.viral_load_indication = dis.readInt();
					
			        this.lab_test_id = dis.readInt();
					
					this.unit_measurement = readString(dis);
					
						this.lab_test_order_status = readInteger(dis);
					
						this.order_priority = readInteger(dis);
					
					this.lab_number = readString(dis);
					
						this.lab_test_group_id = readInteger(dis);
					
			        this.patient_id = dis.readInt();
					
					this.uuid = readString(dis);
					
					this.patient_uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.description,dos);
					
					// int
				
		            	dos.writeInt(this.viral_load_indication);
					
					// int
				
		            	dos.writeInt(this.lab_test_id);
					
					// String
				
						writeString(this.unit_measurement,dos);
					
					// Integer
				
						writeInteger(this.lab_test_order_status,dos);
					
					// Integer
				
						writeInteger(this.order_priority,dos);
					
					// String
				
						writeString(this.lab_number,dos);
					
					// Integer
				
						writeInteger(this.lab_test_group_id,dos);
					
					// int
				
		            	dos.writeInt(this.patient_id);
					
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.patient_uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",description="+description);
		sb.append(",viral_load_indication="+String.valueOf(viral_load_indication));
		sb.append(",lab_test_id="+String.valueOf(lab_test_id));
		sb.append(",unit_measurement="+unit_measurement);
		sb.append(",lab_test_order_status="+String.valueOf(lab_test_order_status));
		sb.append(",order_priority="+String.valueOf(order_priority));
		sb.append(",lab_number="+lab_number);
		sb.append(",lab_test_group_id="+String.valueOf(lab_test_group_id));
		sb.append(",patient_id="+String.valueOf(patient_id));
		sb.append(",uuid="+uuid);
		sb.append(",patient_uuid="+patient_uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(laboratory_test_personStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class laboratory_test_group_codesetStruct implements routines.system.IPersistableRow<laboratory_test_group_codesetStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Laboratory = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public int viral_load_indication;

				public int getViral_load_indication () {
					return this.viral_load_indication;
				}
				
			    public int lab_test_id;

				public int getLab_test_id () {
					return this.lab_test_id;
				}
				
			    public String unit_measurement;

				public String getUnit_measurement () {
					return this.unit_measurement;
				}
				
			    public Integer lab_test_order_status;

				public Integer getLab_test_order_status () {
					return this.lab_test_order_status;
				}
				
			    public Integer order_priority;

				public Integer getOrder_priority () {
					return this.order_priority;
				}
				
			    public String lab_number;

				public String getLab_number () {
					return this.lab_number;
				}
				
			    public Integer lab_test_group_id;

				public Integer getLab_test_group_id () {
					return this.lab_test_group_id;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String patient_uuid;

				public String getPatient_uuid () {
					return this.patient_uuid;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Laboratory.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Laboratory.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Laboratory) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.description = readString(dis);
					
			        this.viral_load_indication = dis.readInt();
					
			        this.lab_test_id = dis.readInt();
					
					this.unit_measurement = readString(dis);
					
						this.lab_test_order_status = readInteger(dis);
					
						this.order_priority = readInteger(dis);
					
					this.lab_number = readString(dis);
					
						this.lab_test_group_id = readInteger(dis);
					
					this.person_uuid = readString(dis);
					
					this.uuid = readString(dis);
					
					this.patient_uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.description,dos);
					
					// int
				
		            	dos.writeInt(this.viral_load_indication);
					
					// int
				
		            	dos.writeInt(this.lab_test_id);
					
					// String
				
						writeString(this.unit_measurement,dos);
					
					// Integer
				
						writeInteger(this.lab_test_order_status,dos);
					
					// Integer
				
						writeInteger(this.order_priority,dos);
					
					// String
				
						writeString(this.lab_number,dos);
					
					// Integer
				
						writeInteger(this.lab_test_group_id,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.patient_uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",description="+description);
		sb.append(",viral_load_indication="+String.valueOf(viral_load_indication));
		sb.append(",lab_test_id="+String.valueOf(lab_test_id));
		sb.append(",unit_measurement="+unit_measurement);
		sb.append(",lab_test_order_status="+String.valueOf(lab_test_order_status));
		sb.append(",order_priority="+String.valueOf(order_priority));
		sb.append(",lab_number="+lab_number);
		sb.append(",lab_test_group_id="+String.valueOf(lab_test_group_id));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",uuid="+uuid);
		sb.append(",patient_uuid="+patient_uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(laboratory_test_group_codesetStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class laboratory_application_codeset_extractStruct implements routines.system.IPersistableRow<laboratory_application_codeset_extractStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Laboratory = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String indication;

				public String getIndication () {
					return this.indication;
				}
				
			    public String lab_test_description;

				public String getLab_test_description () {
					return this.lab_test_description;
				}
				
			    public String unit_measurement;

				public String getUnit_measurement () {
					return this.unit_measurement;
				}
				
			    public Integer lab_test_order_status;

				public Integer getLab_test_order_status () {
					return this.lab_test_order_status;
				}
				
			    public Integer order_priority;

				public Integer getOrder_priority () {
					return this.order_priority;
				}
				
			    public String lab_number;

				public String getLab_number () {
					return this.lab_number;
				}
				
			    public String lab_test_group;

				public String getLab_test_group () {
					return this.lab_test_group;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public int viral_load_indication;

				public int getViral_load_indication () {
					return this.viral_load_indication;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String patient_uuid;

				public String getPatient_uuid () {
					return this.patient_uuid;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Laboratory.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Laboratory.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Laboratory) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.description = readString(dis);
					
					this.indication = readString(dis);
					
					this.lab_test_description = readString(dis);
					
					this.unit_measurement = readString(dis);
					
						this.lab_test_order_status = readInteger(dis);
					
						this.order_priority = readInteger(dis);
					
					this.lab_number = readString(dis);
					
					this.lab_test_group = readString(dis);
					
					this.person_uuid = readString(dis);
					
			        this.viral_load_indication = dis.readInt();
					
					this.uuid = readString(dis);
					
					this.patient_uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.indication,dos);
					
					// String
				
						writeString(this.lab_test_description,dos);
					
					// String
				
						writeString(this.unit_measurement,dos);
					
					// Integer
				
						writeInteger(this.lab_test_order_status,dos);
					
					// Integer
				
						writeInteger(this.order_priority,dos);
					
					// String
				
						writeString(this.lab_number,dos);
					
					// String
				
						writeString(this.lab_test_group,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// int
				
		            	dos.writeInt(this.viral_load_indication);
					
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.patient_uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",description="+description);
		sb.append(",indication="+indication);
		sb.append(",lab_test_description="+lab_test_description);
		sb.append(",unit_measurement="+unit_measurement);
		sb.append(",lab_test_order_status="+String.valueOf(lab_test_order_status));
		sb.append(",order_priority="+String.valueOf(order_priority));
		sb.append(",lab_number="+lab_number);
		sb.append(",lab_test_group="+lab_test_group);
		sb.append(",person_uuid="+person_uuid);
		sb.append(",viral_load_indication="+String.valueOf(viral_load_indication));
		sb.append(",uuid="+uuid);
		sb.append(",patient_uuid="+patient_uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(laboratory_application_codeset_extractStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class laboratory_test_extractStruct implements routines.system.IPersistableRow<laboratory_test_extractStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Laboratory = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String indication;

				public String getIndication () {
					return this.indication;
				}
				
			    public String indication_display;

				public String getIndication_display () {
					return this.indication_display;
				}
				
			    public String lab_test_description;

				public String getLab_test_description () {
					return this.lab_test_description;
				}
				
			    public String unit_measurement;

				public String getUnit_measurement () {
					return this.unit_measurement;
				}
				
			    public Integer lab_test_order_status;

				public Integer getLab_test_order_status () {
					return this.lab_test_order_status;
				}
				
			    public Integer order_priority;

				public Integer getOrder_priority () {
					return this.order_priority;
				}
				
			    public String lab_number;

				public String getLab_number () {
					return this.lab_number;
				}
				
			    public String lab_test_group;

				public String getLab_test_group () {
					return this.lab_test_group;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Laboratory.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Laboratory.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Laboratory) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.description = readString(dis);
					
					this.indication = readString(dis);
					
					this.indication_display = readString(dis);
					
					this.lab_test_description = readString(dis);
					
					this.unit_measurement = readString(dis);
					
						this.lab_test_order_status = readInteger(dis);
					
						this.order_priority = readInteger(dis);
					
					this.lab_number = readString(dis);
					
					this.lab_test_group = readString(dis);
					
					this.person_uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.indication,dos);
					
					// String
				
						writeString(this.indication_display,dos);
					
					// String
				
						writeString(this.lab_test_description,dos);
					
					// String
				
						writeString(this.unit_measurement,dos);
					
					// Integer
				
						writeInteger(this.lab_test_order_status,dos);
					
					// Integer
				
						writeInteger(this.order_priority,dos);
					
					// String
				
						writeString(this.lab_number,dos);
					
					// String
				
						writeString(this.lab_test_group,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",description="+description);
		sb.append(",indication="+indication);
		sb.append(",indication_display="+indication_display);
		sb.append(",lab_test_description="+lab_test_description);
		sb.append(",unit_measurement="+unit_measurement);
		sb.append(",lab_test_order_status="+String.valueOf(lab_test_order_status));
		sb.append(",order_priority="+String.valueOf(order_priority));
		sb.append(",lab_number="+lab_number);
		sb.append(",lab_test_group="+lab_test_group);
		sb.append(",person_uuid="+person_uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(laboratory_test_extractStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_4Struct implements routines.system.IPersistableRow<after_tDBInput_4Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Laboratory = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String indication;

				public String getIndication () {
					return this.indication;
				}
				
			    public String indication_display;

				public String getIndication_display () {
					return this.indication_display;
				}
				
			    public String lab_test_description;

				public String getLab_test_description () {
					return this.lab_test_description;
				}
				
			    public String unit_measurement;

				public String getUnit_measurement () {
					return this.unit_measurement;
				}
				
			    public Integer lab_test_order_status;

				public Integer getLab_test_order_status () {
					return this.lab_test_order_status;
				}
				
			    public Integer order_priority;

				public Integer getOrder_priority () {
					return this.order_priority;
				}
				
			    public String lab_number;

				public String getLab_number () {
					return this.lab_number;
				}
				
			    public String lab_test_group;

				public String getLab_test_group () {
					return this.lab_test_group;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Laboratory.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Laboratory.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Laboratory) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.description = readString(dis);
					
					this.indication = readString(dis);
					
					this.indication_display = readString(dis);
					
					this.lab_test_description = readString(dis);
					
					this.unit_measurement = readString(dis);
					
						this.lab_test_order_status = readInteger(dis);
					
						this.order_priority = readInteger(dis);
					
					this.lab_number = readString(dis);
					
					this.lab_test_group = readString(dis);
					
					this.person_uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.indication,dos);
					
					// String
				
						writeString(this.indication_display,dos);
					
					// String
				
						writeString(this.lab_test_description,dos);
					
					// String
				
						writeString(this.unit_measurement,dos);
					
					// Integer
				
						writeInteger(this.lab_test_order_status,dos);
					
					// Integer
				
						writeInteger(this.order_priority,dos);
					
					// String
				
						writeString(this.lab_number,dos);
					
					// String
				
						writeString(this.lab_test_group,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",description="+description);
		sb.append(",indication="+indication);
		sb.append(",indication_display="+indication_display);
		sb.append(",lab_test_description="+lab_test_description);
		sb.append(",unit_measurement="+unit_measurement);
		sb.append(",lab_test_order_status="+String.valueOf(lab_test_order_status));
		sb.append(",order_priority="+String.valueOf(order_priority));
		sb.append(",lab_number="+lab_number);
		sb.append(",lab_test_group="+lab_test_group);
		sb.append(",person_uuid="+person_uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_5Process(globalMap);
		tDBInput_7Process(globalMap);
		tDBInput_8Process(globalMap);
		tDBInput_9Process(globalMap);

		laboratory_test_extractStruct laboratory_test_extract = new laboratory_test_extractStruct();
laboratory_application_codeset_extractStruct laboratory_application_codeset_extract = new laboratory_application_codeset_extractStruct();
laboratory_test_group_codesetStruct laboratory_test_group_codeset = new laboratory_test_group_codesetStruct();
laboratory_test_personStruct laboratory_test_person = new laboratory_test_personStruct();
laboratory_test_finalStruct laboratory_test_final = new laboratory_test_finalStruct();








	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"laboratory_test_final");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = context.LAMISPlus_Schema;
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("laboratory_test");
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("laboratory_test");
}

        int updateKeyCount_tDBOutput_1 = 1;
        if(updateKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_1 = "jdbc:postgresql://"+context.LAMISPlus_Server+":"+context.LAMISPlus_Port+"/"+context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
    dbUser_tDBOutput_1 = context.LAMISPlus_Login;

	final String decryptedPassword_tDBOutput_1 = context.LAMISPlus_Password; 

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;



int count_tDBOutput_1=0;
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_1 + "\" WHERE \"id\" = ?");
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1 + "\" (\"description\",\"viral_load_indication\",\"lab_test_id\",\"unit_measurement\",\"lab_test_order_status\",\"order_priority\",\"lab_number\",\"lab_test_group_id\",\"patient_id\",\"lab_order_id\",\"id\",\"uuid\",\"facility_id\",\"patient_uuid\",\"created_by\",\"date_created\",\"modified_by\",\"date_modified\",\"archived\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
	    String update_tDBOutput_1 = "UPDATE \"" + tableName_tDBOutput_1 + "\" SET \"description\" = ?,\"viral_load_indication\" = ?,\"lab_test_id\" = ?,\"unit_measurement\" = ?,\"lab_test_order_status\" = ?,\"order_priority\" = ?,\"lab_number\" = ?,\"lab_test_group_id\" = ?,\"patient_id\" = ?,\"lab_order_id\" = ?,\"uuid\" = ?,\"facility_id\" = ?,\"patient_uuid\" = ?,\"created_by\" = ?,\"date_created\" = ?,\"modified_by\" = ?,\"date_modified\" = ?,\"archived\" = ? WHERE \"id\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
	    resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"laboratory_test_person");
					}
				
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<laboratory_order_idsStruct> tHash_Lookup_laboratory_order_ids = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<laboratory_order_idsStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<laboratory_order_idsStruct>) 
					globalMap.get( "tHash_Lookup_laboratory_order_ids" ))
					;					
					
	

laboratory_order_idsStruct laboratory_order_idsHashKey = new laboratory_order_idsStruct();
laboratory_order_idsStruct laboratory_order_idsDefault = new laboratory_order_idsStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
laboratory_test_finalStruct laboratory_test_final_tmp = new laboratory_test_finalStruct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"laboratory_test_group_codeset");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<personStruct> tHash_Lookup_person = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<personStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<personStruct>) 
					globalMap.get( "tHash_Lookup_person" ))
					;					
					
	

personStruct personHashKey = new personStruct();
personStruct personDefault = new personStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
laboratory_test_personStruct laboratory_test_person_tmp = new laboratory_test_personStruct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"laboratory_application_codeset_extract");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<labtest_group_idStruct> tHash_Lookup_labtest_group_id = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<labtest_group_idStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<labtest_group_idStruct>) 
					globalMap.get( "tHash_Lookup_labtest_group_id" ))
					;					
					
	

labtest_group_idStruct labtest_group_idHashKey = new labtest_group_idStruct();
labtest_group_idStruct labtest_group_idDefault = new labtest_group_idStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
laboratory_test_group_codesetStruct laboratory_test_group_codeset_tmp = new laboratory_test_group_codesetStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"laboratory_test_extract");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<application_codest_lookupStruct> tHash_Lookup_application_codest_lookup = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<application_codest_lookupStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<application_codest_lookupStruct>) 
					globalMap.get( "tHash_Lookup_application_codest_lookup" ))
					;					
					
	

application_codest_lookupStruct application_codest_lookupHashKey = new application_codest_lookupStruct();
application_codest_lookupStruct application_codest_lookupDefault = new application_codest_lookupStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
laboratory_application_codeset_extractStruct laboratory_application_codeset_extract_tmp = new laboratory_application_codeset_extractStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = context.LAMIS3_Login;
				
				
	final String decryptedPassword_tDBInput_4 = context.LAMIS3_Password; 
				
				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
				
				String url_tDBInput_4 = "jdbc:postgresql://" + context.LAMIS3_Server + ":" + context.LAMIS3_Port + "/" + context.LAMIS3_Database + "?" + context.LAMIS3_AdditionalParams;
				
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4,dbUser_tDBInput_4,dbPwd_tDBInput_4);
		        
				conn_tDBInput_4.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT line.id, line.comment::VARCHAR as description, line.indication::VARCHAR, \nlower(left(line.indication,6))::VARCH"
+"AR as indication_display, lt.description as lab_test_description,\nlt.unit as unit_measurement, 5 as lab_test_order_stat"
+"us, 0 as order_priority, \nlabno as lab_number, ltc.category as lab_test_group, p.uuid as person_uuid\nFROM (SELECT labo"
+"ratory.id, laboratory.patient_id, laboratory.labno, lab_object ->> 'result' as result, \nlab_object ->> 'comment' as com"
+"ment, lab_object ->> 'indication' as indication, \nlab_object ->> 'lab_test_id' as lab_test_id \nFROM laboratory,jsonb_a"
+"rray_elements(lines) with ordinality p(lab_object)) as line\nINNER JOIN lab_test lt ON line.lab_test_id::bigint=lt.id\nI"
+"NNER JOIN lab_test_category ltc ON lt.lab_test_category_id = ltc.id\nINNER JOIN patient p ON p.id = line.patient_id\nORD"
+"ER BY id ASC";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								laboratory_test_extract.id = 0;
							} else {
		                          
            laboratory_test_extract.id = rs_tDBInput_4.getInt(1);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								laboratory_test_extract.description = null;
							} else {
	                         		
        	laboratory_test_extract.description = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								laboratory_test_extract.indication = null;
							} else {
	                         		
        	laboratory_test_extract.indication = routines.system.JDBCUtil.getString(rs_tDBInput_4, 3, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								laboratory_test_extract.indication_display = null;
							} else {
	                         		
        	laboratory_test_extract.indication_display = routines.system.JDBCUtil.getString(rs_tDBInput_4, 4, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 5) {
								laboratory_test_extract.lab_test_description = null;
							} else {
	                         		
        	laboratory_test_extract.lab_test_description = routines.system.JDBCUtil.getString(rs_tDBInput_4, 5, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 6) {
								laboratory_test_extract.unit_measurement = null;
							} else {
	                         		
        	laboratory_test_extract.unit_measurement = routines.system.JDBCUtil.getString(rs_tDBInput_4, 6, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 7) {
								laboratory_test_extract.lab_test_order_status = null;
							} else {
		                          
            laboratory_test_extract.lab_test_order_status = rs_tDBInput_4.getInt(7);
            if(rs_tDBInput_4.wasNull()){
                    laboratory_test_extract.lab_test_order_status = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 8) {
								laboratory_test_extract.order_priority = null;
							} else {
		                          
            laboratory_test_extract.order_priority = rs_tDBInput_4.getInt(8);
            if(rs_tDBInput_4.wasNull()){
                    laboratory_test_extract.order_priority = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 9) {
								laboratory_test_extract.lab_number = null;
							} else {
	                         		
        	laboratory_test_extract.lab_number = routines.system.JDBCUtil.getString(rs_tDBInput_4, 9, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 10) {
								laboratory_test_extract.lab_test_group = null;
							} else {
	                         		
        	laboratory_test_extract.lab_test_group = routines.system.JDBCUtil.getString(rs_tDBInput_4, 10, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 11) {
								laboratory_test_extract.person_uuid = null;
							} else {
	                         		
        	laboratory_test_extract.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_4, 11, false);
		                    }
					


 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"laboratory_test_extract");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "application_codest_lookup" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopapplication_codest_lookup = false;
       		  	    	
       		  	    	
 							application_codest_lookupStruct application_codest_lookupObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    application_codest_lookupHashKey.lower = laboratory_test_extract.indication_display ;
                        		    		

								
		                        	application_codest_lookupHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_application_codest_lookup.lookup( application_codest_lookupHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_application_codest_lookup != null && tHash_Lookup_application_codest_lookup.getCount(application_codest_lookupHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'application_codest_lookup' and it contains more one result from keys :  application_codest_lookup.lower = '" + application_codest_lookupHashKey.lower + "'");
								} // G 071
							

							application_codest_lookupStruct application_codest_lookup = null;
                    		  	 
							   
                    		  	 
	       		  	    	application_codest_lookupStruct fromLookup_application_codest_lookup = null;
							application_codest_lookup = application_codest_lookupDefault;
										 
							
								 
							
							
								if (tHash_Lookup_application_codest_lookup !=null && tHash_Lookup_application_codest_lookup.hasNext()) { // G 099
								
							
								
								fromLookup_application_codest_lookup = tHash_Lookup_application_codest_lookup.next();

							
							
								} // G 099
							
							

							if(fromLookup_application_codest_lookup != null) {
								application_codest_lookup = fromLookup_application_codest_lookup;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

laboratory_application_codeset_extract = null;


// # Output table : 'laboratory_application_codeset_extract'
laboratory_application_codeset_extract_tmp.id = laboratory_test_extract.id ;
laboratory_application_codeset_extract_tmp.description = laboratory_test_extract.description ;
laboratory_application_codeset_extract_tmp.indication = laboratory_test_extract.indication ;
laboratory_application_codeset_extract_tmp.lab_test_description = laboratory_test_extract.lab_test_description ;
laboratory_application_codeset_extract_tmp.unit_measurement = laboratory_test_extract.unit_measurement ;
laboratory_application_codeset_extract_tmp.lab_test_order_status = laboratory_test_extract.lab_test_order_status ;
laboratory_application_codeset_extract_tmp.order_priority = laboratory_test_extract.order_priority ;
laboratory_application_codeset_extract_tmp.lab_number = laboratory_test_extract.lab_number ;
laboratory_application_codeset_extract_tmp.lab_test_group = laboratory_test_extract.lab_test_group ;
laboratory_application_codeset_extract_tmp.person_uuid = laboratory_test_extract.person_uuid ;
laboratory_application_codeset_extract_tmp.viral_load_indication = application_codest_lookup.id ;
laboratory_application_codeset_extract_tmp.uuid = java.util.UUID.randomUUID().toString() ;
laboratory_application_codeset_extract_tmp.patient_uuid = laboratory_test_extract.person_uuid ;
laboratory_application_codeset_extract = laboratory_application_codeset_extract_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "laboratory_application_codeset_extract"
if(laboratory_application_codeset_extract != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"laboratory_application_codeset_extract");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "labtest_group_id" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooplabtest_group_id = false;
       		  	    	
       		  	    	
 							labtest_group_idStruct labtest_group_idObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    labtest_group_idHashKey.lab_test_name = laboratory_application_codeset_extract.lab_test_description ;
                        		    		

								
		                        	labtest_group_idHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_labtest_group_id.lookup( labtest_group_idHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_labtest_group_id != null && tHash_Lookup_labtest_group_id.getCount(labtest_group_idHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'labtest_group_id' and it contains more one result from keys :  labtest_group_id.lab_test_name = '" + labtest_group_idHashKey.lab_test_name + "'");
								} // G 071
							

							labtest_group_idStruct labtest_group_id = null;
                    		  	 
							   
                    		  	 
	       		  	    	labtest_group_idStruct fromLookup_labtest_group_id = null;
							labtest_group_id = labtest_group_idDefault;
										 
							
								 
							
							
								if (tHash_Lookup_labtest_group_id !=null && tHash_Lookup_labtest_group_id.hasNext()) { // G 099
								
							
								
								fromLookup_labtest_group_id = tHash_Lookup_labtest_group_id.next();

							
							
								} // G 099
							
							

							if(fromLookup_labtest_group_id != null) {
								labtest_group_id = fromLookup_labtest_group_id;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

laboratory_test_group_codeset = null;


// # Output table : 'laboratory_test_group_codeset'
laboratory_test_group_codeset_tmp.id = laboratory_application_codeset_extract.id ;
laboratory_test_group_codeset_tmp.description = laboratory_application_codeset_extract.description ;
laboratory_test_group_codeset_tmp.viral_load_indication = laboratory_application_codeset_extract.viral_load_indication  ;
laboratory_test_group_codeset_tmp.lab_test_id = labtest_group_id.id ;
laboratory_test_group_codeset_tmp.unit_measurement = laboratory_application_codeset_extract.unit_measurement ;
laboratory_test_group_codeset_tmp.lab_test_order_status = laboratory_application_codeset_extract.lab_test_order_status ;
laboratory_test_group_codeset_tmp.order_priority = laboratory_application_codeset_extract.order_priority ;
laboratory_test_group_codeset_tmp.lab_number = laboratory_application_codeset_extract.lab_number ;
laboratory_test_group_codeset_tmp.lab_test_group_id = labtest_group_id.labtestgroup_id ;
laboratory_test_group_codeset_tmp.person_uuid = laboratory_application_codeset_extract.person_uuid ;
laboratory_test_group_codeset_tmp.uuid = laboratory_application_codeset_extract.uuid ;
laboratory_test_group_codeset_tmp.patient_uuid = laboratory_application_codeset_extract.patient_uuid ;
laboratory_test_group_codeset = laboratory_test_group_codeset_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "laboratory_test_group_codeset"
if(laboratory_test_group_codeset != null) { 



	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"laboratory_test_group_codeset");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "person" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopperson = false;
       		  	    	
       		  	    	
 							personStruct personObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		    personHashKey.uuid = laboratory_test_group_codeset.person_uuid ;
                        		    		

								
		                        	personHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_person.lookup( personHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_person != null && tHash_Lookup_person.getCount(personHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'person' and it contains more one result from keys :  person.uuid = '" + personHashKey.uuid + "'");
								} // G 071
							

							personStruct person = null;
                    		  	 
							   
                    		  	 
	       		  	    	personStruct fromLookup_person = null;
							person = personDefault;
										 
							
								 
							
							
								if (tHash_Lookup_person !=null && tHash_Lookup_person.hasNext()) { // G 099
								
							
								
								fromLookup_person = tHash_Lookup_person.next();

							
							
								} // G 099
							
							

							if(fromLookup_person != null) {
								person = fromLookup_person;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

laboratory_test_person = null;


// # Output table : 'laboratory_test_person'
laboratory_test_person_tmp.id = laboratory_test_group_codeset.id ;
laboratory_test_person_tmp.description = laboratory_test_group_codeset.description ;
laboratory_test_person_tmp.viral_load_indication = laboratory_test_group_codeset.viral_load_indication ;
laboratory_test_person_tmp.lab_test_id = laboratory_test_group_codeset.lab_test_id ;
laboratory_test_person_tmp.unit_measurement = laboratory_test_group_codeset.unit_measurement ;
laboratory_test_person_tmp.lab_test_order_status = laboratory_test_group_codeset.lab_test_order_status ;
laboratory_test_person_tmp.order_priority = laboratory_test_group_codeset.order_priority ;
laboratory_test_person_tmp.lab_number = laboratory_test_group_codeset.lab_number ;
laboratory_test_person_tmp.lab_test_group_id = laboratory_test_group_codeset.lab_test_group_id ;
laboratory_test_person_tmp.patient_id = person.id ;
laboratory_test_person_tmp.uuid = laboratory_test_group_codeset.uuid ;
laboratory_test_person_tmp.patient_uuid = laboratory_test_group_codeset.patient_uuid ;
laboratory_test_person = laboratory_test_person_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "laboratory_test_person"
if(laboratory_test_person != null) { 



	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"laboratory_test_person");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_9 = false;
		  boolean mainRowRejected_tMap_9 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "laboratory_order_ids" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooplaboratory_order_ids = false;
       		  	    	
       		  	    	
 							laboratory_order_idsStruct laboratory_order_idsObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_9) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_9 = false;
								
	                        		    	Object exprKeyValue_laboratory_order_ids__id = laboratory_test_person.id ;
	                        		    	if(exprKeyValue_laboratory_order_ids__id == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_9 = true;
	                        		    	} else {
                        		    			laboratory_order_idsHashKey.id = (int)(Integer) exprKeyValue_laboratory_order_ids__id;
                        		    		}
                        		    		

								
		                        	laboratory_order_idsHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_9) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_laboratory_order_ids.lookup( laboratory_order_idsHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_laboratory_order_ids != null && tHash_Lookup_laboratory_order_ids.getCount(laboratory_order_idsHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'laboratory_order_ids' and it contains more one result from keys :  laboratory_order_ids.id = '" + laboratory_order_idsHashKey.id + "'");
								} // G 071
							

							laboratory_order_idsStruct laboratory_order_ids = null;
                    		  	 
							   
                    		  	 
	       		  	    	laboratory_order_idsStruct fromLookup_laboratory_order_ids = null;
							laboratory_order_ids = laboratory_order_idsDefault;
										 
							
								 
							
							
								if (tHash_Lookup_laboratory_order_ids !=null && tHash_Lookup_laboratory_order_ids.hasNext()) { // G 099
								
							
								
								fromLookup_laboratory_order_ids = tHash_Lookup_laboratory_order_ids.next();

							
							
								} // G 099
							
							

							if(fromLookup_laboratory_order_ids != null) {
								laboratory_order_ids = fromLookup_laboratory_order_ids;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

laboratory_test_final = null;


// # Output table : 'laboratory_test_final'
laboratory_test_final_tmp.description = laboratory_test_person.description ;
laboratory_test_final_tmp.viral_load_indication = laboratory_test_person.viral_load_indication ;
laboratory_test_final_tmp.lab_test_id = laboratory_test_person.lab_test_id ;
laboratory_test_final_tmp.unit_measurement = laboratory_test_person.unit_measurement ;
laboratory_test_final_tmp.lab_test_order_status = laboratory_test_person.lab_test_order_status ;
laboratory_test_final_tmp.order_priority = laboratory_test_person.order_priority ;
laboratory_test_final_tmp.lab_number = laboratory_test_person.lab_number ;
laboratory_test_final_tmp.lab_test_group_id = laboratory_test_person.lab_test_group_id ;
laboratory_test_final_tmp.patient_id = laboratory_test_person.patient_id ;
laboratory_test_final_tmp.lab_order_id = laboratory_order_ids.id ;
laboratory_test_final_tmp.id = Numeric.sequence("id",1,1) ;
laboratory_test_final_tmp.uuid = laboratory_test_person.uuid ;
laboratory_test_final_tmp.facility_id = laboratory_order_ids.facility_id ;
laboratory_test_final_tmp.patient_uuid = laboratory_test_person.patient_uuid ;
laboratory_test_final_tmp.created_by = laboratory_order_ids.created_by ;
laboratory_test_final_tmp.date_created = laboratory_order_ids.date_created ;
laboratory_test_final_tmp.modified_by = laboratory_order_ids.modified_by ;
laboratory_test_final_tmp.date_modified = laboratory_order_ids.date_modified ;
laboratory_test_final_tmp.archived = laboratory_order_ids.archived ;
laboratory_test_final = laboratory_test_final_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "laboratory_test_final"
if(laboratory_test_final != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"laboratory_test_final");
					}
					



        whetherReject_tDBOutput_1 = false;
                    pstmt_tDBOutput_1.setInt(1, laboratory_test_final.id);

            int checkCount_tDBOutput_1 = -1;
            try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
                while(rs_tDBOutput_1.next()) {
                    checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
                }
            }
            if(checkCount_tDBOutput_1 > 0) {
                        if(laboratory_test_final.description == null) {
pstmtUpdate_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(1, laboratory_test_final.description);
}

                        pstmtUpdate_tDBOutput_1.setInt(2, laboratory_test_final.viral_load_indication);

                        pstmtUpdate_tDBOutput_1.setInt(3, laboratory_test_final.lab_test_id);

                        if(laboratory_test_final.unit_measurement == null) {
pstmtUpdate_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(4, laboratory_test_final.unit_measurement);
}

                        if(laboratory_test_final.lab_test_order_status == null) {
pstmtUpdate_tDBOutput_1.setNull(5, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(5, laboratory_test_final.lab_test_order_status);
}

                        if(laboratory_test_final.order_priority == null) {
pstmtUpdate_tDBOutput_1.setNull(6, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(6, laboratory_test_final.order_priority);
}

                        if(laboratory_test_final.lab_number == null) {
pstmtUpdate_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(7, laboratory_test_final.lab_number);
}

                        if(laboratory_test_final.lab_test_group_id == null) {
pstmtUpdate_tDBOutput_1.setNull(8, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(8, laboratory_test_final.lab_test_group_id);
}

                        pstmtUpdate_tDBOutput_1.setInt(9, laboratory_test_final.patient_id);

                        pstmtUpdate_tDBOutput_1.setInt(10, laboratory_test_final.lab_order_id);

                        if(laboratory_test_final.uuid == null) {
pstmtUpdate_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(11, laboratory_test_final.uuid);
}

                        if(laboratory_test_final.facility_id == null) {
pstmtUpdate_tDBOutput_1.setNull(12, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(12, laboratory_test_final.facility_id);
}

                        if(laboratory_test_final.patient_uuid == null) {
pstmtUpdate_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(13, laboratory_test_final.patient_uuid);
}

                        if(laboratory_test_final.created_by == null) {
pstmtUpdate_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(14, laboratory_test_final.created_by);
}

                        if(laboratory_test_final.date_created != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(15, new java.sql.Timestamp(laboratory_test_final.date_created.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(15, java.sql.Types.TIMESTAMP);
}

                        if(laboratory_test_final.modified_by == null) {
pstmtUpdate_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(16, laboratory_test_final.modified_by);
}

                        if(laboratory_test_final.date_modified != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(17, new java.sql.Timestamp(laboratory_test_final.date_modified.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(17, java.sql.Types.TIMESTAMP);
}

                        if(laboratory_test_final.archived == null) {
pstmtUpdate_tDBOutput_1.setNull(18, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(18, laboratory_test_final.archived);
}

                        pstmtUpdate_tDBOutput_1.setInt(19 + count_tDBOutput_1, laboratory_test_final.id);

                try {
					
                    updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1 + pstmtUpdate_tDBOutput_1.executeUpdate();
                    nb_line_tDBOutput_1++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_1 = true;
                        nb_line_tDBOutput_1++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(laboratory_test_final.description == null) {
pstmtInsert_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(1, laboratory_test_final.description);
}

                        pstmtInsert_tDBOutput_1.setInt(2, laboratory_test_final.viral_load_indication);

                        pstmtInsert_tDBOutput_1.setInt(3, laboratory_test_final.lab_test_id);

                        if(laboratory_test_final.unit_measurement == null) {
pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(4, laboratory_test_final.unit_measurement);
}

                        if(laboratory_test_final.lab_test_order_status == null) {
pstmtInsert_tDBOutput_1.setNull(5, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(5, laboratory_test_final.lab_test_order_status);
}

                        if(laboratory_test_final.order_priority == null) {
pstmtInsert_tDBOutput_1.setNull(6, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(6, laboratory_test_final.order_priority);
}

                        if(laboratory_test_final.lab_number == null) {
pstmtInsert_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(7, laboratory_test_final.lab_number);
}

                        if(laboratory_test_final.lab_test_group_id == null) {
pstmtInsert_tDBOutput_1.setNull(8, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(8, laboratory_test_final.lab_test_group_id);
}

                        pstmtInsert_tDBOutput_1.setInt(9, laboratory_test_final.patient_id);

                        pstmtInsert_tDBOutput_1.setInt(10, laboratory_test_final.lab_order_id);

                        pstmtInsert_tDBOutput_1.setInt(11, laboratory_test_final.id);

                        if(laboratory_test_final.uuid == null) {
pstmtInsert_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(12, laboratory_test_final.uuid);
}

                        if(laboratory_test_final.facility_id == null) {
pstmtInsert_tDBOutput_1.setNull(13, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(13, laboratory_test_final.facility_id);
}

                        if(laboratory_test_final.patient_uuid == null) {
pstmtInsert_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(14, laboratory_test_final.patient_uuid);
}

                        if(laboratory_test_final.created_by == null) {
pstmtInsert_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(15, laboratory_test_final.created_by);
}

                        if(laboratory_test_final.date_created != null) {
pstmtInsert_tDBOutput_1.setTimestamp(16, new java.sql.Timestamp(laboratory_test_final.date_created.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(16, java.sql.Types.TIMESTAMP);
}

                        if(laboratory_test_final.modified_by == null) {
pstmtInsert_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(17, laboratory_test_final.modified_by);
}

                        if(laboratory_test_final.date_modified != null) {
pstmtInsert_tDBOutput_1.setTimestamp(18, new java.sql.Timestamp(laboratory_test_final.date_modified.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(18, java.sql.Types.TIMESTAMP);
}

                        if(laboratory_test_final.archived == null) {
pstmtInsert_tDBOutput_1.setNull(19, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(19, laboratory_test_final.archived);
}

                try {
					
                    insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1 + pstmtInsert_tDBOutput_1.executeUpdate();
                    nb_line_tDBOutput_1++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_1 = true;
                        nb_line_tDBOutput_1++;
                            System.err.print(e.getMessage());
                }
            }
            if(!whetherReject_tDBOutput_1) {
            }
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                	conn_tDBOutput_1.commit();
                	
                	commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "laboratory_test_final"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_end ] stop
 */

} // End of branch "laboratory_test_person"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */

} // End of branch "laboratory_test_group_codeset"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */

} // End of branch "laboratory_application_codeset_extract"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
	if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
		
			conn_tDBInput_4.commit();
			
		
			conn_tDBInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);
 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());

   			if (globalMap.get("tDBInput_4_NB_LINE") != null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				tJava_6Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}



/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_application_codest_lookup != null) {
						tHash_Lookup_application_codest_lookup.endGet();
					}
					globalMap.remove( "tHash_Lookup_application_codest_lookup" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"laboratory_test_extract");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_labtest_group_id != null) {
						tHash_Lookup_labtest_group_id.endGet();
					}
					globalMap.remove( "tHash_Lookup_labtest_group_id" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"laboratory_application_codeset_extract");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_person != null) {
						tHash_Lookup_person.endGet();
					}
					globalMap.remove( "tHash_Lookup_person" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"laboratory_test_group_codeset");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_laboratory_order_ids != null) {
						tHash_Lookup_laboratory_order_ids.endGet();
					}
					globalMap.remove( "tHash_Lookup_laboratory_order_ids" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"laboratory_test_person");
			  	}
			  	
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



        if(pstmtUpdate_tDBOutput_1 != null){
            pstmtUpdate_tDBOutput_1.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_1");
        }
        if(pstmtInsert_tDBOutput_1 != null){
            pstmtInsert_tDBOutput_1.close();
            resourceMap.remove("pstmtInsert_tDBOutput_1");
        }
        if(pstmt_tDBOutput_1 != null) {
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
			
			conn_tDBOutput_1.commit();
			
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"laboratory_test_final");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tJava_3Process(globalMap);



/**
 * [tDBOutput_1 end ] stop
 */















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tDBInput_13Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_9"
					     			globalMap.remove("tHash_Lookup_laboratory_order_ids"); 
				     			
					     			//free memory for "tMap_8"
					     			globalMap.remove("tHash_Lookup_person"); 
				     			
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_labtest_group_id"); 
				     			
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_application_codest_lookup"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
                if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_1")) != null) {
                    pstmtUpdateToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
                if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_1")) != null) {
                    pstmtInsertToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	

public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";

	
		int tos_count_tJava_3 = 0;
		


int totalMigrated = globalMap.get("tDBOutput_1_NB_LINE_UPDATED") != null ? (Integer)globalMap.get("tDBOutput_1_NB_LINE_UPDATED") : 0;

System.out.println("Total laboratory test already migrated "+totalMigrated);

System.out.println("Total new records migrated - "+globalMap.get("tDBOutput_1_NB_LINE_INSERTED"));
if(globalMap.get("tDBOutput_1_ERROR_MESSAGE") != null){
System.out.println("Migration Error - "+globalMap.get("tDBOutput_1_ERROR_MESSAGE"));
}
System.out.println("Total erroneous records not migrated - "+globalMap.get("tFileOutputDelimited_1_NB_LINE"));
System.out.println("*************LABORATORY TEST MIGRATION REPORT END*****************");
System.out.println("****************************************************************");
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());




/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	


public static class laboratory_sample_finalStruct implements routines.system.IPersistableRow<laboratory_sample_finalStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Laboratory = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String patient_uuid;

				public String getPatient_uuid () {
					return this.patient_uuid;
				}
				
			    public java.util.Date date_sample_collected;

				public java.util.Date getDate_sample_collected () {
					return this.date_sample_collected;
				}
				
			    public Integer facility_id;

				public Integer getFacility_id () {
					return this.facility_id;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public java.util.Date date_created;

				public java.util.Date getDate_created () {
					return this.date_created;
				}
				
			    public String modified_by;

				public String getModified_by () {
					return this.modified_by;
				}
				
			    public java.util.Date date_modified;

				public java.util.Date getDate_modified () {
					return this.date_modified;
				}
				
			    public int patient_id;

				public int getPatient_id () {
					return this.patient_id;
				}
				
			    public int test_id;

				public int getTest_id () {
					return this.test_id;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final laboratory_sample_finalStruct other = (laboratory_sample_finalStruct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(laboratory_sample_finalStruct other) {

		other.id = this.id;
	            other.patient_uuid = this.patient_uuid;
	            other.date_sample_collected = this.date_sample_collected;
	            other.facility_id = this.facility_id;
	            other.created_by = this.created_by;
	            other.date_created = this.date_created;
	            other.modified_by = this.modified_by;
	            other.date_modified = this.date_modified;
	            other.patient_id = this.patient_id;
	            other.test_id = this.test_id;
	            other.uuid = this.uuid;
	            other.archived = this.archived;
	            
	}

	public void copyKeysDataTo(laboratory_sample_finalStruct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Laboratory.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Laboratory.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Laboratory) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.patient_uuid = readString(dis);
					
					this.date_sample_collected = readDate(dis);
					
						this.facility_id = readInteger(dis);
					
					this.created_by = readString(dis);
					
					this.date_created = readDate(dis);
					
					this.modified_by = readString(dis);
					
					this.date_modified = readDate(dis);
					
			        this.patient_id = dis.readInt();
					
			        this.test_id = dis.readInt();
					
					this.uuid = readString(dis);
					
						this.archived = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.patient_uuid,dos);
					
					// java.util.Date
				
						writeDate(this.date_sample_collected,dos);
					
					// Integer
				
						writeInteger(this.facility_id,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// java.util.Date
				
						writeDate(this.date_created,dos);
					
					// String
				
						writeString(this.modified_by,dos);
					
					// java.util.Date
				
						writeDate(this.date_modified,dos);
					
					// int
				
		            	dos.writeInt(this.patient_id);
					
					// int
				
		            	dos.writeInt(this.test_id);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",patient_uuid="+patient_uuid);
		sb.append(",date_sample_collected="+String.valueOf(date_sample_collected));
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",created_by="+created_by);
		sb.append(",date_created="+String.valueOf(date_created));
		sb.append(",modified_by="+modified_by);
		sb.append(",date_modified="+String.valueOf(date_modified));
		sb.append(",patient_id="+String.valueOf(patient_id));
		sb.append(",test_id="+String.valueOf(test_id));
		sb.append(",uuid="+uuid);
		sb.append(",archived="+String.valueOf(archived));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(laboratory_sample_finalStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class laboratory_sample_orderStruct implements routines.system.IPersistableRow<laboratory_sample_orderStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Laboratory = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public java.util.Date date_sample_collected;

				public java.util.Date getDate_sample_collected () {
					return this.date_sample_collected;
				}
				
			    public Integer facility_id;

				public Integer getFacility_id () {
					return this.facility_id;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public java.util.Date date_created;

				public java.util.Date getDate_created () {
					return this.date_created;
				}
				
			    public String modified_by;

				public String getModified_by () {
					return this.modified_by;
				}
				
			    public java.util.Date date_modified;

				public java.util.Date getDate_modified () {
					return this.date_modified;
				}
				
			    public int test_id;

				public int getTest_id () {
					return this.test_id;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Laboratory.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Laboratory.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Laboratory) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.person_uuid = readString(dis);
					
					this.date_sample_collected = readDate(dis);
					
						this.facility_id = readInteger(dis);
					
					this.created_by = readString(dis);
					
					this.date_created = readDate(dis);
					
					this.modified_by = readString(dis);
					
					this.date_modified = readDate(dis);
					
			        this.test_id = dis.readInt();
					
						this.archived = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// java.util.Date
				
						writeDate(this.date_sample_collected,dos);
					
					// Integer
				
						writeInteger(this.facility_id,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// java.util.Date
				
						writeDate(this.date_created,dos);
					
					// String
				
						writeString(this.modified_by,dos);
					
					// java.util.Date
				
						writeDate(this.date_modified,dos);
					
					// int
				
		            	dos.writeInt(this.test_id);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",date_sample_collected="+String.valueOf(date_sample_collected));
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",created_by="+created_by);
		sb.append(",date_created="+String.valueOf(date_created));
		sb.append(",modified_by="+modified_by);
		sb.append(",date_modified="+String.valueOf(date_modified));
		sb.append(",test_id="+String.valueOf(test_id));
		sb.append(",archived="+String.valueOf(archived));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(laboratory_sample_orderStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class laboratory_sample_extractStruct implements routines.system.IPersistableRow<laboratory_sample_extractStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Laboratory = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public java.util.Date date_sample_collected;

				public java.util.Date getDate_sample_collected () {
					return this.date_sample_collected;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Laboratory.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Laboratory.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Laboratory) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.person_uuid = readString(dis);
					
					this.date_sample_collected = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// java.util.Date
				
						writeDate(this.date_sample_collected,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",date_sample_collected="+String.valueOf(date_sample_collected));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(laboratory_sample_extractStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_13Struct implements routines.system.IPersistableRow<after_tDBInput_13Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Laboratory = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public java.util.Date date_sample_collected;

				public java.util.Date getDate_sample_collected () {
					return this.date_sample_collected;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Laboratory.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Laboratory.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Laboratory) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.person_uuid = readString(dis);
					
					this.date_sample_collected = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// java.util.Date
				
						writeDate(this.date_sample_collected,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",date_sample_collected="+String.valueOf(date_sample_collected));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_14Process(globalMap);
		tDBInput_11Process(globalMap);

		laboratory_sample_extractStruct laboratory_sample_extract = new laboratory_sample_extractStruct();
laboratory_sample_orderStruct laboratory_sample_order = new laboratory_sample_orderStruct();
laboratory_sample_finalStruct laboratory_sample_final = new laboratory_sample_finalStruct();






	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"laboratory_sample_final");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = context.LAMISPlus_Schema;
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("laboratory_sample");
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("laboratory_sample");
}

        int updateKeyCount_tDBOutput_3 = 1;
        if(updateKeyCount_tDBOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_3 = "jdbc:postgresql://"+context.LAMISPlus_Server+":"+context.LAMISPlus_Port+"/"+context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
    dbUser_tDBOutput_3 = context.LAMISPlus_Login;

	final String decryptedPassword_tDBOutput_3 = context.LAMISPlus_Password; 

    String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;

    conn_tDBOutput_3 = java.sql.DriverManager.getConnection(url_tDBOutput_3,dbUser_tDBOutput_3,dbPwd_tDBOutput_3);
	
	resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
        conn_tDBOutput_3.setAutoCommit(false);
        int commitEvery_tDBOutput_3 = 10000;
        int commitCounter_tDBOutput_3 = 0;



int count_tDBOutput_3=0;
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_3 + "\" WHERE \"id\" = ?");
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    String insert_tDBOutput_3 = "INSERT INTO \"" + tableName_tDBOutput_3 + "\" (\"id\",\"patient_uuid\",\"date_sample_collected\",\"facility_id\",\"created_by\",\"date_created\",\"modified_by\",\"date_modified\",\"patient_id\",\"test_id\",\"uuid\",\"archived\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
	    resourceMap.put("pstmtInsert_tDBOutput_3", pstmtInsert_tDBOutput_3);
	    String update_tDBOutput_3 = "UPDATE \"" + tableName_tDBOutput_3 + "\" SET \"patient_uuid\" = ?,\"date_sample_collected\" = ?,\"facility_id\" = ?,\"created_by\" = ?,\"date_created\" = ?,\"modified_by\" = ?,\"date_modified\" = ?,\"patient_id\" = ?,\"test_id\" = ?,\"uuid\" = ?,\"archived\" = ? WHERE \"id\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(update_tDBOutput_3);
	    resourceMap.put("pstmtUpdate_tDBOutput_3", pstmtUpdate_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"laboratory_sample_order");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
laboratory_sample_finalStruct laboratory_sample_final_tmp = new laboratory_sample_finalStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tMap_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_10", false);
		start_Hash.put("tMap_10", System.currentTimeMillis());
		
	
	currentComponent="tMap_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"laboratory_sample_extract");
					}
				
		int tos_count_tMap_10 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<laboratory_order_dataStruct> tHash_Lookup_laboratory_order_data = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<laboratory_order_dataStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<laboratory_order_dataStruct>) 
					globalMap.get( "tHash_Lookup_laboratory_order_data" ))
					;					
					
	

laboratory_order_dataStruct laboratory_order_dataHashKey = new laboratory_order_dataStruct();
laboratory_order_dataStruct laboratory_order_dataDefault = new laboratory_order_dataStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_10__Struct  {
}
Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
laboratory_sample_orderStruct laboratory_sample_order_tmp = new laboratory_sample_orderStruct();
// ###############################

        
        



        









 



/**
 * [tMap_10 begin ] stop
 */



	
	/**
	 * [tDBInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_13", false);
		start_Hash.put("tDBInput_13", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_13";

	
		int tos_count_tDBInput_13 = 0;
		
	
    
	
		    int nb_line_tDBInput_13 = 0;
		    java.sql.Connection conn_tDBInput_13 = null;
				String driverClass_tDBInput_13 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_13 = java.lang.Class.forName(driverClass_tDBInput_13);
				String dbUser_tDBInput_13 = context.LAMIS3_Login;
				
				
	final String decryptedPassword_tDBInput_13 = context.LAMIS3_Password; 
				
				String dbPwd_tDBInput_13 = decryptedPassword_tDBInput_13;
				
				String url_tDBInput_13 = "jdbc:postgresql://" + context.LAMIS3_Server + ":" + context.LAMIS3_Port + "/" + context.LAMIS3_Database + "?" + context.LAMIS3_AdditionalParams;
				
				conn_tDBInput_13 = java.sql.DriverManager.getConnection(url_tDBInput_13,dbUser_tDBInput_13,dbPwd_tDBInput_13);
		        
				conn_tDBInput_13.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_13 = conn_tDBInput_13.createStatement();

		    String dbquery_tDBInput_13 = "SELECT line.id, p.uuid as person_uuid,\ndate_sample_collected\nFROM (SELECT laboratory.id, laboratory.patient_id, labor"
+"atory.date_sample_collected, laboratory.date_assay, laboratory.labno, lab_object ->> 'result' as result, \nlab_object ->"
+"> 'comment' as comment, lab_object ->> 'indication' as indication, \nlab_object ->> 'lab_test_id' as lab_test_id \nFROM "
+"laboratory,jsonb_array_elements(lines) with ordinality p(lab_object)) as line\nINNER JOIN lab_test lt ON line.lab_test_i"
+"d::bigint=lt.id\nINNER JOIN lab_test_category ltc ON lt.lab_test_category_id = ltc.id\nINNER JOIN patient p ON p.id = li"
+"ne.patient_id\nORDER BY id ASC";
			

            	globalMap.put("tDBInput_13_QUERY",dbquery_tDBInput_13);
		    java.sql.ResultSet rs_tDBInput_13 = null;

		    try {
		    	rs_tDBInput_13 = stmt_tDBInput_13.executeQuery(dbquery_tDBInput_13);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_13 = rs_tDBInput_13.getMetaData();
		    	int colQtyInRs_tDBInput_13 = rsmd_tDBInput_13.getColumnCount();

		    String tmpContent_tDBInput_13 = null;
		    
		    
		    while (rs_tDBInput_13.next()) {
		        nb_line_tDBInput_13++;
		        
							if(colQtyInRs_tDBInput_13 < 1) {
								laboratory_sample_extract.id = 0;
							} else {
		                          
            laboratory_sample_extract.id = rs_tDBInput_13.getInt(1);
            if(rs_tDBInput_13.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_13 < 2) {
								laboratory_sample_extract.person_uuid = null;
							} else {
	                         		
        	laboratory_sample_extract.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_13, 2, false);
		                    }
							if(colQtyInRs_tDBInput_13 < 3) {
								laboratory_sample_extract.date_sample_collected = null;
							} else {
										
			laboratory_sample_extract.date_sample_collected = routines.system.JDBCUtil.getDate(rs_tDBInput_13, 3);
		                    }
					


 



/**
 * [tDBInput_13 begin ] stop
 */
	
	/**
	 * [tDBInput_13 main ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 


	tos_count_tDBInput_13++;

/**
 * [tDBInput_13 main ] stop
 */
	
	/**
	 * [tDBInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tMap_10 main ] start
	 */

	

	
	
	currentComponent="tMap_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"laboratory_sample_extract");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_10 = false;
		  boolean mainRowRejected_tMap_10 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "laboratory_order_data" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooplaboratory_order_data = false;
       		  	    	
       		  	    	
 							laboratory_order_dataStruct laboratory_order_dataObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_10) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_10 = false;
								
	                        		    	Object exprKeyValue_laboratory_order_data__id = laboratory_sample_extract.id ;
	                        		    	if(exprKeyValue_laboratory_order_data__id == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_10 = true;
	                        		    	} else {
                        		    			laboratory_order_dataHashKey.id = (int)(Integer) exprKeyValue_laboratory_order_data__id;
                        		    		}
                        		    		

								
		                        	laboratory_order_dataHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_10) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_laboratory_order_data.lookup( laboratory_order_dataHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_laboratory_order_data != null && tHash_Lookup_laboratory_order_data.getCount(laboratory_order_dataHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'laboratory_order_data' and it contains more one result from keys :  laboratory_order_data.id = '" + laboratory_order_dataHashKey.id + "'");
								} // G 071
							

							laboratory_order_dataStruct laboratory_order_data = null;
                    		  	 
							   
                    		  	 
	       		  	    	laboratory_order_dataStruct fromLookup_laboratory_order_data = null;
							laboratory_order_data = laboratory_order_dataDefault;
										 
							
								 
							
							
								if (tHash_Lookup_laboratory_order_data !=null && tHash_Lookup_laboratory_order_data.hasNext()) { // G 099
								
							
								
								fromLookup_laboratory_order_data = tHash_Lookup_laboratory_order_data.next();

							
							
								} // G 099
							
							

							if(fromLookup_laboratory_order_data != null) {
								laboratory_order_data = fromLookup_laboratory_order_data;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
        // ###############################
        // # Output tables

laboratory_sample_order = null;


// # Output table : 'laboratory_sample_order'
laboratory_sample_order_tmp.id = laboratory_sample_extract.id ;
laboratory_sample_order_tmp.person_uuid = laboratory_sample_extract.person_uuid ;
laboratory_sample_order_tmp.date_sample_collected = laboratory_sample_extract.date_sample_collected ;
laboratory_sample_order_tmp.facility_id = laboratory_order_data.facility_id ;
laboratory_sample_order_tmp.created_by = laboratory_order_data.created_by ;
laboratory_sample_order_tmp.date_created = laboratory_order_data.date_created ;
laboratory_sample_order_tmp.modified_by = laboratory_order_data.modified_by ;
laboratory_sample_order_tmp.date_modified = laboratory_order_data.date_modified ;
laboratory_sample_order_tmp.test_id = laboratory_order_data.test_id ;
laboratory_sample_order_tmp.archived = laboratory_order_data.archived ;
laboratory_sample_order = laboratory_sample_order_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_10 = false;










 


	tos_count_tMap_10++;

/**
 * [tMap_10 main ] stop
 */
	
	/**
	 * [tMap_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_begin ] stop
 */
// Start of branch "laboratory_sample_order"
if(laboratory_sample_order != null) { 



	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"laboratory_sample_order");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row2HashKey.uuid = laboratory_sample_order.person_uuid ;
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.uuid = '" + row2HashKey.uuid + "'");
								} // G 071
							

							row2Struct row2 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								 
							
							
								if (tHash_Lookup_row2 !=null && tHash_Lookup_row2.hasNext()) { // G 099
								
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							
							
								} // G 099
							
							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

laboratory_sample_final = null;


// # Output table : 'laboratory_sample_final'
laboratory_sample_final_tmp.id = Numeric.sequence("id",1,1) ;
laboratory_sample_final_tmp.patient_uuid = laboratory_sample_order.person_uuid ;
laboratory_sample_final_tmp.date_sample_collected = laboratory_sample_order.date_sample_collected ;
laboratory_sample_final_tmp.facility_id = laboratory_sample_order.facility_id ;
laboratory_sample_final_tmp.created_by = laboratory_sample_order.created_by ;
laboratory_sample_final_tmp.date_created = laboratory_sample_order.date_created ;
laboratory_sample_final_tmp.modified_by = laboratory_sample_order.modified_by ;
laboratory_sample_final_tmp.date_modified = laboratory_sample_order.date_modified ;
laboratory_sample_final_tmp.patient_id = row2.id ;
laboratory_sample_final_tmp.test_id = laboratory_sample_order.test_id ;
laboratory_sample_final_tmp.uuid = java.util.UUID.randomUUID().toString() ;
laboratory_sample_final_tmp.archived = laboratory_sample_order.archived ;
laboratory_sample_final = laboratory_sample_final_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "laboratory_sample_final"
if(laboratory_sample_final != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"laboratory_sample_final");
					}
					



        whetherReject_tDBOutput_3 = false;
                    pstmt_tDBOutput_3.setInt(1, laboratory_sample_final.id);

            int checkCount_tDBOutput_3 = -1;
            try (java.sql.ResultSet rs_tDBOutput_3 = pstmt_tDBOutput_3.executeQuery()) {
                while(rs_tDBOutput_3.next()) {
                    checkCount_tDBOutput_3 = rs_tDBOutput_3.getInt(1);
                }
            }
            if(checkCount_tDBOutput_3 > 0) {
                        if(laboratory_sample_final.patient_uuid == null) {
pstmtUpdate_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(1, laboratory_sample_final.patient_uuid);
}

                        if(laboratory_sample_final.date_sample_collected != null) {
pstmtUpdate_tDBOutput_3.setTimestamp(2, new java.sql.Timestamp(laboratory_sample_final.date_sample_collected.getTime()));
} else {
pstmtUpdate_tDBOutput_3.setNull(2, java.sql.Types.TIMESTAMP);
}

                        if(laboratory_sample_final.facility_id == null) {
pstmtUpdate_tDBOutput_3.setNull(3, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_3.setInt(3, laboratory_sample_final.facility_id);
}

                        if(laboratory_sample_final.created_by == null) {
pstmtUpdate_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(4, laboratory_sample_final.created_by);
}

                        if(laboratory_sample_final.date_created != null) {
pstmtUpdate_tDBOutput_3.setTimestamp(5, new java.sql.Timestamp(laboratory_sample_final.date_created.getTime()));
} else {
pstmtUpdate_tDBOutput_3.setNull(5, java.sql.Types.TIMESTAMP);
}

                        if(laboratory_sample_final.modified_by == null) {
pstmtUpdate_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(6, laboratory_sample_final.modified_by);
}

                        if(laboratory_sample_final.date_modified != null) {
pstmtUpdate_tDBOutput_3.setTimestamp(7, new java.sql.Timestamp(laboratory_sample_final.date_modified.getTime()));
} else {
pstmtUpdate_tDBOutput_3.setNull(7, java.sql.Types.TIMESTAMP);
}

                        pstmtUpdate_tDBOutput_3.setInt(8, laboratory_sample_final.patient_id);

                        pstmtUpdate_tDBOutput_3.setInt(9, laboratory_sample_final.test_id);

                        if(laboratory_sample_final.uuid == null) {
pstmtUpdate_tDBOutput_3.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(10, laboratory_sample_final.uuid);
}

                        if(laboratory_sample_final.archived == null) {
pstmtUpdate_tDBOutput_3.setNull(11, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_3.setInt(11, laboratory_sample_final.archived);
}

                        pstmtUpdate_tDBOutput_3.setInt(12 + count_tDBOutput_3, laboratory_sample_final.id);

                try {
					
                    updatedCount_tDBOutput_3 = updatedCount_tDBOutput_3 + pstmtUpdate_tDBOutput_3.executeUpdate();
                    nb_line_tDBOutput_3++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_3 = true;
                        nb_line_tDBOutput_3++;
                            System.err.print(e.getMessage());
                }
            } else {
                        pstmtInsert_tDBOutput_3.setInt(1, laboratory_sample_final.id);

                        if(laboratory_sample_final.patient_uuid == null) {
pstmtInsert_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(2, laboratory_sample_final.patient_uuid);
}

                        if(laboratory_sample_final.date_sample_collected != null) {
pstmtInsert_tDBOutput_3.setTimestamp(3, new java.sql.Timestamp(laboratory_sample_final.date_sample_collected.getTime()));
} else {
pstmtInsert_tDBOutput_3.setNull(3, java.sql.Types.TIMESTAMP);
}

                        if(laboratory_sample_final.facility_id == null) {
pstmtInsert_tDBOutput_3.setNull(4, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_3.setInt(4, laboratory_sample_final.facility_id);
}

                        if(laboratory_sample_final.created_by == null) {
pstmtInsert_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(5, laboratory_sample_final.created_by);
}

                        if(laboratory_sample_final.date_created != null) {
pstmtInsert_tDBOutput_3.setTimestamp(6, new java.sql.Timestamp(laboratory_sample_final.date_created.getTime()));
} else {
pstmtInsert_tDBOutput_3.setNull(6, java.sql.Types.TIMESTAMP);
}

                        if(laboratory_sample_final.modified_by == null) {
pstmtInsert_tDBOutput_3.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(7, laboratory_sample_final.modified_by);
}

                        if(laboratory_sample_final.date_modified != null) {
pstmtInsert_tDBOutput_3.setTimestamp(8, new java.sql.Timestamp(laboratory_sample_final.date_modified.getTime()));
} else {
pstmtInsert_tDBOutput_3.setNull(8, java.sql.Types.TIMESTAMP);
}

                        pstmtInsert_tDBOutput_3.setInt(9, laboratory_sample_final.patient_id);

                        pstmtInsert_tDBOutput_3.setInt(10, laboratory_sample_final.test_id);

                        if(laboratory_sample_final.uuid == null) {
pstmtInsert_tDBOutput_3.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(11, laboratory_sample_final.uuid);
}

                        if(laboratory_sample_final.archived == null) {
pstmtInsert_tDBOutput_3.setNull(12, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_3.setInt(12, laboratory_sample_final.archived);
}

                try {
					
                    insertedCount_tDBOutput_3 = insertedCount_tDBOutput_3 + pstmtInsert_tDBOutput_3.executeUpdate();
                    nb_line_tDBOutput_3++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_3 = true;
                        nb_line_tDBOutput_3++;
                            System.err.print(e.getMessage());
                }
            }
            if(!whetherReject_tDBOutput_3) {
            }
    		    commitCounter_tDBOutput_3++;
                if(commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {
                	conn_tDBOutput_3.commit();
                	
                	commitCounter_tDBOutput_3=0;
                }

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "laboratory_sample_final"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */

} // End of branch "laboratory_sample_order"




	
	/**
	 * [tMap_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_13 end ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

	}
}finally{
	if (rs_tDBInput_13 != null) {
		rs_tDBInput_13.close();
	}
	if (stmt_tDBInput_13 != null) {
		stmt_tDBInput_13.close();
	}
	if(conn_tDBInput_13 != null && !conn_tDBInput_13.isClosed()) {
		
			conn_tDBInput_13.commit();
			
		
			conn_tDBInput_13.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_13_NB_LINE",nb_line_tDBInput_13);
 

ok_Hash.put("tDBInput_13", true);
end_Hash.put("tDBInput_13", System.currentTimeMillis());

   			if (globalMap.get("tDBInput_13_NB_LINE") != null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If3", 0, "true");
					}
				tJava_7Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "false");
					}   	 
   				}



/**
 * [tDBInput_13 end ] stop
 */

	
	/**
	 * [tMap_10 end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_laboratory_order_data != null) {
						tHash_Lookup_laboratory_order_data.endGet();
					}
					globalMap.remove( "tHash_Lookup_laboratory_order_data" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"laboratory_sample_extract");
			  	}
			  	
 

ok_Hash.put("tMap_10", true);
end_Hash.put("tMap_10", System.currentTimeMillis());




/**
 * [tMap_10 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"laboratory_sample_order");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



        if(pstmtUpdate_tDBOutput_3 != null){
            pstmtUpdate_tDBOutput_3.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_3");
        }
        if(pstmtInsert_tDBOutput_3 != null){
            pstmtInsert_tDBOutput_3.close();
            resourceMap.remove("pstmtInsert_tDBOutput_3");
        }
        if(pstmt_tDBOutput_3 != null) {
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);
			
			conn_tDBOutput_3.commit();
			
		
    	conn_tDBOutput_3 .close();
    	
    	resourceMap.put("finish_tDBOutput_3", true);
    	

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"laboratory_sample_final");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tJava_4Process(globalMap);



/**
 * [tDBOutput_3 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_13:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tDBInput_12Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
					     			//free memory for "tMap_10"
					     			globalMap.remove("tHash_Lookup_laboratory_order_data"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_13 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 finally ] stop
 */

	
	/**
	 * [tMap_10 finally ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_3 = null;
                if ((pstmtUpdateToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_3")) != null) {
                    pstmtUpdateToClose_tDBOutput_3.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_3 = null;
                if ((pstmtInsertToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_3")) != null) {
                    pstmtInsertToClose_tDBOutput_3.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_3") == null){
            java.sql.Connection ctn_tDBOutput_3 = null;
            if((ctn_tDBOutput_3 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_3")) != null){
                try {
                    ctn_tDBOutput_3.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_3) {
                    String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :" + sqlEx_tDBOutput_3.getMessage();
                    System.err.println(errorMessage_tDBOutput_3);
                }
            }
        }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_13_SUBPROCESS_STATE", 1);
	}
	

public void tJava_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_4", false);
		start_Hash.put("tJava_4", System.currentTimeMillis());
		
	
	currentComponent="tJava_4";

	
		int tos_count_tJava_4 = 0;
		


int totalMigrated = globalMap.get("tDBOutput_3_NB_LINE_UPDATED") != null ? (Integer)globalMap.get("tDBOutput_3_NB_LINE_UPDATED") : 0;

System.out.println("Total Laboratory Sample already migrated "+totalMigrated);

System.out.println("Total new records migrated - "+globalMap.get("tDBOutput_3_NB_LINE_INSERTED"));
if(globalMap.get("tDBOutput_3_ERROR_MESSAGE") != null){
System.out.println("Migration Error - "+globalMap.get("tDBOutput_3_ERROR_MESSAGE"));
}
System.out.println("Total erroneous records not migrated - "+globalMap.get("tFileOutputDelimited_3_NB_LINE"));
System.out.println("*************LABORATORY SAMPLE MIGRATION REPORT END*****************");
System.out.println("****************************************************************");
 



/**
 * [tJava_4 begin ] stop
 */
	
	/**
	 * [tJava_4 main ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 


	tos_count_tJava_4++;

/**
 * [tJava_4 main ] stop
 */
	
	/**
	 * [tJava_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 process_data_begin ] stop
 */
	
	/**
	 * [tJava_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 process_data_end ] stop
 */
	
	/**
	 * [tJava_4 end ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 

ok_Hash.put("tJava_4", true);
end_Hash.put("tJava_4", System.currentTimeMillis());




/**
 * [tJava_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_4 finally ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}
	


public static class laboratory_result_finalStruct implements routines.system.IPersistableRow<laboratory_result_finalStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Laboratory = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String result_reported;

				public String getResult_reported () {
					return this.result_reported;
				}
				
			    public java.util.Date date_result_reported;

				public java.util.Date getDate_result_reported () {
					return this.date_result_reported;
				}
				
			    public String patient_uuid;

				public String getPatient_uuid () {
					return this.patient_uuid;
				}
				
			    public java.util.Date date_assayed;

				public java.util.Date getDate_assayed () {
					return this.date_assayed;
				}
				
			    public Integer facility_id;

				public Integer getFacility_id () {
					return this.facility_id;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public java.util.Date date_created;

				public java.util.Date getDate_created () {
					return this.date_created;
				}
				
			    public String modified_by;

				public String getModified_by () {
					return this.modified_by;
				}
				
			    public java.util.Date date_modified;

				public java.util.Date getDate_modified () {
					return this.date_modified;
				}
				
			    public int test_id;

				public int getTest_id () {
					return this.test_id;
				}
				
			    public int patient_id;

				public int getPatient_id () {
					return this.patient_id;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final laboratory_result_finalStruct other = (laboratory_result_finalStruct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(laboratory_result_finalStruct other) {

		other.id = this.id;
	            other.result_reported = this.result_reported;
	            other.date_result_reported = this.date_result_reported;
	            other.patient_uuid = this.patient_uuid;
	            other.date_assayed = this.date_assayed;
	            other.facility_id = this.facility_id;
	            other.created_by = this.created_by;
	            other.date_created = this.date_created;
	            other.modified_by = this.modified_by;
	            other.date_modified = this.date_modified;
	            other.test_id = this.test_id;
	            other.patient_id = this.patient_id;
	            other.archived = this.archived;
	            
	}

	public void copyKeysDataTo(laboratory_result_finalStruct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Laboratory.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Laboratory.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Laboratory) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.result_reported = readString(dis);
					
					this.date_result_reported = readDate(dis);
					
					this.patient_uuid = readString(dis);
					
					this.date_assayed = readDate(dis);
					
						this.facility_id = readInteger(dis);
					
					this.created_by = readString(dis);
					
					this.date_created = readDate(dis);
					
					this.modified_by = readString(dis);
					
					this.date_modified = readDate(dis);
					
			        this.test_id = dis.readInt();
					
			        this.patient_id = dis.readInt();
					
						this.archived = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.result_reported,dos);
					
					// java.util.Date
				
						writeDate(this.date_result_reported,dos);
					
					// String
				
						writeString(this.patient_uuid,dos);
					
					// java.util.Date
				
						writeDate(this.date_assayed,dos);
					
					// Integer
				
						writeInteger(this.facility_id,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// java.util.Date
				
						writeDate(this.date_created,dos);
					
					// String
				
						writeString(this.modified_by,dos);
					
					// java.util.Date
				
						writeDate(this.date_modified,dos);
					
					// int
				
		            	dos.writeInt(this.test_id);
					
					// int
				
		            	dos.writeInt(this.patient_id);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",result_reported="+result_reported);
		sb.append(",date_result_reported="+String.valueOf(date_result_reported));
		sb.append(",patient_uuid="+patient_uuid);
		sb.append(",date_assayed="+String.valueOf(date_assayed));
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",created_by="+created_by);
		sb.append(",date_created="+String.valueOf(date_created));
		sb.append(",modified_by="+modified_by);
		sb.append(",date_modified="+String.valueOf(date_modified));
		sb.append(",test_id="+String.valueOf(test_id));
		sb.append(",patient_id="+String.valueOf(patient_id));
		sb.append(",archived="+String.valueOf(archived));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(laboratory_result_finalStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class laboratory_result_extractsStruct implements routines.system.IPersistableRow<laboratory_result_extractsStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Laboratory = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String result_reported;

				public String getResult_reported () {
					return this.result_reported;
				}
				
			    public java.util.Date date_result_reported;

				public java.util.Date getDate_result_reported () {
					return this.date_result_reported;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public java.util.Date date_assayed;

				public java.util.Date getDate_assayed () {
					return this.date_assayed;
				}
				
			    public Integer facility_id;

				public Integer getFacility_id () {
					return this.facility_id;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public java.util.Date date_created;

				public java.util.Date getDate_created () {
					return this.date_created;
				}
				
			    public String modified_by;

				public String getModified_by () {
					return this.modified_by;
				}
				
			    public java.util.Date date_modified;

				public java.util.Date getDate_modified () {
					return this.date_modified;
				}
				
			    public int test_id;

				public int getTest_id () {
					return this.test_id;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Laboratory.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Laboratory.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Laboratory) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.result_reported = readString(dis);
					
					this.date_result_reported = readDate(dis);
					
					this.person_uuid = readString(dis);
					
					this.date_assayed = readDate(dis);
					
						this.facility_id = readInteger(dis);
					
					this.created_by = readString(dis);
					
					this.date_created = readDate(dis);
					
					this.modified_by = readString(dis);
					
					this.date_modified = readDate(dis);
					
			        this.test_id = dis.readInt();
					
						this.archived = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.result_reported,dos);
					
					// java.util.Date
				
						writeDate(this.date_result_reported,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// java.util.Date
				
						writeDate(this.date_assayed,dos);
					
					// Integer
				
						writeInteger(this.facility_id,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// java.util.Date
				
						writeDate(this.date_created,dos);
					
					// String
				
						writeString(this.modified_by,dos);
					
					// java.util.Date
				
						writeDate(this.date_modified,dos);
					
					// int
				
		            	dos.writeInt(this.test_id);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",result_reported="+result_reported);
		sb.append(",date_result_reported="+String.valueOf(date_result_reported));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",date_assayed="+String.valueOf(date_assayed));
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",created_by="+created_by);
		sb.append(",date_created="+String.valueOf(date_created));
		sb.append(",modified_by="+modified_by);
		sb.append(",date_modified="+String.valueOf(date_modified));
		sb.append(",test_id="+String.valueOf(test_id));
		sb.append(",archived="+String.valueOf(archived));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(laboratory_result_extractsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class laboratory_result_recordsStruct implements routines.system.IPersistableRow<laboratory_result_recordsStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Laboratory = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String result_reported;

				public String getResult_reported () {
					return this.result_reported;
				}
				
			    public java.util.Date date_result_reported;

				public java.util.Date getDate_result_reported () {
					return this.date_result_reported;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public java.util.Date date_assayed;

				public java.util.Date getDate_assayed () {
					return this.date_assayed;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Laboratory.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Laboratory.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Laboratory) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.result_reported = readString(dis);
					
					this.date_result_reported = readDate(dis);
					
					this.person_uuid = readString(dis);
					
					this.date_assayed = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.result_reported,dos);
					
					// java.util.Date
				
						writeDate(this.date_result_reported,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// java.util.Date
				
						writeDate(this.date_assayed,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",result_reported="+result_reported);
		sb.append(",date_result_reported="+String.valueOf(date_result_reported));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",date_assayed="+String.valueOf(date_assayed));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(laboratory_result_recordsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_12Struct implements routines.system.IPersistableRow<after_tDBInput_12Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Laboratory = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String result_reported;

				public String getResult_reported () {
					return this.result_reported;
				}
				
			    public java.util.Date date_result_reported;

				public java.util.Date getDate_result_reported () {
					return this.date_result_reported;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public java.util.Date date_assayed;

				public java.util.Date getDate_assayed () {
					return this.date_assayed;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Laboratory.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Laboratory.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Laboratory) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.result_reported = readString(dis);
					
					this.date_result_reported = readDate(dis);
					
					this.person_uuid = readString(dis);
					
					this.date_assayed = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.result_reported,dos);
					
					// java.util.Date
				
						writeDate(this.date_result_reported,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// java.util.Date
				
						writeDate(this.date_assayed,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",result_reported="+result_reported);
		sb.append(",date_result_reported="+String.valueOf(date_result_reported));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",date_assayed="+String.valueOf(date_assayed));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_15Process(globalMap);
		tDBInput_16Process(globalMap);

		laboratory_result_recordsStruct laboratory_result_records = new laboratory_result_recordsStruct();
laboratory_result_extractsStruct laboratory_result_extracts = new laboratory_result_extractsStruct();
laboratory_result_finalStruct laboratory_result_final = new laboratory_result_finalStruct();






	
	/**
	 * [tDBOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_4", false);
		start_Hash.put("tDBOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"laboratory_result_final");
					}
				
		int tos_count_tDBOutput_4 = 0;
		





String dbschema_tDBOutput_4 = null;
	dbschema_tDBOutput_4 = context.LAMISPlus_Schema;
	

String tableName_tDBOutput_4 = null;
if(dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
	tableName_tDBOutput_4 = ("laboratory_result");
} else {
	tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "\".\"" + ("laboratory_result");
}

        int updateKeyCount_tDBOutput_4 = 1;
        if(updateKeyCount_tDBOutput_4 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_4 = 0;
int nb_line_update_tDBOutput_4 = 0;
int nb_line_inserted_tDBOutput_4 = 0;
int nb_line_deleted_tDBOutput_4 = 0;
int nb_line_rejected_tDBOutput_4 = 0;

int deletedCount_tDBOutput_4=0;
int updatedCount_tDBOutput_4=0;
int insertedCount_tDBOutput_4=0;
int rejectedCount_tDBOutput_4=0;

boolean whetherReject_tDBOutput_4 = false;

java.sql.Connection conn_tDBOutput_4 = null;
String dbUser_tDBOutput_4 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_4 = "jdbc:postgresql://"+context.LAMISPlus_Server+":"+context.LAMISPlus_Port+"/"+context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
    dbUser_tDBOutput_4 = context.LAMISPlus_Login;

	final String decryptedPassword_tDBOutput_4 = context.LAMISPlus_Password; 

    String dbPwd_tDBOutput_4 = decryptedPassword_tDBOutput_4;

    conn_tDBOutput_4 = java.sql.DriverManager.getConnection(url_tDBOutput_4,dbUser_tDBOutput_4,dbPwd_tDBOutput_4);
	
	resourceMap.put("conn_tDBOutput_4", conn_tDBOutput_4);
        conn_tDBOutput_4.setAutoCommit(false);
        int commitEvery_tDBOutput_4 = 10000;
        int commitCounter_tDBOutput_4 = 0;



int count_tDBOutput_4=0;
	    java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_4 + "\" WHERE \"id\" = ?");
	    resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);
	    String insert_tDBOutput_4 = "INSERT INTO \"" + tableName_tDBOutput_4 + "\" (\"id\",\"result_reported\",\"date_result_reported\",\"patient_uuid\",\"date_assayed\",\"facility_id\",\"created_by\",\"date_created\",\"modified_by\",\"date_modified\",\"test_id\",\"patient_id\",\"archived\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
	    resourceMap.put("pstmtInsert_tDBOutput_4", pstmtInsert_tDBOutput_4);
	    String update_tDBOutput_4 = "UPDATE \"" + tableName_tDBOutput_4 + "\" SET \"result_reported\" = ?,\"date_result_reported\" = ?,\"patient_uuid\" = ?,\"date_assayed\" = ?,\"facility_id\" = ?,\"created_by\" = ?,\"date_created\" = ?,\"modified_by\" = ?,\"date_modified\" = ?,\"test_id\" = ?,\"patient_id\" = ?,\"archived\" = ? WHERE \"id\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(update_tDBOutput_4);
	    resourceMap.put("pstmtUpdate_tDBOutput_4", pstmtUpdate_tDBOutput_4);
	    

 



/**
 * [tDBOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_12", false);
		start_Hash.put("tMap_12", System.currentTimeMillis());
		
	
	currentComponent="tMap_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"laboratory_result_extracts");
					}
				
		int tos_count_tMap_12 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<patient_person_dataStruct> tHash_Lookup_patient_person_data = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<patient_person_dataStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<patient_person_dataStruct>) 
					globalMap.get( "tHash_Lookup_patient_person_data" ))
					;					
					
	

patient_person_dataStruct patient_person_dataHashKey = new patient_person_dataStruct();
patient_person_dataStruct patient_person_dataDefault = new patient_person_dataStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_12__Struct  {
}
Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
// ###############################

// ###############################
// # Outputs initialization
laboratory_result_finalStruct laboratory_result_final_tmp = new laboratory_result_finalStruct();
// ###############################

        
        



        









 



/**
 * [tMap_12 begin ] stop
 */



	
	/**
	 * [tMap_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_11", false);
		start_Hash.put("tMap_11", System.currentTimeMillis());
		
	
	currentComponent="tMap_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"laboratory_result_records");
					}
				
		int tos_count_tMap_11 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<laboratory_order_resultStruct> tHash_Lookup_laboratory_order_result = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<laboratory_order_resultStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<laboratory_order_resultStruct>) 
					globalMap.get( "tHash_Lookup_laboratory_order_result" ))
					;					
					
	

laboratory_order_resultStruct laboratory_order_resultHashKey = new laboratory_order_resultStruct();
laboratory_order_resultStruct laboratory_order_resultDefault = new laboratory_order_resultStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_11__Struct  {
}
Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
laboratory_result_extractsStruct laboratory_result_extracts_tmp = new laboratory_result_extractsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_11 begin ] stop
 */



	
	/**
	 * [tDBInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_12", false);
		start_Hash.put("tDBInput_12", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_12";

	
		int tos_count_tDBInput_12 = 0;
		
	
    
	
		    int nb_line_tDBInput_12 = 0;
		    java.sql.Connection conn_tDBInput_12 = null;
				String driverClass_tDBInput_12 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_12 = java.lang.Class.forName(driverClass_tDBInput_12);
				String dbUser_tDBInput_12 = context.LAMIS3_Login;
				
				
	final String decryptedPassword_tDBInput_12 = context.LAMIS3_Password; 
				
				String dbPwd_tDBInput_12 = decryptedPassword_tDBInput_12;
				
				String url_tDBInput_12 = "jdbc:postgresql://" + context.LAMIS3_Server + ":" + context.LAMIS3_Port + "/" + context.LAMIS3_Database + "?" + context.LAMIS3_AdditionalParams;
				
				conn_tDBInput_12 = java.sql.DriverManager.getConnection(url_tDBInput_12,dbUser_tDBInput_12,dbPwd_tDBInput_12);
		        
				conn_tDBInput_12.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_12 = conn_tDBInput_12.createStatement();

		    String dbquery_tDBInput_12 = "SELECT line.id, line.test_result as result_reported, line.date_result_received as date_result_reported,\np.uuid as pers"
+"on_uuid, date_assay as date_assayed\nFROM (SELECT laboratory.id, laboratory.patient_id, lab_object ->> 'result' as test_"
+"result, laboratory.date_result_received,\nlaboratory.date_assay, laboratory.labno\nFROM laboratory,jsonb_array_elements("
+"lines) with ordinality p(lab_object)) as line\nINNER JOIN patient p ON p.id = line.patient_id\nORDER BY id ASC";
			

            	globalMap.put("tDBInput_12_QUERY",dbquery_tDBInput_12);
		    java.sql.ResultSet rs_tDBInput_12 = null;

		    try {
		    	rs_tDBInput_12 = stmt_tDBInput_12.executeQuery(dbquery_tDBInput_12);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_12 = rs_tDBInput_12.getMetaData();
		    	int colQtyInRs_tDBInput_12 = rsmd_tDBInput_12.getColumnCount();

		    String tmpContent_tDBInput_12 = null;
		    
		    
		    while (rs_tDBInput_12.next()) {
		        nb_line_tDBInput_12++;
		        
							if(colQtyInRs_tDBInput_12 < 1) {
								laboratory_result_records.id = 0;
							} else {
		                          
            laboratory_result_records.id = rs_tDBInput_12.getInt(1);
            if(rs_tDBInput_12.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_12 < 2) {
								laboratory_result_records.result_reported = null;
							} else {
	                         		
        	laboratory_result_records.result_reported = routines.system.JDBCUtil.getString(rs_tDBInput_12, 2, false);
		                    }
							if(colQtyInRs_tDBInput_12 < 3) {
								laboratory_result_records.date_result_reported = null;
							} else {
										
			laboratory_result_records.date_result_reported = routines.system.JDBCUtil.getDate(rs_tDBInput_12, 3);
		                    }
							if(colQtyInRs_tDBInput_12 < 4) {
								laboratory_result_records.person_uuid = null;
							} else {
	                         		
        	laboratory_result_records.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_12, 4, false);
		                    }
							if(colQtyInRs_tDBInput_12 < 5) {
								laboratory_result_records.date_assayed = null;
							} else {
										
			laboratory_result_records.date_assayed = routines.system.JDBCUtil.getDate(rs_tDBInput_12, 5);
		                    }
					


 



/**
 * [tDBInput_12 begin ] stop
 */
	
	/**
	 * [tDBInput_12 main ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 


	tos_count_tDBInput_12++;

/**
 * [tDBInput_12 main ] stop
 */
	
	/**
	 * [tDBInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tMap_11 main ] start
	 */

	

	
	
	currentComponent="tMap_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"laboratory_result_records");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_11 = false;
		  boolean mainRowRejected_tMap_11 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "laboratory_order_result" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooplaboratory_order_result = false;
       		  	    	
       		  	    	
 							laboratory_order_resultStruct laboratory_order_resultObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_11) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_11 = false;
								
	                        		    	Object exprKeyValue_laboratory_order_result__id = laboratory_result_records.id ;
	                        		    	if(exprKeyValue_laboratory_order_result__id == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_11 = true;
	                        		    	} else {
                        		    			laboratory_order_resultHashKey.id = (int)(Integer) exprKeyValue_laboratory_order_result__id;
                        		    		}
                        		    		

								
		                        	laboratory_order_resultHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_11) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_laboratory_order_result.lookup( laboratory_order_resultHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_laboratory_order_result != null && tHash_Lookup_laboratory_order_result.getCount(laboratory_order_resultHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'laboratory_order_result' and it contains more one result from keys :  laboratory_order_result.id = '" + laboratory_order_resultHashKey.id + "'");
								} // G 071
							

							laboratory_order_resultStruct laboratory_order_result = null;
                    		  	 
							   
                    		  	 
	       		  	    	laboratory_order_resultStruct fromLookup_laboratory_order_result = null;
							laboratory_order_result = laboratory_order_resultDefault;
										 
							
								 
							
							
								if (tHash_Lookup_laboratory_order_result !=null && tHash_Lookup_laboratory_order_result.hasNext()) { // G 099
								
							
								
								fromLookup_laboratory_order_result = tHash_Lookup_laboratory_order_result.next();

							
							
								} // G 099
							
							

							if(fromLookup_laboratory_order_result != null) {
								laboratory_order_result = fromLookup_laboratory_order_result;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
        // ###############################
        // # Output tables

laboratory_result_extracts = null;


// # Output table : 'laboratory_result_extracts'
laboratory_result_extracts_tmp.id = Numeric.sequence("id",1,1) ;
laboratory_result_extracts_tmp.result_reported = laboratory_result_records.result_reported ;
laboratory_result_extracts_tmp.date_result_reported = laboratory_result_records.date_result_reported ;
laboratory_result_extracts_tmp.person_uuid = laboratory_result_records.person_uuid ;
laboratory_result_extracts_tmp.date_assayed = laboratory_result_records.date_assayed ;
laboratory_result_extracts_tmp.facility_id = laboratory_order_result.facility_id ;
laboratory_result_extracts_tmp.created_by = laboratory_order_result.created_by ;
laboratory_result_extracts_tmp.date_created = laboratory_order_result.date_created ;
laboratory_result_extracts_tmp.modified_by = laboratory_order_result.modified_by ;
laboratory_result_extracts_tmp.date_modified = laboratory_order_result.date_modified ;
laboratory_result_extracts_tmp.test_id = laboratory_order_result.test_id ;
laboratory_result_extracts_tmp.archived = laboratory_order_result.archived ;
laboratory_result_extracts = laboratory_result_extracts_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_11 = false;










 


	tos_count_tMap_11++;

/**
 * [tMap_11 main ] stop
 */
	
	/**
	 * [tMap_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_begin ] stop
 */
// Start of branch "laboratory_result_extracts"
if(laboratory_result_extracts != null) { 



	
	/**
	 * [tMap_12 main ] start
	 */

	

	
	
	currentComponent="tMap_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"laboratory_result_extracts");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_12 = false;
		  boolean mainRowRejected_tMap_12 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "patient_person_data" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooppatient_person_data = false;
       		  	    	
       		  	    	
 							patient_person_dataStruct patient_person_dataObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_12) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_12 = false;
								
                        		    		    patient_person_dataHashKey.uuid = laboratory_result_extracts.person_uuid ;
                        		    		

								
		                        	patient_person_dataHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_patient_person_data.lookup( patient_person_dataHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_patient_person_data != null && tHash_Lookup_patient_person_data.getCount(patient_person_dataHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'patient_person_data' and it contains more one result from keys :  patient_person_data.uuid = '" + patient_person_dataHashKey.uuid + "'");
								} // G 071
							

							patient_person_dataStruct patient_person_data = null;
                    		  	 
							   
                    		  	 
	       		  	    	patient_person_dataStruct fromLookup_patient_person_data = null;
							patient_person_data = patient_person_dataDefault;
										 
							
								 
							
							
								if (tHash_Lookup_patient_person_data !=null && tHash_Lookup_patient_person_data.hasNext()) { // G 099
								
							
								
								fromLookup_patient_person_data = tHash_Lookup_patient_person_data.next();

							
							
								} // G 099
							
							

							if(fromLookup_patient_person_data != null) {
								patient_person_data = fromLookup_patient_person_data;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
        // ###############################
        // # Output tables

laboratory_result_final = null;


// # Output table : 'laboratory_result_final'
laboratory_result_final_tmp.id = laboratory_result_extracts.id ;
laboratory_result_final_tmp.result_reported = laboratory_result_extracts.result_reported ;
laboratory_result_final_tmp.date_result_reported = laboratory_result_extracts.date_result_reported ;
laboratory_result_final_tmp.patient_uuid = laboratory_result_extracts.person_uuid ;
laboratory_result_final_tmp.date_assayed = laboratory_result_extracts.date_assayed ;
laboratory_result_final_tmp.facility_id = laboratory_result_extracts.facility_id ;
laboratory_result_final_tmp.created_by = laboratory_result_extracts.created_by ;
laboratory_result_final_tmp.date_created = laboratory_result_extracts.date_created ;
laboratory_result_final_tmp.modified_by = laboratory_result_extracts.modified_by ;
laboratory_result_final_tmp.date_modified = laboratory_result_extracts.date_modified ;
laboratory_result_final_tmp.test_id = laboratory_result_extracts.test_id ;
laboratory_result_final_tmp.patient_id = patient_person_data.id ;
laboratory_result_final_tmp.archived = laboratory_result_extracts.archived ;
laboratory_result_final = laboratory_result_final_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_12 = false;










 


	tos_count_tMap_12++;

/**
 * [tMap_12 main ] stop
 */
	
	/**
	 * [tMap_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 process_data_begin ] stop
 */
// Start of branch "laboratory_result_final"
if(laboratory_result_final != null) { 



	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"laboratory_result_final");
					}
					



        whetherReject_tDBOutput_4 = false;
                    pstmt_tDBOutput_4.setInt(1, laboratory_result_final.id);

            int checkCount_tDBOutput_4 = -1;
            try (java.sql.ResultSet rs_tDBOutput_4 = pstmt_tDBOutput_4.executeQuery()) {
                while(rs_tDBOutput_4.next()) {
                    checkCount_tDBOutput_4 = rs_tDBOutput_4.getInt(1);
                }
            }
            if(checkCount_tDBOutput_4 > 0) {
                        if(laboratory_result_final.result_reported == null) {
pstmtUpdate_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(1, laboratory_result_final.result_reported);
}

                        if(laboratory_result_final.date_result_reported != null) {
pstmtUpdate_tDBOutput_4.setTimestamp(2, new java.sql.Timestamp(laboratory_result_final.date_result_reported.getTime()));
} else {
pstmtUpdate_tDBOutput_4.setNull(2, java.sql.Types.TIMESTAMP);
}

                        if(laboratory_result_final.patient_uuid == null) {
pstmtUpdate_tDBOutput_4.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(3, laboratory_result_final.patient_uuid);
}

                        if(laboratory_result_final.date_assayed != null) {
pstmtUpdate_tDBOutput_4.setTimestamp(4, new java.sql.Timestamp(laboratory_result_final.date_assayed.getTime()));
} else {
pstmtUpdate_tDBOutput_4.setNull(4, java.sql.Types.TIMESTAMP);
}

                        if(laboratory_result_final.facility_id == null) {
pstmtUpdate_tDBOutput_4.setNull(5, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_4.setInt(5, laboratory_result_final.facility_id);
}

                        if(laboratory_result_final.created_by == null) {
pstmtUpdate_tDBOutput_4.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(6, laboratory_result_final.created_by);
}

                        if(laboratory_result_final.date_created != null) {
pstmtUpdate_tDBOutput_4.setTimestamp(7, new java.sql.Timestamp(laboratory_result_final.date_created.getTime()));
} else {
pstmtUpdate_tDBOutput_4.setNull(7, java.sql.Types.TIMESTAMP);
}

                        if(laboratory_result_final.modified_by == null) {
pstmtUpdate_tDBOutput_4.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(8, laboratory_result_final.modified_by);
}

                        if(laboratory_result_final.date_modified != null) {
pstmtUpdate_tDBOutput_4.setTimestamp(9, new java.sql.Timestamp(laboratory_result_final.date_modified.getTime()));
} else {
pstmtUpdate_tDBOutput_4.setNull(9, java.sql.Types.TIMESTAMP);
}

                        pstmtUpdate_tDBOutput_4.setInt(10, laboratory_result_final.test_id);

                        pstmtUpdate_tDBOutput_4.setInt(11, laboratory_result_final.patient_id);

                        if(laboratory_result_final.archived == null) {
pstmtUpdate_tDBOutput_4.setNull(12, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_4.setInt(12, laboratory_result_final.archived);
}

                        pstmtUpdate_tDBOutput_4.setInt(13 + count_tDBOutput_4, laboratory_result_final.id);

                try {
					
                    updatedCount_tDBOutput_4 = updatedCount_tDBOutput_4 + pstmtUpdate_tDBOutput_4.executeUpdate();
                    nb_line_tDBOutput_4++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_4 = true;
                        nb_line_tDBOutput_4++;
                            System.err.print(e.getMessage());
                }
            } else {
                        pstmtInsert_tDBOutput_4.setInt(1, laboratory_result_final.id);

                        if(laboratory_result_final.result_reported == null) {
pstmtInsert_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(2, laboratory_result_final.result_reported);
}

                        if(laboratory_result_final.date_result_reported != null) {
pstmtInsert_tDBOutput_4.setTimestamp(3, new java.sql.Timestamp(laboratory_result_final.date_result_reported.getTime()));
} else {
pstmtInsert_tDBOutput_4.setNull(3, java.sql.Types.TIMESTAMP);
}

                        if(laboratory_result_final.patient_uuid == null) {
pstmtInsert_tDBOutput_4.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(4, laboratory_result_final.patient_uuid);
}

                        if(laboratory_result_final.date_assayed != null) {
pstmtInsert_tDBOutput_4.setTimestamp(5, new java.sql.Timestamp(laboratory_result_final.date_assayed.getTime()));
} else {
pstmtInsert_tDBOutput_4.setNull(5, java.sql.Types.TIMESTAMP);
}

                        if(laboratory_result_final.facility_id == null) {
pstmtInsert_tDBOutput_4.setNull(6, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_4.setInt(6, laboratory_result_final.facility_id);
}

                        if(laboratory_result_final.created_by == null) {
pstmtInsert_tDBOutput_4.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(7, laboratory_result_final.created_by);
}

                        if(laboratory_result_final.date_created != null) {
pstmtInsert_tDBOutput_4.setTimestamp(8, new java.sql.Timestamp(laboratory_result_final.date_created.getTime()));
} else {
pstmtInsert_tDBOutput_4.setNull(8, java.sql.Types.TIMESTAMP);
}

                        if(laboratory_result_final.modified_by == null) {
pstmtInsert_tDBOutput_4.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(9, laboratory_result_final.modified_by);
}

                        if(laboratory_result_final.date_modified != null) {
pstmtInsert_tDBOutput_4.setTimestamp(10, new java.sql.Timestamp(laboratory_result_final.date_modified.getTime()));
} else {
pstmtInsert_tDBOutput_4.setNull(10, java.sql.Types.TIMESTAMP);
}

                        pstmtInsert_tDBOutput_4.setInt(11, laboratory_result_final.test_id);

                        pstmtInsert_tDBOutput_4.setInt(12, laboratory_result_final.patient_id);

                        if(laboratory_result_final.archived == null) {
pstmtInsert_tDBOutput_4.setNull(13, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_4.setInt(13, laboratory_result_final.archived);
}

                try {
					
                    insertedCount_tDBOutput_4 = insertedCount_tDBOutput_4 + pstmtInsert_tDBOutput_4.executeUpdate();
                    nb_line_tDBOutput_4++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_4 = true;
                        nb_line_tDBOutput_4++;
                            System.err.print(e.getMessage());
                }
            }
            if(!whetherReject_tDBOutput_4) {
            }
    		    commitCounter_tDBOutput_4++;
                if(commitEvery_tDBOutput_4 <= commitCounter_tDBOutput_4) {
                	conn_tDBOutput_4.commit();
                	
                	commitCounter_tDBOutput_4=0;
                }

 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */

} // End of branch "laboratory_result_final"




	
	/**
	 * [tMap_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 process_data_end ] stop
 */

} // End of branch "laboratory_result_extracts"




	
	/**
	 * [tMap_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_12 end ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

	}
}finally{
	if (rs_tDBInput_12 != null) {
		rs_tDBInput_12.close();
	}
	if (stmt_tDBInput_12 != null) {
		stmt_tDBInput_12.close();
	}
	if(conn_tDBInput_12 != null && !conn_tDBInput_12.isClosed()) {
		
			conn_tDBInput_12.commit();
			
		
			conn_tDBInput_12.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_12_NB_LINE",nb_line_tDBInput_12);
 

ok_Hash.put("tDBInput_12", true);
end_Hash.put("tDBInput_12", System.currentTimeMillis());

   			if (globalMap.get("tBDInput_12_NB_LINE") != null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If4", 0, "true");
					}
				tJava_8Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If4", 0, "false");
					}   	 
   				}



/**
 * [tDBInput_12 end ] stop
 */

	
	/**
	 * [tMap_11 end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_laboratory_order_result != null) {
						tHash_Lookup_laboratory_order_result.endGet();
					}
					globalMap.remove( "tHash_Lookup_laboratory_order_result" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"laboratory_result_records");
			  	}
			  	
 

ok_Hash.put("tMap_11", true);
end_Hash.put("tMap_11", System.currentTimeMillis());




/**
 * [tMap_11 end ] stop
 */

	
	/**
	 * [tMap_12 end ] start
	 */

	

	
	
	currentComponent="tMap_12";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_patient_person_data != null) {
						tHash_Lookup_patient_person_data.endGet();
					}
					globalMap.remove( "tHash_Lookup_patient_person_data" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"laboratory_result_extracts");
			  	}
			  	
 

ok_Hash.put("tMap_12", true);
end_Hash.put("tMap_12", System.currentTimeMillis());




/**
 * [tMap_12 end ] stop
 */

	
	/**
	 * [tDBOutput_4 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



        if(pstmtUpdate_tDBOutput_4 != null){
            pstmtUpdate_tDBOutput_4.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_4");
        }
        if(pstmtInsert_tDBOutput_4 != null){
            pstmtInsert_tDBOutput_4.close();
            resourceMap.remove("pstmtInsert_tDBOutput_4");
        }
        if(pstmt_tDBOutput_4 != null) {
            pstmt_tDBOutput_4.close();
            resourceMap.remove("pstmt_tDBOutput_4");
        }
    resourceMap.put("statementClosed_tDBOutput_4", true);
			
			conn_tDBOutput_4.commit();
			
		
    	conn_tDBOutput_4 .close();
    	
    	resourceMap.put("finish_tDBOutput_4", true);
    	

	nb_line_deleted_tDBOutput_4=nb_line_deleted_tDBOutput_4+ deletedCount_tDBOutput_4;
	nb_line_update_tDBOutput_4=nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
	nb_line_inserted_tDBOutput_4=nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
	nb_line_rejected_tDBOutput_4=nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;
	
        globalMap.put("tDBOutput_4_NB_LINE",nb_line_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_UPDATED",nb_line_update_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_DELETED",nb_line_deleted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"laboratory_result_final");
			  	}
			  	
 

ok_Hash.put("tDBOutput_4", true);
end_Hash.put("tDBOutput_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tJava_5Process(globalMap);



/**
 * [tDBOutput_4 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_12:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tDBInput_10Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_12"
					     			globalMap.remove("tHash_Lookup_patient_person_data"); 
				     			
					     			//free memory for "tMap_11"
					     			globalMap.remove("tHash_Lookup_laboratory_order_result"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_12 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 finally ] stop
 */

	
	/**
	 * [tMap_11 finally ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 finally ] stop
 */

	
	/**
	 * [tMap_12 finally ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 finally ] stop
 */

	
	/**
	 * [tDBOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_4 = null;
                if ((pstmtUpdateToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_4")) != null) {
                    pstmtUpdateToClose_tDBOutput_4.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_4 = null;
                if ((pstmtInsertToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_4")) != null) {
                    pstmtInsertToClose_tDBOutput_4.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
                if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_4")) != null) {
                    pstmtToClose_tDBOutput_4.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_4") == null){
            java.sql.Connection ctn_tDBOutput_4 = null;
            if((ctn_tDBOutput_4 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_4")) != null){
                try {
                    ctn_tDBOutput_4.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_4) {
                    String errorMessage_tDBOutput_4 = "failed to close the connection in tDBOutput_4 :" + sqlEx_tDBOutput_4.getMessage();
                    System.err.println(errorMessage_tDBOutput_4);
                }
            }
        }
    }
 



/**
 * [tDBOutput_4 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_12_SUBPROCESS_STATE", 1);
	}
	

public void tJava_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_5", false);
		start_Hash.put("tJava_5", System.currentTimeMillis());
		
	
	currentComponent="tJava_5";

	
		int tos_count_tJava_5 = 0;
		


int totalMigrated = globalMap.get("tDBOutput_4_NB_LINE_UPDATED") != null ? (Integer)globalMap.get("tDBOutput_4_NB_LINE_UPDATED") : 0;

System.out.println("Total laboratory results already migrated "+totalMigrated);

System.out.println("Total new records migrated - "+globalMap.get("tDBOutput_4_NB_LINE_INSERTED"));
if(globalMap.get("tDBOutput_4_ERROR_MESSAGE") != null){
System.out.println("Laboratory result Migration Error - "+globalMap.get("tDBOutput_4_ERROR_MESSAGE"));
}
System.out.println("Total erroneous records not migrated - "+globalMap.get("tFileOutputDelimited_4_NB_LINE"));
System.out.println("*************LABORATORY RESULT MIGRATION REPORT END*****************");
System.out.println("****************************************************************");
System.out.println();
java.time.LocalDateTime endTime = java.time.LocalDateTime.now();
System.out.println("End time - "+ endTime);
java.time.LocalDateTime statTime = (java.time.LocalDateTime)globalMap.get("startTime");

java.time.Duration duration = java.time.Duration.between(statTime, endTime);
System.out.println("Duration - "+ duration);
System.out.println("*************LABORATORY MIGRATION REPORT END*****************");
System.out.println("****************************************************************");;
 



/**
 * [tJava_5 begin ] stop
 */
	
	/**
	 * [tJava_5 main ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 


	tos_count_tJava_5++;

/**
 * [tJava_5 main ] stop
 */
	
	/**
	 * [tJava_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 process_data_begin ] stop
 */
	
	/**
	 * [tJava_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 process_data_end ] stop
 */
	
	/**
	 * [tJava_5 end ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 

ok_Hash.put("tJava_5", true);
end_Hash.put("tJava_5", System.currentTimeMillis());




/**
 * [tJava_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_5 finally ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}
	

public void tJava_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_8", false);
		start_Hash.put("tJava_8", System.currentTimeMillis());
		
	
	currentComponent="tJava_8";

	
		int tos_count_tJava_8 = 0;
		


System.out.println("*****************************************************************");
System.out.println("***********LABORATORY RESULT MIGRATION REPORT START*****************");

System.out.println("Total Laboratory result records fetched from LAMIS3 laboratory - "+globalMap.get("tDBInput_12_NB_LINE"));
 



/**
 * [tJava_8 begin ] stop
 */
	
	/**
	 * [tJava_8 main ] start
	 */

	

	
	
	currentComponent="tJava_8";

	

 


	tos_count_tJava_8++;

/**
 * [tJava_8 main ] stop
 */
	
	/**
	 * [tJava_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_8";

	

 



/**
 * [tJava_8 process_data_begin ] stop
 */
	
	/**
	 * [tJava_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_8";

	

 



/**
 * [tJava_8 process_data_end ] stop
 */
	
	/**
	 * [tJava_8 end ] start
	 */

	

	
	
	currentComponent="tJava_8";

	

 

ok_Hash.put("tJava_8", true);
end_Hash.put("tJava_8", System.currentTimeMillis());




/**
 * [tJava_8 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_8 finally ] start
	 */

	

	
	
	currentComponent="tJava_8";

	

 



/**
 * [tJava_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_8_SUBPROCESS_STATE", 1);
	}
	


public static class sequence_extraStruct implements routines.system.IPersistableRow<sequence_extraStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Laboratory = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long sequence_count;

				public Long getSequence_count () {
					return this.sequence_count;
				}
				
			    public String table_name;

				public String getTable_name () {
					return this.table_name;
				}
				
			    public java.util.Date date_time;

				public java.util.Date getDate_time () {
					return this.date_time;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.table_name == null) ? 0 : this.table_name.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final sequence_extraStruct other = (sequence_extraStruct) obj;
		
						if (this.table_name == null) {
							if (other.table_name != null)
								return false;
						
						} else if (!this.table_name.equals(other.table_name))
						
							return false;
					

		return true;
    }

	public void copyDataTo(sequence_extraStruct other) {

		other.sequence_count = this.sequence_count;
	            other.table_name = this.table_name;
	            other.date_time = this.date_time;
	            
	}

	public void copyKeysDataTo(sequence_extraStruct other) {

		other.table_name = this.table_name;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Laboratory.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Laboratory.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Laboratory) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sequence_count = null;
           				} else {
           			    	this.sequence_count = dis.readLong();
           				}
					
					this.table_name = readString(dis);
					
					this.date_time = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.sequence_count == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.sequence_count);
		            	}
					
					// String
				
						writeString(this.table_name,dos);
					
					// java.util.Date
				
						writeDate(this.date_time,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("sequence_count="+String.valueOf(sequence_count));
		sb.append(",table_name="+table_name);
		sb.append(",date_time="+String.valueOf(date_time));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sequence_extraStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.table_name, other.table_name);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Laboratory = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[0];

	
			    public Long sequence_count;

				public Long getSequence_count () {
					return this.sequence_count;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Laboratory) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sequence_count = null;
           				} else {
           			    	this.sequence_count = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.sequence_count == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.sequence_count);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("sequence_count="+String.valueOf(sequence_count));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
sequence_extraStruct sequence_extra = new sequence_extraStruct();





	
	/**
	 * [tDBOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_5", false);
		start_Hash.put("tDBOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sequence_extra");
					}
				
		int tos_count_tDBOutput_5 = 0;
		





String dbschema_tDBOutput_5 = null;
	dbschema_tDBOutput_5 = context.LAMISPlus_Schema;
	

String tableName_tDBOutput_5 = null;
if(dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
	tableName_tDBOutput_5 = ("etl_sequence");
} else {
	tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "\".\"" + ("etl_sequence");
}

        int updateKeyCount_tDBOutput_5 = 1;
        if(updateKeyCount_tDBOutput_5 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_5 = 0;
int nb_line_update_tDBOutput_5 = 0;
int nb_line_inserted_tDBOutput_5 = 0;
int nb_line_deleted_tDBOutput_5 = 0;
int nb_line_rejected_tDBOutput_5 = 0;

int deletedCount_tDBOutput_5=0;
int updatedCount_tDBOutput_5=0;
int insertedCount_tDBOutput_5=0;
int rejectedCount_tDBOutput_5=0;

boolean whetherReject_tDBOutput_5 = false;

java.sql.Connection conn_tDBOutput_5 = null;
String dbUser_tDBOutput_5 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_5 = "jdbc:postgresql://"+context.LAMISPlus_Server+":"+context.LAMISPlus_Port+"/"+context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
    dbUser_tDBOutput_5 = context.LAMISPlus_Login;

	final String decryptedPassword_tDBOutput_5 = context.LAMISPlus_Password; 

    String dbPwd_tDBOutput_5 = decryptedPassword_tDBOutput_5;

    conn_tDBOutput_5 = java.sql.DriverManager.getConnection(url_tDBOutput_5,dbUser_tDBOutput_5,dbPwd_tDBOutput_5);
	
	resourceMap.put("conn_tDBOutput_5", conn_tDBOutput_5);
        conn_tDBOutput_5.setAutoCommit(false);
        int commitEvery_tDBOutput_5 = 10000;
        int commitCounter_tDBOutput_5 = 0;



int count_tDBOutput_5=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_5 = conn_tDBOutput_5.getMetaData();
                                boolean whetherExist_tDBOutput_5 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_5 = dbMetaData_tDBOutput_5.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_5 = "public";
                                    if(dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_5 = conn_tDBOutput_5.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_5 = stmtSchema_tDBOutput_5.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_5.next()){
                                                defaultSchema_tDBOutput_5 = rsSchema_tDBOutput_5.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_5.next()) {
                                        String table_tDBOutput_5 = rsTable_tDBOutput_5.getString("TABLE_NAME");
                                        String schema_tDBOutput_5 = rsTable_tDBOutput_5.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_5.equals(("etl_sequence"))
                                            && (schema_tDBOutput_5.equals(dbschema_tDBOutput_5) || ((dbschema_tDBOutput_5 ==null || dbschema_tDBOutput_5.trim().length() ==0) && defaultSchema_tDBOutput_5.equals(schema_tDBOutput_5)))) {
                                            whetherExist_tDBOutput_5 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_5) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_5 = conn_tDBOutput_5.createStatement()) {
                                        stmtCreate_tDBOutput_5.execute("CREATE TABLE \"" + tableName_tDBOutput_5 + "\"(\"sequence_count\" INT8 ,\"table_name\" VARCHAR ,\"date_time\" TIMESTAMP ,primary key(\"table_name\"))");
                                    }
                                }
	    java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_5 + "\" WHERE \"table_name\" = ?");
	    resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);
	    String insert_tDBOutput_5 = "INSERT INTO \"" + tableName_tDBOutput_5 + "\" (\"sequence_count\",\"table_name\",\"date_time\") VALUES (?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);
	    resourceMap.put("pstmtInsert_tDBOutput_5", pstmtInsert_tDBOutput_5);
	    String update_tDBOutput_5 = "UPDATE \"" + tableName_tDBOutput_5 + "\" SET \"sequence_count\" = ?,\"date_time\" = ? WHERE \"table_name\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(update_tDBOutput_5);
	    resourceMap.put("pstmtUpdate_tDBOutput_5", pstmtUpdate_tDBOutput_5);
	    

 



/**
 * [tDBOutput_5 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
sequence_extraStruct sequence_extra_tmp = new sequence_extraStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tDBInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_10", false);
		start_Hash.put("tDBInput_10", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_10";

	
		int tos_count_tDBInput_10 = 0;
		
	
    
	
		    int nb_line_tDBInput_10 = 0;
		    java.sql.Connection conn_tDBInput_10 = null;
				String driverClass_tDBInput_10 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_10 = java.lang.Class.forName(driverClass_tDBInput_10);
				String dbUser_tDBInput_10 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_10 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_10 = decryptedPassword_tDBInput_10;
				
				String url_tDBInput_10 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_10 = java.sql.DriverManager.getConnection(url_tDBInput_10,dbUser_tDBInput_10,dbPwd_tDBInput_10);
		        
				conn_tDBInput_10.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_10 = conn_tDBInput_10.createStatement();

		    String dbquery_tDBInput_10 = "SELECT (SELECT pg_catalog.setval('laboratory_order_id_seq', (SELECT MAX(id) FROM laboratory_order), true)) +\n\n(SELECT"
+" pg_catalog.setval('laboratory_test_id_seq', (SELECT MAX(id) FROM laboratory_test), true)) +\n\n(SELECT pg_catalog.setva"
+"l('laboratory_sample_id_seq', (SELECT MAX(id) FROM laboratory_sample), true)) +\n\n(SELECT pg_catalog.setval('laboratory"
+"_result_id_seq', (SELECT MAX(id) FROM laboratory_result), true)) as setval";
			

            	globalMap.put("tDBInput_10_QUERY",dbquery_tDBInput_10);
		    java.sql.ResultSet rs_tDBInput_10 = null;

		    try {
		    	rs_tDBInput_10 = stmt_tDBInput_10.executeQuery(dbquery_tDBInput_10);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_10 = rs_tDBInput_10.getMetaData();
		    	int colQtyInRs_tDBInput_10 = rsmd_tDBInput_10.getColumnCount();

		    String tmpContent_tDBInput_10 = null;
		    
		    
		    while (rs_tDBInput_10.next()) {
		        nb_line_tDBInput_10++;
		        
							if(colQtyInRs_tDBInput_10 < 1) {
								row6.sequence_count = null;
							} else {
		                          
            row6.sequence_count = rs_tDBInput_10.getLong(1);
            if(rs_tDBInput_10.wasNull()){
                    row6.sequence_count = null;
            }
		                    }
					


 



/**
 * [tDBInput_10 begin ] stop
 */
	
	/**
	 * [tDBInput_10 main ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 


	tos_count_tDBInput_10++;

/**
 * [tDBInput_10 main ] stop
 */
	
	/**
	 * [tDBInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

sequence_extra = null;


// # Output table : 'sequence_extra'
sequence_extra_tmp.sequence_count = row6.sequence_count ;
sequence_extra_tmp.table_name = "laboratory";
sequence_extra_tmp.date_time = java.sql.Timestamp.valueOf( java.time.LocalDateTime.now() );
sequence_extra = sequence_extra_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "sequence_extra"
if(sequence_extra != null) { 



	
	/**
	 * [tDBOutput_5 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sequence_extra");
					}
					



        whetherReject_tDBOutput_5 = false;
                    if(sequence_extra.table_name == null) {
pstmt_tDBOutput_5.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(1, sequence_extra.table_name);
}

            int checkCount_tDBOutput_5 = -1;
            try (java.sql.ResultSet rs_tDBOutput_5 = pstmt_tDBOutput_5.executeQuery()) {
                while(rs_tDBOutput_5.next()) {
                    checkCount_tDBOutput_5 = rs_tDBOutput_5.getInt(1);
                }
            }
            if(checkCount_tDBOutput_5 > 0) {
                        if(sequence_extra.sequence_count == null) {
pstmtUpdate_tDBOutput_5.setNull(1, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_5.setLong(1, sequence_extra.sequence_count);
}

                        if(sequence_extra.date_time != null) {
pstmtUpdate_tDBOutput_5.setTimestamp(2, new java.sql.Timestamp(sequence_extra.date_time.getTime()));
} else {
pstmtUpdate_tDBOutput_5.setNull(2, java.sql.Types.TIMESTAMP);
}

                        if(sequence_extra.table_name == null) {
pstmtUpdate_tDBOutput_5.setNull(3 + count_tDBOutput_5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(3 + count_tDBOutput_5, sequence_extra.table_name);
}

                try {
					
                    updatedCount_tDBOutput_5 = updatedCount_tDBOutput_5 + pstmtUpdate_tDBOutput_5.executeUpdate();
                    nb_line_tDBOutput_5++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_5 = true;
                        nb_line_tDBOutput_5++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(sequence_extra.sequence_count == null) {
pstmtInsert_tDBOutput_5.setNull(1, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_5.setLong(1, sequence_extra.sequence_count);
}

                        if(sequence_extra.table_name == null) {
pstmtInsert_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(2, sequence_extra.table_name);
}

                        if(sequence_extra.date_time != null) {
pstmtInsert_tDBOutput_5.setTimestamp(3, new java.sql.Timestamp(sequence_extra.date_time.getTime()));
} else {
pstmtInsert_tDBOutput_5.setNull(3, java.sql.Types.TIMESTAMP);
}

                try {
					
                    insertedCount_tDBOutput_5 = insertedCount_tDBOutput_5 + pstmtInsert_tDBOutput_5.executeUpdate();
                    nb_line_tDBOutput_5++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_5 = true;
                        nb_line_tDBOutput_5++;
                            System.err.print(e.getMessage());
                }
            }
    		    commitCounter_tDBOutput_5++;
                if(commitEvery_tDBOutput_5 <= commitCounter_tDBOutput_5) {
                	conn_tDBOutput_5.commit();
                	
                	commitCounter_tDBOutput_5=0;
                }

 


	tos_count_tDBOutput_5++;

/**
 * [tDBOutput_5 main ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_end ] stop
 */

} // End of branch "sequence_extra"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_10 end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

	}
}finally{
	if (rs_tDBInput_10 != null) {
		rs_tDBInput_10.close();
	}
	if (stmt_tDBInput_10 != null) {
		stmt_tDBInput_10.close();
	}
	if(conn_tDBInput_10 != null && !conn_tDBInput_10.isClosed()) {
		
			conn_tDBInput_10.commit();
			
		
			conn_tDBInput_10.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_10_NB_LINE",nb_line_tDBInput_10);
 

ok_Hash.put("tDBInput_10", true);
end_Hash.put("tDBInput_10", System.currentTimeMillis());




/**
 * [tDBInput_10 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tDBOutput_5 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



        if(pstmtUpdate_tDBOutput_5 != null){
            pstmtUpdate_tDBOutput_5.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_5");
        }
        if(pstmtInsert_tDBOutput_5 != null){
            pstmtInsert_tDBOutput_5.close();
            resourceMap.remove("pstmtInsert_tDBOutput_5");
        }
        if(pstmt_tDBOutput_5 != null) {
            pstmt_tDBOutput_5.close();
            resourceMap.remove("pstmt_tDBOutput_5");
        }
    resourceMap.put("statementClosed_tDBOutput_5", true);
			
			conn_tDBOutput_5.commit();
			
		
    	conn_tDBOutput_5 .close();
    	
    	resourceMap.put("finish_tDBOutput_5", true);
    	

	nb_line_deleted_tDBOutput_5=nb_line_deleted_tDBOutput_5+ deletedCount_tDBOutput_5;
	nb_line_update_tDBOutput_5=nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
	nb_line_inserted_tDBOutput_5=nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
	nb_line_rejected_tDBOutput_5=nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;
	
        globalMap.put("tDBOutput_5_NB_LINE",nb_line_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_UPDATED",nb_line_update_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_DELETED",nb_line_deleted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sequence_extra");
			  	}
			  	
 

ok_Hash.put("tDBOutput_5", true);
end_Hash.put("tDBOutput_5", System.currentTimeMillis());




/**
 * [tDBOutput_5 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_10 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tDBOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_5 = null;
                if ((pstmtUpdateToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_5")) != null) {
                    pstmtUpdateToClose_tDBOutput_5.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_5 = null;
                if ((pstmtInsertToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_5")) != null) {
                    pstmtInsertToClose_tDBOutput_5.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
                if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_5")) != null) {
                    pstmtToClose_tDBOutput_5.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_5") == null){
            java.sql.Connection ctn_tDBOutput_5 = null;
            if((ctn_tDBOutput_5 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_5")) != null){
                try {
                    ctn_tDBOutput_5.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_5) {
                    String errorMessage_tDBOutput_5 = "failed to close the connection in tDBOutput_5 :" + sqlEx_tDBOutput_5.getMessage();
                    System.err.println(errorMessage_tDBOutput_5);
                }
            }
        }
    }
 



/**
 * [tDBOutput_5 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 1);
	}
	

public void tJava_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_7", false);
		start_Hash.put("tJava_7", System.currentTimeMillis());
		
	
	currentComponent="tJava_7";

	
		int tos_count_tJava_7 = 0;
		


System.out.println("*****************************************************************");
System.out.println("***********LABORATORY SAMPLE MIGRATION REPORT START*****************");

System.out.println("Total Laboratory sample records fetched from LAMIS3 laboratory - "+globalMap.get("tDBInput_13_NB_LINE"));
 



/**
 * [tJava_7 begin ] stop
 */
	
	/**
	 * [tJava_7 main ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 


	tos_count_tJava_7++;

/**
 * [tJava_7 main ] stop
 */
	
	/**
	 * [tJava_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 



/**
 * [tJava_7 process_data_begin ] stop
 */
	
	/**
	 * [tJava_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 



/**
 * [tJava_7 process_data_end ] stop
 */
	
	/**
	 * [tJava_7 end ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 

ok_Hash.put("tJava_7", true);
end_Hash.put("tJava_7", System.currentTimeMillis());




/**
 * [tJava_7 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_7 finally ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 



/**
 * [tJava_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_7_SUBPROCESS_STATE", 1);
	}
	

public void tJava_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_6", false);
		start_Hash.put("tJava_6", System.currentTimeMillis());
		
	
	currentComponent="tJava_6";

	
		int tos_count_tJava_6 = 0;
		


System.out.println("*****************************************************************");
System.out.println("***********LABORATORY TEST MIGRATION REPORT START*****************");

System.out.println("Total Laboratory test records fetched from LAMIS3 laboratory - "+globalMap.get("tDBInput_4_NB_LINE"));
 



/**
 * [tJava_6 begin ] stop
 */
	
	/**
	 * [tJava_6 main ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 


	tos_count_tJava_6++;

/**
 * [tJava_6 main ] stop
 */
	
	/**
	 * [tJava_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 



/**
 * [tJava_6 process_data_begin ] stop
 */
	
	/**
	 * [tJava_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 



/**
 * [tJava_6 process_data_end ] stop
 */
	
	/**
	 * [tJava_6 end ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 

ok_Hash.put("tJava_6", true);
end_Hash.put("tJava_6", System.currentTimeMillis());




/**
 * [tJava_6 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_6 finally ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 



/**
 * [tJava_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableComparableLookupRow<row1Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Laboratory = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String orgunit_name;

				public String getOrgunit_name () {
					return this.orgunit_name;
				}
				
			    public String datim_code;

				public String getDatim_code () {
					return this.datim_code;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.datim_code == null) ? 0 : this.datim_code.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.datim_code == null) {
							if (other.datim_code != null)
								return false;
						
						} else if (!this.datim_code.equals(other.datim_code))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.id = this.id;
	            other.name = this.name;
	            other.orgunit_name = this.orgunit_name;
	            other.datim_code = this.datim_code;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.datim_code = this.datim_code;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Laboratory.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Laboratory.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Laboratory) {

        	try {

        		int length = 0;
		
					this.datim_code = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.datim_code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
						this.name = readString(dis,ois);
					
						this.orgunit_name = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
						writeString(this.name, dos, oos);
					
						writeString(this.orgunit_name, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",orgunit_name="+orgunit_name);
		sb.append(",datim_code="+datim_code);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.datim_code, other.datim_code);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tAdvancedHash_row1 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row1", false);
		start_Hash.put("tAdvancedHash_row1", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tAdvancedHash_row1 = 0;
		

			   		// connection name:row1
			   		// source node:tDBInput_2 - inputs:(after_tDBInput_1) outputs:(row1,row1) | target node:tAdvancedHash_row1 - inputs:(row1) outputs:()
			   		// linked node: tMap_1 - inputs:(laboratory_order,row1) outputs:(laboratory_order_extract)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row1 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row1Struct>getLookup(matchingModeEnum_row1);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row1", tHash_Lookup_row1);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row1 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_2 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
				String url_tDBInput_2 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
				conn_tDBInput_2.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT iden.organisation_unit_id as id, ef.facility_name, ef.lga_name, ef.datim_id FROM etl_facility ef \nINNER JOIN ba"
+"se_organisation_unit_identifier iden ON iden.code = ef.datim_id";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row1.id = 0;
							} else {
		                          
            row1.id = rs_tDBInput_2.getInt(1);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row1.name = null;
							} else {
	                         		
        	row1.name = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row1.orgunit_name = null;
							} else {
	                         		
        	row1.orgunit_name = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row1.datim_code = null;
							} else {
	                         		
        	row1.datim_code = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
		                    }
					


 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row1 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					


			   
			   

					row1Struct row1_HashRow = new row1Struct();
		   	   	   
				
				row1_HashRow.id = row1.id;
				
				row1_HashRow.name = row1.name;
				
				row1_HashRow.orgunit_name = row1.orgunit_name;
				
				row1_HashRow.datim_code = row1.datim_code;
				
			tHash_Lookup_row1.put(row1_HashRow);
			
            




 


	tos_count_tAdvancedHash_row1++;

/**
 * [tAdvancedHash_row1 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	

 



/**
 * [tAdvancedHash_row1 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row1 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	

 



/**
 * [tAdvancedHash_row1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
	if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
		
			conn_tDBInput_2.commit();
			
		
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row1 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	

tHash_Lookup_row1.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row1", true);
end_Hash.put("tAdvancedHash_row1", System.currentTimeMillis());




/**
 * [tAdvancedHash_row1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row1 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	

 



/**
 * [tAdvancedHash_row1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class patient_visit_lookupStruct implements routines.system.IPersistableComparableLookupRow<patient_visit_lookupStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Laboratory = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public java.util.Date visit_start_date;

				public java.util.Date getVisit_start_date () {
					return this.visit_start_date;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.visit_start_date == null) ? 0 : this.visit_start_date.hashCode());
					
						result = prime * result + ((this.person_uuid == null) ? 0 : this.person_uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final patient_visit_lookupStruct other = (patient_visit_lookupStruct) obj;
		
						if (this.visit_start_date == null) {
							if (other.visit_start_date != null)
								return false;
						
						} else if (!this.visit_start_date.equals(other.visit_start_date))
						
							return false;
					
						if (this.person_uuid == null) {
							if (other.person_uuid != null)
								return false;
						
						} else if (!this.person_uuid.equals(other.person_uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(patient_visit_lookupStruct other) {

		other.id = this.id;
	            other.visit_start_date = this.visit_start_date;
	            other.person_uuid = this.person_uuid;
	            
	}

	public void copyKeysDataTo(patient_visit_lookupStruct other) {

		other.visit_start_date = this.visit_start_date;
	            	other.person_uuid = this.person_uuid;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Laboratory.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Laboratory.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Laboratory) {

        	try {

        		int length = 0;
		
					this.visit_start_date = readDate(dis);
					
					this.person_uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.visit_start_date,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",visit_start_date="+String.valueOf(visit_start_date));
		sb.append(",person_uuid="+person_uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(patient_visit_lookupStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.visit_start_date, other.visit_start_date);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.person_uuid, other.person_uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		patient_visit_lookupStruct patient_visit_lookup = new patient_visit_lookupStruct();




	
	/**
	 * [tAdvancedHash_patient_visit_lookup begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_patient_visit_lookup", false);
		start_Hash.put("tAdvancedHash_patient_visit_lookup", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_patient_visit_lookup";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"patient_visit_lookup");
					}
				
		int tos_count_tAdvancedHash_patient_visit_lookup = 0;
		

			   		// connection name:patient_visit_lookup
			   		// source node:tDBInput_3 - inputs:(after_tDBInput_1) outputs:(patient_visit_lookup,patient_visit_lookup) | target node:tAdvancedHash_patient_visit_lookup - inputs:(patient_visit_lookup) outputs:()
			   		// linked node: tMap_2 - inputs:(laboratory_order_extract,patient_visit_lookup) outputs:(laboratory_order_visit)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_patient_visit_lookup = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<patient_visit_lookupStruct> tHash_Lookup_patient_visit_lookup =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<patient_visit_lookupStruct>getLookup(matchingModeEnum_patient_visit_lookup);
	   						   
		   	   	   globalMap.put("tHash_Lookup_patient_visit_lookup", tHash_Lookup_patient_visit_lookup);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_patient_visit_lookup begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_3 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				
				String url_tDBInput_3 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
				conn_tDBInput_3.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT pv.id, pv.visit_start_date, pv.person_uuid FROM patient_visit pv";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								patient_visit_lookup.id = 0;
							} else {
		                          
            patient_visit_lookup.id = rs_tDBInput_3.getInt(1);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								patient_visit_lookup.visit_start_date = null;
							} else {
										
			patient_visit_lookup.visit_start_date = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 2);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								patient_visit_lookup.person_uuid = null;
							} else {
	                         		
        	patient_visit_lookup.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
		                    }
					


 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_patient_visit_lookup main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_patient_visit_lookup";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"patient_visit_lookup");
					}
					


			   
			   

					patient_visit_lookupStruct patient_visit_lookup_HashRow = new patient_visit_lookupStruct();
		   	   	   
				
				patient_visit_lookup_HashRow.id = patient_visit_lookup.id;
				
				patient_visit_lookup_HashRow.visit_start_date = patient_visit_lookup.visit_start_date;
				
				patient_visit_lookup_HashRow.person_uuid = patient_visit_lookup.person_uuid;
				
			tHash_Lookup_patient_visit_lookup.put(patient_visit_lookup_HashRow);
			
            




 


	tos_count_tAdvancedHash_patient_visit_lookup++;

/**
 * [tAdvancedHash_patient_visit_lookup main ] stop
 */
	
	/**
	 * [tAdvancedHash_patient_visit_lookup process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_patient_visit_lookup";

	

 



/**
 * [tAdvancedHash_patient_visit_lookup process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_patient_visit_lookup process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_patient_visit_lookup";

	

 



/**
 * [tAdvancedHash_patient_visit_lookup process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
	if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
		
			conn_tDBInput_3.commit();
			
		
			conn_tDBInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_patient_visit_lookup end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_patient_visit_lookup";

	

tHash_Lookup_patient_visit_lookup.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"patient_visit_lookup");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_patient_visit_lookup", true);
end_Hash.put("tAdvancedHash_patient_visit_lookup", System.currentTimeMillis());




/**
 * [tAdvancedHash_patient_visit_lookup end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_patient_visit_lookup finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_patient_visit_lookup";

	

 



/**
 * [tAdvancedHash_patient_visit_lookup finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class patient_person_lookupStruct implements routines.system.IPersistableComparableLookupRow<patient_person_lookupStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Laboratory = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final patient_person_lookupStruct other = (patient_person_lookupStruct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(patient_person_lookupStruct other) {

		other.id = this.id;
	            other.uuid = this.uuid;
	            
	}

	public void copyKeysDataTo(patient_person_lookupStruct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Laboratory.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Laboratory.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Laboratory) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(patient_person_lookupStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		patient_person_lookupStruct patient_person_lookup = new patient_person_lookupStruct();




	
	/**
	 * [tAdvancedHash_patient_person_lookup begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_patient_person_lookup", false);
		start_Hash.put("tAdvancedHash_patient_person_lookup", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_patient_person_lookup";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"patient_person_lookup");
					}
				
		int tos_count_tAdvancedHash_patient_person_lookup = 0;
		

			   		// connection name:patient_person_lookup
			   		// source node:tDBInput_6 - inputs:(after_tDBInput_1) outputs:(patient_person_lookup,patient_person_lookup) | target node:tAdvancedHash_patient_person_lookup - inputs:(patient_person_lookup) outputs:()
			   		// linked node: tMap_3 - inputs:(laboratory_order_visit,patient_person_lookup) outputs:(laboratory_orde_final)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_patient_person_lookup = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<patient_person_lookupStruct> tHash_Lookup_patient_person_lookup =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<patient_person_lookupStruct>getLookup(matchingModeEnum_patient_person_lookup);
	   						   
		   	   	   globalMap.put("tHash_Lookup_patient_person_lookup", tHash_Lookup_patient_person_lookup);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_patient_person_lookup begin ] stop
 */



	
	/**
	 * [tDBInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_6", false);
		start_Hash.put("tDBInput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_6";

	
		int tos_count_tDBInput_6 = 0;
		
	
    
	
		    int nb_line_tDBInput_6 = 0;
		    java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_6 = java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_6 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;
				
				String url_tDBInput_6 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_6 = java.sql.DriverManager.getConnection(url_tDBInput_6,dbUser_tDBInput_6,dbPwd_tDBInput_6);
		        
				conn_tDBInput_6.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

		    String dbquery_tDBInput_6 = "SELECT id, uuid FROM patient_person";
			

            	globalMap.put("tDBInput_6_QUERY",dbquery_tDBInput_6);
		    java.sql.ResultSet rs_tDBInput_6 = null;

		    try {
		    	rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
		    	int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

		    String tmpContent_tDBInput_6 = null;
		    
		    
		    while (rs_tDBInput_6.next()) {
		        nb_line_tDBInput_6++;
		        
							if(colQtyInRs_tDBInput_6 < 1) {
								patient_person_lookup.id = 0;
							} else {
		                          
            patient_person_lookup.id = rs_tDBInput_6.getInt(1);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 2) {
								patient_person_lookup.uuid = null;
							} else {
	                         		
        	patient_person_lookup.uuid = routines.system.JDBCUtil.getString(rs_tDBInput_6, 2, false);
		                    }
					


 



/**
 * [tDBInput_6 begin ] stop
 */
	
	/**
	 * [tDBInput_6 main ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 


	tos_count_tDBInput_6++;

/**
 * [tDBInput_6 main ] stop
 */
	
	/**
	 * [tDBInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_patient_person_lookup main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_patient_person_lookup";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"patient_person_lookup");
					}
					


			   
			   

					patient_person_lookupStruct patient_person_lookup_HashRow = new patient_person_lookupStruct();
		   	   	   
				
				patient_person_lookup_HashRow.id = patient_person_lookup.id;
				
				patient_person_lookup_HashRow.uuid = patient_person_lookup.uuid;
				
			tHash_Lookup_patient_person_lookup.put(patient_person_lookup_HashRow);
			
            




 


	tos_count_tAdvancedHash_patient_person_lookup++;

/**
 * [tAdvancedHash_patient_person_lookup main ] stop
 */
	
	/**
	 * [tAdvancedHash_patient_person_lookup process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_patient_person_lookup";

	

 



/**
 * [tAdvancedHash_patient_person_lookup process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_patient_person_lookup process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_patient_person_lookup";

	

 



/**
 * [tAdvancedHash_patient_person_lookup process_data_end ] stop
 */



	
	/**
	 * [tDBInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_6 end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

	}
}finally{
	if (rs_tDBInput_6 != null) {
		rs_tDBInput_6.close();
	}
	if (stmt_tDBInput_6 != null) {
		stmt_tDBInput_6.close();
	}
	if(conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {
		
			conn_tDBInput_6.commit();
			
		
			conn_tDBInput_6.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_6_NB_LINE",nb_line_tDBInput_6);
 

ok_Hash.put("tDBInput_6", true);
end_Hash.put("tDBInput_6", System.currentTimeMillis());




/**
 * [tDBInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_patient_person_lookup end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_patient_person_lookup";

	

tHash_Lookup_patient_person_lookup.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"patient_person_lookup");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_patient_person_lookup", true);
end_Hash.put("tAdvancedHash_patient_person_lookup", System.currentTimeMillis());




/**
 * [tAdvancedHash_patient_person_lookup end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_patient_person_lookup finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_patient_person_lookup";

	

 



/**
 * [tAdvancedHash_patient_person_lookup finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class application_codest_lookupStruct implements routines.system.IPersistableComparableLookupRow<application_codest_lookupStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Laboratory = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String lower;

				public String getLower () {
					return this.lower;
				}
				
			    public String codeset_group;

				public String getCodeset_group () {
					return this.codeset_group;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.lower == null) ? 0 : this.lower.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final application_codest_lookupStruct other = (application_codest_lookupStruct) obj;
		
						if (this.lower == null) {
							if (other.lower != null)
								return false;
						
						} else if (!this.lower.equals(other.lower))
						
							return false;
					

		return true;
    }

	public void copyDataTo(application_codest_lookupStruct other) {

		other.id = this.id;
	            other.lower = this.lower;
	            other.codeset_group = this.codeset_group;
	            
	}

	public void copyKeysDataTo(application_codest_lookupStruct other) {

		other.lower = this.lower;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Laboratory.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Laboratory.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Laboratory) {

        	try {

        		int length = 0;
		
					this.lower = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.lower,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
						this.codeset_group = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
						writeString(this.codeset_group, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",lower="+lower);
		sb.append(",codeset_group="+codeset_group);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(application_codest_lookupStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.lower, other.lower);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		application_codest_lookupStruct application_codest_lookup = new application_codest_lookupStruct();




	
	/**
	 * [tAdvancedHash_application_codest_lookup begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_application_codest_lookup", false);
		start_Hash.put("tAdvancedHash_application_codest_lookup", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_application_codest_lookup";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"application_codest_lookup");
					}
				
		int tos_count_tAdvancedHash_application_codest_lookup = 0;
		

			   		// connection name:application_codest_lookup
			   		// source node:tDBInput_5 - inputs:(after_tDBInput_4) outputs:(application_codest_lookup,application_codest_lookup) | target node:tAdvancedHash_application_codest_lookup - inputs:(application_codest_lookup) outputs:()
			   		// linked node: tMap_4 - inputs:(laboratory_test_extract,application_codest_lookup) outputs:(laboratory_application_codeset_extract)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_application_codest_lookup = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<application_codest_lookupStruct> tHash_Lookup_application_codest_lookup =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<application_codest_lookupStruct>getLookup(matchingModeEnum_application_codest_lookup);
	   						   
		   	   	   globalMap.put("tHash_Lookup_application_codest_lookup", tHash_Lookup_application_codest_lookup);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_application_codest_lookup begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
    
	
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_5 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;
				
				String url_tDBInput_5 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5,dbUser_tDBInput_5,dbPwd_tDBInput_5);
		        
				conn_tDBInput_5.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "SELECT id, lower(left(display,6)), codeset_group from base_application_codeset \nWHERE codeset_group='VIRAL_LOAD_INDICA"
+"TION'";
			

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								application_codest_lookup.id = 0;
							} else {
		                          
            application_codest_lookup.id = rs_tDBInput_5.getInt(1);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								application_codest_lookup.lower = null;
							} else {
	                         		
        	application_codest_lookup.lower = routines.system.JDBCUtil.getString(rs_tDBInput_5, 2, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								application_codest_lookup.codeset_group = null;
							} else {
	                         		
        	application_codest_lookup.codeset_group = routines.system.JDBCUtil.getString(rs_tDBInput_5, 3, false);
		                    }
					


 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_application_codest_lookup main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_application_codest_lookup";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"application_codest_lookup");
					}
					


			   
			   

					application_codest_lookupStruct application_codest_lookup_HashRow = new application_codest_lookupStruct();
		   	   	   
				
				application_codest_lookup_HashRow.id = application_codest_lookup.id;
				
				application_codest_lookup_HashRow.lower = application_codest_lookup.lower;
				
				application_codest_lookup_HashRow.codeset_group = application_codest_lookup.codeset_group;
				
			tHash_Lookup_application_codest_lookup.put(application_codest_lookup_HashRow);
			
            




 


	tos_count_tAdvancedHash_application_codest_lookup++;

/**
 * [tAdvancedHash_application_codest_lookup main ] stop
 */
	
	/**
	 * [tAdvancedHash_application_codest_lookup process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_application_codest_lookup";

	

 



/**
 * [tAdvancedHash_application_codest_lookup process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_application_codest_lookup process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_application_codest_lookup";

	

 



/**
 * [tAdvancedHash_application_codest_lookup process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
	if(conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {
		
			conn_tDBInput_5.commit();
			
		
			conn_tDBInput_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);
 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_application_codest_lookup end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_application_codest_lookup";

	

tHash_Lookup_application_codest_lookup.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"application_codest_lookup");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_application_codest_lookup", true);
end_Hash.put("tAdvancedHash_application_codest_lookup", System.currentTimeMillis());




/**
 * [tAdvancedHash_application_codest_lookup end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_application_codest_lookup finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_application_codest_lookup";

	

 



/**
 * [tAdvancedHash_application_codest_lookup finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class labtest_group_idStruct implements routines.system.IPersistableComparableLookupRow<labtest_group_idStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Laboratory = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String lab_test_name;

				public String getLab_test_name () {
					return this.lab_test_name;
				}
				
			    public String unit;

				public String getUnit () {
					return this.unit;
				}
				
			    public Integer labtestgroup_id;

				public Integer getLabtestgroup_id () {
					return this.labtestgroup_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.lab_test_name == null) ? 0 : this.lab_test_name.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final labtest_group_idStruct other = (labtest_group_idStruct) obj;
		
						if (this.lab_test_name == null) {
							if (other.lab_test_name != null)
								return false;
						
						} else if (!this.lab_test_name.equals(other.lab_test_name))
						
							return false;
					

		return true;
    }

	public void copyDataTo(labtest_group_idStruct other) {

		other.id = this.id;
	            other.uuid = this.uuid;
	            other.lab_test_name = this.lab_test_name;
	            other.unit = this.unit;
	            other.labtestgroup_id = this.labtestgroup_id;
	            
	}

	public void copyKeysDataTo(labtest_group_idStruct other) {

		other.lab_test_name = this.lab_test_name;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Laboratory.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Laboratory.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Laboratory) {

        	try {

        		int length = 0;
		
					this.lab_test_name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.lab_test_name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
						this.uuid = readString(dis,ois);
					
						this.unit = readString(dis,ois);
					
						this.labtestgroup_id = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
						writeString(this.uuid, dos, oos);
					
						writeString(this.unit, dos, oos);
					
					writeInteger(this.labtestgroup_id, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",uuid="+uuid);
		sb.append(",lab_test_name="+lab_test_name);
		sb.append(",unit="+unit);
		sb.append(",labtestgroup_id="+String.valueOf(labtestgroup_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(labtest_group_idStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.lab_test_name, other.lab_test_name);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		labtest_group_idStruct labtest_group_id = new labtest_group_idStruct();




	
	/**
	 * [tAdvancedHash_labtest_group_id begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_labtest_group_id", false);
		start_Hash.put("tAdvancedHash_labtest_group_id", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_labtest_group_id";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"labtest_group_id");
					}
				
		int tos_count_tAdvancedHash_labtest_group_id = 0;
		

			   		// connection name:labtest_group_id
			   		// source node:tDBInput_7 - inputs:(after_tDBInput_4) outputs:(labtest_group_id,labtest_group_id) | target node:tAdvancedHash_labtest_group_id - inputs:(labtest_group_id) outputs:()
			   		// linked node: tMap_5 - inputs:(laboratory_application_codeset_extract,labtest_group_id) outputs:(laboratory_test_group_codeset)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_labtest_group_id = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<labtest_group_idStruct> tHash_Lookup_labtest_group_id =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<labtest_group_idStruct>getLookup(matchingModeEnum_labtest_group_id);
	   						   
		   	   	   globalMap.put("tHash_Lookup_labtest_group_id", tHash_Lookup_labtest_group_id);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_labtest_group_id begin ] stop
 */



	
	/**
	 * [tDBInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_7", false);
		start_Hash.put("tDBInput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_7";

	
		int tos_count_tDBInput_7 = 0;
		
	
    
	
		    int nb_line_tDBInput_7 = 0;
		    java.sql.Connection conn_tDBInput_7 = null;
				String driverClass_tDBInput_7 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_7 = java.lang.Class.forName(driverClass_tDBInput_7);
				String dbUser_tDBInput_7 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_7 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_7 = decryptedPassword_tDBInput_7;
				
				String url_tDBInput_7 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_7 = java.sql.DriverManager.getConnection(url_tDBInput_7,dbUser_tDBInput_7,dbPwd_tDBInput_7);
		        
				conn_tDBInput_7.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

		    String dbquery_tDBInput_7 = "SELECT * from laboratory_labtest";
			

            	globalMap.put("tDBInput_7_QUERY",dbquery_tDBInput_7);
		    java.sql.ResultSet rs_tDBInput_7 = null;

		    try {
		    	rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
		    	int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

		    String tmpContent_tDBInput_7 = null;
		    
		    
		    while (rs_tDBInput_7.next()) {
		        nb_line_tDBInput_7++;
		        
							if(colQtyInRs_tDBInput_7 < 1) {
								labtest_group_id.id = 0;
							} else {
		                          
            labtest_group_id.id = rs_tDBInput_7.getInt(1);
            if(rs_tDBInput_7.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 2) {
								labtest_group_id.uuid = null;
							} else {
	                         		
        	labtest_group_id.uuid = routines.system.JDBCUtil.getString(rs_tDBInput_7, 2, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 3) {
								labtest_group_id.lab_test_name = null;
							} else {
	                         		
        	labtest_group_id.lab_test_name = routines.system.JDBCUtil.getString(rs_tDBInput_7, 3, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 4) {
								labtest_group_id.unit = null;
							} else {
	                         		
        	labtest_group_id.unit = routines.system.JDBCUtil.getString(rs_tDBInput_7, 4, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 5) {
								labtest_group_id.labtestgroup_id = null;
							} else {
		                          
            labtest_group_id.labtestgroup_id = rs_tDBInput_7.getInt(5);
            if(rs_tDBInput_7.wasNull()){
                    labtest_group_id.labtestgroup_id = null;
            }
		                    }
					


 



/**
 * [tDBInput_7 begin ] stop
 */
	
	/**
	 * [tDBInput_7 main ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 


	tos_count_tDBInput_7++;

/**
 * [tDBInput_7 main ] stop
 */
	
	/**
	 * [tDBInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_labtest_group_id main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_labtest_group_id";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"labtest_group_id");
					}
					


			   
			   

					labtest_group_idStruct labtest_group_id_HashRow = new labtest_group_idStruct();
		   	   	   
				
				labtest_group_id_HashRow.id = labtest_group_id.id;
				
				labtest_group_id_HashRow.uuid = labtest_group_id.uuid;
				
				labtest_group_id_HashRow.lab_test_name = labtest_group_id.lab_test_name;
				
				labtest_group_id_HashRow.unit = labtest_group_id.unit;
				
				labtest_group_id_HashRow.labtestgroup_id = labtest_group_id.labtestgroup_id;
				
			tHash_Lookup_labtest_group_id.put(labtest_group_id_HashRow);
			
            




 


	tos_count_tAdvancedHash_labtest_group_id++;

/**
 * [tAdvancedHash_labtest_group_id main ] stop
 */
	
	/**
	 * [tAdvancedHash_labtest_group_id process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_labtest_group_id";

	

 



/**
 * [tAdvancedHash_labtest_group_id process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_labtest_group_id process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_labtest_group_id";

	

 



/**
 * [tAdvancedHash_labtest_group_id process_data_end ] stop
 */



	
	/**
	 * [tDBInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_7 end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

	}
}finally{
	if (rs_tDBInput_7 != null) {
		rs_tDBInput_7.close();
	}
	if (stmt_tDBInput_7 != null) {
		stmt_tDBInput_7.close();
	}
	if(conn_tDBInput_7 != null && !conn_tDBInput_7.isClosed()) {
		
			conn_tDBInput_7.commit();
			
		
			conn_tDBInput_7.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_7_NB_LINE",nb_line_tDBInput_7);
 

ok_Hash.put("tDBInput_7", true);
end_Hash.put("tDBInput_7", System.currentTimeMillis());




/**
 * [tDBInput_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_labtest_group_id end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_labtest_group_id";

	

tHash_Lookup_labtest_group_id.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"labtest_group_id");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_labtest_group_id", true);
end_Hash.put("tAdvancedHash_labtest_group_id", System.currentTimeMillis());




/**
 * [tAdvancedHash_labtest_group_id end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_labtest_group_id finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_labtest_group_id";

	

 



/**
 * [tAdvancedHash_labtest_group_id finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class personStruct implements routines.system.IPersistableComparableLookupRow<personStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Laboratory = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final personStruct other = (personStruct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(personStruct other) {

		other.id = this.id;
	            other.uuid = this.uuid;
	            
	}

	public void copyKeysDataTo(personStruct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Laboratory.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Laboratory.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Laboratory) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(personStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		personStruct person = new personStruct();




	
	/**
	 * [tAdvancedHash_person begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_person", false);
		start_Hash.put("tAdvancedHash_person", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_person";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"person");
					}
				
		int tos_count_tAdvancedHash_person = 0;
		

			   		// connection name:person
			   		// source node:tDBInput_8 - inputs:(after_tDBInput_4) outputs:(person,person) | target node:tAdvancedHash_person - inputs:(person) outputs:()
			   		// linked node: tMap_8 - inputs:(laboratory_test_group_codeset,person) outputs:(laboratory_test_person)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_person = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<personStruct> tHash_Lookup_person =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<personStruct>getLookup(matchingModeEnum_person);
	   						   
		   	   	   globalMap.put("tHash_Lookup_person", tHash_Lookup_person);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_person begin ] stop
 */



	
	/**
	 * [tDBInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_8", false);
		start_Hash.put("tDBInput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_8";

	
		int tos_count_tDBInput_8 = 0;
		
	
    
	
		    int nb_line_tDBInput_8 = 0;
		    java.sql.Connection conn_tDBInput_8 = null;
				String driverClass_tDBInput_8 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_8 = java.lang.Class.forName(driverClass_tDBInput_8);
				String dbUser_tDBInput_8 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_8 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_8 = decryptedPassword_tDBInput_8;
				
				String url_tDBInput_8 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_8 = java.sql.DriverManager.getConnection(url_tDBInput_8,dbUser_tDBInput_8,dbPwd_tDBInput_8);
		        
				conn_tDBInput_8.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8.createStatement();

		    String dbquery_tDBInput_8 = "SELECT id, uuid FROM patient_person";
			

            	globalMap.put("tDBInput_8_QUERY",dbquery_tDBInput_8);
		    java.sql.ResultSet rs_tDBInput_8 = null;

		    try {
		    	rs_tDBInput_8 = stmt_tDBInput_8.executeQuery(dbquery_tDBInput_8);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8.getMetaData();
		    	int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8.getColumnCount();

		    String tmpContent_tDBInput_8 = null;
		    
		    
		    while (rs_tDBInput_8.next()) {
		        nb_line_tDBInput_8++;
		        
							if(colQtyInRs_tDBInput_8 < 1) {
								person.id = 0;
							} else {
		                          
            person.id = rs_tDBInput_8.getInt(1);
            if(rs_tDBInput_8.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 2) {
								person.uuid = null;
							} else {
	                         		
        	person.uuid = routines.system.JDBCUtil.getString(rs_tDBInput_8, 2, false);
		                    }
					


 



/**
 * [tDBInput_8 begin ] stop
 */
	
	/**
	 * [tDBInput_8 main ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 


	tos_count_tDBInput_8++;

/**
 * [tDBInput_8 main ] stop
 */
	
	/**
	 * [tDBInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_person main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_person";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"person");
					}
					


			   
			   

					personStruct person_HashRow = new personStruct();
		   	   	   
				
				person_HashRow.id = person.id;
				
				person_HashRow.uuid = person.uuid;
				
			tHash_Lookup_person.put(person_HashRow);
			
            




 


	tos_count_tAdvancedHash_person++;

/**
 * [tAdvancedHash_person main ] stop
 */
	
	/**
	 * [tAdvancedHash_person process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_person";

	

 



/**
 * [tAdvancedHash_person process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_person process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_person";

	

 



/**
 * [tAdvancedHash_person process_data_end ] stop
 */



	
	/**
	 * [tDBInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_8 end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

	}
}finally{
	if (rs_tDBInput_8 != null) {
		rs_tDBInput_8.close();
	}
	if (stmt_tDBInput_8 != null) {
		stmt_tDBInput_8.close();
	}
	if(conn_tDBInput_8 != null && !conn_tDBInput_8.isClosed()) {
		
			conn_tDBInput_8.commit();
			
		
			conn_tDBInput_8.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_8_NB_LINE",nb_line_tDBInput_8);
 

ok_Hash.put("tDBInput_8", true);
end_Hash.put("tDBInput_8", System.currentTimeMillis());




/**
 * [tDBInput_8 end ] stop
 */

	
	/**
	 * [tAdvancedHash_person end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_person";

	

tHash_Lookup_person.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"person");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_person", true);
end_Hash.put("tAdvancedHash_person", System.currentTimeMillis());




/**
 * [tAdvancedHash_person end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_person finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_person";

	

 



/**
 * [tAdvancedHash_person finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class laboratory_order_idsStruct implements routines.system.IPersistableComparableLookupRow<laboratory_order_idsStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Laboratory = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public Integer facility_id;

				public Integer getFacility_id () {
					return this.facility_id;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public java.util.Date date_created;

				public java.util.Date getDate_created () {
					return this.date_created;
				}
				
			    public String modified_by;

				public String getModified_by () {
					return this.modified_by;
				}
				
			    public java.util.Date date_modified;

				public java.util.Date getDate_modified () {
					return this.date_modified;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final laboratory_order_idsStruct other = (laboratory_order_idsStruct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(laboratory_order_idsStruct other) {

		other.id = this.id;
	            other.facility_id = this.facility_id;
	            other.created_by = this.created_by;
	            other.date_created = this.date_created;
	            other.modified_by = this.modified_by;
	            other.date_modified = this.date_modified;
	            other.archived = this.archived;
	            
	}

	public void copyKeysDataTo(laboratory_order_idsStruct other) {

		other.id = this.id;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Laboratory) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.facility_id = readInteger(dis,ois);
					
						this.created_by = readString(dis,ois);
					
						this.date_created = readDate(dis,ois);
					
						this.modified_by = readString(dis,ois);
					
						this.date_modified = readDate(dis,ois);
					
						this.archived = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.facility_id, dos, oos);
					
						writeString(this.created_by, dos, oos);
					
						writeDate(this.date_created, dos, oos);
					
						writeString(this.modified_by, dos, oos);
					
						writeDate(this.date_modified, dos, oos);
					
					writeInteger(this.archived, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",created_by="+created_by);
		sb.append(",date_created="+String.valueOf(date_created));
		sb.append(",modified_by="+modified_by);
		sb.append(",date_modified="+String.valueOf(date_modified));
		sb.append(",archived="+String.valueOf(archived));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(laboratory_order_idsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		laboratory_order_idsStruct laboratory_order_ids = new laboratory_order_idsStruct();




	
	/**
	 * [tAdvancedHash_laboratory_order_ids begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_laboratory_order_ids", false);
		start_Hash.put("tAdvancedHash_laboratory_order_ids", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_laboratory_order_ids";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"laboratory_order_ids");
					}
				
		int tos_count_tAdvancedHash_laboratory_order_ids = 0;
		

			   		// connection name:laboratory_order_ids
			   		// source node:tDBInput_9 - inputs:(after_tDBInput_4) outputs:(laboratory_order_ids,laboratory_order_ids) | target node:tAdvancedHash_laboratory_order_ids - inputs:(laboratory_order_ids) outputs:()
			   		// linked node: tMap_9 - inputs:(laboratory_test_person,laboratory_order_ids) outputs:(laboratory_test_final)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_laboratory_order_ids = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<laboratory_order_idsStruct> tHash_Lookup_laboratory_order_ids =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<laboratory_order_idsStruct>getLookup(matchingModeEnum_laboratory_order_ids);
	   						   
		   	   	   globalMap.put("tHash_Lookup_laboratory_order_ids", tHash_Lookup_laboratory_order_ids);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_laboratory_order_ids begin ] stop
 */



	
	/**
	 * [tDBInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_9", false);
		start_Hash.put("tDBInput_9", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_9";

	
		int tos_count_tDBInput_9 = 0;
		
	
    
	
		    int nb_line_tDBInput_9 = 0;
		    java.sql.Connection conn_tDBInput_9 = null;
				String driverClass_tDBInput_9 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_9 = java.lang.Class.forName(driverClass_tDBInput_9);
				String dbUser_tDBInput_9 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_9 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_9 = decryptedPassword_tDBInput_9;
				
				String url_tDBInput_9 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_9 = java.sql.DriverManager.getConnection(url_tDBInput_9,dbUser_tDBInput_9,dbPwd_tDBInput_9);
		        
				conn_tDBInput_9.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9.createStatement();

		    String dbquery_tDBInput_9 = "SELECT id, facility_id, created_by, date_created, modified_by, date_modified, archived FROM laboratory_order";
			

            	globalMap.put("tDBInput_9_QUERY",dbquery_tDBInput_9);
		    java.sql.ResultSet rs_tDBInput_9 = null;

		    try {
		    	rs_tDBInput_9 = stmt_tDBInput_9.executeQuery(dbquery_tDBInput_9);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9.getMetaData();
		    	int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9.getColumnCount();

		    String tmpContent_tDBInput_9 = null;
		    
		    
		    while (rs_tDBInput_9.next()) {
		        nb_line_tDBInput_9++;
		        
							if(colQtyInRs_tDBInput_9 < 1) {
								laboratory_order_ids.id = 0;
							} else {
		                          
            laboratory_order_ids.id = rs_tDBInput_9.getInt(1);
            if(rs_tDBInput_9.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_9 < 2) {
								laboratory_order_ids.facility_id = null;
							} else {
		                          
            laboratory_order_ids.facility_id = rs_tDBInput_9.getInt(2);
            if(rs_tDBInput_9.wasNull()){
                    laboratory_order_ids.facility_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_9 < 3) {
								laboratory_order_ids.created_by = null;
							} else {
	                         		
        	laboratory_order_ids.created_by = routines.system.JDBCUtil.getString(rs_tDBInput_9, 3, false);
		                    }
							if(colQtyInRs_tDBInput_9 < 4) {
								laboratory_order_ids.date_created = null;
							} else {
										
			laboratory_order_ids.date_created = routines.system.JDBCUtil.getDate(rs_tDBInput_9, 4);
		                    }
							if(colQtyInRs_tDBInput_9 < 5) {
								laboratory_order_ids.modified_by = null;
							} else {
	                         		
        	laboratory_order_ids.modified_by = routines.system.JDBCUtil.getString(rs_tDBInput_9, 5, false);
		                    }
							if(colQtyInRs_tDBInput_9 < 6) {
								laboratory_order_ids.date_modified = null;
							} else {
										
			laboratory_order_ids.date_modified = routines.system.JDBCUtil.getDate(rs_tDBInput_9, 6);
		                    }
							if(colQtyInRs_tDBInput_9 < 7) {
								laboratory_order_ids.archived = null;
							} else {
		                          
            laboratory_order_ids.archived = rs_tDBInput_9.getInt(7);
            if(rs_tDBInput_9.wasNull()){
                    laboratory_order_ids.archived = null;
            }
		                    }
					


 



/**
 * [tDBInput_9 begin ] stop
 */
	
	/**
	 * [tDBInput_9 main ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 


	tos_count_tDBInput_9++;

/**
 * [tDBInput_9 main ] stop
 */
	
	/**
	 * [tDBInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_laboratory_order_ids main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_laboratory_order_ids";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"laboratory_order_ids");
					}
					


			   
			   

					laboratory_order_idsStruct laboratory_order_ids_HashRow = new laboratory_order_idsStruct();
		   	   	   
				
				laboratory_order_ids_HashRow.id = laboratory_order_ids.id;
				
				laboratory_order_ids_HashRow.facility_id = laboratory_order_ids.facility_id;
				
				laboratory_order_ids_HashRow.created_by = laboratory_order_ids.created_by;
				
				laboratory_order_ids_HashRow.date_created = laboratory_order_ids.date_created;
				
				laboratory_order_ids_HashRow.modified_by = laboratory_order_ids.modified_by;
				
				laboratory_order_ids_HashRow.date_modified = laboratory_order_ids.date_modified;
				
				laboratory_order_ids_HashRow.archived = laboratory_order_ids.archived;
				
			tHash_Lookup_laboratory_order_ids.put(laboratory_order_ids_HashRow);
			
            




 


	tos_count_tAdvancedHash_laboratory_order_ids++;

/**
 * [tAdvancedHash_laboratory_order_ids main ] stop
 */
	
	/**
	 * [tAdvancedHash_laboratory_order_ids process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_laboratory_order_ids";

	

 



/**
 * [tAdvancedHash_laboratory_order_ids process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_laboratory_order_ids process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_laboratory_order_ids";

	

 



/**
 * [tAdvancedHash_laboratory_order_ids process_data_end ] stop
 */



	
	/**
	 * [tDBInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_9 end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

	}
}finally{
	if (rs_tDBInput_9 != null) {
		rs_tDBInput_9.close();
	}
	if (stmt_tDBInput_9 != null) {
		stmt_tDBInput_9.close();
	}
	if(conn_tDBInput_9 != null && !conn_tDBInput_9.isClosed()) {
		
			conn_tDBInput_9.commit();
			
		
			conn_tDBInput_9.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_9_NB_LINE",nb_line_tDBInput_9);
 

ok_Hash.put("tDBInput_9", true);
end_Hash.put("tDBInput_9", System.currentTimeMillis());




/**
 * [tDBInput_9 end ] stop
 */

	
	/**
	 * [tAdvancedHash_laboratory_order_ids end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_laboratory_order_ids";

	

tHash_Lookup_laboratory_order_ids.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"laboratory_order_ids");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_laboratory_order_ids", true);
end_Hash.put("tAdvancedHash_laboratory_order_ids", System.currentTimeMillis());




/**
 * [tAdvancedHash_laboratory_order_ids end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_9 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_laboratory_order_ids finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_laboratory_order_ids";

	

 



/**
 * [tAdvancedHash_laboratory_order_ids finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class laboratory_order_dataStruct implements routines.system.IPersistableComparableLookupRow<laboratory_order_dataStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Laboratory = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public Integer facility_id;

				public Integer getFacility_id () {
					return this.facility_id;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public java.util.Date date_created;

				public java.util.Date getDate_created () {
					return this.date_created;
				}
				
			    public String modified_by;

				public String getModified_by () {
					return this.modified_by;
				}
				
			    public java.util.Date date_modified;

				public java.util.Date getDate_modified () {
					return this.date_modified;
				}
				
			    public int test_id;

				public int getTest_id () {
					return this.test_id;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final laboratory_order_dataStruct other = (laboratory_order_dataStruct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(laboratory_order_dataStruct other) {

		other.id = this.id;
	            other.facility_id = this.facility_id;
	            other.created_by = this.created_by;
	            other.date_created = this.date_created;
	            other.modified_by = this.modified_by;
	            other.date_modified = this.date_modified;
	            other.test_id = this.test_id;
	            other.archived = this.archived;
	            
	}

	public void copyKeysDataTo(laboratory_order_dataStruct other) {

		other.id = this.id;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Laboratory) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.facility_id = readInteger(dis,ois);
					
						this.created_by = readString(dis,ois);
					
						this.date_created = readDate(dis,ois);
					
						this.modified_by = readString(dis,ois);
					
						this.date_modified = readDate(dis,ois);
					
			            this.test_id = dis.readInt();
					
						this.archived = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.facility_id, dos, oos);
					
						writeString(this.created_by, dos, oos);
					
						writeDate(this.date_created, dos, oos);
					
						writeString(this.modified_by, dos, oos);
					
						writeDate(this.date_modified, dos, oos);
					
		            	dos.writeInt(this.test_id);
					
					writeInteger(this.archived, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",created_by="+created_by);
		sb.append(",date_created="+String.valueOf(date_created));
		sb.append(",modified_by="+modified_by);
		sb.append(",date_modified="+String.valueOf(date_modified));
		sb.append(",test_id="+String.valueOf(test_id));
		sb.append(",archived="+String.valueOf(archived));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(laboratory_order_dataStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		laboratory_order_dataStruct laboratory_order_data = new laboratory_order_dataStruct();




	
	/**
	 * [tAdvancedHash_laboratory_order_data begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_laboratory_order_data", false);
		start_Hash.put("tAdvancedHash_laboratory_order_data", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_laboratory_order_data";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"laboratory_order_data");
					}
				
		int tos_count_tAdvancedHash_laboratory_order_data = 0;
		

			   		// connection name:laboratory_order_data
			   		// source node:tDBInput_14 - inputs:(after_tDBInput_13) outputs:(laboratory_order_data,laboratory_order_data) | target node:tAdvancedHash_laboratory_order_data - inputs:(laboratory_order_data) outputs:()
			   		// linked node: tMap_10 - inputs:(laboratory_sample_extract,laboratory_order_data) outputs:(laboratory_sample_order)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_laboratory_order_data = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<laboratory_order_dataStruct> tHash_Lookup_laboratory_order_data =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<laboratory_order_dataStruct>getLookup(matchingModeEnum_laboratory_order_data);
	   						   
		   	   	   globalMap.put("tHash_Lookup_laboratory_order_data", tHash_Lookup_laboratory_order_data);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_laboratory_order_data begin ] stop
 */



	
	/**
	 * [tDBInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_14", false);
		start_Hash.put("tDBInput_14", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_14";

	
		int tos_count_tDBInput_14 = 0;
		
	
    
	
		    int nb_line_tDBInput_14 = 0;
		    java.sql.Connection conn_tDBInput_14 = null;
				String driverClass_tDBInput_14 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_14 = java.lang.Class.forName(driverClass_tDBInput_14);
				String dbUser_tDBInput_14 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_14 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_14 = decryptedPassword_tDBInput_14;
				
				String url_tDBInput_14 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_14 = java.sql.DriverManager.getConnection(url_tDBInput_14,dbUser_tDBInput_14,dbPwd_tDBInput_14);
		        
				conn_tDBInput_14.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_14 = conn_tDBInput_14.createStatement();

		    String dbquery_tDBInput_14 = "SELECT lo.id,  lo.facility_id, lo.created_by, lo.date_created, lo.modified_by, lo.date_modified, lt.id as test_id, lo.a"
+"rchived \nFROM laboratory_order lo\nINNER JOIN laboratory_test lt ON lt.lab_order_id=lo.id";
			

            	globalMap.put("tDBInput_14_QUERY",dbquery_tDBInput_14);
		    java.sql.ResultSet rs_tDBInput_14 = null;

		    try {
		    	rs_tDBInput_14 = stmt_tDBInput_14.executeQuery(dbquery_tDBInput_14);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_14 = rs_tDBInput_14.getMetaData();
		    	int colQtyInRs_tDBInput_14 = rsmd_tDBInput_14.getColumnCount();

		    String tmpContent_tDBInput_14 = null;
		    
		    
		    while (rs_tDBInput_14.next()) {
		        nb_line_tDBInput_14++;
		        
							if(colQtyInRs_tDBInput_14 < 1) {
								laboratory_order_data.id = 0;
							} else {
		                          
            laboratory_order_data.id = rs_tDBInput_14.getInt(1);
            if(rs_tDBInput_14.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_14 < 2) {
								laboratory_order_data.facility_id = null;
							} else {
		                          
            laboratory_order_data.facility_id = rs_tDBInput_14.getInt(2);
            if(rs_tDBInput_14.wasNull()){
                    laboratory_order_data.facility_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_14 < 3) {
								laboratory_order_data.created_by = null;
							} else {
	                         		
        	laboratory_order_data.created_by = routines.system.JDBCUtil.getString(rs_tDBInput_14, 3, false);
		                    }
							if(colQtyInRs_tDBInput_14 < 4) {
								laboratory_order_data.date_created = null;
							} else {
										
			laboratory_order_data.date_created = routines.system.JDBCUtil.getDate(rs_tDBInput_14, 4);
		                    }
							if(colQtyInRs_tDBInput_14 < 5) {
								laboratory_order_data.modified_by = null;
							} else {
	                         		
        	laboratory_order_data.modified_by = routines.system.JDBCUtil.getString(rs_tDBInput_14, 5, false);
		                    }
							if(colQtyInRs_tDBInput_14 < 6) {
								laboratory_order_data.date_modified = null;
							} else {
										
			laboratory_order_data.date_modified = routines.system.JDBCUtil.getDate(rs_tDBInput_14, 6);
		                    }
							if(colQtyInRs_tDBInput_14 < 7) {
								laboratory_order_data.test_id = 0;
							} else {
		                          
            laboratory_order_data.test_id = rs_tDBInput_14.getInt(7);
            if(rs_tDBInput_14.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_14 < 8) {
								laboratory_order_data.archived = null;
							} else {
		                          
            laboratory_order_data.archived = rs_tDBInput_14.getInt(8);
            if(rs_tDBInput_14.wasNull()){
                    laboratory_order_data.archived = null;
            }
		                    }
					


 



/**
 * [tDBInput_14 begin ] stop
 */
	
	/**
	 * [tDBInput_14 main ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 


	tos_count_tDBInput_14++;

/**
 * [tDBInput_14 main ] stop
 */
	
	/**
	 * [tDBInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_laboratory_order_data main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_laboratory_order_data";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"laboratory_order_data");
					}
					


			   
			   

					laboratory_order_dataStruct laboratory_order_data_HashRow = new laboratory_order_dataStruct();
		   	   	   
				
				laboratory_order_data_HashRow.id = laboratory_order_data.id;
				
				laboratory_order_data_HashRow.facility_id = laboratory_order_data.facility_id;
				
				laboratory_order_data_HashRow.created_by = laboratory_order_data.created_by;
				
				laboratory_order_data_HashRow.date_created = laboratory_order_data.date_created;
				
				laboratory_order_data_HashRow.modified_by = laboratory_order_data.modified_by;
				
				laboratory_order_data_HashRow.date_modified = laboratory_order_data.date_modified;
				
				laboratory_order_data_HashRow.test_id = laboratory_order_data.test_id;
				
				laboratory_order_data_HashRow.archived = laboratory_order_data.archived;
				
			tHash_Lookup_laboratory_order_data.put(laboratory_order_data_HashRow);
			
            




 


	tos_count_tAdvancedHash_laboratory_order_data++;

/**
 * [tAdvancedHash_laboratory_order_data main ] stop
 */
	
	/**
	 * [tAdvancedHash_laboratory_order_data process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_laboratory_order_data";

	

 



/**
 * [tAdvancedHash_laboratory_order_data process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_laboratory_order_data process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_laboratory_order_data";

	

 



/**
 * [tAdvancedHash_laboratory_order_data process_data_end ] stop
 */



	
	/**
	 * [tDBInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_14 end ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

	}
}finally{
	if (rs_tDBInput_14 != null) {
		rs_tDBInput_14.close();
	}
	if (stmt_tDBInput_14 != null) {
		stmt_tDBInput_14.close();
	}
	if(conn_tDBInput_14 != null && !conn_tDBInput_14.isClosed()) {
		
			conn_tDBInput_14.commit();
			
		
			conn_tDBInput_14.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_14_NB_LINE",nb_line_tDBInput_14);
 

ok_Hash.put("tDBInput_14", true);
end_Hash.put("tDBInput_14", System.currentTimeMillis());




/**
 * [tDBInput_14 end ] stop
 */

	
	/**
	 * [tAdvancedHash_laboratory_order_data end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_laboratory_order_data";

	

tHash_Lookup_laboratory_order_data.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"laboratory_order_data");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_laboratory_order_data", true);
end_Hash.put("tAdvancedHash_laboratory_order_data", System.currentTimeMillis());




/**
 * [tAdvancedHash_laboratory_order_data end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_14 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_laboratory_order_data finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_laboratory_order_data";

	

 



/**
 * [tAdvancedHash_laboratory_order_data finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_14_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Laboratory = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.id = this.id;
	            other.uuid = this.uuid;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Laboratory.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Laboratory.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Laboratory) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tDBInput_11 - inputs:(after_tDBInput_13) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_6 - inputs:(laboratory_sample_order,row2) outputs:(laboratory_sample_final)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tDBInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_11", false);
		start_Hash.put("tDBInput_11", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_11";

	
		int tos_count_tDBInput_11 = 0;
		
	
    
	
		    int nb_line_tDBInput_11 = 0;
		    java.sql.Connection conn_tDBInput_11 = null;
				String driverClass_tDBInput_11 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_11 = java.lang.Class.forName(driverClass_tDBInput_11);
				String dbUser_tDBInput_11 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_11 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_11 = decryptedPassword_tDBInput_11;
				
				String url_tDBInput_11 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_11 = java.sql.DriverManager.getConnection(url_tDBInput_11,dbUser_tDBInput_11,dbPwd_tDBInput_11);
		        
				conn_tDBInput_11.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_11 = conn_tDBInput_11.createStatement();

		    String dbquery_tDBInput_11 = "SELECT id, uuid FROM patient_person";
			

            	globalMap.put("tDBInput_11_QUERY",dbquery_tDBInput_11);
		    java.sql.ResultSet rs_tDBInput_11 = null;

		    try {
		    	rs_tDBInput_11 = stmt_tDBInput_11.executeQuery(dbquery_tDBInput_11);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_11 = rs_tDBInput_11.getMetaData();
		    	int colQtyInRs_tDBInput_11 = rsmd_tDBInput_11.getColumnCount();

		    String tmpContent_tDBInput_11 = null;
		    
		    
		    while (rs_tDBInput_11.next()) {
		        nb_line_tDBInput_11++;
		        
							if(colQtyInRs_tDBInput_11 < 1) {
								row2.id = 0;
							} else {
		                          
            row2.id = rs_tDBInput_11.getInt(1);
            if(rs_tDBInput_11.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_11 < 2) {
								row2.uuid = null;
							} else {
	                         		
        	row2.uuid = routines.system.JDBCUtil.getString(rs_tDBInput_11, 2, false);
		                    }
					


 



/**
 * [tDBInput_11 begin ] stop
 */
	
	/**
	 * [tDBInput_11 main ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 


	tos_count_tDBInput_11++;

/**
 * [tDBInput_11 main ] stop
 */
	
	/**
	 * [tDBInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.id = row2.id;
				
				row2_HashRow.uuid = row2.uuid;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_11 end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

	}
}finally{
	if (rs_tDBInput_11 != null) {
		rs_tDBInput_11.close();
	}
	if (stmt_tDBInput_11 != null) {
		stmt_tDBInput_11.close();
	}
	if(conn_tDBInput_11 != null && !conn_tDBInput_11.isClosed()) {
		
			conn_tDBInput_11.commit();
			
		
			conn_tDBInput_11.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_11_NB_LINE",nb_line_tDBInput_11);
 

ok_Hash.put("tDBInput_11", true);
end_Hash.put("tDBInput_11", System.currentTimeMillis());




/**
 * [tDBInput_11 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

tHash_Lookup_row2.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_11 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class laboratory_order_resultStruct implements routines.system.IPersistableComparableLookupRow<laboratory_order_resultStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Laboratory = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public Integer facility_id;

				public Integer getFacility_id () {
					return this.facility_id;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public java.util.Date date_created;

				public java.util.Date getDate_created () {
					return this.date_created;
				}
				
			    public String modified_by;

				public String getModified_by () {
					return this.modified_by;
				}
				
			    public java.util.Date date_modified;

				public java.util.Date getDate_modified () {
					return this.date_modified;
				}
				
			    public int test_id;

				public int getTest_id () {
					return this.test_id;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final laboratory_order_resultStruct other = (laboratory_order_resultStruct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(laboratory_order_resultStruct other) {

		other.id = this.id;
	            other.facility_id = this.facility_id;
	            other.created_by = this.created_by;
	            other.date_created = this.date_created;
	            other.modified_by = this.modified_by;
	            other.date_modified = this.date_modified;
	            other.test_id = this.test_id;
	            other.archived = this.archived;
	            
	}

	public void copyKeysDataTo(laboratory_order_resultStruct other) {

		other.id = this.id;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Laboratory) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.facility_id = readInteger(dis,ois);
					
						this.created_by = readString(dis,ois);
					
						this.date_created = readDate(dis,ois);
					
						this.modified_by = readString(dis,ois);
					
						this.date_modified = readDate(dis,ois);
					
			            this.test_id = dis.readInt();
					
						this.archived = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.facility_id, dos, oos);
					
						writeString(this.created_by, dos, oos);
					
						writeDate(this.date_created, dos, oos);
					
						writeString(this.modified_by, dos, oos);
					
						writeDate(this.date_modified, dos, oos);
					
		            	dos.writeInt(this.test_id);
					
					writeInteger(this.archived, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",created_by="+created_by);
		sb.append(",date_created="+String.valueOf(date_created));
		sb.append(",modified_by="+modified_by);
		sb.append(",date_modified="+String.valueOf(date_modified));
		sb.append(",test_id="+String.valueOf(test_id));
		sb.append(",archived="+String.valueOf(archived));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(laboratory_order_resultStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		laboratory_order_resultStruct laboratory_order_result = new laboratory_order_resultStruct();




	
	/**
	 * [tAdvancedHash_laboratory_order_result begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_laboratory_order_result", false);
		start_Hash.put("tAdvancedHash_laboratory_order_result", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_laboratory_order_result";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"laboratory_order_result");
					}
				
		int tos_count_tAdvancedHash_laboratory_order_result = 0;
		

			   		// connection name:laboratory_order_result
			   		// source node:tDBInput_15 - inputs:(after_tDBInput_12) outputs:(laboratory_order_result,laboratory_order_result) | target node:tAdvancedHash_laboratory_order_result - inputs:(laboratory_order_result) outputs:()
			   		// linked node: tMap_11 - inputs:(laboratory_result_records,laboratory_order_result) outputs:(laboratory_result_extracts)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_laboratory_order_result = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<laboratory_order_resultStruct> tHash_Lookup_laboratory_order_result =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<laboratory_order_resultStruct>getLookup(matchingModeEnum_laboratory_order_result);
	   						   
		   	   	   globalMap.put("tHash_Lookup_laboratory_order_result", tHash_Lookup_laboratory_order_result);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_laboratory_order_result begin ] stop
 */



	
	/**
	 * [tDBInput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_15", false);
		start_Hash.put("tDBInput_15", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_15";

	
		int tos_count_tDBInput_15 = 0;
		
	
    
	
		    int nb_line_tDBInput_15 = 0;
		    java.sql.Connection conn_tDBInput_15 = null;
				String driverClass_tDBInput_15 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_15 = java.lang.Class.forName(driverClass_tDBInput_15);
				String dbUser_tDBInput_15 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_15 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_15 = decryptedPassword_tDBInput_15;
				
				String url_tDBInput_15 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_15 = java.sql.DriverManager.getConnection(url_tDBInput_15,dbUser_tDBInput_15,dbPwd_tDBInput_15);
		        
				conn_tDBInput_15.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_15 = conn_tDBInput_15.createStatement();

		    String dbquery_tDBInput_15 = "SELECT lo.id,  lo.facility_id, lo.created_by, lo.date_created, lo.modified_by, lo.date_modified, lt.id as test_id, lo.a"
+"rchived\nFROM laboratory_order lo\nINNER JOIN laboratory_test lt ON lt.lab_order_id=lo.id";
			

            	globalMap.put("tDBInput_15_QUERY",dbquery_tDBInput_15);
		    java.sql.ResultSet rs_tDBInput_15 = null;

		    try {
		    	rs_tDBInput_15 = stmt_tDBInput_15.executeQuery(dbquery_tDBInput_15);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_15 = rs_tDBInput_15.getMetaData();
		    	int colQtyInRs_tDBInput_15 = rsmd_tDBInput_15.getColumnCount();

		    String tmpContent_tDBInput_15 = null;
		    
		    
		    while (rs_tDBInput_15.next()) {
		        nb_line_tDBInput_15++;
		        
							if(colQtyInRs_tDBInput_15 < 1) {
								laboratory_order_result.id = 0;
							} else {
		                          
            laboratory_order_result.id = rs_tDBInput_15.getInt(1);
            if(rs_tDBInput_15.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_15 < 2) {
								laboratory_order_result.facility_id = null;
							} else {
		                          
            laboratory_order_result.facility_id = rs_tDBInput_15.getInt(2);
            if(rs_tDBInput_15.wasNull()){
                    laboratory_order_result.facility_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_15 < 3) {
								laboratory_order_result.created_by = null;
							} else {
	                         		
        	laboratory_order_result.created_by = routines.system.JDBCUtil.getString(rs_tDBInput_15, 3, false);
		                    }
							if(colQtyInRs_tDBInput_15 < 4) {
								laboratory_order_result.date_created = null;
							} else {
										
			laboratory_order_result.date_created = routines.system.JDBCUtil.getDate(rs_tDBInput_15, 4);
		                    }
							if(colQtyInRs_tDBInput_15 < 5) {
								laboratory_order_result.modified_by = null;
							} else {
	                         		
        	laboratory_order_result.modified_by = routines.system.JDBCUtil.getString(rs_tDBInput_15, 5, false);
		                    }
							if(colQtyInRs_tDBInput_15 < 6) {
								laboratory_order_result.date_modified = null;
							} else {
										
			laboratory_order_result.date_modified = routines.system.JDBCUtil.getDate(rs_tDBInput_15, 6);
		                    }
							if(colQtyInRs_tDBInput_15 < 7) {
								laboratory_order_result.test_id = 0;
							} else {
		                          
            laboratory_order_result.test_id = rs_tDBInput_15.getInt(7);
            if(rs_tDBInput_15.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_15 < 8) {
								laboratory_order_result.archived = null;
							} else {
		                          
            laboratory_order_result.archived = rs_tDBInput_15.getInt(8);
            if(rs_tDBInput_15.wasNull()){
                    laboratory_order_result.archived = null;
            }
		                    }
					


 



/**
 * [tDBInput_15 begin ] stop
 */
	
	/**
	 * [tDBInput_15 main ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

 


	tos_count_tDBInput_15++;

/**
 * [tDBInput_15 main ] stop
 */
	
	/**
	 * [tDBInput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

 



/**
 * [tDBInput_15 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_laboratory_order_result main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_laboratory_order_result";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"laboratory_order_result");
					}
					


			   
			   

					laboratory_order_resultStruct laboratory_order_result_HashRow = new laboratory_order_resultStruct();
		   	   	   
				
				laboratory_order_result_HashRow.id = laboratory_order_result.id;
				
				laboratory_order_result_HashRow.facility_id = laboratory_order_result.facility_id;
				
				laboratory_order_result_HashRow.created_by = laboratory_order_result.created_by;
				
				laboratory_order_result_HashRow.date_created = laboratory_order_result.date_created;
				
				laboratory_order_result_HashRow.modified_by = laboratory_order_result.modified_by;
				
				laboratory_order_result_HashRow.date_modified = laboratory_order_result.date_modified;
				
				laboratory_order_result_HashRow.test_id = laboratory_order_result.test_id;
				
				laboratory_order_result_HashRow.archived = laboratory_order_result.archived;
				
			tHash_Lookup_laboratory_order_result.put(laboratory_order_result_HashRow);
			
            




 


	tos_count_tAdvancedHash_laboratory_order_result++;

/**
 * [tAdvancedHash_laboratory_order_result main ] stop
 */
	
	/**
	 * [tAdvancedHash_laboratory_order_result process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_laboratory_order_result";

	

 



/**
 * [tAdvancedHash_laboratory_order_result process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_laboratory_order_result process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_laboratory_order_result";

	

 



/**
 * [tAdvancedHash_laboratory_order_result process_data_end ] stop
 */



	
	/**
	 * [tDBInput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

 



/**
 * [tDBInput_15 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_15 end ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

	}
}finally{
	if (rs_tDBInput_15 != null) {
		rs_tDBInput_15.close();
	}
	if (stmt_tDBInput_15 != null) {
		stmt_tDBInput_15.close();
	}
	if(conn_tDBInput_15 != null && !conn_tDBInput_15.isClosed()) {
		
			conn_tDBInput_15.commit();
			
		
			conn_tDBInput_15.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_15_NB_LINE",nb_line_tDBInput_15);
 

ok_Hash.put("tDBInput_15", true);
end_Hash.put("tDBInput_15", System.currentTimeMillis());




/**
 * [tDBInput_15 end ] stop
 */

	
	/**
	 * [tAdvancedHash_laboratory_order_result end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_laboratory_order_result";

	

tHash_Lookup_laboratory_order_result.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"laboratory_order_result");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_laboratory_order_result", true);
end_Hash.put("tAdvancedHash_laboratory_order_result", System.currentTimeMillis());




/**
 * [tAdvancedHash_laboratory_order_result end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_15 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

 



/**
 * [tDBInput_15 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_laboratory_order_result finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_laboratory_order_result";

	

 



/**
 * [tAdvancedHash_laboratory_order_result finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_15_SUBPROCESS_STATE", 1);
	}
	


public static class patient_person_dataStruct implements routines.system.IPersistableComparableLookupRow<patient_person_dataStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Laboratory = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final patient_person_dataStruct other = (patient_person_dataStruct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(patient_person_dataStruct other) {

		other.id = this.id;
	            other.uuid = this.uuid;
	            
	}

	public void copyKeysDataTo(patient_person_dataStruct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Laboratory.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Laboratory.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Laboratory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Laboratory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Laboratory) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(patient_person_dataStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		patient_person_dataStruct patient_person_data = new patient_person_dataStruct();




	
	/**
	 * [tAdvancedHash_patient_person_data begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_patient_person_data", false);
		start_Hash.put("tAdvancedHash_patient_person_data", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_patient_person_data";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"patient_person_data");
					}
				
		int tos_count_tAdvancedHash_patient_person_data = 0;
		

			   		// connection name:patient_person_data
			   		// source node:tDBInput_16 - inputs:(after_tDBInput_12) outputs:(patient_person_data,patient_person_data) | target node:tAdvancedHash_patient_person_data - inputs:(patient_person_data) outputs:()
			   		// linked node: tMap_12 - inputs:(laboratory_result_extracts,patient_person_data) outputs:(laboratory_result_final)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_patient_person_data = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<patient_person_dataStruct> tHash_Lookup_patient_person_data =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<patient_person_dataStruct>getLookup(matchingModeEnum_patient_person_data);
	   						   
		   	   	   globalMap.put("tHash_Lookup_patient_person_data", tHash_Lookup_patient_person_data);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_patient_person_data begin ] stop
 */



	
	/**
	 * [tDBInput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_16", false);
		start_Hash.put("tDBInput_16", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_16";

	
		int tos_count_tDBInput_16 = 0;
		
	
    
	
		    int nb_line_tDBInput_16 = 0;
		    java.sql.Connection conn_tDBInput_16 = null;
				String driverClass_tDBInput_16 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_16 = java.lang.Class.forName(driverClass_tDBInput_16);
				String dbUser_tDBInput_16 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_16 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_16 = decryptedPassword_tDBInput_16;
				
				String url_tDBInput_16 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_16 = java.sql.DriverManager.getConnection(url_tDBInput_16,dbUser_tDBInput_16,dbPwd_tDBInput_16);
		        
				conn_tDBInput_16.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_16 = conn_tDBInput_16.createStatement();

		    String dbquery_tDBInput_16 = "SELECT id, uuid FROM patient_person";
			

            	globalMap.put("tDBInput_16_QUERY",dbquery_tDBInput_16);
		    java.sql.ResultSet rs_tDBInput_16 = null;

		    try {
		    	rs_tDBInput_16 = stmt_tDBInput_16.executeQuery(dbquery_tDBInput_16);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_16 = rs_tDBInput_16.getMetaData();
		    	int colQtyInRs_tDBInput_16 = rsmd_tDBInput_16.getColumnCount();

		    String tmpContent_tDBInput_16 = null;
		    
		    
		    while (rs_tDBInput_16.next()) {
		        nb_line_tDBInput_16++;
		        
							if(colQtyInRs_tDBInput_16 < 1) {
								patient_person_data.id = 0;
							} else {
		                          
            patient_person_data.id = rs_tDBInput_16.getInt(1);
            if(rs_tDBInput_16.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_16 < 2) {
								patient_person_data.uuid = null;
							} else {
	                         		
        	patient_person_data.uuid = routines.system.JDBCUtil.getString(rs_tDBInput_16, 2, false);
		                    }
					


 



/**
 * [tDBInput_16 begin ] stop
 */
	
	/**
	 * [tDBInput_16 main ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

 


	tos_count_tDBInput_16++;

/**
 * [tDBInput_16 main ] stop
 */
	
	/**
	 * [tDBInput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

 



/**
 * [tDBInput_16 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_patient_person_data main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_patient_person_data";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"patient_person_data");
					}
					


			   
			   

					patient_person_dataStruct patient_person_data_HashRow = new patient_person_dataStruct();
		   	   	   
				
				patient_person_data_HashRow.id = patient_person_data.id;
				
				patient_person_data_HashRow.uuid = patient_person_data.uuid;
				
			tHash_Lookup_patient_person_data.put(patient_person_data_HashRow);
			
            




 


	tos_count_tAdvancedHash_patient_person_data++;

/**
 * [tAdvancedHash_patient_person_data main ] stop
 */
	
	/**
	 * [tAdvancedHash_patient_person_data process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_patient_person_data";

	

 



/**
 * [tAdvancedHash_patient_person_data process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_patient_person_data process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_patient_person_data";

	

 



/**
 * [tAdvancedHash_patient_person_data process_data_end ] stop
 */



	
	/**
	 * [tDBInput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

 



/**
 * [tDBInput_16 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_16 end ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

	}
}finally{
	if (rs_tDBInput_16 != null) {
		rs_tDBInput_16.close();
	}
	if (stmt_tDBInput_16 != null) {
		stmt_tDBInput_16.close();
	}
	if(conn_tDBInput_16 != null && !conn_tDBInput_16.isClosed()) {
		
			conn_tDBInput_16.commit();
			
		
			conn_tDBInput_16.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_16_NB_LINE",nb_line_tDBInput_16);
 

ok_Hash.put("tDBInput_16", true);
end_Hash.put("tDBInput_16", System.currentTimeMillis());




/**
 * [tDBInput_16 end ] stop
 */

	
	/**
	 * [tAdvancedHash_patient_person_data end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_patient_person_data";

	

tHash_Lookup_patient_person_data.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"patient_person_data");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_patient_person_data", true);
end_Hash.put("tAdvancedHash_patient_person_data", System.currentTimeMillis());




/**
 * [tAdvancedHash_patient_person_data end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_16 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

 



/**
 * [tDBInput_16 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_patient_person_data finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_patient_person_data";

	

 



/**
 * [tAdvancedHash_patient_person_data finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_16_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Lamisplus";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Laboratory LaboratoryClass = new Laboratory();

        int exitCode = LaboratoryClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Laboratory.class.getClassLoader().getResourceAsStream("lamisplus_etl/laboratory_6_0/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Laboratory.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("LAMISPlus_Schema", "id_String");
                            context.LAMISPlus_Schema=(String) context.getProperty("LAMISPlus_Schema");
                        context.setContextType("LAMISPlus_AdditionalParams", "id_String");
                            context.LAMISPlus_AdditionalParams=(String) context.getProperty("LAMISPlus_AdditionalParams");
                        context.setContextType("LAMISPlus_Database", "id_String");
                            context.LAMISPlus_Database=(String) context.getProperty("LAMISPlus_Database");
                        context.setContextType("LAMISPlus_Login", "id_String");
                            context.LAMISPlus_Login=(String) context.getProperty("LAMISPlus_Login");
                        context.setContextType("LAMISPlus_Server", "id_String");
                            context.LAMISPlus_Server=(String) context.getProperty("LAMISPlus_Server");
                        context.setContextType("LAMISPlus_Password", "id_Password");
                            String pwd_LAMISPlus_Password_value = context.getProperty("LAMISPlus_Password");
                            context.LAMISPlus_Password = null;
                            if(pwd_LAMISPlus_Password_value!=null) {
                                if(context_param.containsKey("LAMISPlus_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.LAMISPlus_Password = pwd_LAMISPlus_Password_value;
                                } else if (!pwd_LAMISPlus_Password_value.isEmpty()) {
                                    try {
                                        context.LAMISPlus_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_LAMISPlus_Password_value);
                                        context.put("LAMISPlus_Password",context.LAMISPlus_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("LAMISPlus_Port", "id_String");
                            context.LAMISPlus_Port=(String) context.getProperty("LAMISPlus_Port");
                        context.setContextType("LAMIS3_Login", "id_String");
                            context.LAMIS3_Login=(String) context.getProperty("LAMIS3_Login");
                        context.setContextType("LAMIS3_Port", "id_String");
                            context.LAMIS3_Port=(String) context.getProperty("LAMIS3_Port");
                        context.setContextType("LAMIS3_AdditionalParams", "id_String");
                            context.LAMIS3_AdditionalParams=(String) context.getProperty("LAMIS3_AdditionalParams");
                        context.setContextType("LAMIS3_Database", "id_String");
                            context.LAMIS3_Database=(String) context.getProperty("LAMIS3_Database");
                        context.setContextType("LAMIS3_Password", "id_Password");
                            String pwd_LAMIS3_Password_value = context.getProperty("LAMIS3_Password");
                            context.LAMIS3_Password = null;
                            if(pwd_LAMIS3_Password_value!=null) {
                                if(context_param.containsKey("LAMIS3_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.LAMIS3_Password = pwd_LAMIS3_Password_value;
                                } else if (!pwd_LAMIS3_Password_value.isEmpty()) {
                                    try {
                                        context.LAMIS3_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_LAMIS3_Password_value);
                                        context.put("LAMIS3_Password",context.LAMIS3_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("LAMIS3_Server", "id_String");
                            context.LAMIS3_Server=(String) context.getProperty("LAMIS3_Server");
                        context.setContextType("LAMIS3_Schema", "id_String");
                            context.LAMIS3_Schema=(String) context.getProperty("LAMIS3_Schema");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("LAMISPlus_Schema")) {
                context.LAMISPlus_Schema = (String) parentContextMap.get("LAMISPlus_Schema");
            }if (parentContextMap.containsKey("LAMISPlus_AdditionalParams")) {
                context.LAMISPlus_AdditionalParams = (String) parentContextMap.get("LAMISPlus_AdditionalParams");
            }if (parentContextMap.containsKey("LAMISPlus_Database")) {
                context.LAMISPlus_Database = (String) parentContextMap.get("LAMISPlus_Database");
            }if (parentContextMap.containsKey("LAMISPlus_Login")) {
                context.LAMISPlus_Login = (String) parentContextMap.get("LAMISPlus_Login");
            }if (parentContextMap.containsKey("LAMISPlus_Server")) {
                context.LAMISPlus_Server = (String) parentContextMap.get("LAMISPlus_Server");
            }if (parentContextMap.containsKey("LAMISPlus_Password")) {
                context.LAMISPlus_Password = (java.lang.String) parentContextMap.get("LAMISPlus_Password");
            }if (parentContextMap.containsKey("LAMISPlus_Port")) {
                context.LAMISPlus_Port = (String) parentContextMap.get("LAMISPlus_Port");
            }if (parentContextMap.containsKey("LAMIS3_Login")) {
                context.LAMIS3_Login = (String) parentContextMap.get("LAMIS3_Login");
            }if (parentContextMap.containsKey("LAMIS3_Port")) {
                context.LAMIS3_Port = (String) parentContextMap.get("LAMIS3_Port");
            }if (parentContextMap.containsKey("LAMIS3_AdditionalParams")) {
                context.LAMIS3_AdditionalParams = (String) parentContextMap.get("LAMIS3_AdditionalParams");
            }if (parentContextMap.containsKey("LAMIS3_Database")) {
                context.LAMIS3_Database = (String) parentContextMap.get("LAMIS3_Database");
            }if (parentContextMap.containsKey("LAMIS3_Password")) {
                context.LAMIS3_Password = (java.lang.String) parentContextMap.get("LAMIS3_Password");
            }if (parentContextMap.containsKey("LAMIS3_Server")) {
                context.LAMIS3_Server = (String) parentContextMap.get("LAMIS3_Server");
            }if (parentContextMap.containsKey("LAMIS3_Schema")) {
                context.LAMIS3_Schema = (String) parentContextMap.get("LAMIS3_Schema");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("LAMISPlus_Password");
			parametersToEncrypt.add("LAMIS3_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Laboratory");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     606675 characters generated by Talend Open Studio for Big Data 
 *     on the November 13, 2022 10:29:24 PM WAT
 ************************************************************************************************/