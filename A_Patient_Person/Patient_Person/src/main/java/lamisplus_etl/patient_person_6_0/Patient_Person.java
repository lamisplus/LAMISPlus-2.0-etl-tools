// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package lamisplus_etl.patient_person_6_0;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_4
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJava_5
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: Patient_Person Purpose: Patient Workflow with validated FHIR R4 and JSON Fields and Codeset transfomations<br>
 * Description: Validate JSON Fields and Codeset transfomation <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class Patient_Person implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(LAMIS3_Database != null){
				
					this.setProperty("LAMIS3_Database", LAMIS3_Database.toString());
				
			}
			
			if(LAMIS3_Port != null){
				
					this.setProperty("LAMIS3_Port", LAMIS3_Port.toString());
				
			}
			
			if(LAMIS3_AdditionalParams != null){
				
					this.setProperty("LAMIS3_AdditionalParams", LAMIS3_AdditionalParams.toString());
				
			}
			
			if(LAMIS3_Schema != null){
				
					this.setProperty("LAMIS3_Schema", LAMIS3_Schema.toString());
				
			}
			
			if(LAMIS3_Password != null){
				
					this.setProperty("LAMIS3_Password", LAMIS3_Password.toString());
				
			}
			
			if(LAMIS3_Server != null){
				
					this.setProperty("LAMIS3_Server", LAMIS3_Server.toString());
				
			}
			
			if(LAMIS3_Login != null){
				
					this.setProperty("LAMIS3_Login", LAMIS3_Login.toString());
				
			}
			
			if(LAMISPlus_Port != null){
				
					this.setProperty("LAMISPlus_Port", LAMISPlus_Port.toString());
				
			}
			
			if(LAMISPlus_Server != null){
				
					this.setProperty("LAMISPlus_Server", LAMISPlus_Server.toString());
				
			}
			
			if(LAMISPlus_Schema != null){
				
					this.setProperty("LAMISPlus_Schema", LAMISPlus_Schema.toString());
				
			}
			
			if(LAMISPlus_Login != null){
				
					this.setProperty("LAMISPlus_Login", LAMISPlus_Login.toString());
				
			}
			
			if(LAMISPlus_AdditionalParams != null){
				
					this.setProperty("LAMISPlus_AdditionalParams", LAMISPlus_AdditionalParams.toString());
				
			}
			
			if(LAMISPlus_Password != null){
				
					this.setProperty("LAMISPlus_Password", LAMISPlus_Password.toString());
				
			}
			
			if(LAMISPlus_Database != null){
				
					this.setProperty("LAMISPlus_Database", LAMISPlus_Database.toString());
				
			}
			
		}

public String LAMIS3_Database;
public String getLAMIS3_Database(){
	return this.LAMIS3_Database;
}
public String LAMIS3_Port;
public String getLAMIS3_Port(){
	return this.LAMIS3_Port;
}
public String LAMIS3_AdditionalParams;
public String getLAMIS3_AdditionalParams(){
	return this.LAMIS3_AdditionalParams;
}
public String LAMIS3_Schema;
public String getLAMIS3_Schema(){
	return this.LAMIS3_Schema;
}
public java.lang.String LAMIS3_Password;
public java.lang.String getLAMIS3_Password(){
	return this.LAMIS3_Password;
}
public String LAMIS3_Server;
public String getLAMIS3_Server(){
	return this.LAMIS3_Server;
}
public String LAMIS3_Login;
public String getLAMIS3_Login(){
	return this.LAMIS3_Login;
}
public String LAMISPlus_Port;
public String getLAMISPlus_Port(){
	return this.LAMISPlus_Port;
}
public String LAMISPlus_Server;
public String getLAMISPlus_Server(){
	return this.LAMISPlus_Server;
}
public String LAMISPlus_Schema;
public String getLAMISPlus_Schema(){
	return this.LAMISPlus_Schema;
}
public String LAMISPlus_Login;
public String getLAMISPlus_Login(){
	return this.LAMISPlus_Login;
}
public String LAMISPlus_AdditionalParams;
public String getLAMISPlus_AdditionalParams(){
	return this.LAMISPlus_AdditionalParams;
}
public java.lang.String LAMISPlus_Password;
public java.lang.String getLAMISPlus_Password(){
	return this.LAMISPlus_Password;
}
public String LAMISPlus_Database;
public String getLAMISPlus_Database(){
	return this.LAMISPlus_Database;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "6.0";
	private final String jobName = "Patient_Person";
	private final String projectName = "LAMISPLUS_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Patient_Person.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Patient_Person.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tExtractJSONFields_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_Lamisplus_orgunits_lookup_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_Lamisplus_Employment_codesets_lookup_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_Employment_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_Lamisplus_Nextkin_codeset_lookup_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_Nextkin_relationship_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_Lamisplus_education_codeset_lookup_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_Education_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_Lamisplus_marital_codeset_lookup_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_Marital_status_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_Facilities_lookup_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_Lamisplus_gender_codeset_lookup_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_Gender_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWriteJSONField_5_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tWriteJSONField_5_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tWriteJSONField_5_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSortRow_1_SortOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tSortRow_1_SortIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tSortRow_1_SortIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_17_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWriteJSONField_5_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class CreatJSON_FieldStruct implements routines.system.IPersistableRow<CreatJSON_FieldStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String hospital_number;

				public String getHospital_number () {
					return this.hospital_number;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String first_name;

				public String getFirst_name () {
					return this.first_name;
				}
				
			    public String surname;

				public String getSurname () {
					return this.surname;
				}
				
			    public String other_name;

				public String getOther_name () {
					return this.other_name;
				}
				
			    public String gender;

				public String getGender () {
					return this.gender;
				}
				
			    public java.util.Date date_of_birth;

				public java.util.Date getDate_of_birth () {
					return this.date_of_birth;
				}
				
			    public Boolean is_date_of_birth_estimated;

				public Boolean getIs_date_of_birth_estimated () {
					return this.is_date_of_birth_estimated;
				}
				
			    public String education;

				public String getEducation () {
					return this.education;
				}
				
			    public String marital_status;

				public String getMarital_status () {
					return this.marital_status;
				}
				
			    public String employment_status;

				public String getEmployment_status () {
					return this.employment_status;
				}
				
			    public String address;

				public String getAddress () {
					return this.address;
				}
				
			    public String contact_point;

				public String getContact_point () {
					return this.contact_point;
				}
				
			    public String contact;

				public String getContact () {
					return this.contact;
				}
				
			    public String next_of_kin;

				public String getNext_of_kin () {
					return this.next_of_kin;
				}
				
			    public String next_of_kin_address;

				public String getNext_of_kin_address () {
					return this.next_of_kin_address;
				}
				
			    public String next_of_kin_phone;

				public String getNext_of_kin_phone () {
					return this.next_of_kin_phone;
				}
				
			    public String next_of_kin_relationship;

				public String getNext_of_kin_relationship () {
					return this.next_of_kin_relationship;
				}
				
			    public java.util.Date date_of_registration;

				public java.util.Date getDate_of_registration () {
					return this.date_of_registration;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public boolean active;

				public boolean getActive () {
					return this.active;
				}
				
			    public Boolean deceased;

				public Boolean getDeceased () {
					return this.deceased;
				}
				
			    public java.util.Date deceased_date_time;

				public java.util.Date getDeceased_date_time () {
					return this.deceased_date_time;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String identifier;

				public String getIdentifier () {
					return this.identifier;
				}
				
			    public String state_name;

				public String getState_name () {
					return this.state_name;
				}
				
			    public Long state_id;

				public Long getState_id () {
					return this.state_id;
				}
				
			    public Long district_id;

				public Long getDistrict_id () {
					return this.district_id;
				}
				
			    public String district;

				public String getDistrict () {
					return this.district;
				}
				
			    public long facility_id;

				public long getFacility_id () {
					return this.facility_id;
				}
				
			    public String facility_name;

				public String getFacility_name () {
					return this.facility_name;
				}
				
			    public String contact_loop;

				public String getContact_loop () {
					return this.contact_loop;
				}
				
			    public String education_loop;

				public String getEducation_loop () {
					return this.education_loop;
				}
				
			    public String status_loop;

				public String getStatus_loop () {
					return this.status_loop;
				}
				
			    public String employmentLoop;

				public String getEmploymentLoop () {
					return this.employmentLoop;
				}
				
			    public String address_loop;

				public String getAddress_loop () {
					return this.address_loop;
				}
				
			    public String phone_loop;

				public String getPhone_loop () {
					return this.phone_loop;
				}
				
			    public String orgunit_loop;

				public String getOrgunit_loop () {
					return this.orgunit_loop;
				}
				
			    public Long marital_id;

				public Long getMarital_id () {
					return this.marital_id;
				}
				
			    public String marital_display;

				public String getMarital_display () {
					return this.marital_display;
				}
				
			    public Long gender_id;

				public Long getGender_id () {
					return this.gender_id;
				}
				
			    public String gender_display;

				public String getGender_display () {
					return this.gender_display;
				}
				
			    public Long education_id;

				public Long getEducation_id () {
					return this.education_id;
				}
				
			    public String education_display;

				public String getEducation_display () {
					return this.education_display;
				}
				
			    public long occupation_id;

				public long getOccupation_id () {
					return this.occupation_id;
				}
				
			    public String occupation_display;

				public String getOccupation_display () {
					return this.occupation_display;
				}
				
			    public Long relationshipid;

				public Long getRelationshipid () {
					return this.relationshipid;
				}
				
			    public String sex;

				public String getSex () {
					return this.sex;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
						result = prime * result + ((this.gender_display == null) ? 0 : this.gender_display.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final CreatJSON_FieldStruct other = (CreatJSON_FieldStruct) obj;
		
						if (this.id != other.id)
							return false;
					
						if (this.gender_display == null) {
							if (other.gender_display != null)
								return false;
						
						} else if (!this.gender_display.equals(other.gender_display))
						
							return false;
					

		return true;
    }

	public void copyDataTo(CreatJSON_FieldStruct other) {

		other.id = this.id;
	            other.hospital_number = this.hospital_number;
	            other.uuid = this.uuid;
	            other.first_name = this.first_name;
	            other.surname = this.surname;
	            other.other_name = this.other_name;
	            other.gender = this.gender;
	            other.date_of_birth = this.date_of_birth;
	            other.is_date_of_birth_estimated = this.is_date_of_birth_estimated;
	            other.education = this.education;
	            other.marital_status = this.marital_status;
	            other.employment_status = this.employment_status;
	            other.address = this.address;
	            other.contact_point = this.contact_point;
	            other.contact = this.contact;
	            other.next_of_kin = this.next_of_kin;
	            other.next_of_kin_address = this.next_of_kin_address;
	            other.next_of_kin_phone = this.next_of_kin_phone;
	            other.next_of_kin_relationship = this.next_of_kin_relationship;
	            other.date_of_registration = this.date_of_registration;
	            other.archived = this.archived;
	            other.active = this.active;
	            other.deceased = this.deceased;
	            other.deceased_date_time = this.deceased_date_time;
	            other.created_date = this.created_date;
	            other.last_modified_date = this.last_modified_date;
	            other.created_by = this.created_by;
	            other.last_modified_by = this.last_modified_by;
	            other.identifier = this.identifier;
	            other.state_name = this.state_name;
	            other.state_id = this.state_id;
	            other.district_id = this.district_id;
	            other.district = this.district;
	            other.facility_id = this.facility_id;
	            other.facility_name = this.facility_name;
	            other.contact_loop = this.contact_loop;
	            other.education_loop = this.education_loop;
	            other.status_loop = this.status_loop;
	            other.employmentLoop = this.employmentLoop;
	            other.address_loop = this.address_loop;
	            other.phone_loop = this.phone_loop;
	            other.orgunit_loop = this.orgunit_loop;
	            other.marital_id = this.marital_id;
	            other.marital_display = this.marital_display;
	            other.gender_id = this.gender_id;
	            other.gender_display = this.gender_display;
	            other.education_id = this.education_id;
	            other.education_display = this.education_display;
	            other.occupation_id = this.occupation_id;
	            other.occupation_display = this.occupation_display;
	            other.relationshipid = this.relationshipid;
	            other.sex = this.sex;
	            
	}

	public void copyKeysDataTo(CreatJSON_FieldStruct other) {

		other.id = this.id;
	            	other.gender_display = this.gender_display;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.hospital_number = readString(dis);
					
					this.uuid = readString(dis);
					
					this.first_name = readString(dis);
					
					this.surname = readString(dis);
					
					this.other_name = readString(dis);
					
					this.gender = readString(dis);
					
					this.date_of_birth = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_date_of_birth_estimated = null;
           				} else {
           			    	this.is_date_of_birth_estimated = dis.readBoolean();
           				}
					
					this.education = readString(dis);
					
					this.marital_status = readString(dis);
					
					this.employment_status = readString(dis);
					
					this.address = readString(dis);
					
					this.contact_point = readString(dis);
					
					this.contact = readString(dis);
					
					this.next_of_kin = readString(dis);
					
					this.next_of_kin_address = readString(dis);
					
					this.next_of_kin_phone = readString(dis);
					
					this.next_of_kin_relationship = readString(dis);
					
					this.date_of_registration = readDate(dis);
					
						this.archived = readInteger(dis);
					
			        this.active = dis.readBoolean();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.deceased = null;
           				} else {
           			    	this.deceased = dis.readBoolean();
           				}
					
					this.deceased_date_time = readDate(dis);
					
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_by = readString(dis);
					
					this.identifier = readString(dis);
					
					this.state_name = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.state_id = null;
           				} else {
           			    	this.state_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.district_id = null;
           				} else {
           			    	this.district_id = dis.readLong();
           				}
					
					this.district = readString(dis);
					
			        this.facility_id = dis.readLong();
					
					this.facility_name = readString(dis);
					
					this.contact_loop = readString(dis);
					
					this.education_loop = readString(dis);
					
					this.status_loop = readString(dis);
					
					this.employmentLoop = readString(dis);
					
					this.address_loop = readString(dis);
					
					this.phone_loop = readString(dis);
					
					this.orgunit_loop = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.marital_id = null;
           				} else {
           			    	this.marital_id = dis.readLong();
           				}
					
					this.marital_display = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.gender_id = null;
           				} else {
           			    	this.gender_id = dis.readLong();
           				}
					
					this.gender_display = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.education_id = null;
           				} else {
           			    	this.education_id = dis.readLong();
           				}
					
					this.education_display = readString(dis);
					
			        this.occupation_id = dis.readLong();
					
					this.occupation_display = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.relationshipid = null;
           				} else {
           			    	this.relationshipid = dis.readLong();
           				}
					
					this.sex = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.hospital_number,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.first_name,dos);
					
					// String
				
						writeString(this.surname,dos);
					
					// String
				
						writeString(this.other_name,dos);
					
					// String
				
						writeString(this.gender,dos);
					
					// java.util.Date
				
						writeDate(this.date_of_birth,dos);
					
					// Boolean
				
						if(this.is_date_of_birth_estimated == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_date_of_birth_estimated);
		            	}
					
					// String
				
						writeString(this.education,dos);
					
					// String
				
						writeString(this.marital_status,dos);
					
					// String
				
						writeString(this.employment_status,dos);
					
					// String
				
						writeString(this.address,dos);
					
					// String
				
						writeString(this.contact_point,dos);
					
					// String
				
						writeString(this.contact,dos);
					
					// String
				
						writeString(this.next_of_kin,dos);
					
					// String
				
						writeString(this.next_of_kin_address,dos);
					
					// String
				
						writeString(this.next_of_kin_phone,dos);
					
					// String
				
						writeString(this.next_of_kin_relationship,dos);
					
					// java.util.Date
				
						writeDate(this.date_of_registration,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.active);
					
					// Boolean
				
						if(this.deceased == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.deceased);
		            	}
					
					// java.util.Date
				
						writeDate(this.deceased_date_time,dos);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.identifier,dos);
					
					// String
				
						writeString(this.state_name,dos);
					
					// Long
				
						if(this.state_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.state_id);
		            	}
					
					// Long
				
						if(this.district_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.district_id);
		            	}
					
					// String
				
						writeString(this.district,dos);
					
					// long
				
		            	dos.writeLong(this.facility_id);
					
					// String
				
						writeString(this.facility_name,dos);
					
					// String
				
						writeString(this.contact_loop,dos);
					
					// String
				
						writeString(this.education_loop,dos);
					
					// String
				
						writeString(this.status_loop,dos);
					
					// String
				
						writeString(this.employmentLoop,dos);
					
					// String
				
						writeString(this.address_loop,dos);
					
					// String
				
						writeString(this.phone_loop,dos);
					
					// String
				
						writeString(this.orgunit_loop,dos);
					
					// Long
				
						if(this.marital_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.marital_id);
		            	}
					
					// String
				
						writeString(this.marital_display,dos);
					
					// Long
				
						if(this.gender_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.gender_id);
		            	}
					
					// String
				
						writeString(this.gender_display,dos);
					
					// Long
				
						if(this.education_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.education_id);
		            	}
					
					// String
				
						writeString(this.education_display,dos);
					
					// long
				
		            	dos.writeLong(this.occupation_id);
					
					// String
				
						writeString(this.occupation_display,dos);
					
					// Long
				
						if(this.relationshipid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.relationshipid);
		            	}
					
					// String
				
						writeString(this.sex,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",hospital_number="+hospital_number);
		sb.append(",uuid="+uuid);
		sb.append(",first_name="+first_name);
		sb.append(",surname="+surname);
		sb.append(",other_name="+other_name);
		sb.append(",gender="+gender);
		sb.append(",date_of_birth="+String.valueOf(date_of_birth));
		sb.append(",is_date_of_birth_estimated="+String.valueOf(is_date_of_birth_estimated));
		sb.append(",education="+education);
		sb.append(",marital_status="+marital_status);
		sb.append(",employment_status="+employment_status);
		sb.append(",address="+address);
		sb.append(",contact_point="+contact_point);
		sb.append(",contact="+contact);
		sb.append(",next_of_kin="+next_of_kin);
		sb.append(",next_of_kin_address="+next_of_kin_address);
		sb.append(",next_of_kin_phone="+next_of_kin_phone);
		sb.append(",next_of_kin_relationship="+next_of_kin_relationship);
		sb.append(",date_of_registration="+String.valueOf(date_of_registration));
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",active="+String.valueOf(active));
		sb.append(",deceased="+String.valueOf(deceased));
		sb.append(",deceased_date_time="+String.valueOf(deceased_date_time));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",identifier="+identifier);
		sb.append(",state_name="+state_name);
		sb.append(",state_id="+String.valueOf(state_id));
		sb.append(",district_id="+String.valueOf(district_id));
		sb.append(",district="+district);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",facility_name="+facility_name);
		sb.append(",contact_loop="+contact_loop);
		sb.append(",education_loop="+education_loop);
		sb.append(",status_loop="+status_loop);
		sb.append(",employmentLoop="+employmentLoop);
		sb.append(",address_loop="+address_loop);
		sb.append(",phone_loop="+phone_loop);
		sb.append(",orgunit_loop="+orgunit_loop);
		sb.append(",marital_id="+String.valueOf(marital_id));
		sb.append(",marital_display="+marital_display);
		sb.append(",gender_id="+String.valueOf(gender_id));
		sb.append(",gender_display="+gender_display);
		sb.append(",education_id="+String.valueOf(education_id));
		sb.append(",education_display="+education_display);
		sb.append(",occupation_id="+String.valueOf(occupation_id));
		sb.append(",occupation_display="+occupation_display);
		sb.append(",relationshipid="+String.valueOf(relationshipid));
		sb.append(",sex="+sex);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CreatJSON_FieldStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.gender_display, other.gender_display);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Patients_mappingStruct implements routines.system.IPersistableRow<Patients_mappingStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String hospital_num;

				public String getHospital_num () {
					return this.hospital_num;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String surname;

				public String getSurname () {
					return this.surname;
				}
				
			    public String other_names;

				public String getOther_names () {
					return this.other_names;
				}
				
			    public String gender;

				public String getGender () {
					return this.gender;
				}
				
			    public java.util.Date date_birth;

				public java.util.Date getDate_birth () {
					return this.date_birth;
				}
				
			    public Boolean dob_estimated;

				public Boolean getDob_estimated () {
					return this.dob_estimated;
				}
				
			    public String education;

				public String getEducation () {
					return this.education;
				}
				
			    public String marital_status;

				public String getMarital_status () {
					return this.marital_status;
				}
				
			    public String occupation;

				public String getOccupation () {
					return this.occupation;
				}
				
			    public String address;

				public String getAddress () {
					return this.address;
				}
				
			    public String phone;

				public String getPhone () {
					return this.phone;
				}
				
			    public String next_of_kin;

				public String getNext_of_kin () {
					return this.next_of_kin;
				}
				
			    public String next_of_kin_address;

				public String getNext_of_kin_address () {
					return this.next_of_kin_address;
				}
				
			    public String next_of_kin_phone;

				public String getNext_of_kin_phone () {
					return this.next_of_kin_phone;
				}
				
			    public String next_of_kin_relationship;

				public String getNext_of_kin_relationship () {
					return this.next_of_kin_relationship;
				}
				
			    public java.util.Date date_registration;

				public java.util.Date getDate_registration () {
					return this.date_registration;
				}
				
			    public Boolean archived;

				public Boolean getArchived () {
					return this.archived;
				}
				
			    public java.util.Date last_modified;

				public java.util.Date getLast_modified () {
					return this.last_modified;
				}
				
			    public Integer facility_id;

				public Integer getFacility_id () {
					return this.facility_id;
				}
				
			    public String facility_name;

				public String getFacility_name () {
					return this.facility_name;
				}
				
			    public String lga_name;

				public String getLga_name () {
					return this.lga_name;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.hospital_num = readString(dis);
					
					this.uuid = readString(dis);
					
					this.surname = readString(dis);
					
					this.other_names = readString(dis);
					
					this.gender = readString(dis);
					
					this.date_birth = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.dob_estimated = null;
           				} else {
           			    	this.dob_estimated = dis.readBoolean();
           				}
					
					this.education = readString(dis);
					
					this.marital_status = readString(dis);
					
					this.occupation = readString(dis);
					
					this.address = readString(dis);
					
					this.phone = readString(dis);
					
					this.next_of_kin = readString(dis);
					
					this.next_of_kin_address = readString(dis);
					
					this.next_of_kin_phone = readString(dis);
					
					this.next_of_kin_relationship = readString(dis);
					
					this.date_registration = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.archived = null;
           				} else {
           			    	this.archived = dis.readBoolean();
           				}
					
					this.last_modified = readDate(dis);
					
						this.facility_id = readInteger(dis);
					
					this.facility_name = readString(dis);
					
					this.lga_name = readString(dis);
					
					this.datim_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.hospital_num,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.surname,dos);
					
					// String
				
						writeString(this.other_names,dos);
					
					// String
				
						writeString(this.gender,dos);
					
					// java.util.Date
				
						writeDate(this.date_birth,dos);
					
					// Boolean
				
						if(this.dob_estimated == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.dob_estimated);
		            	}
					
					// String
				
						writeString(this.education,dos);
					
					// String
				
						writeString(this.marital_status,dos);
					
					// String
				
						writeString(this.occupation,dos);
					
					// String
				
						writeString(this.address,dos);
					
					// String
				
						writeString(this.phone,dos);
					
					// String
				
						writeString(this.next_of_kin,dos);
					
					// String
				
						writeString(this.next_of_kin_address,dos);
					
					// String
				
						writeString(this.next_of_kin_phone,dos);
					
					// String
				
						writeString(this.next_of_kin_relationship,dos);
					
					// java.util.Date
				
						writeDate(this.date_registration,dos);
					
					// Boolean
				
						if(this.archived == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.archived);
		            	}
					
					// java.util.Date
				
						writeDate(this.last_modified,dos);
					
					// Integer
				
						writeInteger(this.facility_id,dos);
					
					// String
				
						writeString(this.facility_name,dos);
					
					// String
				
						writeString(this.lga_name,dos);
					
					// String
				
						writeString(this.datim_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",hospital_num="+hospital_num);
		sb.append(",uuid="+uuid);
		sb.append(",surname="+surname);
		sb.append(",other_names="+other_names);
		sb.append(",gender="+gender);
		sb.append(",date_birth="+String.valueOf(date_birth));
		sb.append(",dob_estimated="+String.valueOf(dob_estimated));
		sb.append(",education="+education);
		sb.append(",marital_status="+marital_status);
		sb.append(",occupation="+occupation);
		sb.append(",address="+address);
		sb.append(",phone="+phone);
		sb.append(",next_of_kin="+next_of_kin);
		sb.append(",next_of_kin_address="+next_of_kin_address);
		sb.append(",next_of_kin_phone="+next_of_kin_phone);
		sb.append(",next_of_kin_relationship="+next_of_kin_relationship);
		sb.append(",date_registration="+String.valueOf(date_registration));
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",last_modified="+String.valueOf(last_modified));
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",facility_name="+facility_name);
		sb.append(",lga_name="+lga_name);
		sb.append(",datim_id="+datim_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Patients_mappingStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_17Struct implements routines.system.IPersistableRow<after_tDBInput_17Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String hospital_num;

				public String getHospital_num () {
					return this.hospital_num;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String surname;

				public String getSurname () {
					return this.surname;
				}
				
			    public String other_names;

				public String getOther_names () {
					return this.other_names;
				}
				
			    public String gender;

				public String getGender () {
					return this.gender;
				}
				
			    public java.util.Date date_birth;

				public java.util.Date getDate_birth () {
					return this.date_birth;
				}
				
			    public Boolean dob_estimated;

				public Boolean getDob_estimated () {
					return this.dob_estimated;
				}
				
			    public String education;

				public String getEducation () {
					return this.education;
				}
				
			    public String marital_status;

				public String getMarital_status () {
					return this.marital_status;
				}
				
			    public String occupation;

				public String getOccupation () {
					return this.occupation;
				}
				
			    public String address;

				public String getAddress () {
					return this.address;
				}
				
			    public String phone;

				public String getPhone () {
					return this.phone;
				}
				
			    public String next_of_kin;

				public String getNext_of_kin () {
					return this.next_of_kin;
				}
				
			    public String next_of_kin_address;

				public String getNext_of_kin_address () {
					return this.next_of_kin_address;
				}
				
			    public String next_of_kin_phone;

				public String getNext_of_kin_phone () {
					return this.next_of_kin_phone;
				}
				
			    public String next_of_kin_relationship;

				public String getNext_of_kin_relationship () {
					return this.next_of_kin_relationship;
				}
				
			    public java.util.Date date_registration;

				public java.util.Date getDate_registration () {
					return this.date_registration;
				}
				
			    public Boolean archived;

				public Boolean getArchived () {
					return this.archived;
				}
				
			    public java.util.Date last_modified;

				public java.util.Date getLast_modified () {
					return this.last_modified;
				}
				
			    public Integer facility_id;

				public Integer getFacility_id () {
					return this.facility_id;
				}
				
			    public String facility_name;

				public String getFacility_name () {
					return this.facility_name;
				}
				
			    public String lga_name;

				public String getLga_name () {
					return this.lga_name;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.hospital_num = readString(dis);
					
					this.uuid = readString(dis);
					
					this.surname = readString(dis);
					
					this.other_names = readString(dis);
					
					this.gender = readString(dis);
					
					this.date_birth = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.dob_estimated = null;
           				} else {
           			    	this.dob_estimated = dis.readBoolean();
           				}
					
					this.education = readString(dis);
					
					this.marital_status = readString(dis);
					
					this.occupation = readString(dis);
					
					this.address = readString(dis);
					
					this.phone = readString(dis);
					
					this.next_of_kin = readString(dis);
					
					this.next_of_kin_address = readString(dis);
					
					this.next_of_kin_phone = readString(dis);
					
					this.next_of_kin_relationship = readString(dis);
					
					this.date_registration = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.archived = null;
           				} else {
           			    	this.archived = dis.readBoolean();
           				}
					
					this.last_modified = readDate(dis);
					
						this.facility_id = readInteger(dis);
					
					this.facility_name = readString(dis);
					
					this.lga_name = readString(dis);
					
					this.datim_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.hospital_num,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.surname,dos);
					
					// String
				
						writeString(this.other_names,dos);
					
					// String
				
						writeString(this.gender,dos);
					
					// java.util.Date
				
						writeDate(this.date_birth,dos);
					
					// Boolean
				
						if(this.dob_estimated == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.dob_estimated);
		            	}
					
					// String
				
						writeString(this.education,dos);
					
					// String
				
						writeString(this.marital_status,dos);
					
					// String
				
						writeString(this.occupation,dos);
					
					// String
				
						writeString(this.address,dos);
					
					// String
				
						writeString(this.phone,dos);
					
					// String
				
						writeString(this.next_of_kin,dos);
					
					// String
				
						writeString(this.next_of_kin_address,dos);
					
					// String
				
						writeString(this.next_of_kin_phone,dos);
					
					// String
				
						writeString(this.next_of_kin_relationship,dos);
					
					// java.util.Date
				
						writeDate(this.date_registration,dos);
					
					// Boolean
				
						if(this.archived == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.archived);
		            	}
					
					// java.util.Date
				
						writeDate(this.last_modified,dos);
					
					// Integer
				
						writeInteger(this.facility_id,dos);
					
					// String
				
						writeString(this.facility_name,dos);
					
					// String
				
						writeString(this.lga_name,dos);
					
					// String
				
						writeString(this.datim_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",hospital_num="+hospital_num);
		sb.append(",uuid="+uuid);
		sb.append(",surname="+surname);
		sb.append(",other_names="+other_names);
		sb.append(",gender="+gender);
		sb.append(",date_birth="+String.valueOf(date_birth));
		sb.append(",dob_estimated="+String.valueOf(dob_estimated));
		sb.append(",education="+education);
		sb.append(",marital_status="+marital_status);
		sb.append(",occupation="+occupation);
		sb.append(",address="+address);
		sb.append(",phone="+phone);
		sb.append(",next_of_kin="+next_of_kin);
		sb.append(",next_of_kin_address="+next_of_kin_address);
		sb.append(",next_of_kin_phone="+next_of_kin_phone);
		sb.append(",next_of_kin_relationship="+next_of_kin_relationship);
		sb.append(",date_registration="+String.valueOf(date_registration));
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",last_modified="+String.valueOf(last_modified));
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",facility_name="+facility_name);
		sb.append(",lga_name="+lga_name);
		sb.append(",datim_id="+datim_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_18Process(globalMap);
		tDBInput_8Process(globalMap);
		tDBInput_10Process(globalMap);
		tDBInput_6Process(globalMap);
		tDBInput_2Process(globalMap);
		tDBInput_16Process(globalMap);
		tDBInput_4Process(globalMap);

		Patients_mappingStruct Patients_mapping = new Patients_mappingStruct();
CreatJSON_FieldStruct CreatJSON_Field = new CreatJSON_FieldStruct();





	
	/**
	 * [tWriteJSONField_5_Out begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_5_Out", false);
		start_Hash.put("tWriteJSONField_5_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_5";
	
	currentComponent="tWriteJSONField_5_Out";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"CreatJSON_Field");
					}
				
		int tos_count_tWriteJSONField_5_Out = 0;
		
//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_5_Out = 0;
				boolean needRoot_tWriteJSONField_5_Out  = true;
				
				String  strCompCache_tWriteJSONField_5_Out= null;		
				
						        java.util.Queue<Extract_fieldsStruct> listGroupby_tWriteJSONField_5_Out = new java.util.concurrent.ConcurrentLinkedQueue<Extract_fieldsStruct>();
							
	
					class ThreadXMLField_tWriteJSONField_5_Out extends Thread {
						
									    java.util.Queue<Extract_fieldsStruct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						java.lang.Error lastError;
						String currentComponent;
						
						ThreadXMLField_tWriteJSONField_5_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_tWriteJSONField_5_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_tWriteJSONField_5_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_tWriteJSONField_5_In", queue);
							globalMap.put("flows_tWriteJSONField_5_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						
						public java.lang.Error getLastError() {
							return this.lastError;
						}
						
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								tWriteJSONField_5_InProcess(globalMap);
							} catch (TalendException te) {
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							} catch (java.lang.Error error) {
								this.lastError = error;
							}
						}
					}
					
						ThreadXMLField_tWriteJSONField_5_Out txf_tWriteJSONField_5_Out = new ThreadXMLField_tWriteJSONField_5_Out(listGroupby_tWriteJSONField_5_Out);
					
					txf_tWriteJSONField_5_Out.start();
				

java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_5_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_tWriteJSONField_5_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_tWriteJSONField_5_Out = new java.util.HashMap<String,String>();

class NestXMLTool_tWriteJSONField_5_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
	
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_tWriteJSONField_5_Out nestXMLTool_tWriteJSONField_5_Out = new NestXMLTool_tWriteJSONField_5_Out();

CreatJSON_FieldStruct  rowStructOutput_tWriteJSONField_5_Out = new CreatJSON_FieldStruct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_5_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_tWriteJSONField_5_Out = null;
org.dom4j.Document doc_tWriteJSONField_5_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_tWriteJSONField_5_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_tWriteJSONField_5_Out.setNewLineAfterDeclaration(false);
format_tWriteJSONField_5_Out.setTrimText(false);
format_tWriteJSONField_5_Out.setEncoding("ISO-8859-15");
int[] orders_tWriteJSONField_5_Out = new int[4];

 



/**
 * [tWriteJSONField_5_Out begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Patients_mapping");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Lamisplus_orgunits_lookupStruct> tHash_Lookup_Lamisplus_orgunits_lookup = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Lamisplus_orgunits_lookupStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Lamisplus_orgunits_lookupStruct>) 
					globalMap.get( "tHash_Lookup_Lamisplus_orgunits_lookup" ))
					;					
					
	

Lamisplus_orgunits_lookupStruct Lamisplus_orgunits_lookupHashKey = new Lamisplus_orgunits_lookupStruct();
Lamisplus_orgunits_lookupStruct Lamisplus_orgunits_lookupDefault = new Lamisplus_orgunits_lookupStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<GenderStruct> tHash_Lookup_Gender = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<GenderStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<GenderStruct>) 
					globalMap.get( "tHash_Lookup_Gender" ))
					;					
					
	

GenderStruct GenderHashKey = new GenderStruct();
GenderStruct GenderDefault = new GenderStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<EmploymentStruct> tHash_Lookup_Employment = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<EmploymentStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<EmploymentStruct>) 
					globalMap.get( "tHash_Lookup_Employment" ))
					;					
					
	

EmploymentStruct EmploymentHashKey = new EmploymentStruct();
EmploymentStruct EmploymentDefault = new EmploymentStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Nextkin_relationshipStruct> tHash_Lookup_Nextkin_relationship = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Nextkin_relationshipStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Nextkin_relationshipStruct>) 
					globalMap.get( "tHash_Lookup_Nextkin_relationship" ))
					;					
					
	

Nextkin_relationshipStruct Nextkin_relationshipHashKey = new Nextkin_relationshipStruct();
Nextkin_relationshipStruct Nextkin_relationshipDefault = new Nextkin_relationshipStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<EducationStruct> tHash_Lookup_Education = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<EducationStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<EducationStruct>) 
					globalMap.get( "tHash_Lookup_Education" ))
					;					
					
	

EducationStruct EducationHashKey = new EducationStruct();
EducationStruct EducationDefault = new EducationStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Marital_statusStruct> tHash_Lookup_Marital_status = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Marital_statusStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Marital_statusStruct>) 
					globalMap.get( "tHash_Lookup_Marital_status" ))
					;					
					
	

Marital_statusStruct Marital_statusHashKey = new Marital_statusStruct();
Marital_statusStruct Marital_statusDefault = new Marital_statusStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Facilities_lookupStruct> tHash_Lookup_Facilities_lookup = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Facilities_lookupStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Facilities_lookupStruct>) 
					globalMap.get( "tHash_Lookup_Facilities_lookup" ))
					;					
					
	

Facilities_lookupStruct Facilities_lookupHashKey = new Facilities_lookupStruct();
Facilities_lookupStruct Facilities_lookupDefault = new Facilities_lookupStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
CreatJSON_FieldStruct CreatJSON_Field_tmp = new CreatJSON_FieldStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tDBInput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_17", false);
		start_Hash.put("tDBInput_17", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_17";

	
		int tos_count_tDBInput_17 = 0;
		
	
    
	
		    int nb_line_tDBInput_17 = 0;
		    java.sql.Connection conn_tDBInput_17 = null;
				String driverClass_tDBInput_17 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_17 = java.lang.Class.forName(driverClass_tDBInput_17);
				String dbUser_tDBInput_17 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_17 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_17 = decryptedPassword_tDBInput_17;
				
				String url_tDBInput_17 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_17 = java.sql.DriverManager.getConnection(url_tDBInput_17,dbUser_tDBInput_17,dbPwd_tDBInput_17);
		        
				conn_tDBInput_17.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_17 = conn_tDBInput_17.createStatement();

		    String dbquery_tDBInput_17 = "SELECT * FROM public.dblink\n('lamis',\n'SELECT DISTINCT ps.id,ps.hospital_num,ps.uuid,ps.surname,ps.other_names,ps.gen"
+"der,\n    ps.date_birth,ps.dob_estimated,ps.education,ps.marital_status,ps.occupation,\n    ps.address,ps.phone,ps.next_"
+"of_kin,ps.next_of_kin_address,ps.next_of_kin_phone,\n    ps.next_of_kin_relationship,ps.date_registration,ps.archived,ps"
+".last_modified,\n    ps.facility_id,fc.name AS facility_name,lg.name AS lga_name, nf.datim_id AS datim_id\n  FROM public"
+".patient ps\n  INNER JOIN facility fc\n  ON ps.facility_id=fc.id\n  INNER JOIN lga lg\n  ON fc.lga_id=lg.id\nINNER JOIN "
+"ndr_facility nf\n  ON nf.id=ps.facility_id\n'\n)\nAS DATA(id INTEGER,hospital_num VARCHAR,uuid VARCHAR,surname VARCHAR,o"
+"ther_names VARCHAR,\n    gender VARCHAR,date_birth DATE,dob_estimated BOOLEAN,education VARCHAR,\n    marital_status VAR"
+"CHAR,occupation VARCHAR,address VARCHAR,phone VARCHAR,\n    next_of_kin VARCHAR,next_of_kin_address VARCHAR,next_of_kin_"
+"phone VARCHAR,\n    next_of_kin_relationship VARCHAR,date_registration DATE,archived BOOLEAN,\n    last_modified DATE,fa"
+"cility_id INTEGER,facility_name VARCHAR,lga_name VARCHAR, datim_id VARCHAR)\nWHERE EXISTS(\n    SELECT f.id,f.name,oid.c"
+"ode\n    FROM base_organisation_unit f\n    JOIN base_organisation_unit_identifier oid\n    ON oid.organisation_unit_id "
+"= f.id\n    WHERE f.organisation_unit_level_id =4\n    AND oid.code=datim_id\n)";
			

            	globalMap.put("tDBInput_17_QUERY",dbquery_tDBInput_17);
		    java.sql.ResultSet rs_tDBInput_17 = null;

		    try {
		    	rs_tDBInput_17 = stmt_tDBInput_17.executeQuery(dbquery_tDBInput_17);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_17 = rs_tDBInput_17.getMetaData();
		    	int colQtyInRs_tDBInput_17 = rsmd_tDBInput_17.getColumnCount();

		    String tmpContent_tDBInput_17 = null;
		    
		    
		    while (rs_tDBInput_17.next()) {
		        nb_line_tDBInput_17++;
		        
							if(colQtyInRs_tDBInput_17 < 1) {
								Patients_mapping.id = null;
							} else {
		                          
            Patients_mapping.id = rs_tDBInput_17.getInt(1);
            if(rs_tDBInput_17.wasNull()){
                    Patients_mapping.id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_17 < 2) {
								Patients_mapping.hospital_num = null;
							} else {
	                         		
        	Patients_mapping.hospital_num = routines.system.JDBCUtil.getString(rs_tDBInput_17, 2, false);
		                    }
							if(colQtyInRs_tDBInput_17 < 3) {
								Patients_mapping.uuid = null;
							} else {
	                         		
        	Patients_mapping.uuid = routines.system.JDBCUtil.getString(rs_tDBInput_17, 3, false);
		                    }
							if(colQtyInRs_tDBInput_17 < 4) {
								Patients_mapping.surname = null;
							} else {
	                         		
        	Patients_mapping.surname = routines.system.JDBCUtil.getString(rs_tDBInput_17, 4, false);
		                    }
							if(colQtyInRs_tDBInput_17 < 5) {
								Patients_mapping.other_names = null;
							} else {
	                         		
        	Patients_mapping.other_names = routines.system.JDBCUtil.getString(rs_tDBInput_17, 5, false);
		                    }
							if(colQtyInRs_tDBInput_17 < 6) {
								Patients_mapping.gender = null;
							} else {
	                         		
        	Patients_mapping.gender = routines.system.JDBCUtil.getString(rs_tDBInput_17, 6, false);
		                    }
							if(colQtyInRs_tDBInput_17 < 7) {
								Patients_mapping.date_birth = null;
							} else {
										
			Patients_mapping.date_birth = routines.system.JDBCUtil.getDate(rs_tDBInput_17, 7);
		                    }
							if(colQtyInRs_tDBInput_17 < 8) {
								Patients_mapping.dob_estimated = null;
							} else {
	                         		
            Patients_mapping.dob_estimated = rs_tDBInput_17.getBoolean(8);
            if(rs_tDBInput_17.wasNull()){
                    Patients_mapping.dob_estimated = null;
            }
		                    }
							if(colQtyInRs_tDBInput_17 < 9) {
								Patients_mapping.education = null;
							} else {
	                         		
        	Patients_mapping.education = routines.system.JDBCUtil.getString(rs_tDBInput_17, 9, false);
		                    }
							if(colQtyInRs_tDBInput_17 < 10) {
								Patients_mapping.marital_status = null;
							} else {
	                         		
        	Patients_mapping.marital_status = routines.system.JDBCUtil.getString(rs_tDBInput_17, 10, false);
		                    }
							if(colQtyInRs_tDBInput_17 < 11) {
								Patients_mapping.occupation = null;
							} else {
	                         		
        	Patients_mapping.occupation = routines.system.JDBCUtil.getString(rs_tDBInput_17, 11, false);
		                    }
							if(colQtyInRs_tDBInput_17 < 12) {
								Patients_mapping.address = null;
							} else {
	                         		
        	Patients_mapping.address = routines.system.JDBCUtil.getString(rs_tDBInput_17, 12, false);
		                    }
							if(colQtyInRs_tDBInput_17 < 13) {
								Patients_mapping.phone = null;
							} else {
	                         		
        	Patients_mapping.phone = routines.system.JDBCUtil.getString(rs_tDBInput_17, 13, false);
		                    }
							if(colQtyInRs_tDBInput_17 < 14) {
								Patients_mapping.next_of_kin = null;
							} else {
	                         		
        	Patients_mapping.next_of_kin = routines.system.JDBCUtil.getString(rs_tDBInput_17, 14, false);
		                    }
							if(colQtyInRs_tDBInput_17 < 15) {
								Patients_mapping.next_of_kin_address = null;
							} else {
	                         		
        	Patients_mapping.next_of_kin_address = routines.system.JDBCUtil.getString(rs_tDBInput_17, 15, false);
		                    }
							if(colQtyInRs_tDBInput_17 < 16) {
								Patients_mapping.next_of_kin_phone = null;
							} else {
	                         		
        	Patients_mapping.next_of_kin_phone = routines.system.JDBCUtil.getString(rs_tDBInput_17, 16, false);
		                    }
							if(colQtyInRs_tDBInput_17 < 17) {
								Patients_mapping.next_of_kin_relationship = null;
							} else {
	                         		
        	Patients_mapping.next_of_kin_relationship = routines.system.JDBCUtil.getString(rs_tDBInput_17, 17, false);
		                    }
							if(colQtyInRs_tDBInput_17 < 18) {
								Patients_mapping.date_registration = null;
							} else {
										
			Patients_mapping.date_registration = routines.system.JDBCUtil.getDate(rs_tDBInput_17, 18);
		                    }
							if(colQtyInRs_tDBInput_17 < 19) {
								Patients_mapping.archived = null;
							} else {
	                         		
            Patients_mapping.archived = rs_tDBInput_17.getBoolean(19);
            if(rs_tDBInput_17.wasNull()){
                    Patients_mapping.archived = null;
            }
		                    }
							if(colQtyInRs_tDBInput_17 < 20) {
								Patients_mapping.last_modified = null;
							} else {
										
			Patients_mapping.last_modified = routines.system.JDBCUtil.getDate(rs_tDBInput_17, 20);
		                    }
							if(colQtyInRs_tDBInput_17 < 21) {
								Patients_mapping.facility_id = null;
							} else {
		                          
            Patients_mapping.facility_id = rs_tDBInput_17.getInt(21);
            if(rs_tDBInput_17.wasNull()){
                    Patients_mapping.facility_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_17 < 22) {
								Patients_mapping.facility_name = null;
							} else {
	                         		
        	Patients_mapping.facility_name = routines.system.JDBCUtil.getString(rs_tDBInput_17, 22, false);
		                    }
							if(colQtyInRs_tDBInput_17 < 23) {
								Patients_mapping.lga_name = null;
							} else {
	                         		
        	Patients_mapping.lga_name = routines.system.JDBCUtil.getString(rs_tDBInput_17, 23, false);
		                    }
							if(colQtyInRs_tDBInput_17 < 24) {
								Patients_mapping.datim_id = null;
							} else {
	                         		
        	Patients_mapping.datim_id = routines.system.JDBCUtil.getString(rs_tDBInput_17, 24, false);
		                    }
					


 



/**
 * [tDBInput_17 begin ] stop
 */
	
	/**
	 * [tDBInput_17 main ] start
	 */

	

	
	
	currentComponent="tDBInput_17";

	

 


	tos_count_tDBInput_17++;

/**
 * [tDBInput_17 main ] stop
 */
	
	/**
	 * [tDBInput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_17";

	

 



/**
 * [tDBInput_17 process_data_begin ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Patients_mapping");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "Lamisplus_orgunits_lookup" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopLamisplus_orgunits_lookup = false;
       		  	    	
       		  	    	
 							Lamisplus_orgunits_lookupStruct Lamisplus_orgunits_lookupObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
	                        		    	Object exprKeyValue_Lamisplus_orgunits_lookup__patient_id = Patients_mapping.id ;
	                        		    	if(exprKeyValue_Lamisplus_orgunits_lookup__patient_id == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_6 = true;
	                        		    	} else {
                        		    			Lamisplus_orgunits_lookupHashKey.patient_id = (int)(Integer) exprKeyValue_Lamisplus_orgunits_lookup__patient_id;
                        		    		}
                        		    		

								
		                        	Lamisplus_orgunits_lookupHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_6) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_Lamisplus_orgunits_lookup.lookup( Lamisplus_orgunits_lookupHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_Lamisplus_orgunits_lookup != null && tHash_Lookup_Lamisplus_orgunits_lookup.getCount(Lamisplus_orgunits_lookupHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'Lamisplus_orgunits_lookup' and it contains more one result from keys :  Lamisplus_orgunits_lookup.patient_id = '" + Lamisplus_orgunits_lookupHashKey.patient_id + "'");
								} // G 071
							

							Lamisplus_orgunits_lookupStruct Lamisplus_orgunits_lookup = null;
                    		  	 
							   
                    		  	 
	       		  	    	Lamisplus_orgunits_lookupStruct fromLookup_Lamisplus_orgunits_lookup = null;
							Lamisplus_orgunits_lookup = Lamisplus_orgunits_lookupDefault;
										 
							
								 
							
							
								if (tHash_Lookup_Lamisplus_orgunits_lookup !=null && tHash_Lookup_Lamisplus_orgunits_lookup.hasNext()) { // G 099
								
							
								
								fromLookup_Lamisplus_orgunits_lookup = tHash_Lookup_Lamisplus_orgunits_lookup.next();

							
							
								} // G 099
							
							

							if(fromLookup_Lamisplus_orgunits_lookup != null) {
								Lamisplus_orgunits_lookup = fromLookup_Lamisplus_orgunits_lookup;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "Gender" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopGender = false;
       		  	    	
       		  	    	
 							GenderStruct GenderObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    GenderHashKey.person_uuid = Patients_mapping.uuid ;
                        		    		

								
		                        	GenderHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_Gender.lookup( GenderHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_Gender != null && tHash_Lookup_Gender.getCount(GenderHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'Gender' and it contains more one result from keys :  Gender.person_uuid = '" + GenderHashKey.person_uuid + "'");
								} // G 071
							

							GenderStruct Gender = null;
                    		  	 
							   
                    		  	 
	       		  	    	GenderStruct fromLookup_Gender = null;
							Gender = GenderDefault;
										 
							
								 
							
							
								if (tHash_Lookup_Gender !=null && tHash_Lookup_Gender.hasNext()) { // G 099
								
							
								
								fromLookup_Gender = tHash_Lookup_Gender.next();

							
							
								} // G 099
							
							

							if(fromLookup_Gender != null) {
								Gender = fromLookup_Gender;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "Employment" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopEmployment = false;
       		  	    	
       		  	    	
 							EmploymentStruct EmploymentObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    EmploymentHashKey.person_uuid = Patients_mapping.uuid ;
                        		    		

								
		                        	EmploymentHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_Employment.lookup( EmploymentHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_Employment != null && tHash_Lookup_Employment.getCount(EmploymentHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'Employment' and it contains more one result from keys :  Employment.person_uuid = '" + EmploymentHashKey.person_uuid + "'");
								} // G 071
							

							EmploymentStruct Employment = null;
                    		  	 
							   
                    		  	 
	       		  	    	EmploymentStruct fromLookup_Employment = null;
							Employment = EmploymentDefault;
										 
							
								 
							
							
								if (tHash_Lookup_Employment !=null && tHash_Lookup_Employment.hasNext()) { // G 099
								
							
								
								fromLookup_Employment = tHash_Lookup_Employment.next();

							
							
								} // G 099
							
							

							if(fromLookup_Employment != null) {
								Employment = fromLookup_Employment;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "Nextkin_relationship" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopNextkin_relationship = false;
       		  	    	
       		  	    	
 							Nextkin_relationshipStruct Nextkin_relationshipObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    Nextkin_relationshipHashKey.person_uuid = Patients_mapping.uuid ;
                        		    		

								
		                        	Nextkin_relationshipHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_Nextkin_relationship.lookup( Nextkin_relationshipHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_Nextkin_relationship != null && tHash_Lookup_Nextkin_relationship.getCount(Nextkin_relationshipHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'Nextkin_relationship' and it contains more one result from keys :  Nextkin_relationship.person_uuid = '" + Nextkin_relationshipHashKey.person_uuid + "'");
								} // G 071
							

							Nextkin_relationshipStruct Nextkin_relationship = null;
                    		  	 
							   
                    		  	 
	       		  	    	Nextkin_relationshipStruct fromLookup_Nextkin_relationship = null;
							Nextkin_relationship = Nextkin_relationshipDefault;
										 
							
								 
							
							
								if (tHash_Lookup_Nextkin_relationship !=null && tHash_Lookup_Nextkin_relationship.hasNext()) { // G 099
								
							
								
								fromLookup_Nextkin_relationship = tHash_Lookup_Nextkin_relationship.next();

							
							
								} // G 099
							
							

							if(fromLookup_Nextkin_relationship != null) {
								Nextkin_relationship = fromLookup_Nextkin_relationship;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "Education" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopEducation = false;
       		  	    	
       		  	    	
 							EducationStruct EducationObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    EducationHashKey.person_uuid = Patients_mapping.uuid ;
                        		    		

								
		                        	EducationHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_Education.lookup( EducationHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_Education != null && tHash_Lookup_Education.getCount(EducationHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'Education' and it contains more one result from keys :  Education.person_uuid = '" + EducationHashKey.person_uuid + "'");
								} // G 071
							

							EducationStruct Education = null;
                    		  	 
							   
                    		  	 
	       		  	    	EducationStruct fromLookup_Education = null;
							Education = EducationDefault;
										 
							
								 
							
							
								if (tHash_Lookup_Education !=null && tHash_Lookup_Education.hasNext()) { // G 099
								
							
								
								fromLookup_Education = tHash_Lookup_Education.next();

							
							
								} // G 099
							
							

							if(fromLookup_Education != null) {
								Education = fromLookup_Education;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "Marital_status" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopMarital_status = false;
       		  	    	
       		  	    	
 							Marital_statusStruct Marital_statusObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    Marital_statusHashKey.person_uuid = Patients_mapping.uuid ;
                        		    		

								
		                        	Marital_statusHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_Marital_status.lookup( Marital_statusHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_Marital_status != null && tHash_Lookup_Marital_status.getCount(Marital_statusHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'Marital_status' and it contains more one result from keys :  Marital_status.person_uuid = '" + Marital_statusHashKey.person_uuid + "'");
								} // G 071
							

							Marital_statusStruct Marital_status = null;
                    		  	 
							   
                    		  	 
	       		  	    	Marital_statusStruct fromLookup_Marital_status = null;
							Marital_status = Marital_statusDefault;
										 
							
								 
							
							
								if (tHash_Lookup_Marital_status !=null && tHash_Lookup_Marital_status.hasNext()) { // G 099
								
							
								
								fromLookup_Marital_status = tHash_Lookup_Marital_status.next();

							
							
								} // G 099
							
							

							if(fromLookup_Marital_status != null) {
								Marital_status = fromLookup_Marital_status;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "Facilities_lookup" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopFacilities_lookup = false;
       		  	    	
       		  	    	
 							Facilities_lookupStruct Facilities_lookupObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    Facilities_lookupHashKey.datim_code = Patients_mapping.datim_id ;
                        		    		

								
		                        	Facilities_lookupHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_Facilities_lookup.lookup( Facilities_lookupHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_Facilities_lookup != null && tHash_Lookup_Facilities_lookup.getCount(Facilities_lookupHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'Facilities_lookup' and it contains more one result from keys :  Facilities_lookup.datim_code = '" + Facilities_lookupHashKey.datim_code + "'");
								} // G 071
							

							Facilities_lookupStruct Facilities_lookup = null;
                    		  	 
							   
                    		  	 
	       		  	    	Facilities_lookupStruct fromLookup_Facilities_lookup = null;
							Facilities_lookup = Facilities_lookupDefault;
										 
							
								 
							
							
								if (tHash_Lookup_Facilities_lookup !=null && tHash_Lookup_Facilities_lookup.hasNext()) { // G 099
								
							
								
								fromLookup_Facilities_lookup = tHash_Lookup_Facilities_lookup.next();

							
							
								} // G 099
							
							

							if(fromLookup_Facilities_lookup != null) {
								Facilities_lookup = fromLookup_Facilities_lookup;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

CreatJSON_Field = null;


// # Output table : 'CreatJSON_Field'
CreatJSON_Field_tmp.id = Patients_mapping.id ;
CreatJSON_Field_tmp.hospital_number = Patients_mapping.hospital_num ;
CreatJSON_Field_tmp.uuid = Patients_mapping.uuid ;
CreatJSON_Field_tmp.first_name = (Patients_mapping.other_names==null)||("".equals(Patients_mapping.other_names))?null:Patients_mapping.other_names ;
CreatJSON_Field_tmp.surname = Patients_mapping.surname ;
CreatJSON_Field_tmp.other_name = ("".equals(Patients_mapping.other_names))?null:Patients_mapping.other_names ;
CreatJSON_Field_tmp.gender = Patients_mapping.gender ;
CreatJSON_Field_tmp.date_of_birth = Patients_mapping.date_birth ;
CreatJSON_Field_tmp.is_date_of_birth_estimated = Patients_mapping.dob_estimated ;
CreatJSON_Field_tmp.education = Patients_mapping.education ;
CreatJSON_Field_tmp.marital_status = Patients_mapping.marital_status ;
CreatJSON_Field_tmp.employment_status = Patients_mapping.occupation ;
CreatJSON_Field_tmp.address = Patients_mapping.address ;
CreatJSON_Field_tmp.contact_point = Patients_mapping.phone ;
CreatJSON_Field_tmp.contact = null;
CreatJSON_Field_tmp.next_of_kin = Patients_mapping.next_of_kin ;
CreatJSON_Field_tmp.next_of_kin_address = Patients_mapping.next_of_kin_address ;
CreatJSON_Field_tmp.next_of_kin_phone = (Patients_mapping.next_of_kin_phone == null) || ("".equals(Patients_mapping.next_of_kin_phone))? "None":Patients_mapping.next_of_kin_phone ;
CreatJSON_Field_tmp.next_of_kin_relationship = Patients_mapping.next_of_kin_relationship ;
CreatJSON_Field_tmp.date_of_registration = Patients_mapping.date_registration ;
CreatJSON_Field_tmp.archived = Patients_mapping.archived?1:0 ;
CreatJSON_Field_tmp.active = true;
CreatJSON_Field_tmp.deceased = true;
CreatJSON_Field_tmp.deceased_date_time = null;
CreatJSON_Field_tmp.created_date = Patients_mapping.last_modified ;
CreatJSON_Field_tmp.last_modified_date = Patients_mapping.last_modified ;
CreatJSON_Field_tmp.created_by = "Lamis data migration system";
CreatJSON_Field_tmp.last_modified_by = "Lamis data migration system";
CreatJSON_Field_tmp.identifier = null;
CreatJSON_Field_tmp.state_name = Lamisplus_orgunits_lookup.state_name ;
CreatJSON_Field_tmp.state_id = Lamisplus_orgunits_lookup.state_id ;
CreatJSON_Field_tmp.district_id = Lamisplus_orgunits_lookup.district_id ;
CreatJSON_Field_tmp.district = Lamisplus_orgunits_lookup.district ;
CreatJSON_Field_tmp.facility_id = Facilities_lookup.id ;
CreatJSON_Field_tmp.facility_name = Facilities_lookup.name ;
CreatJSON_Field_tmp.contact_loop = "loop";
CreatJSON_Field_tmp.education_loop = "loop";
CreatJSON_Field_tmp.status_loop = "loop";
CreatJSON_Field_tmp.employmentLoop = "loop";
CreatJSON_Field_tmp.address_loop = "loop";
CreatJSON_Field_tmp.phone_loop = "loop";
CreatJSON_Field_tmp.orgunit_loop = "loop";
CreatJSON_Field_tmp.marital_id = Marital_status.id ;
CreatJSON_Field_tmp.marital_display = Marital_status.display ;
CreatJSON_Field_tmp.gender_id = Gender.id ;
CreatJSON_Field_tmp.gender_display = (Gender.display==null)?null: Gender.display ;
CreatJSON_Field_tmp.education_id = Education.id ;
CreatJSON_Field_tmp.education_display = Education.display ;
CreatJSON_Field_tmp.occupation_id = Employment.occupation_id ;
CreatJSON_Field_tmp.occupation_display = Employment.occupation_display ;
CreatJSON_Field_tmp.relationshipid = Nextkin_relationship.relationshipid ;
CreatJSON_Field_tmp.sex = Gender.sex ;
CreatJSON_Field = CreatJSON_Field_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "CreatJSON_Field"
if(CreatJSON_Field != null) { 



	
	/**
	 * [tWriteJSONField_5_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_5";
	
	currentComponent="tWriteJSONField_5_Out";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"CreatJSON_Field");
					}
					

	if(txf_tWriteJSONField_5_Out.getLastException()!=null) {
		currentComponent = txf_tWriteJSONField_5_Out.getCurrentComponent();
		throw txf_tWriteJSONField_5_Out.getLastException();
	}
	
	if(txf_tWriteJSONField_5_Out.getLastError()!=null) {
		throw txf_tWriteJSONField_5_Out.getLastError();
	}
	nb_line_tWriteJSONField_5_Out++;
	valueMap_tWriteJSONField_5_Out.clear();
	arraysValueMap_tWriteJSONField_5_Out.clear();
	valueMap_tWriteJSONField_5_Out.put("id",
	(
            String.valueOf(CreatJSON_Field.id)
		));
	arraysValueMap_tWriteJSONField_5_Out.put("id",
	(
            String.valueOf(CreatJSON_Field.id)
		));
	valueMap_tWriteJSONField_5_Out.put("hospital_number",
	(
            CreatJSON_Field.hospital_number.toString()
		));
	arraysValueMap_tWriteJSONField_5_Out.put("hospital_number",
	(
            CreatJSON_Field.hospital_number.toString()
		));
	valueMap_tWriteJSONField_5_Out.put("uuid",
	(
		CreatJSON_Field.uuid != null?
            CreatJSON_Field.uuid.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("uuid",
	(
		CreatJSON_Field.uuid != null?
            CreatJSON_Field.uuid.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("first_name",
	(
		CreatJSON_Field.first_name != null?
            CreatJSON_Field.first_name.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("first_name",
	(
		CreatJSON_Field.first_name != null?
            CreatJSON_Field.first_name.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("surname",
	(
		CreatJSON_Field.surname != null?
            CreatJSON_Field.surname.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("surname",
	(
		CreatJSON_Field.surname != null?
            CreatJSON_Field.surname.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("other_name",
	(
		CreatJSON_Field.other_name != null?
            CreatJSON_Field.other_name.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("other_name",
	(
		CreatJSON_Field.other_name != null?
            CreatJSON_Field.other_name.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("gender",
	(
		CreatJSON_Field.gender != null?
            CreatJSON_Field.gender.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("gender",
	(
		CreatJSON_Field.gender != null?
            CreatJSON_Field.gender.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("date_of_birth",
	(
		CreatJSON_Field.date_of_birth != null?
            FormatterUtils.format_Date(CreatJSON_Field.date_of_birth,"yyyy-MM-dd"):null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("date_of_birth",
	(
		CreatJSON_Field.date_of_birth != null?
            FormatterUtils.format_Date(CreatJSON_Field.date_of_birth,"yyyy-MM-dd"):null
		));
	valueMap_tWriteJSONField_5_Out.put("is_date_of_birth_estimated",
	(
		CreatJSON_Field.is_date_of_birth_estimated != null?
            CreatJSON_Field.is_date_of_birth_estimated.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("is_date_of_birth_estimated",
	(
		CreatJSON_Field.is_date_of_birth_estimated != null?
            CreatJSON_Field.is_date_of_birth_estimated.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("education",
	(
		CreatJSON_Field.education != null?
            CreatJSON_Field.education.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("education",
	(
		CreatJSON_Field.education != null?
            CreatJSON_Field.education.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("marital_status",
	(
		CreatJSON_Field.marital_status != null?
            CreatJSON_Field.marital_status.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("marital_status",
	(
		CreatJSON_Field.marital_status != null?
            CreatJSON_Field.marital_status.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("employment_status",
	(
		CreatJSON_Field.employment_status != null?
            CreatJSON_Field.employment_status.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("employment_status",
	(
		CreatJSON_Field.employment_status != null?
            CreatJSON_Field.employment_status.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("address",
	(
		CreatJSON_Field.address != null?
            CreatJSON_Field.address.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("address",
	(
		CreatJSON_Field.address != null?
            CreatJSON_Field.address.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("contact_point",
	(
		CreatJSON_Field.contact_point != null?
            CreatJSON_Field.contact_point.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("contact_point",
	(
		CreatJSON_Field.contact_point != null?
            CreatJSON_Field.contact_point.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("contact",
	(
		CreatJSON_Field.contact != null?
            CreatJSON_Field.contact.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("contact",
	(
		CreatJSON_Field.contact != null?
            CreatJSON_Field.contact.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("next_of_kin",
	(
		CreatJSON_Field.next_of_kin != null?
            CreatJSON_Field.next_of_kin.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("next_of_kin",
	(
		CreatJSON_Field.next_of_kin != null?
            CreatJSON_Field.next_of_kin.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("next_of_kin_address",
	(
		CreatJSON_Field.next_of_kin_address != null?
            CreatJSON_Field.next_of_kin_address.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("next_of_kin_address",
	(
		CreatJSON_Field.next_of_kin_address != null?
            CreatJSON_Field.next_of_kin_address.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("next_of_kin_phone",
	(
		CreatJSON_Field.next_of_kin_phone != null?
            CreatJSON_Field.next_of_kin_phone.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("next_of_kin_phone",
	(
		CreatJSON_Field.next_of_kin_phone != null?
            CreatJSON_Field.next_of_kin_phone.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("next_of_kin_relationship",
	(
		CreatJSON_Field.next_of_kin_relationship != null?
            CreatJSON_Field.next_of_kin_relationship.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("next_of_kin_relationship",
	(
		CreatJSON_Field.next_of_kin_relationship != null?
            CreatJSON_Field.next_of_kin_relationship.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("date_of_registration",
	(
            FormatterUtils.format_Date(CreatJSON_Field.date_of_registration,"yyyy-MM-dd")
		));
	arraysValueMap_tWriteJSONField_5_Out.put("date_of_registration",
	(
            FormatterUtils.format_Date(CreatJSON_Field.date_of_registration,"yyyy-MM-dd")
		));
	valueMap_tWriteJSONField_5_Out.put("archived",
	(
		CreatJSON_Field.archived != null?
            CreatJSON_Field.archived.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("archived",
	(
		CreatJSON_Field.archived != null?
            CreatJSON_Field.archived.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("active",
	(
            String.valueOf(CreatJSON_Field.active)
		));
	arraysValueMap_tWriteJSONField_5_Out.put("active",
	(
            String.valueOf(CreatJSON_Field.active)
		));
	valueMap_tWriteJSONField_5_Out.put("deceased",
	(
		CreatJSON_Field.deceased != null?
            CreatJSON_Field.deceased.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("deceased",
	(
		CreatJSON_Field.deceased != null?
            CreatJSON_Field.deceased.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("deceased_date_time",
	(
		CreatJSON_Field.deceased_date_time != null?
            FormatterUtils.format_Date(CreatJSON_Field.deceased_date_time,"yyyy-MM-dd HH:mm:ss"):null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("deceased_date_time",
	(
		CreatJSON_Field.deceased_date_time != null?
            FormatterUtils.format_Date(CreatJSON_Field.deceased_date_time,"yyyy-MM-dd HH:mm:ss"):null
		));
	valueMap_tWriteJSONField_5_Out.put("created_date",
	(
		CreatJSON_Field.created_date != null?
            FormatterUtils.format_Date(CreatJSON_Field.created_date,"yyyy-MM-dd HH:mm:ss"):null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("created_date",
	(
		CreatJSON_Field.created_date != null?
            FormatterUtils.format_Date(CreatJSON_Field.created_date,"yyyy-MM-dd HH:mm:ss"):null
		));
	valueMap_tWriteJSONField_5_Out.put("last_modified_date",
	(
		CreatJSON_Field.last_modified_date != null?
            FormatterUtils.format_Date(CreatJSON_Field.last_modified_date,"yyyy-MM-dd HH:mm:ss"):null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("last_modified_date",
	(
		CreatJSON_Field.last_modified_date != null?
            FormatterUtils.format_Date(CreatJSON_Field.last_modified_date,"yyyy-MM-dd HH:mm:ss"):null
		));
	valueMap_tWriteJSONField_5_Out.put("created_by",
	(
		CreatJSON_Field.created_by != null?
            CreatJSON_Field.created_by.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("created_by",
	(
		CreatJSON_Field.created_by != null?
            CreatJSON_Field.created_by.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("last_modified_by",
	(
		CreatJSON_Field.last_modified_by != null?
            CreatJSON_Field.last_modified_by.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("last_modified_by",
	(
		CreatJSON_Field.last_modified_by != null?
            CreatJSON_Field.last_modified_by.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("identifier",
	(
		CreatJSON_Field.identifier != null?
            CreatJSON_Field.identifier.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("identifier",
	(
		CreatJSON_Field.identifier != null?
            CreatJSON_Field.identifier.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("state_name",
	(
		CreatJSON_Field.state_name != null?
            CreatJSON_Field.state_name.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("state_name",
	(
		CreatJSON_Field.state_name != null?
            CreatJSON_Field.state_name.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("state_id",
	(
		CreatJSON_Field.state_id != null?
            CreatJSON_Field.state_id.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("state_id",
	(
		CreatJSON_Field.state_id != null?
            CreatJSON_Field.state_id.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("district_id",
	(
		CreatJSON_Field.district_id != null?
            CreatJSON_Field.district_id.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("district_id",
	(
		CreatJSON_Field.district_id != null?
            CreatJSON_Field.district_id.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("district",
	(
		CreatJSON_Field.district != null?
            CreatJSON_Field.district.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("district",
	(
		CreatJSON_Field.district != null?
            CreatJSON_Field.district.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("facility_id",
	(
            String.valueOf(CreatJSON_Field.facility_id)
		));
	arraysValueMap_tWriteJSONField_5_Out.put("facility_id",
	(
            String.valueOf(CreatJSON_Field.facility_id)
		));
	valueMap_tWriteJSONField_5_Out.put("facility_name",
	(
		CreatJSON_Field.facility_name != null?
            CreatJSON_Field.facility_name.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("facility_name",
	(
		CreatJSON_Field.facility_name != null?
            CreatJSON_Field.facility_name.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("contact_loop",
	(
		CreatJSON_Field.contact_loop != null?
            CreatJSON_Field.contact_loop.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("contact_loop",
	(
		CreatJSON_Field.contact_loop != null?
            CreatJSON_Field.contact_loop.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("education_loop",
	(
		CreatJSON_Field.education_loop != null?
            CreatJSON_Field.education_loop.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("education_loop",
	(
		CreatJSON_Field.education_loop != null?
            CreatJSON_Field.education_loop.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("status_loop",
	(
		CreatJSON_Field.status_loop != null?
            CreatJSON_Field.status_loop.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("status_loop",
	(
		CreatJSON_Field.status_loop != null?
            CreatJSON_Field.status_loop.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("employmentLoop",
	(
		CreatJSON_Field.employmentLoop != null?
            CreatJSON_Field.employmentLoop.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("employmentLoop",
	(
		CreatJSON_Field.employmentLoop != null?
            CreatJSON_Field.employmentLoop.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("address_loop",
	(
		CreatJSON_Field.address_loop != null?
            CreatJSON_Field.address_loop.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("address_loop",
	(
		CreatJSON_Field.address_loop != null?
            CreatJSON_Field.address_loop.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("phone_loop",
	(
		CreatJSON_Field.phone_loop != null?
            CreatJSON_Field.phone_loop.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("phone_loop",
	(
		CreatJSON_Field.phone_loop != null?
            CreatJSON_Field.phone_loop.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("orgunit_loop",
	(
		CreatJSON_Field.orgunit_loop != null?
            CreatJSON_Field.orgunit_loop.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("orgunit_loop",
	(
		CreatJSON_Field.orgunit_loop != null?
            CreatJSON_Field.orgunit_loop.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("marital_id",
	(
		CreatJSON_Field.marital_id != null?
            CreatJSON_Field.marital_id.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("marital_id",
	(
		CreatJSON_Field.marital_id != null?
            CreatJSON_Field.marital_id.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("marital_display",
	(
		CreatJSON_Field.marital_display != null?
            CreatJSON_Field.marital_display.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("marital_display",
	(
		CreatJSON_Field.marital_display != null?
            CreatJSON_Field.marital_display.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("gender_id",
	(
		CreatJSON_Field.gender_id != null?
            CreatJSON_Field.gender_id.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("gender_id",
	(
		CreatJSON_Field.gender_id != null?
            CreatJSON_Field.gender_id.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("gender_display",
	(
		CreatJSON_Field.gender_display != null?
            CreatJSON_Field.gender_display.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("gender_display",
	(
		CreatJSON_Field.gender_display != null?
            CreatJSON_Field.gender_display.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("education_id",
	(
		CreatJSON_Field.education_id != null?
            CreatJSON_Field.education_id.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("education_id",
	(
		CreatJSON_Field.education_id != null?
            CreatJSON_Field.education_id.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("education_display",
	(
		CreatJSON_Field.education_display != null?
            CreatJSON_Field.education_display.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("education_display",
	(
		CreatJSON_Field.education_display != null?
            CreatJSON_Field.education_display.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("occupation_id",
	(
            String.valueOf(CreatJSON_Field.occupation_id)
		));
	arraysValueMap_tWriteJSONField_5_Out.put("occupation_id",
	(
            String.valueOf(CreatJSON_Field.occupation_id)
		));
	valueMap_tWriteJSONField_5_Out.put("occupation_display",
	(
		CreatJSON_Field.occupation_display != null?
            CreatJSON_Field.occupation_display.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("occupation_display",
	(
		CreatJSON_Field.occupation_display != null?
            CreatJSON_Field.occupation_display.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("relationshipid",
	(
		CreatJSON_Field.relationshipid != null?
            CreatJSON_Field.relationshipid.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("relationshipid",
	(
		CreatJSON_Field.relationshipid != null?
            CreatJSON_Field.relationshipid.toString():null
		));
	valueMap_tWriteJSONField_5_Out.put("sex",
	(
		CreatJSON_Field.sex != null?
            CreatJSON_Field.sex.toString():null
		));
	arraysValueMap_tWriteJSONField_5_Out.put("sex",
	(
		CreatJSON_Field.sex != null?
            CreatJSON_Field.sex.toString():null
		));
		String strTemp_tWriteJSONField_5_Out = "";		strTemp_tWriteJSONField_5_Out = strTemp_tWriteJSONField_5_Out + valueMap_tWriteJSONField_5_Out.get("address_loop")
							+ valueMap_tWriteJSONField_5_Out.get("address_loop").length();
	if(strCompCache_tWriteJSONField_5_Out==null){
		strCompCache_tWriteJSONField_5_Out=strTemp_tWriteJSONField_5_Out;
		
	}else{
		//the data read is different from the data read last time. 
		if(!strCompCache_tWriteJSONField_5_Out.equals(strTemp_tWriteJSONField_5_Out)){	  
    		nestXMLTool_tWriteJSONField_5_Out.replaceDefaultNameSpace(doc_tWriteJSONField_5_Out.getRootElement());			
			java.io.StringWriter strWriter_tWriteJSONField_5_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_tWriteJSONField_5_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_5_Out, format_tWriteJSONField_5_Out);
			output_tWriteJSONField_5_Out.write(doc_tWriteJSONField_5_Out);
		    output_tWriteJSONField_5_Out.close();
			
				  		  Extract_fieldsStruct row_tWriteJSONField_5_Out = new Extract_fieldsStruct();
						  
					     		row_tWriteJSONField_5_Out.address = strWriter_tWriteJSONField_5_Out.toString();
					     		listGroupby_tWriteJSONField_5_Out.add(row_tWriteJSONField_5_Out);
					
		    doc_tWriteJSONField_5_Out.clearContent();
			needRoot_tWriteJSONField_5_Out = true;
			for(int i_tWriteJSONField_5_Out=0;i_tWriteJSONField_5_Out<orders_tWriteJSONField_5_Out.length;i_tWriteJSONField_5_Out++){
				orders_tWriteJSONField_5_Out[i_tWriteJSONField_5_Out] = 0;
			}
			
			if(groupbyList_tWriteJSONField_5_Out != null && groupbyList_tWriteJSONField_5_Out.size() >= 0){
				groupbyList_tWriteJSONField_5_Out.clear();
			}
			strCompCache_tWriteJSONField_5_Out=strTemp_tWriteJSONField_5_Out;
		}
	}

	org.dom4j.Element subTreeRootParent_tWriteJSONField_5_Out = null;
	
	// build root xml tree 
	if (needRoot_tWriteJSONField_5_Out) {
		needRoot_tWriteJSONField_5_Out=false;
		org.dom4j.Element root_tWriteJSONField_5_Out = doc_tWriteJSONField_5_Out.addElement("patient");
		subTreeRootParent_tWriteJSONField_5_Out = root_tWriteJSONField_5_Out;
		root4Group_tWriteJSONField_5_Out = subTreeRootParent_tWriteJSONField_5_Out;
	}else{
		subTreeRootParent_tWriteJSONField_5_Out=root4Group_tWriteJSONField_5_Out;
	}
	// build group xml tree 
	boolean isNewElememt = false;
	if(isNewElememt || groupbyList_tWriteJSONField_5_Out.size()<=0 || groupbyList_tWriteJSONField_5_Out.get(0)==null
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(0)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(0).equals(
		valueMap_tWriteJSONField_5_Out.get("id")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("id")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(1)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(1).equals(
		valueMap_tWriteJSONField_5_Out.get("hospital_number")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("hospital_number")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(2)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(2).equals(
		valueMap_tWriteJSONField_5_Out.get("uuid")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("uuid")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(3)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(3).equals(
		valueMap_tWriteJSONField_5_Out.get("first_name")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("first_name")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(4)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(4).equals(
		valueMap_tWriteJSONField_5_Out.get("surname")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("surname")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(5)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(5).equals(
		valueMap_tWriteJSONField_5_Out.get("date_of_birth")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("date_of_birth")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(6)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(6).equals(
		valueMap_tWriteJSONField_5_Out.get("is_date_of_birth_estimated")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("is_date_of_birth_estimated")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(7)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(7).equals(
		valueMap_tWriteJSONField_5_Out.get("date_of_registration")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("date_of_registration")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(8)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(8).equals(
		valueMap_tWriteJSONField_5_Out.get("archived")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("archived")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(9)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(9).equals(
		valueMap_tWriteJSONField_5_Out.get("active")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("active")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(10)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(10).equals(
		valueMap_tWriteJSONField_5_Out.get("deceased")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("deceased")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(11)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(11).equals(
		valueMap_tWriteJSONField_5_Out.get("deceased_date_time")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("deceased_date_time")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(12)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(12).equals(
		valueMap_tWriteJSONField_5_Out.get("created_date")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("created_date")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(13)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(13).equals(
		valueMap_tWriteJSONField_5_Out.get("last_modified_date")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("last_modified_date")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(14)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(14).equals(
		valueMap_tWriteJSONField_5_Out.get("created_by")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("created_by")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(15)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(15).equals(
		valueMap_tWriteJSONField_5_Out.get("last_modified_by")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("last_modified_by")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(16)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(16).equals(
		valueMap_tWriteJSONField_5_Out.get("facility_id")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("facility_id")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(17)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(17).equals(
		valueMap_tWriteJSONField_5_Out.get("sex")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("sex")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(18)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(18).equals(
		valueMap_tWriteJSONField_5_Out.get("contact_point")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("contact_point")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(19)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(19).equals(
		valueMap_tWriteJSONField_5_Out.get("state_name")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("state_name")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(20)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(20).equals(
		valueMap_tWriteJSONField_5_Out.get("address")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("address")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(21)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(21).equals(
		valueMap_tWriteJSONField_5_Out.get("state_id")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("state_id")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(22)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(22).equals(
		valueMap_tWriteJSONField_5_Out.get("district_id")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("district_id")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(23)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(23).equals(
		valueMap_tWriteJSONField_5_Out.get("facility_id")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("facility_id")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(24)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(24).equals(
		valueMap_tWriteJSONField_5_Out.get("gender_id")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("gender_id")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(25)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(25).equals(
		valueMap_tWriteJSONField_5_Out.get("gender_display")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("gender_display")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(26)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(26).equals(
		valueMap_tWriteJSONField_5_Out.get("hospital_number")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("hospital_number")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(27)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(27).equals(
		valueMap_tWriteJSONField_5_Out.get("marital_id")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("marital_id")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(28)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(28).equals(
		valueMap_tWriteJSONField_5_Out.get("marital_display")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("marital_display")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(29)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(29).equals(
		valueMap_tWriteJSONField_5_Out.get("occupation_id")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("occupation_id")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(30)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(30).equals(
		valueMap_tWriteJSONField_5_Out.get("occupation_display")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("occupation_display")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(31)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(31).equals(
		valueMap_tWriteJSONField_5_Out.get("education_id")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("education_id")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(32)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(32).equals(
		valueMap_tWriteJSONField_5_Out.get("education_display")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("education_display")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(33)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(33).equals(
		valueMap_tWriteJSONField_5_Out.get("facility_name")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("facility_name")!=null )
	|| ( groupbyList_tWriteJSONField_5_Out.get(0).get(34)!=null 
		? !groupbyList_tWriteJSONField_5_Out.get(0).get(34).equals(
		valueMap_tWriteJSONField_5_Out.get("facility_id")) 
		: 
		valueMap_tWriteJSONField_5_Out.get("facility_id")!=null )
	){
		org.dom4j.Element group0__tWriteJSONField_5_Out = org.dom4j.DocumentHelper.createElement("personal_info");
        if(orders_tWriteJSONField_5_Out[0]==0){
        	orders_tWriteJSONField_5_Out[0] = 0;
        }
        if(1 < orders_tWriteJSONField_5_Out.length){
        		orders_tWriteJSONField_5_Out[1] = 0;
        }
        subTreeRootParent_tWriteJSONField_5_Out.elements().add(orders_tWriteJSONField_5_Out[0]++,group0__tWriteJSONField_5_Out);
		subTreeRootParent_tWriteJSONField_5_Out = group0__tWriteJSONField_5_Out;
		org.dom4j.Element group0__0_tWriteJSONField_5_Out = group0__tWriteJSONField_5_Out.addElement("id");
		if(
		valueMap_tWriteJSONField_5_Out.get("id")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__0_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("id"));
            group0__0_tWriteJSONField_5_Out.addAttribute("type", "number");
		}
		org.dom4j.Element group0__1_tWriteJSONField_5_Out = group0__tWriteJSONField_5_Out.addElement("hospital_number");
		if(
		valueMap_tWriteJSONField_5_Out.get("hospital_number")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__1_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("hospital_number"));
		}
		org.dom4j.Element group0__2_tWriteJSONField_5_Out = group0__tWriteJSONField_5_Out.addElement("uuid");
		if(
		valueMap_tWriteJSONField_5_Out.get("uuid")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__2_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("uuid"));
		}
		org.dom4j.Element group0__3_tWriteJSONField_5_Out = group0__tWriteJSONField_5_Out.addElement("first_name");
		if(
		valueMap_tWriteJSONField_5_Out.get("first_name")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__3_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("first_name"));
		}
		org.dom4j.Element group0__4_tWriteJSONField_5_Out = group0__tWriteJSONField_5_Out.addElement("surname");
		if(
		valueMap_tWriteJSONField_5_Out.get("surname")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__4_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("surname"));
		}
		org.dom4j.Element group0__5_tWriteJSONField_5_Out = group0__tWriteJSONField_5_Out.addElement("other_name");
		nestXMLTool_tWriteJSONField_5_Out.parseAndAdd(group0__5_tWriteJSONField_5_Out,"null");
		org.dom4j.Element group0__6_tWriteJSONField_5_Out = group0__tWriteJSONField_5_Out.addElement("date_of_birth");
		if(
		valueMap_tWriteJSONField_5_Out.get("date_of_birth")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__6_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("date_of_birth"));
		}
		org.dom4j.Element group0__7_tWriteJSONField_5_Out = group0__tWriteJSONField_5_Out.addElement("is_date_of_birth_estimated");
		if(
		valueMap_tWriteJSONField_5_Out.get("is_date_of_birth_estimated")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__7_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("is_date_of_birth_estimated"));
            group0__7_tWriteJSONField_5_Out.addAttribute("type", "boolean");
		}
		org.dom4j.Element group0__8_tWriteJSONField_5_Out = group0__tWriteJSONField_5_Out.addElement("date_of_registration");
		if(
		valueMap_tWriteJSONField_5_Out.get("date_of_registration")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__8_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("date_of_registration"));
		}
		org.dom4j.Element group0__9_tWriteJSONField_5_Out = group0__tWriteJSONField_5_Out.addElement("archived");
		if(
		valueMap_tWriteJSONField_5_Out.get("archived")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__9_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("archived"));
            group0__9_tWriteJSONField_5_Out.addAttribute("type", "number");
		}
		org.dom4j.Element group0__10_tWriteJSONField_5_Out = group0__tWriteJSONField_5_Out.addElement("active");
		if(
		valueMap_tWriteJSONField_5_Out.get("active")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__10_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("active"));
            group0__10_tWriteJSONField_5_Out.addAttribute("type", "boolean");
		}
		org.dom4j.Element group0__11_tWriteJSONField_5_Out = group0__tWriteJSONField_5_Out.addElement("deceased");
		if(
		valueMap_tWriteJSONField_5_Out.get("deceased")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__11_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("deceased"));
            group0__11_tWriteJSONField_5_Out.addAttribute("type", "boolean");
		}
		org.dom4j.Element group0__12_tWriteJSONField_5_Out = group0__tWriteJSONField_5_Out.addElement("deceased_date_time");
		if(
		valueMap_tWriteJSONField_5_Out.get("deceased_date_time")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__12_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("deceased_date_time"));
		}
		org.dom4j.Element group0__13_tWriteJSONField_5_Out = group0__tWriteJSONField_5_Out.addElement("created_date");
		if(
		valueMap_tWriteJSONField_5_Out.get("created_date")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__13_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("created_date"));
		}
		org.dom4j.Element group0__14_tWriteJSONField_5_Out = group0__tWriteJSONField_5_Out.addElement("last_modified_date");
		if(
		valueMap_tWriteJSONField_5_Out.get("last_modified_date")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__14_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("last_modified_date"));
		}
		org.dom4j.Element group0__15_tWriteJSONField_5_Out = group0__tWriteJSONField_5_Out.addElement("created_by");
		if(
		valueMap_tWriteJSONField_5_Out.get("created_by")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__15_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("created_by"));
		}
		org.dom4j.Element group0__16_tWriteJSONField_5_Out = group0__tWriteJSONField_5_Out.addElement("last_modified_by");
		if(
		valueMap_tWriteJSONField_5_Out.get("last_modified_by")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__16_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("last_modified_by"));
		}
		org.dom4j.Element group0__17_tWriteJSONField_5_Out = group0__tWriteJSONField_5_Out.addElement("facility_id");
		if(
		valueMap_tWriteJSONField_5_Out.get("facility_id")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__17_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("facility_id"));
            group0__17_tWriteJSONField_5_Out.addAttribute("type", "number");
		}
		org.dom4j.Element group0__18_tWriteJSONField_5_Out = group0__tWriteJSONField_5_Out.addElement("sex");
		if(
		valueMap_tWriteJSONField_5_Out.get("sex")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__18_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("sex"));
		}
		org.dom4j.Element group0__19_tWriteJSONField_5_Out = group0__tWriteJSONField_5_Out.addElement("contact_point");
		org.dom4j.Element group0__19_0_tWriteJSONField_5_Out = group0__19_tWriteJSONField_5_Out.addElement("contactPoint");
		group0__19_0_tWriteJSONField_5_Out.addAttribute("class", "array");
		org.dom4j.Element group0__19_0_0_tWriteJSONField_5_Out = group0__19_0_tWriteJSONField_5_Out.addElement("element");
		group0__19_0_0_tWriteJSONField_5_Out.addAttribute("class", "object");
		org.dom4j.Element group0__19_0_0_0_tWriteJSONField_5_Out = group0__19_0_0_tWriteJSONField_5_Out.addElement("type");
		nestXMLTool_tWriteJSONField_5_Out.parseAndAdd(group0__19_0_0_0_tWriteJSONField_5_Out,"phone");
		org.dom4j.Element group0__19_0_0_1_tWriteJSONField_5_Out = group0__19_0_0_tWriteJSONField_5_Out.addElement("value");
		if(
		valueMap_tWriteJSONField_5_Out.get("contact_point")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__19_0_0_1_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("contact_point"));
		}
		org.dom4j.Element group0__20_tWriteJSONField_5_Out = group0__tWriteJSONField_5_Out.addElement("address");
		org.dom4j.Element group0__20_0_tWriteJSONField_5_Out = group0__20_tWriteJSONField_5_Out.addElement("address");
		group0__20_0_tWriteJSONField_5_Out.addAttribute("class", "array");
		org.dom4j.Element group0__20_0_0_tWriteJSONField_5_Out = group0__20_0_tWriteJSONField_5_Out.addElement("element");
		group0__20_0_0_tWriteJSONField_5_Out.addAttribute("class", "object");
		org.dom4j.Element group0__20_0_0_0_tWriteJSONField_5_Out = group0__20_0_0_tWriteJSONField_5_Out.addElement("city");
		if(
		valueMap_tWriteJSONField_5_Out.get("state_name")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__20_0_0_0_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("state_name"));
		}
		org.dom4j.Element group0__20_0_0_1_tWriteJSONField_5_Out = group0__20_0_0_tWriteJSONField_5_Out.addElement("line");
		if(
		valueMap_tWriteJSONField_5_Out.get("address")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__20_0_0_1_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("address"));
		}
		group0__20_0_0_1_tWriteJSONField_5_Out.addAttribute("class", "array");
		org.dom4j.Element group0__20_0_0_2_tWriteJSONField_5_Out = group0__20_0_0_tWriteJSONField_5_Out.addElement("stateId");
		if(
		valueMap_tWriteJSONField_5_Out.get("state_id")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__20_0_0_2_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("state_id"));
            group0__20_0_0_2_tWriteJSONField_5_Out.addAttribute("type", "number");
		}
		org.dom4j.Element group0__20_0_0_3_tWriteJSONField_5_Out = group0__20_0_0_tWriteJSONField_5_Out.addElement("district");
		if(
		valueMap_tWriteJSONField_5_Out.get("district_id")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__20_0_0_3_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("district_id"));
            group0__20_0_0_3_tWriteJSONField_5_Out.addAttribute("type", "number");
		}
		org.dom4j.Element group0__20_0_0_4_tWriteJSONField_5_Out = group0__20_0_0_tWriteJSONField_5_Out.addElement("countryId");
		nestXMLTool_tWriteJSONField_5_Out.parseAndAdd(group0__20_0_0_4_tWriteJSONField_5_Out,"1");
		org.dom4j.Element group0__20_0_0_5_tWriteJSONField_5_Out = group0__20_0_0_tWriteJSONField_5_Out.addElement("postalCode");
		nestXMLTool_tWriteJSONField_5_Out.parseAndAdd(group0__20_0_0_5_tWriteJSONField_5_Out,"null");
		org.dom4j.Element group0__20_0_0_6_tWriteJSONField_5_Out = group0__20_0_0_tWriteJSONField_5_Out.addElement("organisationUnitId");
		if(
		valueMap_tWriteJSONField_5_Out.get("facility_id")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__20_0_0_6_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("facility_id"));
            group0__20_0_0_6_tWriteJSONField_5_Out.addAttribute("type", "number");
		}
		org.dom4j.Element group0__21_tWriteJSONField_5_Out = group0__tWriteJSONField_5_Out.addElement("gender");
		org.dom4j.Element group0__21_0_tWriteJSONField_5_Out = group0__21_tWriteJSONField_5_Out.addElement("id");
		if(
		valueMap_tWriteJSONField_5_Out.get("gender_id")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__21_0_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("gender_id"));
            group0__21_0_tWriteJSONField_5_Out.addAttribute("type", "number");
		}
		org.dom4j.Element group0__21_1_tWriteJSONField_5_Out = group0__21_tWriteJSONField_5_Out.addElement("display");
		if(
		valueMap_tWriteJSONField_5_Out.get("gender_display")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__21_1_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("gender_display"));
		}
		org.dom4j.Element group0__22_tWriteJSONField_5_Out = group0__tWriteJSONField_5_Out.addElement("identifier");
		org.dom4j.Element group0__22_0_tWriteJSONField_5_Out = group0__22_tWriteJSONField_5_Out.addElement("identifier");
		group0__22_0_tWriteJSONField_5_Out.addAttribute("class", "array");
		org.dom4j.Element group0__22_0_0_tWriteJSONField_5_Out = group0__22_0_tWriteJSONField_5_Out.addElement("element");
		group0__22_0_0_tWriteJSONField_5_Out.addAttribute("class", "object");
		org.dom4j.Element group0__22_0_0_0_tWriteJSONField_5_Out = group0__22_0_0_tWriteJSONField_5_Out.addElement("type");
		nestXMLTool_tWriteJSONField_5_Out.parseAndAdd(group0__22_0_0_0_tWriteJSONField_5_Out,"HospitalNumber");
		org.dom4j.Element group0__22_0_0_1_tWriteJSONField_5_Out = group0__22_0_0_tWriteJSONField_5_Out.addElement("value");
		if(
		valueMap_tWriteJSONField_5_Out.get("hospital_number")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__22_0_0_1_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("hospital_number"));
		}
		org.dom4j.Element group0__22_0_0_2_tWriteJSONField_5_Out = group0__22_0_0_tWriteJSONField_5_Out.addElement("assignerId");
		nestXMLTool_tWriteJSONField_5_Out.parseAndAdd(group0__22_0_0_2_tWriteJSONField_5_Out,"1");
		org.dom4j.Element group0__23_tWriteJSONField_5_Out = group0__tWriteJSONField_5_Out.addElement("marital_status");
		org.dom4j.Element group0__23_0_tWriteJSONField_5_Out = group0__23_tWriteJSONField_5_Out.addElement("id");
		if(
		valueMap_tWriteJSONField_5_Out.get("marital_id")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__23_0_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("marital_id"));
            group0__23_0_tWriteJSONField_5_Out.addAttribute("type", "number");
		}
		org.dom4j.Element group0__23_1_tWriteJSONField_5_Out = group0__23_tWriteJSONField_5_Out.addElement("display");
		if(
		valueMap_tWriteJSONField_5_Out.get("marital_display")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__23_1_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("marital_display"));
		}
		org.dom4j.Element group0__24_tWriteJSONField_5_Out = group0__tWriteJSONField_5_Out.addElement("employment_status");
		org.dom4j.Element group0__24_0_tWriteJSONField_5_Out = group0__24_tWriteJSONField_5_Out.addElement("id");
		if(
		valueMap_tWriteJSONField_5_Out.get("occupation_id")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__24_0_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("occupation_id"));
            group0__24_0_tWriteJSONField_5_Out.addAttribute("type", "number");
		}
		org.dom4j.Element group0__24_1_tWriteJSONField_5_Out = group0__24_tWriteJSONField_5_Out.addElement("display");
		if(
		valueMap_tWriteJSONField_5_Out.get("occupation_display")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__24_1_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("occupation_display"));
		}
		org.dom4j.Element group0__25_tWriteJSONField_5_Out = group0__tWriteJSONField_5_Out.addElement("education");
		org.dom4j.Element group0__25_0_tWriteJSONField_5_Out = group0__25_tWriteJSONField_5_Out.addElement("id");
		if(
		valueMap_tWriteJSONField_5_Out.get("education_id")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__25_0_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("education_id"));
            group0__25_0_tWriteJSONField_5_Out.addAttribute("type", "number");
		}
		org.dom4j.Element group0__25_1_tWriteJSONField_5_Out = group0__25_tWriteJSONField_5_Out.addElement("display");
		if(
		valueMap_tWriteJSONField_5_Out.get("education_display")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__25_1_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("education_display"));
		}
		org.dom4j.Element group0__26_tWriteJSONField_5_Out = group0__tWriteJSONField_5_Out.addElement("organization");
		org.dom4j.Element group0__26_0_tWriteJSONField_5_Out = group0__26_tWriteJSONField_5_Out.addElement("name");
		if(
		valueMap_tWriteJSONField_5_Out.get("facility_name")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__26_0_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("facility_name"));
		}
		org.dom4j.Element group0__26_1_tWriteJSONField_5_Out = group0__26_tWriteJSONField_5_Out.addElement("id");
		if(
		valueMap_tWriteJSONField_5_Out.get("facility_id")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(group0__26_1_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("facility_id"));
            group0__26_1_tWriteJSONField_5_Out.addAttribute("type", "number");
		}
		if(groupbyList_tWriteJSONField_5_Out.size()<=0){
        	groupbyList_tWriteJSONField_5_Out.add(new java.util.ArrayList<String>());
        }else{
        	groupbyList_tWriteJSONField_5_Out.get(0).clear();
        }
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("id"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("hospital_number"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("uuid"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("first_name"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("surname"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("date_of_birth"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("is_date_of_birth_estimated"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("date_of_registration"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("archived"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("active"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("deceased"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("deceased_date_time"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("created_date"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("last_modified_date"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("created_by"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("last_modified_by"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("facility_id"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("sex"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("contact_point"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("state_name"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("address"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("state_id"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("district_id"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("facility_id"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("gender_id"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("gender_display"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("hospital_number"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("marital_id"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("marital_display"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("occupation_id"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("occupation_display"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("education_id"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("education_display"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("facility_name"));
		groupbyList_tWriteJSONField_5_Out.get(0).add(
		valueMap_tWriteJSONField_5_Out.get("facility_id"));
        isNewElememt=true;
        if(groupElementList_tWriteJSONField_5_Out.size()<=0){
			groupElementList_tWriteJSONField_5_Out.add(group0__tWriteJSONField_5_Out);
        }else{
        	groupElementList_tWriteJSONField_5_Out.set(0,group0__tWriteJSONField_5_Out);
        }
        
	}else{
		subTreeRootParent_tWriteJSONField_5_Out=groupElementList_tWriteJSONField_5_Out.get(0);
	}
	if(isNewElememt || groupbyList_tWriteJSONField_5_Out.size()<=1 || groupbyList_tWriteJSONField_5_Out.get(1)==null
	){
		org.dom4j.Element group1__tWriteJSONField_5_Out = org.dom4j.DocumentHelper.createElement("contact");
        if(orders_tWriteJSONField_5_Out[1]==0){
        	orders_tWriteJSONField_5_Out[1] = 19;
        }
        if(2 < orders_tWriteJSONField_5_Out.length){
        		orders_tWriteJSONField_5_Out[2] = 0;
        }
        subTreeRootParent_tWriteJSONField_5_Out.elements().add(orders_tWriteJSONField_5_Out[1]++,group1__tWriteJSONField_5_Out);
		subTreeRootParent_tWriteJSONField_5_Out = group1__tWriteJSONField_5_Out;
		if(groupbyList_tWriteJSONField_5_Out.size()<=1){
        	groupbyList_tWriteJSONField_5_Out.add(new java.util.ArrayList<String>());
        }else{
        	groupbyList_tWriteJSONField_5_Out.get(1).clear();
        }
        isNewElememt=true;
        if(groupElementList_tWriteJSONField_5_Out.size()<=1){
			groupElementList_tWriteJSONField_5_Out.add(group1__tWriteJSONField_5_Out);
        }else{
        	groupElementList_tWriteJSONField_5_Out.set(1,group1__tWriteJSONField_5_Out);
        }
        
	}else{
		subTreeRootParent_tWriteJSONField_5_Out=groupElementList_tWriteJSONField_5_Out.get(1);
	}
	if(isNewElememt || groupbyList_tWriteJSONField_5_Out.size()<=2 || groupbyList_tWriteJSONField_5_Out.get(2)==null
	){
		org.dom4j.Element group2__tWriteJSONField_5_Out = org.dom4j.DocumentHelper.createElement("contact");
        if(orders_tWriteJSONField_5_Out[2]==0){
        	orders_tWriteJSONField_5_Out[2] = 0;
        }
        if(3 < orders_tWriteJSONField_5_Out.length){
        		orders_tWriteJSONField_5_Out[3] = 0;
        }
        subTreeRootParent_tWriteJSONField_5_Out.elements().add(orders_tWriteJSONField_5_Out[2]++,group2__tWriteJSONField_5_Out);
		subTreeRootParent_tWriteJSONField_5_Out = group2__tWriteJSONField_5_Out;
		group2__tWriteJSONField_5_Out.addAttribute("class", "array");
		if(groupbyList_tWriteJSONField_5_Out.size()<=2){
        	groupbyList_tWriteJSONField_5_Out.add(new java.util.ArrayList<String>());
        }else{
        	groupbyList_tWriteJSONField_5_Out.get(2).clear();
        }
        isNewElememt=true;
        if(groupElementList_tWriteJSONField_5_Out.size()<=2){
			groupElementList_tWriteJSONField_5_Out.add(group2__tWriteJSONField_5_Out);
        }else{
        	groupElementList_tWriteJSONField_5_Out.set(2,group2__tWriteJSONField_5_Out);
        }
        
	}else{
		subTreeRootParent_tWriteJSONField_5_Out=groupElementList_tWriteJSONField_5_Out.get(2);
	}
	// build loop xml tree
		org.dom4j.Element loop_tWriteJSONField_5_Out = org.dom4j.DocumentHelper.createElement("element");
        if(orders_tWriteJSONField_5_Out[3]==0){
        	orders_tWriteJSONField_5_Out[3] = 0;
        }
        if(4 < orders_tWriteJSONField_5_Out.length){
        		orders_tWriteJSONField_5_Out[4] = 0;
        }
        subTreeRootParent_tWriteJSONField_5_Out.elements().add(orders_tWriteJSONField_5_Out[3]++,loop_tWriteJSONField_5_Out);
		loop_tWriteJSONField_5_Out.addAttribute("class", "object");
		org.dom4j.Element loop_0_tWriteJSONField_5_Out = loop_tWriteJSONField_5_Out.addElement("address");
		org.dom4j.Element loop_0_0_tWriteJSONField_5_Out = loop_0_tWriteJSONField_5_Out.addElement("city");
		nestXMLTool_tWriteJSONField_5_Out.parseAndAdd(loop_0_0_tWriteJSONField_5_Out,"null");
		org.dom4j.Element loop_0_1_tWriteJSONField_5_Out = loop_0_tWriteJSONField_5_Out.addElement("line");
		if(
		valueMap_tWriteJSONField_5_Out.get("next_of_kin_address")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(loop_0_1_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("next_of_kin_address"));
		}
		loop_0_1_tWriteJSONField_5_Out.addAttribute("class", "array");
		org.dom4j.Element loop_0_2_tWriteJSONField_5_Out = loop_0_tWriteJSONField_5_Out.addElement("stateId");
		nestXMLTool_tWriteJSONField_5_Out.parseAndAdd(loop_0_2_tWriteJSONField_5_Out,"null");
		org.dom4j.Element loop_0_3_tWriteJSONField_5_Out = loop_0_tWriteJSONField_5_Out.addElement("district");
		nestXMLTool_tWriteJSONField_5_Out.parseAndAdd(loop_0_3_tWriteJSONField_5_Out,"null");
		org.dom4j.Element loop_0_4_tWriteJSONField_5_Out = loop_0_tWriteJSONField_5_Out.addElement("countryId");
		nestXMLTool_tWriteJSONField_5_Out.parseAndAdd(loop_0_4_tWriteJSONField_5_Out,"1");
		org.dom4j.Element loop_0_5_tWriteJSONField_5_Out = loop_0_tWriteJSONField_5_Out.addElement("postalCode");
		nestXMLTool_tWriteJSONField_5_Out.parseAndAdd(loop_0_5_tWriteJSONField_5_Out,"null");
		org.dom4j.Element loop_0_6_tWriteJSONField_5_Out = loop_0_tWriteJSONField_5_Out.addElement("organisationUnitId");
		nestXMLTool_tWriteJSONField_5_Out.parseAndAdd(loop_0_6_tWriteJSONField_5_Out,"null");
		org.dom4j.Element loop_1_tWriteJSONField_5_Out = loop_tWriteJSONField_5_Out.addElement("surname");
		if(
		valueMap_tWriteJSONField_5_Out.get("next_of_kin")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(loop_1_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("next_of_kin"));
		}
		org.dom4j.Element loop_2_tWriteJSONField_5_Out = loop_tWriteJSONField_5_Out.addElement("firstName");
		if(
		valueMap_tWriteJSONField_5_Out.get("next_of_kin")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(loop_2_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("next_of_kin"));
		}
		org.dom4j.Element loop_3_tWriteJSONField_5_Out = loop_tWriteJSONField_5_Out.addElement("otherName");
		nestXMLTool_tWriteJSONField_5_Out.parseAndAdd(loop_3_tWriteJSONField_5_Out,"null");
		org.dom4j.Element loop_4_tWriteJSONField_5_Out = loop_tWriteJSONField_5_Out.addElement("genderId");
		nestXMLTool_tWriteJSONField_5_Out.parseAndAdd(loop_4_tWriteJSONField_5_Out,"null");
		org.dom4j.Element loop_5_tWriteJSONField_5_Out = loop_tWriteJSONField_5_Out.addElement("contactPoint");
		org.dom4j.Element loop_5_0_tWriteJSONField_5_Out = loop_5_tWriteJSONField_5_Out.addElement("type");
		nestXMLTool_tWriteJSONField_5_Out.parseAndAdd(loop_5_0_tWriteJSONField_5_Out,"phone");
		org.dom4j.Element loop_5_1_tWriteJSONField_5_Out = loop_5_tWriteJSONField_5_Out.addElement("value");
		if(
		valueMap_tWriteJSONField_5_Out.get("next_of_kin_phone")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(loop_5_1_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("next_of_kin_phone"));
		}
		org.dom4j.Element loop_6_tWriteJSONField_5_Out = loop_tWriteJSONField_5_Out.addElement("relationshipId");
		if(
		valueMap_tWriteJSONField_5_Out.get("relationshipid")!=null){
			nestXMLTool_tWriteJSONField_5_Out .setText(loop_6_tWriteJSONField_5_Out,
		valueMap_tWriteJSONField_5_Out.get("relationshipid"));
            loop_6_tWriteJSONField_5_Out.addAttribute("type", "number");
		}

 


	tos_count_tWriteJSONField_5_Out++;

/**
 * [tWriteJSONField_5_Out main ] stop
 */
	
	/**
	 * [tWriteJSONField_5_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_5";
	
	currentComponent="tWriteJSONField_5_Out";

	

 



/**
 * [tWriteJSONField_5_Out process_data_begin ] stop
 */
	
	/**
	 * [tWriteJSONField_5_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_5";
	
	currentComponent="tWriteJSONField_5_Out";

	

 



/**
 * [tWriteJSONField_5_Out process_data_end ] stop
 */

} // End of branch "CreatJSON_Field"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_17";

	

 



/**
 * [tDBInput_17 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_17 end ] start
	 */

	

	
	
	currentComponent="tDBInput_17";

	

	}
}finally{
	if (rs_tDBInput_17 != null) {
		rs_tDBInput_17.close();
	}
	if (stmt_tDBInput_17 != null) {
		stmt_tDBInput_17.close();
	}
	if(conn_tDBInput_17 != null && !conn_tDBInput_17.isClosed()) {
		
			conn_tDBInput_17.commit();
			
		
			conn_tDBInput_17.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_17_NB_LINE",nb_line_tDBInput_17);
 

ok_Hash.put("tDBInput_17", true);
end_Hash.put("tDBInput_17", System.currentTimeMillis());

   			if (globalMap.get("tDBInput_17_NB_LINE") != null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				tJava_2Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}



/**
 * [tDBInput_17 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_Lamisplus_orgunits_lookup != null) {
						tHash_Lookup_Lamisplus_orgunits_lookup.endGet();
					}
					globalMap.remove( "tHash_Lookup_Lamisplus_orgunits_lookup" );

					
					
				
					if(tHash_Lookup_Gender != null) {
						tHash_Lookup_Gender.endGet();
					}
					globalMap.remove( "tHash_Lookup_Gender" );

					
					
				
					if(tHash_Lookup_Employment != null) {
						tHash_Lookup_Employment.endGet();
					}
					globalMap.remove( "tHash_Lookup_Employment" );

					
					
				
					if(tHash_Lookup_Nextkin_relationship != null) {
						tHash_Lookup_Nextkin_relationship.endGet();
					}
					globalMap.remove( "tHash_Lookup_Nextkin_relationship" );

					
					
				
					if(tHash_Lookup_Education != null) {
						tHash_Lookup_Education.endGet();
					}
					globalMap.remove( "tHash_Lookup_Education" );

					
					
				
					if(tHash_Lookup_Marital_status != null) {
						tHash_Lookup_Marital_status.endGet();
					}
					globalMap.remove( "tHash_Lookup_Marital_status" );

					
					
				
					if(tHash_Lookup_Facilities_lookup != null) {
						tHash_Lookup_Facilities_lookup.endGet();
					}
					globalMap.remove( "tHash_Lookup_Facilities_lookup" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Patients_mapping");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tWriteJSONField_5_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_5";
	
	currentComponent="tWriteJSONField_5_Out";

	

if(nb_line_tWriteJSONField_5_Out > 0){  
    nestXMLTool_tWriteJSONField_5_Out.replaceDefaultNameSpace(doc_tWriteJSONField_5_Out.getRootElement());
	java.io.StringWriter strWriter_tWriteJSONField_5_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_tWriteJSONField_5_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_5_Out, format_tWriteJSONField_5_Out);
	output_tWriteJSONField_5_Out.write(doc_tWriteJSONField_5_Out);
    output_tWriteJSONField_5_Out.close();
					Extract_fieldsStruct row_tWriteJSONField_5_Out = new Extract_fieldsStruct();
						  
					     		row_tWriteJSONField_5_Out.address = strWriter_tWriteJSONField_5_Out.toString();
					     		listGroupby_tWriteJSONField_5_Out.add(row_tWriteJSONField_5_Out);
		    		

}
globalMap.put("tWriteJSONField_5_Out_NB_LINE",nb_line_tWriteJSONField_5_Out);
globalMap.put("tWriteJSONField_5_In_FINISH" + (listGroupby_tWriteJSONField_5_Out==null?"":listGroupby_tWriteJSONField_5_Out.hashCode()), "true");
	
		txf_tWriteJSONField_5_Out.join();
		
		if(txf_tWriteJSONField_5_Out.getLastException()!=null) {
			currentComponent = txf_tWriteJSONField_5_Out.getCurrentComponent();
			throw txf_tWriteJSONField_5_Out.getLastException();
		}
		
		if(txf_tWriteJSONField_5_Out.getLastError()!=null) {
			throw txf_tWriteJSONField_5_Out.getLastError();
		}
	
resourceMap.put("finish_tWriteJSONField_5_Out", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"CreatJSON_Field");
			  	}
			  	
 

ok_Hash.put("tWriteJSONField_5_Out", true);
end_Hash.put("tWriteJSONField_5_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [tWriteJSONField_5_Out end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_17:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tDBInput_14Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_Lamisplus_orgunits_lookup"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_Employment"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_Nextkin_relationship"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_Education"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_Marital_status"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_Facilities_lookup"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_Gender"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_17 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_17";

	

 



/**
 * [tDBInput_17 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tWriteJSONField_5_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_5";
	
	currentComponent="tWriteJSONField_5_Out";

	

		java.util.Queue listGroupby_tWriteJSONField_5_Out = (java.util.Queue)globalMap.get("queue_tWriteJSONField_5_In");
		if(resourceMap.get("finish_tWriteJSONField_5_Out") == null){
			globalMap.put("tWriteJSONField_5_In_FINISH_WITH_EXCEPTION" + (listGroupby_tWriteJSONField_5_Out==null?"":listGroupby_tWriteJSONField_5_Out.hashCode()), "true");
		}
	
	if (listGroupby_tWriteJSONField_5_Out != null) {
		globalMap.put("tWriteJSONField_5_In_FINISH" + (listGroupby_tWriteJSONField_5_Out==null?"":listGroupby_tWriteJSONField_5_Out.hashCode()), "true");
	}

 



/**
 * [tWriteJSONField_5_Out finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_17_SUBPROCESS_STATE", 1);
	}
	

public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";

	
		int tos_count_tJava_2 = 0;
		


System.out.println("Total filtered patients fetched from LAMIS3 DB - "+globalMap.get("tDBInput_17_NB_LINE"));
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class sequence_extraStruct implements routines.system.IPersistableRow<sequence_extraStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];

	
			    public Long sequence_count;

				public Long getSequence_count () {
					return this.sequence_count;
				}
				
			    public String table_name;

				public String getTable_name () {
					return this.table_name;
				}
				
			    public java.util.Date date_time;

				public java.util.Date getDate_time () {
					return this.date_time;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sequence_count = null;
           				} else {
           			    	this.sequence_count = dis.readLong();
           				}
					
					this.table_name = readString(dis);
					
					this.date_time = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.sequence_count == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.sequence_count);
		            	}
					
					// String
				
						writeString(this.table_name,dos);
					
					// java.util.Date
				
						writeDate(this.date_time,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("sequence_count="+String.valueOf(sequence_count));
		sb.append(",table_name="+table_name);
		sb.append(",date_time="+String.valueOf(date_time));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sequence_extraStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];

	
			    public Long table_name;

				public Long getTable_name () {
					return this.table_name;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.table_name = null;
           				} else {
           			    	this.table_name = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.table_name == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.table_name);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("table_name="+String.valueOf(table_name));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
sequence_extraStruct sequence_extra = new sequence_extraStruct();





	
	/**
	 * [tDBOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_7", false);
		start_Hash.put("tDBOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sequence_extra");
					}
				
		int tos_count_tDBOutput_7 = 0;
		





String dbschema_tDBOutput_7 = null;
	dbschema_tDBOutput_7 = context.LAMISPlus_Schema;
	

String tableName_tDBOutput_7 = null;
if(dbschema_tDBOutput_7 == null || dbschema_tDBOutput_7.trim().length() == 0) {
	tableName_tDBOutput_7 = ("etl_sequence");
} else {
	tableName_tDBOutput_7 = dbschema_tDBOutput_7 + "\".\"" + ("etl_sequence");
}

        int updateKeyCount_tDBOutput_7 = 1;
        if(updateKeyCount_tDBOutput_7 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_7 = 0;
int nb_line_update_tDBOutput_7 = 0;
int nb_line_inserted_tDBOutput_7 = 0;
int nb_line_deleted_tDBOutput_7 = 0;
int nb_line_rejected_tDBOutput_7 = 0;

int deletedCount_tDBOutput_7=0;
int updatedCount_tDBOutput_7=0;
int insertedCount_tDBOutput_7=0;
int rejectedCount_tDBOutput_7=0;

boolean whetherReject_tDBOutput_7 = false;

java.sql.Connection conn_tDBOutput_7 = null;
String dbUser_tDBOutput_7 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_7 = "jdbc:postgresql://"+context.LAMISPlus_Server+":"+context.LAMISPlus_Port+"/"+context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
    dbUser_tDBOutput_7 = context.LAMISPlus_Login;

	final String decryptedPassword_tDBOutput_7 = context.LAMISPlus_Password; 

    String dbPwd_tDBOutput_7 = decryptedPassword_tDBOutput_7;

    conn_tDBOutput_7 = java.sql.DriverManager.getConnection(url_tDBOutput_7,dbUser_tDBOutput_7,dbPwd_tDBOutput_7);
	
	resourceMap.put("conn_tDBOutput_7", conn_tDBOutput_7);
        conn_tDBOutput_7.setAutoCommit(false);
        int commitEvery_tDBOutput_7 = 10000;
        int commitCounter_tDBOutput_7 = 0;



int count_tDBOutput_7=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_7 = conn_tDBOutput_7.getMetaData();
                                boolean whetherExist_tDBOutput_7 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_7 = dbMetaData_tDBOutput_7.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_7 = "public";
                                    if(dbschema_tDBOutput_7 == null || dbschema_tDBOutput_7.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_7 = conn_tDBOutput_7.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_7 = stmtSchema_tDBOutput_7.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_7.next()){
                                                defaultSchema_tDBOutput_7 = rsSchema_tDBOutput_7.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_7.next()) {
                                        String table_tDBOutput_7 = rsTable_tDBOutput_7.getString("TABLE_NAME");
                                        String schema_tDBOutput_7 = rsTable_tDBOutput_7.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_7.equals(("etl_sequence"))
                                            && (schema_tDBOutput_7.equals(dbschema_tDBOutput_7) || ((dbschema_tDBOutput_7 ==null || dbschema_tDBOutput_7.trim().length() ==0) && defaultSchema_tDBOutput_7.equals(schema_tDBOutput_7)))) {
                                            whetherExist_tDBOutput_7 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_7) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_7 = conn_tDBOutput_7.createStatement()) {
                                        stmtCreate_tDBOutput_7.execute("CREATE TABLE \"" + tableName_tDBOutput_7 + "\"(\"sequence_count\" INT8 ,\"table_name\" VARCHAR ,\"date_time\" TIMESTAMP ,primary key(\"table_name\"))");
                                    }
                                }
	    java.sql.PreparedStatement pstmt_tDBOutput_7 = conn_tDBOutput_7.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_7 + "\" WHERE \"table_name\" = ?");
	    resourceMap.put("pstmt_tDBOutput_7", pstmt_tDBOutput_7);
	    String insert_tDBOutput_7 = "INSERT INTO \"" + tableName_tDBOutput_7 + "\" (\"sequence_count\",\"table_name\",\"date_time\") VALUES (?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_7 = conn_tDBOutput_7.prepareStatement(insert_tDBOutput_7);
	    resourceMap.put("pstmtInsert_tDBOutput_7", pstmtInsert_tDBOutput_7);
	    String update_tDBOutput_7 = "UPDATE \"" + tableName_tDBOutput_7 + "\" SET \"sequence_count\" = ?,\"date_time\" = ? WHERE \"table_name\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_7 = conn_tDBOutput_7.prepareStatement(update_tDBOutput_7);
	    resourceMap.put("pstmtUpdate_tDBOutput_7", pstmtUpdate_tDBOutput_7);
	    

 



/**
 * [tDBOutput_7 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
sequence_extraStruct sequence_extra_tmp = new sequence_extraStruct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tDBInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_14", false);
		start_Hash.put("tDBInput_14", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_14";

	
		int tos_count_tDBInput_14 = 0;
		
	
    
	
		    int nb_line_tDBInput_14 = 0;
		    java.sql.Connection conn_tDBInput_14 = null;
				String driverClass_tDBInput_14 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_14 = java.lang.Class.forName(driverClass_tDBInput_14);
				String dbUser_tDBInput_14 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_14 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_14 = decryptedPassword_tDBInput_14;
				
				String url_tDBInput_14 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_14 = java.sql.DriverManager.getConnection(url_tDBInput_14,dbUser_tDBInput_14,dbPwd_tDBInput_14);
		        
				conn_tDBInput_14.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_14 = conn_tDBInput_14.createStatement();

		    String dbquery_tDBInput_14 = "SELECT pg_catalog.setval('patient_person_id_seq', (SELECT MAX(id) FROM patient_person), true);";
			

            	globalMap.put("tDBInput_14_QUERY",dbquery_tDBInput_14);
		    java.sql.ResultSet rs_tDBInput_14 = null;

		    try {
		    	rs_tDBInput_14 = stmt_tDBInput_14.executeQuery(dbquery_tDBInput_14);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_14 = rs_tDBInput_14.getMetaData();
		    	int colQtyInRs_tDBInput_14 = rsmd_tDBInput_14.getColumnCount();

		    String tmpContent_tDBInput_14 = null;
		    
		    
		    while (rs_tDBInput_14.next()) {
		        nb_line_tDBInput_14++;
		        
							if(colQtyInRs_tDBInput_14 < 1) {
								row2.table_name = null;
							} else {
		                          
            row2.table_name = rs_tDBInput_14.getLong(1);
            if(rs_tDBInput_14.wasNull()){
                    row2.table_name = null;
            }
		                    }
					


 



/**
 * [tDBInput_14 begin ] stop
 */
	
	/**
	 * [tDBInput_14 main ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 


	tos_count_tDBInput_14++;

/**
 * [tDBInput_14 main ] stop
 */
	
	/**
	 * [tDBInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

sequence_extra = null;


// # Output table : 'sequence_extra'
sequence_extra_tmp.sequence_count = row2.table_name ;
sequence_extra_tmp.table_name = "patient_person";
sequence_extra_tmp.date_time = java.sql.Timestamp.valueOf( java.time.LocalDateTime.now() );
sequence_extra = sequence_extra_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "sequence_extra"
if(sequence_extra != null) { 



	
	/**
	 * [tDBOutput_7 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sequence_extra");
					}
					



        whetherReject_tDBOutput_7 = false;
                    if(sequence_extra.table_name == null) {
pstmt_tDBOutput_7.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(1, sequence_extra.table_name);
}

            int checkCount_tDBOutput_7 = -1;
            try (java.sql.ResultSet rs_tDBOutput_7 = pstmt_tDBOutput_7.executeQuery()) {
                while(rs_tDBOutput_7.next()) {
                    checkCount_tDBOutput_7 = rs_tDBOutput_7.getInt(1);
                }
            }
            if(checkCount_tDBOutput_7 > 0) {
                        if(sequence_extra.sequence_count == null) {
pstmtUpdate_tDBOutput_7.setNull(1, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_7.setLong(1, sequence_extra.sequence_count);
}

                        if(sequence_extra.date_time != null) {
pstmtUpdate_tDBOutput_7.setTimestamp(2, new java.sql.Timestamp(sequence_extra.date_time.getTime()));
} else {
pstmtUpdate_tDBOutput_7.setNull(2, java.sql.Types.TIMESTAMP);
}

                        if(sequence_extra.table_name == null) {
pstmtUpdate_tDBOutput_7.setNull(3 + count_tDBOutput_7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_7.setString(3 + count_tDBOutput_7, sequence_extra.table_name);
}

                try {
					
                    updatedCount_tDBOutput_7 = updatedCount_tDBOutput_7 + pstmtUpdate_tDBOutput_7.executeUpdate();
                    nb_line_tDBOutput_7++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_7 = true;
                        nb_line_tDBOutput_7++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(sequence_extra.sequence_count == null) {
pstmtInsert_tDBOutput_7.setNull(1, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_7.setLong(1, sequence_extra.sequence_count);
}

                        if(sequence_extra.table_name == null) {
pstmtInsert_tDBOutput_7.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_7.setString(2, sequence_extra.table_name);
}

                        if(sequence_extra.date_time != null) {
pstmtInsert_tDBOutput_7.setTimestamp(3, new java.sql.Timestamp(sequence_extra.date_time.getTime()));
} else {
pstmtInsert_tDBOutput_7.setNull(3, java.sql.Types.TIMESTAMP);
}

                try {
					
                    insertedCount_tDBOutput_7 = insertedCount_tDBOutput_7 + pstmtInsert_tDBOutput_7.executeUpdate();
                    nb_line_tDBOutput_7++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_7 = true;
                        nb_line_tDBOutput_7++;
                            System.err.print(e.getMessage());
                }
            }
            if(!whetherReject_tDBOutput_7) {
            }
    		    commitCounter_tDBOutput_7++;
                if(commitEvery_tDBOutput_7 <= commitCounter_tDBOutput_7) {
                	conn_tDBOutput_7.commit();
                	
                	commitCounter_tDBOutput_7=0;
                }

 


	tos_count_tDBOutput_7++;

/**
 * [tDBOutput_7 main ] stop
 */
	
	/**
	 * [tDBOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	

 



/**
 * [tDBOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	

 



/**
 * [tDBOutput_7 process_data_end ] stop
 */

} // End of branch "sequence_extra"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_14 end ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

	}
}finally{
	if (rs_tDBInput_14 != null) {
		rs_tDBInput_14.close();
	}
	if (stmt_tDBInput_14 != null) {
		stmt_tDBInput_14.close();
	}
	if(conn_tDBInput_14 != null && !conn_tDBInput_14.isClosed()) {
		
			conn_tDBInput_14.commit();
			
		
			conn_tDBInput_14.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_14_NB_LINE",nb_line_tDBInput_14);
 

ok_Hash.put("tDBInput_14", true);
end_Hash.put("tDBInput_14", System.currentTimeMillis());




/**
 * [tDBInput_14 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tDBOutput_7 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	



        if(pstmtUpdate_tDBOutput_7 != null){
            pstmtUpdate_tDBOutput_7.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_7");
        }
        if(pstmtInsert_tDBOutput_7 != null){
            pstmtInsert_tDBOutput_7.close();
            resourceMap.remove("pstmtInsert_tDBOutput_7");
        }
        if(pstmt_tDBOutput_7 != null) {
            pstmt_tDBOutput_7.close();
            resourceMap.remove("pstmt_tDBOutput_7");
        }
    resourceMap.put("statementClosed_tDBOutput_7", true);
			
			conn_tDBOutput_7.commit();
			
		
    	conn_tDBOutput_7 .close();
    	
    	resourceMap.put("finish_tDBOutput_7", true);
    	

	nb_line_deleted_tDBOutput_7=nb_line_deleted_tDBOutput_7+ deletedCount_tDBOutput_7;
	nb_line_update_tDBOutput_7=nb_line_update_tDBOutput_7 + updatedCount_tDBOutput_7;
	nb_line_inserted_tDBOutput_7=nb_line_inserted_tDBOutput_7 + insertedCount_tDBOutput_7;
	nb_line_rejected_tDBOutput_7=nb_line_rejected_tDBOutput_7 + rejectedCount_tDBOutput_7;
	
        globalMap.put("tDBOutput_7_NB_LINE",nb_line_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_UPDATED",nb_line_update_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_DELETED",nb_line_deleted_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_7);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sequence_extra");
			  	}
			  	
 

ok_Hash.put("tDBOutput_7", true);
end_Hash.put("tDBOutput_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tDBOutput_7 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_14 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tDBOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_7") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_7 = null;
                if ((pstmtUpdateToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_7")) != null) {
                    pstmtUpdateToClose_tDBOutput_7.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_7 = null;
                if ((pstmtInsertToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_7")) != null) {
                    pstmtInsertToClose_tDBOutput_7.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_7 = null;
                if ((pstmtToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_7")) != null) {
                    pstmtToClose_tDBOutput_7.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_7") == null){
            java.sql.Connection ctn_tDBOutput_7 = null;
            if((ctn_tDBOutput_7 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_7")) != null){
                try {
                    ctn_tDBOutput_7.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_7) {
                    String errorMessage_tDBOutput_7 = "failed to close the connection in tDBOutput_7 :" + sqlEx_tDBOutput_7.getMessage();
                    System.err.println(errorMessage_tDBOutput_7);
                }
            }
        }
    }
 



/**
 * [tDBOutput_7 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_14_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


int totalMigrated = globalMap.get("tDBOutput_1_NB_LINE_UPDATED") != null ? (Integer)globalMap.get("tDBOutput_1_NB_LINE_UPDATED") : 0;

System.out.println("Total patients already migrated "+totalMigrated);

System.out.println("Total new records migrated - "+globalMap.get("tDBOutput_1_NB_LINE_INSERTED"));
if(globalMap.get("tDBOutput_1_ERROR_MESSAGE") != null){
System.out.println("Migration Error - "+globalMap.get("tDBOutput_1_ERROR_MESSAGE"));
}
System.out.println("Total erroneous records not migrated - "+globalMap.get("tFileOutputDelimited_3_NB_LINE"));
java.time.LocalDateTime endTime = java.time.LocalDateTime.now();
System.out.println("End time - "+ endTime);
java.time.LocalDateTime statTime = (java.time.LocalDateTime)globalMap.get("startTime");

java.time.Duration duration = java.time.Duration.between(statTime, endTime);
System.out.println("Duration - "+ duration);

System.out.println("*************PATIENT MIGRATION REPORT END*****************");
System.out.println("**********************************************************");
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class Lamisplus_orgunits_lookupStruct implements routines.system.IPersistableComparableLookupRow<Lamisplus_orgunits_lookupStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int patient_id;

				public int getPatient_id () {
					return this.patient_id;
				}
				
			    public Long state_id;

				public Long getState_id () {
					return this.state_id;
				}
				
			    public String state_name;

				public String getState_name () {
					return this.state_name;
				}
				
			    public Long district_id;

				public Long getDistrict_id () {
					return this.district_id;
				}
				
			    public String district;

				public String getDistrict () {
					return this.district;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.patient_id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Lamisplus_orgunits_lookupStruct other = (Lamisplus_orgunits_lookupStruct) obj;
		
						if (this.patient_id != other.patient_id)
							return false;
					

		return true;
    }

	public void copyDataTo(Lamisplus_orgunits_lookupStruct other) {

		other.patient_id = this.patient_id;
	            other.state_id = this.state_id;
	            other.state_name = this.state_name;
	            other.district_id = this.district_id;
	            other.district = this.district;
	            
	}

	public void copyKeysDataTo(Lamisplus_orgunits_lookupStruct other) {

		other.patient_id = this.patient_id;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
			        this.patient_id = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.patient_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.state_id = null;
           				} else {
           			    	this.state_id = dis.readLong();
           				}
					
						this.state_name = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.district_id = null;
           				} else {
           			    	this.district_id = dis.readLong();
           				}
					
						this.district = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						if(this.state_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.state_id);
		            	}
					
						writeString(this.state_name, dos, oos);
					
						if(this.district_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.district_id);
		            	}
					
						writeString(this.district, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_id="+String.valueOf(patient_id));
		sb.append(",state_id="+String.valueOf(state_id));
		sb.append(",state_name="+state_name);
		sb.append(",district_id="+String.valueOf(district_id));
		sb.append(",district="+district);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Lamisplus_orgunits_lookupStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patient_id, other.patient_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_18_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		Lamisplus_orgunits_lookupStruct Lamisplus_orgunits_lookup = new Lamisplus_orgunits_lookupStruct();




	
	/**
	 * [tAdvancedHash_Lamisplus_orgunits_lookup begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_Lamisplus_orgunits_lookup", false);
		start_Hash.put("tAdvancedHash_Lamisplus_orgunits_lookup", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_Lamisplus_orgunits_lookup";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Lamisplus_orgunits_lookup");
					}
				
		int tos_count_tAdvancedHash_Lamisplus_orgunits_lookup = 0;
		

			   		// connection name:Lamisplus_orgunits_lookup
			   		// source node:tDBInput_18 - inputs:(after_tDBInput_17) outputs:(Lamisplus_orgunits_lookup,Lamisplus_orgunits_lookup) | target node:tAdvancedHash_Lamisplus_orgunits_lookup - inputs:(Lamisplus_orgunits_lookup) outputs:()
			   		// linked node: tMap_6 - inputs:(Patients_mapping,Lamisplus_orgunits_lookup,Employment,Nextkin_relationship,Education,Marital_status,Facilities_lookup,Gender) outputs:(CreatJSON_Field)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_Lamisplus_orgunits_lookup = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Lamisplus_orgunits_lookupStruct> tHash_Lookup_Lamisplus_orgunits_lookup =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<Lamisplus_orgunits_lookupStruct>getLookup(matchingModeEnum_Lamisplus_orgunits_lookup);
	   						   
		   	   	   globalMap.put("tHash_Lookup_Lamisplus_orgunits_lookup", tHash_Lookup_Lamisplus_orgunits_lookup);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_Lamisplus_orgunits_lookup begin ] stop
 */



	
	/**
	 * [tDBInput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_18", false);
		start_Hash.put("tDBInput_18", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_18";

	
		int tos_count_tDBInput_18 = 0;
		
	
    
	
		    int nb_line_tDBInput_18 = 0;
		    java.sql.Connection conn_tDBInput_18 = null;
				String driverClass_tDBInput_18 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_18 = java.lang.Class.forName(driverClass_tDBInput_18);
				String dbUser_tDBInput_18 = context.LAMIS3_Login;
				
				
	final String decryptedPassword_tDBInput_18 = context.LAMIS3_Password; 
				
				String dbPwd_tDBInput_18 = decryptedPassword_tDBInput_18;
				
				String url_tDBInput_18 = "jdbc:postgresql://" + context.LAMIS3_Server + ":" + context.LAMIS3_Port + "/" + context.LAMIS3_Database + "?" + context.LAMIS3_AdditionalParams;
				
				conn_tDBInput_18 = java.sql.DriverManager.getConnection(url_tDBInput_18,dbUser_tDBInput_18,dbPwd_tDBInput_18);
		        
				conn_tDBInput_18.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_18 = conn_tDBInput_18.createStatement();

		    String dbquery_tDBInput_18 = "SELECT \n	p.id as patient_id,\n	lamisplus_lga.parent_organisation_unit_id as state_id,\n	lamis3_state.name as state_nam"
+"e,\n	lamisplus_lga.id as district_id,\n	lamisplus_lga.name as district \nFROM patient p\nINNER JOIN lga lamis3_lga \n  O"
+"N lamis3_lga.id = p.lga_id\nINNER JOIN state lamis3_state \n ON lamis3_state.id = lamis3_lga.state_id \nINNER JOIN\n\npu"
+"blic.dblink\n('lamis',\n'SELECT \n  f.name, \n  f.id, \n  f.parent_organisation_unit_id\nFROM base_organisation_unit f "
+"\nWHERE organisation_unit_level_id=3'\n\n) \nAS lamisplus_lga(name VARCHAR, id bigint, parent_organisation_unit_id bigint"
+")\nON lamis3_lga.name ilike lamisplus_lga.name\n\nORDER BY patient_id ASC";
			

            	globalMap.put("tDBInput_18_QUERY",dbquery_tDBInput_18);
		    java.sql.ResultSet rs_tDBInput_18 = null;

		    try {
		    	rs_tDBInput_18 = stmt_tDBInput_18.executeQuery(dbquery_tDBInput_18);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_18 = rs_tDBInput_18.getMetaData();
		    	int colQtyInRs_tDBInput_18 = rsmd_tDBInput_18.getColumnCount();

		    String tmpContent_tDBInput_18 = null;
		    
		    
		    while (rs_tDBInput_18.next()) {
		        nb_line_tDBInput_18++;
		        
							if(colQtyInRs_tDBInput_18 < 1) {
								Lamisplus_orgunits_lookup.patient_id = 0;
							} else {
		                          
            Lamisplus_orgunits_lookup.patient_id = rs_tDBInput_18.getInt(1);
            if(rs_tDBInput_18.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_18 < 2) {
								Lamisplus_orgunits_lookup.state_id = null;
							} else {
		                          
            Lamisplus_orgunits_lookup.state_id = rs_tDBInput_18.getLong(2);
            if(rs_tDBInput_18.wasNull()){
                    Lamisplus_orgunits_lookup.state_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_18 < 3) {
								Lamisplus_orgunits_lookup.state_name = null;
							} else {
	                         		
        	Lamisplus_orgunits_lookup.state_name = routines.system.JDBCUtil.getString(rs_tDBInput_18, 3, false);
		                    }
							if(colQtyInRs_tDBInput_18 < 4) {
								Lamisplus_orgunits_lookup.district_id = null;
							} else {
		                          
            Lamisplus_orgunits_lookup.district_id = rs_tDBInput_18.getLong(4);
            if(rs_tDBInput_18.wasNull()){
                    Lamisplus_orgunits_lookup.district_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_18 < 5) {
								Lamisplus_orgunits_lookup.district = null;
							} else {
	                         		
        	Lamisplus_orgunits_lookup.district = routines.system.JDBCUtil.getString(rs_tDBInput_18, 5, false);
		                    }
					


 



/**
 * [tDBInput_18 begin ] stop
 */
	
	/**
	 * [tDBInput_18 main ] start
	 */

	

	
	
	currentComponent="tDBInput_18";

	

 


	tos_count_tDBInput_18++;

/**
 * [tDBInput_18 main ] stop
 */
	
	/**
	 * [tDBInput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_18";

	

 



/**
 * [tDBInput_18 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_Lamisplus_orgunits_lookup main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Lamisplus_orgunits_lookup";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Lamisplus_orgunits_lookup");
					}
					


			   
			   

					Lamisplus_orgunits_lookupStruct Lamisplus_orgunits_lookup_HashRow = new Lamisplus_orgunits_lookupStruct();
		   	   	   
				
				Lamisplus_orgunits_lookup_HashRow.patient_id = Lamisplus_orgunits_lookup.patient_id;
				
				Lamisplus_orgunits_lookup_HashRow.state_id = Lamisplus_orgunits_lookup.state_id;
				
				Lamisplus_orgunits_lookup_HashRow.state_name = Lamisplus_orgunits_lookup.state_name;
				
				Lamisplus_orgunits_lookup_HashRow.district_id = Lamisplus_orgunits_lookup.district_id;
				
				Lamisplus_orgunits_lookup_HashRow.district = Lamisplus_orgunits_lookup.district;
				
			tHash_Lookup_Lamisplus_orgunits_lookup.put(Lamisplus_orgunits_lookup_HashRow);
			
            




 


	tos_count_tAdvancedHash_Lamisplus_orgunits_lookup++;

/**
 * [tAdvancedHash_Lamisplus_orgunits_lookup main ] stop
 */
	
	/**
	 * [tAdvancedHash_Lamisplus_orgunits_lookup process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Lamisplus_orgunits_lookup";

	

 



/**
 * [tAdvancedHash_Lamisplus_orgunits_lookup process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_Lamisplus_orgunits_lookup process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Lamisplus_orgunits_lookup";

	

 



/**
 * [tAdvancedHash_Lamisplus_orgunits_lookup process_data_end ] stop
 */



	
	/**
	 * [tDBInput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_18";

	

 



/**
 * [tDBInput_18 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_18 end ] start
	 */

	

	
	
	currentComponent="tDBInput_18";

	

	}
}finally{
	if (rs_tDBInput_18 != null) {
		rs_tDBInput_18.close();
	}
	if (stmt_tDBInput_18 != null) {
		stmt_tDBInput_18.close();
	}
	if(conn_tDBInput_18 != null && !conn_tDBInput_18.isClosed()) {
		
			conn_tDBInput_18.commit();
			
		
			conn_tDBInput_18.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_18_NB_LINE",nb_line_tDBInput_18);
 

ok_Hash.put("tDBInput_18", true);
end_Hash.put("tDBInput_18", System.currentTimeMillis());




/**
 * [tDBInput_18 end ] stop
 */

	
	/**
	 * [tAdvancedHash_Lamisplus_orgunits_lookup end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Lamisplus_orgunits_lookup";

	

tHash_Lookup_Lamisplus_orgunits_lookup.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Lamisplus_orgunits_lookup");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_Lamisplus_orgunits_lookup", true);
end_Hash.put("tAdvancedHash_Lamisplus_orgunits_lookup", System.currentTimeMillis());




/**
 * [tAdvancedHash_Lamisplus_orgunits_lookup end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_18 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_18";

	

 



/**
 * [tDBInput_18 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_Lamisplus_orgunits_lookup finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Lamisplus_orgunits_lookup";

	

 



/**
 * [tAdvancedHash_Lamisplus_orgunits_lookup finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_18_SUBPROCESS_STATE", 1);
	}
	


public static class Lamisplus_Employment_codesets_lookupStruct implements routines.system.IPersistableComparableLookupRow<Lamisplus_Employment_codesets_lookupStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long codeset_id;

				public long getCodeset_id () {
					return this.codeset_id;
				}
				
			    public String codeset_group;

				public String getCodeset_group () {
					return this.codeset_group;
				}
				
			    public String display;

				public String getDisplay () {
					return this.display;
				}
				
			    public String employment_display;

				public String getEmployment_display () {
					return this.employment_display;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.display == null) ? 0 : this.display.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Lamisplus_Employment_codesets_lookupStruct other = (Lamisplus_Employment_codesets_lookupStruct) obj;
		
						if (this.display == null) {
							if (other.display != null)
								return false;
						
						} else if (!this.display.equals(other.display))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Lamisplus_Employment_codesets_lookupStruct other) {

		other.codeset_id = this.codeset_id;
	            other.codeset_group = this.codeset_group;
	            other.display = this.display;
	            other.employment_display = this.employment_display;
	            
	}

	public void copyKeysDataTo(Lamisplus_Employment_codesets_lookupStruct other) {

		other.display = this.display;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
					this.display = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.display,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.codeset_id = dis.readLong();
					
						this.codeset_group = readString(dis,ois);
					
						this.employment_display = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeLong(this.codeset_id);
					
						writeString(this.codeset_group, dos, oos);
					
						writeString(this.employment_display, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("codeset_id="+String.valueOf(codeset_id));
		sb.append(",codeset_group="+codeset_group);
		sb.append(",display="+display);
		sb.append(",employment_display="+employment_display);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Lamisplus_Employment_codesets_lookupStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.display, other.display);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		Lamisplus_Employment_codesets_lookupStruct Lamisplus_Employment_codesets_lookup = new Lamisplus_Employment_codesets_lookupStruct();




	
	/**
	 * [tAdvancedHash_Lamisplus_Employment_codesets_lookup begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_Lamisplus_Employment_codesets_lookup", false);
		start_Hash.put("tAdvancedHash_Lamisplus_Employment_codesets_lookup", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_Lamisplus_Employment_codesets_lookup";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Lamisplus_Employment_codesets_lookup");
					}
				
		int tos_count_tAdvancedHash_Lamisplus_Employment_codesets_lookup = 0;
		

			   		// connection name:Lamisplus_Employment_codesets_lookup
			   		// source node:tDBInput_7 - inputs:(after_tDBInput_8) outputs:(Lamisplus_Employment_codesets_lookup,Lamisplus_Employment_codesets_lookup) | target node:tAdvancedHash_Lamisplus_Employment_codesets_lookup - inputs:(Lamisplus_Employment_codesets_lookup) outputs:()
			   		// linked node: tMap_4 - inputs:(Lamisplus_Employment_codesets_lookup,Patient_employment_status_mapping) outputs:(Employment,Employment)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_Lamisplus_Employment_codesets_lookup = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Lamisplus_Employment_codesets_lookupStruct> tHash_Lookup_Lamisplus_Employment_codesets_lookup =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<Lamisplus_Employment_codesets_lookupStruct>getLookup(matchingModeEnum_Lamisplus_Employment_codesets_lookup);
	   						   
		   	   	   globalMap.put("tHash_Lookup_Lamisplus_Employment_codesets_lookup", tHash_Lookup_Lamisplus_Employment_codesets_lookup);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_Lamisplus_Employment_codesets_lookup begin ] stop
 */



	
	/**
	 * [tDBInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_7", false);
		start_Hash.put("tDBInput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_7";

	
		int tos_count_tDBInput_7 = 0;
		
	
    
	
		    int nb_line_tDBInput_7 = 0;
		    java.sql.Connection conn_tDBInput_7 = null;
				String driverClass_tDBInput_7 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_7 = java.lang.Class.forName(driverClass_tDBInput_7);
				String dbUser_tDBInput_7 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_7 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_7 = decryptedPassword_tDBInput_7;
				
				String url_tDBInput_7 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_7 = java.sql.DriverManager.getConnection(url_tDBInput_7,dbUser_tDBInput_7,dbPwd_tDBInput_7);
		        
				conn_tDBInput_7.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

		    String dbquery_tDBInput_7 = "SELECT DISTINCT c.id as codeset_id,codeset_group,\n  lower(left(c.display,20)) as display, c.display as employment_disp"
+"lay\nFROM public.base_application_codeset c\nINNER JOIN etl_patient_stage h  \n  ON lower(left(c.display,8)) = lower(lef"
+"t(h.occupation,8)) \nWHERE c.codeset_group='OCCUPATION';";
			

            	globalMap.put("tDBInput_7_QUERY",dbquery_tDBInput_7);
		    java.sql.ResultSet rs_tDBInput_7 = null;

		    try {
		    	rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
		    	int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

		    String tmpContent_tDBInput_7 = null;
		    
		    
		    while (rs_tDBInput_7.next()) {
		        nb_line_tDBInput_7++;
		        
							if(colQtyInRs_tDBInput_7 < 1) {
								Lamisplus_Employment_codesets_lookup.codeset_id = 0;
							} else {
		                          
            Lamisplus_Employment_codesets_lookup.codeset_id = rs_tDBInput_7.getLong(1);
            if(rs_tDBInput_7.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 2) {
								Lamisplus_Employment_codesets_lookup.codeset_group = null;
							} else {
	                         		
        	Lamisplus_Employment_codesets_lookup.codeset_group = routines.system.JDBCUtil.getString(rs_tDBInput_7, 2, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 3) {
								Lamisplus_Employment_codesets_lookup.display = null;
							} else {
	                         		
        	Lamisplus_Employment_codesets_lookup.display = routines.system.JDBCUtil.getString(rs_tDBInput_7, 3, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 4) {
								Lamisplus_Employment_codesets_lookup.employment_display = null;
							} else {
	                         		
        	Lamisplus_Employment_codesets_lookup.employment_display = routines.system.JDBCUtil.getString(rs_tDBInput_7, 4, false);
		                    }
					


 



/**
 * [tDBInput_7 begin ] stop
 */
	
	/**
	 * [tDBInput_7 main ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 


	tos_count_tDBInput_7++;

/**
 * [tDBInput_7 main ] stop
 */
	
	/**
	 * [tDBInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_Lamisplus_Employment_codesets_lookup main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Lamisplus_Employment_codesets_lookup";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Lamisplus_Employment_codesets_lookup");
					}
					


			   
			   

					Lamisplus_Employment_codesets_lookupStruct Lamisplus_Employment_codesets_lookup_HashRow = new Lamisplus_Employment_codesets_lookupStruct();
		   	   	   
				
				Lamisplus_Employment_codesets_lookup_HashRow.codeset_id = Lamisplus_Employment_codesets_lookup.codeset_id;
				
				Lamisplus_Employment_codesets_lookup_HashRow.codeset_group = Lamisplus_Employment_codesets_lookup.codeset_group;
				
				Lamisplus_Employment_codesets_lookup_HashRow.display = Lamisplus_Employment_codesets_lookup.display;
				
				Lamisplus_Employment_codesets_lookup_HashRow.employment_display = Lamisplus_Employment_codesets_lookup.employment_display;
				
			tHash_Lookup_Lamisplus_Employment_codesets_lookup.put(Lamisplus_Employment_codesets_lookup_HashRow);
			
            




 


	tos_count_tAdvancedHash_Lamisplus_Employment_codesets_lookup++;

/**
 * [tAdvancedHash_Lamisplus_Employment_codesets_lookup main ] stop
 */
	
	/**
	 * [tAdvancedHash_Lamisplus_Employment_codesets_lookup process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Lamisplus_Employment_codesets_lookup";

	

 



/**
 * [tAdvancedHash_Lamisplus_Employment_codesets_lookup process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_Lamisplus_Employment_codesets_lookup process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Lamisplus_Employment_codesets_lookup";

	

 



/**
 * [tAdvancedHash_Lamisplus_Employment_codesets_lookup process_data_end ] stop
 */



	
	/**
	 * [tDBInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_7 end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

	}
}finally{
	if (rs_tDBInput_7 != null) {
		rs_tDBInput_7.close();
	}
	if (stmt_tDBInput_7 != null) {
		stmt_tDBInput_7.close();
	}
	if(conn_tDBInput_7 != null && !conn_tDBInput_7.isClosed()) {
		
			conn_tDBInput_7.commit();
			
		
			conn_tDBInput_7.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_7_NB_LINE",nb_line_tDBInput_7);
 

ok_Hash.put("tDBInput_7", true);
end_Hash.put("tDBInput_7", System.currentTimeMillis());




/**
 * [tDBInput_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_Lamisplus_Employment_codesets_lookup end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Lamisplus_Employment_codesets_lookup";

	

tHash_Lookup_Lamisplus_Employment_codesets_lookup.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Lamisplus_Employment_codesets_lookup");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_Lamisplus_Employment_codesets_lookup", true);
end_Hash.put("tAdvancedHash_Lamisplus_Employment_codesets_lookup", System.currentTimeMillis());




/**
 * [tAdvancedHash_Lamisplus_Employment_codesets_lookup end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_Lamisplus_Employment_codesets_lookup finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Lamisplus_Employment_codesets_lookup";

	

 



/**
 * [tAdvancedHash_Lamisplus_Employment_codesets_lookup finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class Lamisplus_Nextkin_codeset_lookupStruct implements routines.system.IPersistableComparableLookupRow<Lamisplus_Nextkin_codeset_lookupStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long codeset_id;

				public long getCodeset_id () {
					return this.codeset_id;
				}
				
			    public String codeset_group;

				public String getCodeset_group () {
					return this.codeset_group;
				}
				
			    public String display;

				public String getDisplay () {
					return this.display;
				}
				
			    public String kin_display;

				public String getKin_display () {
					return this.kin_display;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.display == null) ? 0 : this.display.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Lamisplus_Nextkin_codeset_lookupStruct other = (Lamisplus_Nextkin_codeset_lookupStruct) obj;
		
						if (this.display == null) {
							if (other.display != null)
								return false;
						
						} else if (!this.display.equals(other.display))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Lamisplus_Nextkin_codeset_lookupStruct other) {

		other.codeset_id = this.codeset_id;
	            other.codeset_group = this.codeset_group;
	            other.display = this.display;
	            other.kin_display = this.kin_display;
	            
	}

	public void copyKeysDataTo(Lamisplus_Nextkin_codeset_lookupStruct other) {

		other.display = this.display;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
					this.display = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.display,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.codeset_id = dis.readLong();
					
						this.codeset_group = readString(dis,ois);
					
						this.kin_display = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeLong(this.codeset_id);
					
						writeString(this.codeset_group, dos, oos);
					
						writeString(this.kin_display, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("codeset_id="+String.valueOf(codeset_id));
		sb.append(",codeset_group="+codeset_group);
		sb.append(",display="+display);
		sb.append(",kin_display="+kin_display);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Lamisplus_Nextkin_codeset_lookupStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.display, other.display);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		Lamisplus_Nextkin_codeset_lookupStruct Lamisplus_Nextkin_codeset_lookup = new Lamisplus_Nextkin_codeset_lookupStruct();




	
	/**
	 * [tAdvancedHash_Lamisplus_Nextkin_codeset_lookup begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_Lamisplus_Nextkin_codeset_lookup", false);
		start_Hash.put("tAdvancedHash_Lamisplus_Nextkin_codeset_lookup", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_Lamisplus_Nextkin_codeset_lookup";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Lamisplus_Nextkin_codeset_lookup");
					}
				
		int tos_count_tAdvancedHash_Lamisplus_Nextkin_codeset_lookup = 0;
		

			   		// connection name:Lamisplus_Nextkin_codeset_lookup
			   		// source node:tDBInput_9 - inputs:(after_tDBInput_10) outputs:(Lamisplus_Nextkin_codeset_lookup,Lamisplus_Nextkin_codeset_lookup) | target node:tAdvancedHash_Lamisplus_Nextkin_codeset_lookup - inputs:(Lamisplus_Nextkin_codeset_lookup) outputs:()
			   		// linked node: tMap_5 - inputs:(Lamisplus_Nextkin_codeset_lookup,Patient_NextKin_relationship_mapping) outputs:(Nextkin_relationship,Nextkin_relationship)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_Lamisplus_Nextkin_codeset_lookup = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Lamisplus_Nextkin_codeset_lookupStruct> tHash_Lookup_Lamisplus_Nextkin_codeset_lookup =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<Lamisplus_Nextkin_codeset_lookupStruct>getLookup(matchingModeEnum_Lamisplus_Nextkin_codeset_lookup);
	   						   
		   	   	   globalMap.put("tHash_Lookup_Lamisplus_Nextkin_codeset_lookup", tHash_Lookup_Lamisplus_Nextkin_codeset_lookup);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_Lamisplus_Nextkin_codeset_lookup begin ] stop
 */



	
	/**
	 * [tDBInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_9", false);
		start_Hash.put("tDBInput_9", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_9";

	
		int tos_count_tDBInput_9 = 0;
		
	
    
	
		    int nb_line_tDBInput_9 = 0;
		    java.sql.Connection conn_tDBInput_9 = null;
				String driverClass_tDBInput_9 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_9 = java.lang.Class.forName(driverClass_tDBInput_9);
				String dbUser_tDBInput_9 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_9 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_9 = decryptedPassword_tDBInput_9;
				
				String url_tDBInput_9 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_9 = java.sql.DriverManager.getConnection(url_tDBInput_9,dbUser_tDBInput_9,dbPwd_tDBInput_9);
		        
				conn_tDBInput_9.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9.createStatement();

		    String dbquery_tDBInput_9 = "SELECT DISTINCT c.id as codeset_id,codeset_group,\n  lower(left(c.display,8)) as display, c.display as kin_display\nFRO"
+"M public.base_application_codeset c\nINNER JOIN etl_patient_stage h  \n  ON lower(left(c.display,8)) = lower(left(h.next"
+"_of_kin_relationship,8)) \nWHERE c.codeset_group='RELATIONSHIP';";
			

            	globalMap.put("tDBInput_9_QUERY",dbquery_tDBInput_9);
		    java.sql.ResultSet rs_tDBInput_9 = null;

		    try {
		    	rs_tDBInput_9 = stmt_tDBInput_9.executeQuery(dbquery_tDBInput_9);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9.getMetaData();
		    	int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9.getColumnCount();

		    String tmpContent_tDBInput_9 = null;
		    
		    
		    while (rs_tDBInput_9.next()) {
		        nb_line_tDBInput_9++;
		        
							if(colQtyInRs_tDBInput_9 < 1) {
								Lamisplus_Nextkin_codeset_lookup.codeset_id = 0;
							} else {
		                          
            Lamisplus_Nextkin_codeset_lookup.codeset_id = rs_tDBInput_9.getLong(1);
            if(rs_tDBInput_9.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_9 < 2) {
								Lamisplus_Nextkin_codeset_lookup.codeset_group = null;
							} else {
	                         		
        	Lamisplus_Nextkin_codeset_lookup.codeset_group = routines.system.JDBCUtil.getString(rs_tDBInput_9, 2, false);
		                    }
							if(colQtyInRs_tDBInput_9 < 3) {
								Lamisplus_Nextkin_codeset_lookup.display = null;
							} else {
	                         		
        	Lamisplus_Nextkin_codeset_lookup.display = routines.system.JDBCUtil.getString(rs_tDBInput_9, 3, false);
		                    }
							if(colQtyInRs_tDBInput_9 < 4) {
								Lamisplus_Nextkin_codeset_lookup.kin_display = null;
							} else {
	                         		
        	Lamisplus_Nextkin_codeset_lookup.kin_display = routines.system.JDBCUtil.getString(rs_tDBInput_9, 4, false);
		                    }
					


 



/**
 * [tDBInput_9 begin ] stop
 */
	
	/**
	 * [tDBInput_9 main ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 


	tos_count_tDBInput_9++;

/**
 * [tDBInput_9 main ] stop
 */
	
	/**
	 * [tDBInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_Lamisplus_Nextkin_codeset_lookup main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Lamisplus_Nextkin_codeset_lookup";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Lamisplus_Nextkin_codeset_lookup");
					}
					


			   
			   

					Lamisplus_Nextkin_codeset_lookupStruct Lamisplus_Nextkin_codeset_lookup_HashRow = new Lamisplus_Nextkin_codeset_lookupStruct();
		   	   	   
				
				Lamisplus_Nextkin_codeset_lookup_HashRow.codeset_id = Lamisplus_Nextkin_codeset_lookup.codeset_id;
				
				Lamisplus_Nextkin_codeset_lookup_HashRow.codeset_group = Lamisplus_Nextkin_codeset_lookup.codeset_group;
				
				Lamisplus_Nextkin_codeset_lookup_HashRow.display = Lamisplus_Nextkin_codeset_lookup.display;
				
				Lamisplus_Nextkin_codeset_lookup_HashRow.kin_display = Lamisplus_Nextkin_codeset_lookup.kin_display;
				
			tHash_Lookup_Lamisplus_Nextkin_codeset_lookup.put(Lamisplus_Nextkin_codeset_lookup_HashRow);
			
            




 


	tos_count_tAdvancedHash_Lamisplus_Nextkin_codeset_lookup++;

/**
 * [tAdvancedHash_Lamisplus_Nextkin_codeset_lookup main ] stop
 */
	
	/**
	 * [tAdvancedHash_Lamisplus_Nextkin_codeset_lookup process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Lamisplus_Nextkin_codeset_lookup";

	

 



/**
 * [tAdvancedHash_Lamisplus_Nextkin_codeset_lookup process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_Lamisplus_Nextkin_codeset_lookup process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Lamisplus_Nextkin_codeset_lookup";

	

 



/**
 * [tAdvancedHash_Lamisplus_Nextkin_codeset_lookup process_data_end ] stop
 */



	
	/**
	 * [tDBInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_9 end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

	}
}finally{
	if (rs_tDBInput_9 != null) {
		rs_tDBInput_9.close();
	}
	if (stmt_tDBInput_9 != null) {
		stmt_tDBInput_9.close();
	}
	if(conn_tDBInput_9 != null && !conn_tDBInput_9.isClosed()) {
		
			conn_tDBInput_9.commit();
			
		
			conn_tDBInput_9.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_9_NB_LINE",nb_line_tDBInput_9);
 

ok_Hash.put("tDBInput_9", true);
end_Hash.put("tDBInput_9", System.currentTimeMillis());




/**
 * [tDBInput_9 end ] stop
 */

	
	/**
	 * [tAdvancedHash_Lamisplus_Nextkin_codeset_lookup end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Lamisplus_Nextkin_codeset_lookup";

	

tHash_Lookup_Lamisplus_Nextkin_codeset_lookup.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Lamisplus_Nextkin_codeset_lookup");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_Lamisplus_Nextkin_codeset_lookup", true);
end_Hash.put("tAdvancedHash_Lamisplus_Nextkin_codeset_lookup", System.currentTimeMillis());




/**
 * [tAdvancedHash_Lamisplus_Nextkin_codeset_lookup end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_9 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_Lamisplus_Nextkin_codeset_lookup finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Lamisplus_Nextkin_codeset_lookup";

	

 



/**
 * [tAdvancedHash_Lamisplus_Nextkin_codeset_lookup finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class Lamisplus_education_codeset_lookupStruct implements routines.system.IPersistableComparableLookupRow<Lamisplus_education_codeset_lookupStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long codeset_id;

				public long getCodeset_id () {
					return this.codeset_id;
				}
				
			    public String codeset_group;

				public String getCodeset_group () {
					return this.codeset_group;
				}
				
			    public String display;

				public String getDisplay () {
					return this.display;
				}
				
			    public String education;

				public String getEducation () {
					return this.education;
				}
				
			    public String education_display;

				public String getEducation_display () {
					return this.education_display;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.display == null) ? 0 : this.display.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Lamisplus_education_codeset_lookupStruct other = (Lamisplus_education_codeset_lookupStruct) obj;
		
						if (this.display == null) {
							if (other.display != null)
								return false;
						
						} else if (!this.display.equals(other.display))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Lamisplus_education_codeset_lookupStruct other) {

		other.codeset_id = this.codeset_id;
	            other.codeset_group = this.codeset_group;
	            other.display = this.display;
	            other.education = this.education;
	            other.education_display = this.education_display;
	            
	}

	public void copyKeysDataTo(Lamisplus_education_codeset_lookupStruct other) {

		other.display = this.display;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
					this.display = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.display,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.codeset_id = dis.readLong();
					
						this.codeset_group = readString(dis,ois);
					
						this.education = readString(dis,ois);
					
						this.education_display = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeLong(this.codeset_id);
					
						writeString(this.codeset_group, dos, oos);
					
						writeString(this.education, dos, oos);
					
						writeString(this.education_display, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("codeset_id="+String.valueOf(codeset_id));
		sb.append(",codeset_group="+codeset_group);
		sb.append(",display="+display);
		sb.append(",education="+education);
		sb.append(",education_display="+education_display);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Lamisplus_education_codeset_lookupStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.display, other.display);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		Lamisplus_education_codeset_lookupStruct Lamisplus_education_codeset_lookup = new Lamisplus_education_codeset_lookupStruct();




	
	/**
	 * [tAdvancedHash_Lamisplus_education_codeset_lookup begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_Lamisplus_education_codeset_lookup", false);
		start_Hash.put("tAdvancedHash_Lamisplus_education_codeset_lookup", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_Lamisplus_education_codeset_lookup";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Lamisplus_education_codeset_lookup");
					}
				
		int tos_count_tAdvancedHash_Lamisplus_education_codeset_lookup = 0;
		

			   		// connection name:Lamisplus_education_codeset_lookup
			   		// source node:tDBInput_5 - inputs:(after_tDBInput_6) outputs:(Lamisplus_education_codeset_lookup,Lamisplus_education_codeset_lookup) | target node:tAdvancedHash_Lamisplus_education_codeset_lookup - inputs:(Lamisplus_education_codeset_lookup) outputs:()
			   		// linked node: tMap_3 - inputs:(Lamisplus_education_codeset_lookup,Patient_education_mapping) outputs:(Education,Education)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_Lamisplus_education_codeset_lookup = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Lamisplus_education_codeset_lookupStruct> tHash_Lookup_Lamisplus_education_codeset_lookup =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<Lamisplus_education_codeset_lookupStruct>getLookup(matchingModeEnum_Lamisplus_education_codeset_lookup);
	   						   
		   	   	   globalMap.put("tHash_Lookup_Lamisplus_education_codeset_lookup", tHash_Lookup_Lamisplus_education_codeset_lookup);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_Lamisplus_education_codeset_lookup begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
    
	
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_5 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;
				
				String url_tDBInput_5 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5,dbUser_tDBInput_5,dbPwd_tDBInput_5);
		        
				conn_tDBInput_5.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "SELECT DISTINCT c.id as codeset_id,codeset_group,\n  lower(left(c.display,4)) as display, lower(left(h.education,4)) as"
+" education,c.display as education_display\nFROM public.base_application_codeset c\nINNER JOIN etl_patient_stage h  \n  O"
+"N display = education \nWHERE c.codeset_group = 'EDUCATION'";
			

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								Lamisplus_education_codeset_lookup.codeset_id = 0;
							} else {
		                          
            Lamisplus_education_codeset_lookup.codeset_id = rs_tDBInput_5.getLong(1);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								Lamisplus_education_codeset_lookup.codeset_group = null;
							} else {
	                         		
        	Lamisplus_education_codeset_lookup.codeset_group = routines.system.JDBCUtil.getString(rs_tDBInput_5, 2, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								Lamisplus_education_codeset_lookup.display = null;
							} else {
	                         		
        	Lamisplus_education_codeset_lookup.display = routines.system.JDBCUtil.getString(rs_tDBInput_5, 3, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 4) {
								Lamisplus_education_codeset_lookup.education = null;
							} else {
	                         		
        	Lamisplus_education_codeset_lookup.education = routines.system.JDBCUtil.getString(rs_tDBInput_5, 4, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 5) {
								Lamisplus_education_codeset_lookup.education_display = null;
							} else {
	                         		
        	Lamisplus_education_codeset_lookup.education_display = routines.system.JDBCUtil.getString(rs_tDBInput_5, 5, false);
		                    }
					


 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_Lamisplus_education_codeset_lookup main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Lamisplus_education_codeset_lookup";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Lamisplus_education_codeset_lookup");
					}
					


			   
			   

					Lamisplus_education_codeset_lookupStruct Lamisplus_education_codeset_lookup_HashRow = new Lamisplus_education_codeset_lookupStruct();
		   	   	   
				
				Lamisplus_education_codeset_lookup_HashRow.codeset_id = Lamisplus_education_codeset_lookup.codeset_id;
				
				Lamisplus_education_codeset_lookup_HashRow.codeset_group = Lamisplus_education_codeset_lookup.codeset_group;
				
				Lamisplus_education_codeset_lookup_HashRow.display = Lamisplus_education_codeset_lookup.display;
				
				Lamisplus_education_codeset_lookup_HashRow.education = Lamisplus_education_codeset_lookup.education;
				
				Lamisplus_education_codeset_lookup_HashRow.education_display = Lamisplus_education_codeset_lookup.education_display;
				
			tHash_Lookup_Lamisplus_education_codeset_lookup.put(Lamisplus_education_codeset_lookup_HashRow);
			
            




 


	tos_count_tAdvancedHash_Lamisplus_education_codeset_lookup++;

/**
 * [tAdvancedHash_Lamisplus_education_codeset_lookup main ] stop
 */
	
	/**
	 * [tAdvancedHash_Lamisplus_education_codeset_lookup process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Lamisplus_education_codeset_lookup";

	

 



/**
 * [tAdvancedHash_Lamisplus_education_codeset_lookup process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_Lamisplus_education_codeset_lookup process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Lamisplus_education_codeset_lookup";

	

 



/**
 * [tAdvancedHash_Lamisplus_education_codeset_lookup process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
	if(conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {
		
			conn_tDBInput_5.commit();
			
		
			conn_tDBInput_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);
 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_Lamisplus_education_codeset_lookup end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Lamisplus_education_codeset_lookup";

	

tHash_Lookup_Lamisplus_education_codeset_lookup.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Lamisplus_education_codeset_lookup");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_Lamisplus_education_codeset_lookup", true);
end_Hash.put("tAdvancedHash_Lamisplus_education_codeset_lookup", System.currentTimeMillis());




/**
 * [tAdvancedHash_Lamisplus_education_codeset_lookup end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_Lamisplus_education_codeset_lookup finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Lamisplus_education_codeset_lookup";

	

 



/**
 * [tAdvancedHash_Lamisplus_education_codeset_lookup finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class Lamisplus_marital_codeset_lookupStruct implements routines.system.IPersistableComparableLookupRow<Lamisplus_marital_codeset_lookupStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long codeset_id;

				public long getCodeset_id () {
					return this.codeset_id;
				}
				
			    public String codeset_group;

				public String getCodeset_group () {
					return this.codeset_group;
				}
				
			    public String display;

				public String getDisplay () {
					return this.display;
				}
				
			    public String marital_status;

				public String getMarital_status () {
					return this.marital_status;
				}
				
			    public String status_display;

				public String getStatus_display () {
					return this.status_display;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.display == null) ? 0 : this.display.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Lamisplus_marital_codeset_lookupStruct other = (Lamisplus_marital_codeset_lookupStruct) obj;
		
						if (this.display == null) {
							if (other.display != null)
								return false;
						
						} else if (!this.display.equals(other.display))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Lamisplus_marital_codeset_lookupStruct other) {

		other.codeset_id = this.codeset_id;
	            other.codeset_group = this.codeset_group;
	            other.display = this.display;
	            other.marital_status = this.marital_status;
	            other.status_display = this.status_display;
	            
	}

	public void copyKeysDataTo(Lamisplus_marital_codeset_lookupStruct other) {

		other.display = this.display;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
					this.display = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.display,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.codeset_id = dis.readLong();
					
						this.codeset_group = readString(dis,ois);
					
						this.marital_status = readString(dis,ois);
					
						this.status_display = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeLong(this.codeset_id);
					
						writeString(this.codeset_group, dos, oos);
					
						writeString(this.marital_status, dos, oos);
					
						writeString(this.status_display, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("codeset_id="+String.valueOf(codeset_id));
		sb.append(",codeset_group="+codeset_group);
		sb.append(",display="+display);
		sb.append(",marital_status="+marital_status);
		sb.append(",status_display="+status_display);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Lamisplus_marital_codeset_lookupStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.display, other.display);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		Lamisplus_marital_codeset_lookupStruct Lamisplus_marital_codeset_lookup = new Lamisplus_marital_codeset_lookupStruct();




	
	/**
	 * [tAdvancedHash_Lamisplus_marital_codeset_lookup begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_Lamisplus_marital_codeset_lookup", false);
		start_Hash.put("tAdvancedHash_Lamisplus_marital_codeset_lookup", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_Lamisplus_marital_codeset_lookup";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Lamisplus_marital_codeset_lookup");
					}
				
		int tos_count_tAdvancedHash_Lamisplus_marital_codeset_lookup = 0;
		

			   		// connection name:Lamisplus_marital_codeset_lookup
			   		// source node:tDBInput_1 - inputs:(after_tDBInput_2) outputs:(Lamisplus_marital_codeset_lookup,Lamisplus_marital_codeset_lookup) | target node:tAdvancedHash_Lamisplus_marital_codeset_lookup - inputs:(Lamisplus_marital_codeset_lookup) outputs:()
			   		// linked node: tMap_1 - inputs:(Lamisplus_marital_codeset_lookup,Patient_marital_status_mapping) outputs:(Marital_status,Marital_status)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_Lamisplus_marital_codeset_lookup = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Lamisplus_marital_codeset_lookupStruct> tHash_Lookup_Lamisplus_marital_codeset_lookup =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<Lamisplus_marital_codeset_lookupStruct>getLookup(matchingModeEnum_Lamisplus_marital_codeset_lookup);
	   						   
		   	   	   globalMap.put("tHash_Lookup_Lamisplus_marital_codeset_lookup", tHash_Lookup_Lamisplus_marital_codeset_lookup);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_Lamisplus_marital_codeset_lookup begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_1 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
				String url_tDBInput_1 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
				conn_tDBInput_1.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT DISTINCT c.id as codeset_id,codeset_group,\n  lower(left(c.display,4)) as display, lower(left(h.marital_status,4"
+")) as marital_status,c.display as status_display\nFROM public.base_application_codeset c\nINNER JOIN etl_patient_stage h"
+"  \n  ON display = marital_status \nWHERE c.codeset_group = 'MARITAL_STATUS'";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								Lamisplus_marital_codeset_lookup.codeset_id = 0;
							} else {
		                          
            Lamisplus_marital_codeset_lookup.codeset_id = rs_tDBInput_1.getLong(1);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								Lamisplus_marital_codeset_lookup.codeset_group = null;
							} else {
	                         		
        	Lamisplus_marital_codeset_lookup.codeset_group = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								Lamisplus_marital_codeset_lookup.display = null;
							} else {
	                         		
        	Lamisplus_marital_codeset_lookup.display = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								Lamisplus_marital_codeset_lookup.marital_status = null;
							} else {
	                         		
        	Lamisplus_marital_codeset_lookup.marital_status = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								Lamisplus_marital_codeset_lookup.status_display = null;
							} else {
	                         		
        	Lamisplus_marital_codeset_lookup.status_display = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_Lamisplus_marital_codeset_lookup main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Lamisplus_marital_codeset_lookup";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Lamisplus_marital_codeset_lookup");
					}
					


			   
			   

					Lamisplus_marital_codeset_lookupStruct Lamisplus_marital_codeset_lookup_HashRow = new Lamisplus_marital_codeset_lookupStruct();
		   	   	   
				
				Lamisplus_marital_codeset_lookup_HashRow.codeset_id = Lamisplus_marital_codeset_lookup.codeset_id;
				
				Lamisplus_marital_codeset_lookup_HashRow.codeset_group = Lamisplus_marital_codeset_lookup.codeset_group;
				
				Lamisplus_marital_codeset_lookup_HashRow.display = Lamisplus_marital_codeset_lookup.display;
				
				Lamisplus_marital_codeset_lookup_HashRow.marital_status = Lamisplus_marital_codeset_lookup.marital_status;
				
				Lamisplus_marital_codeset_lookup_HashRow.status_display = Lamisplus_marital_codeset_lookup.status_display;
				
			tHash_Lookup_Lamisplus_marital_codeset_lookup.put(Lamisplus_marital_codeset_lookup_HashRow);
			
            




 


	tos_count_tAdvancedHash_Lamisplus_marital_codeset_lookup++;

/**
 * [tAdvancedHash_Lamisplus_marital_codeset_lookup main ] stop
 */
	
	/**
	 * [tAdvancedHash_Lamisplus_marital_codeset_lookup process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Lamisplus_marital_codeset_lookup";

	

 



/**
 * [tAdvancedHash_Lamisplus_marital_codeset_lookup process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_Lamisplus_marital_codeset_lookup process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Lamisplus_marital_codeset_lookup";

	

 



/**
 * [tAdvancedHash_Lamisplus_marital_codeset_lookup process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
	if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
		
			conn_tDBInput_1.commit();
			
		
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_Lamisplus_marital_codeset_lookup end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Lamisplus_marital_codeset_lookup";

	

tHash_Lookup_Lamisplus_marital_codeset_lookup.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Lamisplus_marital_codeset_lookup");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_Lamisplus_marital_codeset_lookup", true);
end_Hash.put("tAdvancedHash_Lamisplus_marital_codeset_lookup", System.currentTimeMillis());




/**
 * [tAdvancedHash_Lamisplus_marital_codeset_lookup end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_Lamisplus_marital_codeset_lookup finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Lamisplus_marital_codeset_lookup";

	

 



/**
 * [tAdvancedHash_Lamisplus_marital_codeset_lookup finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class Facilities_lookupStruct implements routines.system.IPersistableComparableLookupRow<Facilities_lookupStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String orgunit_name;

				public String getOrgunit_name () {
					return this.orgunit_name;
				}
				
			    public String datim_code;

				public String getDatim_code () {
					return this.datim_code;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.datim_code == null) ? 0 : this.datim_code.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Facilities_lookupStruct other = (Facilities_lookupStruct) obj;
		
						if (this.datim_code == null) {
							if (other.datim_code != null)
								return false;
						
						} else if (!this.datim_code.equals(other.datim_code))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Facilities_lookupStruct other) {

		other.id = this.id;
	            other.name = this.name;
	            other.orgunit_name = this.orgunit_name;
	            other.datim_code = this.datim_code;
	            
	}

	public void copyKeysDataTo(Facilities_lookupStruct other) {

		other.datim_code = this.datim_code;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
					this.datim_code = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.datim_code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readLong();
					
						this.name = readString(dis,ois);
					
						this.orgunit_name = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeLong(this.id);
					
						writeString(this.name, dos, oos);
					
						writeString(this.orgunit_name, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",orgunit_name="+orgunit_name);
		sb.append(",datim_code="+datim_code);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Facilities_lookupStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.datim_code, other.datim_code);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		Facilities_lookupStruct Facilities_lookup = new Facilities_lookupStruct();




	
	/**
	 * [tAdvancedHash_Facilities_lookup begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_Facilities_lookup", false);
		start_Hash.put("tAdvancedHash_Facilities_lookup", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_Facilities_lookup";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Facilities_lookup");
					}
				
		int tos_count_tAdvancedHash_Facilities_lookup = 0;
		

			   		// connection name:Facilities_lookup
			   		// source node:tDBInput_16 - inputs:(after_tDBInput_17) outputs:(Facilities_lookup,Facilities_lookup) | target node:tAdvancedHash_Facilities_lookup - inputs:(Facilities_lookup) outputs:()
			   		// linked node: tMap_6 - inputs:(Patients_mapping,Lamisplus_orgunits_lookup,Employment,Nextkin_relationship,Education,Marital_status,Facilities_lookup,Gender) outputs:(CreatJSON_Field)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_Facilities_lookup = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Facilities_lookupStruct> tHash_Lookup_Facilities_lookup =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<Facilities_lookupStruct>getLookup(matchingModeEnum_Facilities_lookup);
	   						   
		   	   	   globalMap.put("tHash_Lookup_Facilities_lookup", tHash_Lookup_Facilities_lookup);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_Facilities_lookup begin ] stop
 */



	
	/**
	 * [tDBInput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_16", false);
		start_Hash.put("tDBInput_16", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_16";

	
		int tos_count_tDBInput_16 = 0;
		
	
    
	
		    int nb_line_tDBInput_16 = 0;
		    java.sql.Connection conn_tDBInput_16 = null;
				String driverClass_tDBInput_16 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_16 = java.lang.Class.forName(driverClass_tDBInput_16);
				String dbUser_tDBInput_16 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_16 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_16 = decryptedPassword_tDBInput_16;
				
				String url_tDBInput_16 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_16 = java.sql.DriverManager.getConnection(url_tDBInput_16,dbUser_tDBInput_16,dbPwd_tDBInput_16);
		        
				conn_tDBInput_16.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_16 = conn_tDBInput_16.createStatement();

		    String dbquery_tDBInput_16 = "SELECT facility.id,\n	facility.name,\n	orgunit.name as orgunit_name,\n	oid.code as datim_code\nFROM base_organisation_u"
+"nit facility\nJOIN base_organisation_unit orgunit\nON facility.parent_organisation_unit_id = orgunit.id\nJOIN base_organ"
+"isation_unit_identifier oid\nON facility.id = oid.organisation_unit_id\nWHERE facility.organisation_unit_level_id =4 AND"
+" EXISTS(\nSELECT * FROM public.dblink\n('lamis',\n'SELECT DISTINCT \n	fc.id as id, \n	fc.name AS facility_name,\n	lg.nam"
+"e AS lga_name, \n	nf.datim_id AS datim_id\n FROM public.patient ps\n INNER JOIN facility fc\n  ON ps.facility_id=fc.id\n"
+" INNER JOIN lga lg\n  ON fc.lga_id=lg.id\nINNER JOIN ndr_facility nf\n  ON nf.id=ps.facility_id'\n) AS DATA(\n		id INTEG"
+"ER,\n		facility_name VARCHAR,\n		lga_name VARCHAR,\n		datim_id VARCHAR\n	)\nWHERE oid.code=datim_id\n)\nORDER BY facilit"
+"y.id ASC";
			

            	globalMap.put("tDBInput_16_QUERY",dbquery_tDBInput_16);
		    java.sql.ResultSet rs_tDBInput_16 = null;

		    try {
		    	rs_tDBInput_16 = stmt_tDBInput_16.executeQuery(dbquery_tDBInput_16);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_16 = rs_tDBInput_16.getMetaData();
		    	int colQtyInRs_tDBInput_16 = rsmd_tDBInput_16.getColumnCount();

		    String tmpContent_tDBInput_16 = null;
		    
		    
		    while (rs_tDBInput_16.next()) {
		        nb_line_tDBInput_16++;
		        
							if(colQtyInRs_tDBInput_16 < 1) {
								Facilities_lookup.id = 0;
							} else {
		                          
            Facilities_lookup.id = rs_tDBInput_16.getLong(1);
            if(rs_tDBInput_16.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_16 < 2) {
								Facilities_lookup.name = null;
							} else {
	                         		
        	Facilities_lookup.name = routines.system.JDBCUtil.getString(rs_tDBInput_16, 2, false);
		                    }
							if(colQtyInRs_tDBInput_16 < 3) {
								Facilities_lookup.orgunit_name = null;
							} else {
	                         		
        	Facilities_lookup.orgunit_name = routines.system.JDBCUtil.getString(rs_tDBInput_16, 3, false);
		                    }
							if(colQtyInRs_tDBInput_16 < 4) {
								Facilities_lookup.datim_code = null;
							} else {
	                         		
        	Facilities_lookup.datim_code = routines.system.JDBCUtil.getString(rs_tDBInput_16, 4, false);
		                    }
					


 



/**
 * [tDBInput_16 begin ] stop
 */
	
	/**
	 * [tDBInput_16 main ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

 


	tos_count_tDBInput_16++;

/**
 * [tDBInput_16 main ] stop
 */
	
	/**
	 * [tDBInput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

 



/**
 * [tDBInput_16 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_Facilities_lookup main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Facilities_lookup";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Facilities_lookup");
					}
					


			   
			   

					Facilities_lookupStruct Facilities_lookup_HashRow = new Facilities_lookupStruct();
		   	   	   
				
				Facilities_lookup_HashRow.id = Facilities_lookup.id;
				
				Facilities_lookup_HashRow.name = Facilities_lookup.name;
				
				Facilities_lookup_HashRow.orgunit_name = Facilities_lookup.orgunit_name;
				
				Facilities_lookup_HashRow.datim_code = Facilities_lookup.datim_code;
				
			tHash_Lookup_Facilities_lookup.put(Facilities_lookup_HashRow);
			
            




 


	tos_count_tAdvancedHash_Facilities_lookup++;

/**
 * [tAdvancedHash_Facilities_lookup main ] stop
 */
	
	/**
	 * [tAdvancedHash_Facilities_lookup process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Facilities_lookup";

	

 



/**
 * [tAdvancedHash_Facilities_lookup process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_Facilities_lookup process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Facilities_lookup";

	

 



/**
 * [tAdvancedHash_Facilities_lookup process_data_end ] stop
 */



	
	/**
	 * [tDBInput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

 



/**
 * [tDBInput_16 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_16 end ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

	}
}finally{
	if (rs_tDBInput_16 != null) {
		rs_tDBInput_16.close();
	}
	if (stmt_tDBInput_16 != null) {
		stmt_tDBInput_16.close();
	}
	if(conn_tDBInput_16 != null && !conn_tDBInput_16.isClosed()) {
		
			conn_tDBInput_16.commit();
			
		
			conn_tDBInput_16.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_16_NB_LINE",nb_line_tDBInput_16);
 

ok_Hash.put("tDBInput_16", true);
end_Hash.put("tDBInput_16", System.currentTimeMillis());




/**
 * [tDBInput_16 end ] stop
 */

	
	/**
	 * [tAdvancedHash_Facilities_lookup end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Facilities_lookup";

	

tHash_Lookup_Facilities_lookup.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Facilities_lookup");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_Facilities_lookup", true);
end_Hash.put("tAdvancedHash_Facilities_lookup", System.currentTimeMillis());




/**
 * [tAdvancedHash_Facilities_lookup end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_16 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

 



/**
 * [tDBInput_16 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_Facilities_lookup finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Facilities_lookup";

	

 



/**
 * [tAdvancedHash_Facilities_lookup finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_16_SUBPROCESS_STATE", 1);
	}
	


public static class Lamisplus_gender_codeset_lookupStruct implements routines.system.IPersistableComparableLookupRow<Lamisplus_gender_codeset_lookupStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long codeset_id;

				public long getCodeset_id () {
					return this.codeset_id;
				}
				
			    public String codeset_group;

				public String getCodeset_group () {
					return this.codeset_group;
				}
				
			    public String display;

				public String getDisplay () {
					return this.display;
				}
				
			    public String display_gender;

				public String getDisplay_gender () {
					return this.display_gender;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.display == null) ? 0 : this.display.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Lamisplus_gender_codeset_lookupStruct other = (Lamisplus_gender_codeset_lookupStruct) obj;
		
						if (this.display == null) {
							if (other.display != null)
								return false;
						
						} else if (!this.display.equals(other.display))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Lamisplus_gender_codeset_lookupStruct other) {

		other.codeset_id = this.codeset_id;
	            other.codeset_group = this.codeset_group;
	            other.display = this.display;
	            other.display_gender = this.display_gender;
	            
	}

	public void copyKeysDataTo(Lamisplus_gender_codeset_lookupStruct other) {

		other.display = this.display;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
					this.display = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.display,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.codeset_id = dis.readLong();
					
						this.codeset_group = readString(dis,ois);
					
						this.display_gender = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeLong(this.codeset_id);
					
						writeString(this.codeset_group, dos, oos);
					
						writeString(this.display_gender, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("codeset_id="+String.valueOf(codeset_id));
		sb.append(",codeset_group="+codeset_group);
		sb.append(",display="+display);
		sb.append(",display_gender="+display_gender);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Lamisplus_gender_codeset_lookupStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.display, other.display);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		Lamisplus_gender_codeset_lookupStruct Lamisplus_gender_codeset_lookup = new Lamisplus_gender_codeset_lookupStruct();




	
	/**
	 * [tAdvancedHash_Lamisplus_gender_codeset_lookup begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_Lamisplus_gender_codeset_lookup", false);
		start_Hash.put("tAdvancedHash_Lamisplus_gender_codeset_lookup", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_Lamisplus_gender_codeset_lookup";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Lamisplus_gender_codeset_lookup");
					}
				
		int tos_count_tAdvancedHash_Lamisplus_gender_codeset_lookup = 0;
		

			   		// connection name:Lamisplus_gender_codeset_lookup
			   		// source node:tDBInput_3 - inputs:(after_tDBInput_4) outputs:(Lamisplus_gender_codeset_lookup,Lamisplus_gender_codeset_lookup) | target node:tAdvancedHash_Lamisplus_gender_codeset_lookup - inputs:(Lamisplus_gender_codeset_lookup) outputs:()
			   		// linked node: tMap_2 - inputs:(Lamisplus_gender_codeset_lookup,Patient_gender_mapping) outputs:(Gender,Gender)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_Lamisplus_gender_codeset_lookup = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Lamisplus_gender_codeset_lookupStruct> tHash_Lookup_Lamisplus_gender_codeset_lookup =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<Lamisplus_gender_codeset_lookupStruct>getLookup(matchingModeEnum_Lamisplus_gender_codeset_lookup);
	   						   
		   	   	   globalMap.put("tHash_Lookup_Lamisplus_gender_codeset_lookup", tHash_Lookup_Lamisplus_gender_codeset_lookup);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_Lamisplus_gender_codeset_lookup begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_3 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				
				String url_tDBInput_3 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
				conn_tDBInput_3.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT DISTINCT c.id as codeset_id,codeset_group,\n  lower(left(c.display,8)) as display, c.display as display_gender\n"
+"FROM public.base_application_codeset c\nINNER JOIN etl_patient_stage h  \n  ON lower(left(c.display,4)) =  lower(left(h."
+"gender,4)) \nWHERE c.codeset_group='GENDER';";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								Lamisplus_gender_codeset_lookup.codeset_id = 0;
							} else {
		                          
            Lamisplus_gender_codeset_lookup.codeset_id = rs_tDBInput_3.getLong(1);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								Lamisplus_gender_codeset_lookup.codeset_group = null;
							} else {
	                         		
        	Lamisplus_gender_codeset_lookup.codeset_group = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								Lamisplus_gender_codeset_lookup.display = null;
							} else {
	                         		
        	Lamisplus_gender_codeset_lookup.display = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								Lamisplus_gender_codeset_lookup.display_gender = null;
							} else {
	                         		
        	Lamisplus_gender_codeset_lookup.display_gender = routines.system.JDBCUtil.getString(rs_tDBInput_3, 4, false);
		                    }
					


 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_Lamisplus_gender_codeset_lookup main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Lamisplus_gender_codeset_lookup";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Lamisplus_gender_codeset_lookup");
					}
					


			   
			   

					Lamisplus_gender_codeset_lookupStruct Lamisplus_gender_codeset_lookup_HashRow = new Lamisplus_gender_codeset_lookupStruct();
		   	   	   
				
				Lamisplus_gender_codeset_lookup_HashRow.codeset_id = Lamisplus_gender_codeset_lookup.codeset_id;
				
				Lamisplus_gender_codeset_lookup_HashRow.codeset_group = Lamisplus_gender_codeset_lookup.codeset_group;
				
				Lamisplus_gender_codeset_lookup_HashRow.display = Lamisplus_gender_codeset_lookup.display;
				
				Lamisplus_gender_codeset_lookup_HashRow.display_gender = Lamisplus_gender_codeset_lookup.display_gender;
				
			tHash_Lookup_Lamisplus_gender_codeset_lookup.put(Lamisplus_gender_codeset_lookup_HashRow);
			
            




 


	tos_count_tAdvancedHash_Lamisplus_gender_codeset_lookup++;

/**
 * [tAdvancedHash_Lamisplus_gender_codeset_lookup main ] stop
 */
	
	/**
	 * [tAdvancedHash_Lamisplus_gender_codeset_lookup process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Lamisplus_gender_codeset_lookup";

	

 



/**
 * [tAdvancedHash_Lamisplus_gender_codeset_lookup process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_Lamisplus_gender_codeset_lookup process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Lamisplus_gender_codeset_lookup";

	

 



/**
 * [tAdvancedHash_Lamisplus_gender_codeset_lookup process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
	if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
		
			conn_tDBInput_3.commit();
			
		
			conn_tDBInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_Lamisplus_gender_codeset_lookup end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Lamisplus_gender_codeset_lookup";

	

tHash_Lookup_Lamisplus_gender_codeset_lookup.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Lamisplus_gender_codeset_lookup");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_Lamisplus_gender_codeset_lookup", true);
end_Hash.put("tAdvancedHash_Lamisplus_gender_codeset_lookup", System.currentTimeMillis());




/**
 * [tAdvancedHash_Lamisplus_gender_codeset_lookup end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_Lamisplus_gender_codeset_lookup finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Lamisplus_gender_codeset_lookup";

	

 



/**
 * [tAdvancedHash_Lamisplus_gender_codeset_lookup finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class EmploymentStruct implements routines.system.IPersistableComparableLookupRow<EmploymentStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public long occupation_id;

				public long getOccupation_id () {
					return this.occupation_id;
				}
				
			    public String occupation_display;

				public String getOccupation_display () {
					return this.occupation_display;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.person_uuid == null) ? 0 : this.person_uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final EmploymentStruct other = (EmploymentStruct) obj;
		
						if (this.person_uuid == null) {
							if (other.person_uuid != null)
								return false;
						
						} else if (!this.person_uuid.equals(other.person_uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(EmploymentStruct other) {

		other.person_uuid = this.person_uuid;
	            other.occupation_id = this.occupation_id;
	            other.occupation_display = this.occupation_display;
	            
	}

	public void copyKeysDataTo(EmploymentStruct other) {

		other.person_uuid = this.person_uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.occupation_id = dis.readLong();
					
						this.occupation_display = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeLong(this.occupation_id);
					
						writeString(this.occupation_display, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",occupation_id="+String.valueOf(occupation_id));
		sb.append(",occupation_display="+occupation_display);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(EmploymentStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.person_uuid, other.person_uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Patient_employment_status_mappingStruct implements routines.system.IPersistableRow<Patient_employment_status_mappingStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];

	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String employment_status;

				public String getEmployment_status () {
					return this.employment_status;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
					this.employment_status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.employment_status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",employment_status="+employment_status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Patient_employment_status_mappingStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_8Struct implements routines.system.IPersistableRow<after_tDBInput_8Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String employment_status;

				public String getEmployment_status () {
					return this.employment_status;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.person_uuid == null) ? 0 : this.person_uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tDBInput_8Struct other = (after_tDBInput_8Struct) obj;
		
						if (this.person_uuid == null) {
							if (other.person_uuid != null)
								return false;
						
						} else if (!this.person_uuid.equals(other.person_uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(after_tDBInput_8Struct other) {

		other.person_uuid = this.person_uuid;
	            other.employment_status = this.employment_status;
	            
	}

	public void copyKeysDataTo(after_tDBInput_8Struct other) {

		other.person_uuid = this.person_uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
					this.employment_status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.employment_status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",employment_status="+employment_status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.person_uuid, other.person_uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_7Process(globalMap);

		Patient_employment_status_mappingStruct Patient_employment_status_mapping = new Patient_employment_status_mappingStruct();
EmploymentStruct Employment = new EmploymentStruct();





	
	/**
	 * [tAdvancedHash_Employment begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_Employment", false);
		start_Hash.put("tAdvancedHash_Employment", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_Employment";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Employment");
					}
				
		int tos_count_tAdvancedHash_Employment = 0;
		

			   		// connection name:Employment
			   		// source node:tMap_4 - inputs:(Lamisplus_Employment_codesets_lookup,Patient_employment_status_mapping) outputs:(Employment,Employment) | target node:tAdvancedHash_Employment - inputs:(Employment) outputs:()
			   		// linked node: tMap_6 - inputs:(Patients_mapping,Lamisplus_orgunits_lookup,Employment,Nextkin_relationship,Education,Marital_status,Facilities_lookup,Gender) outputs:(CreatJSON_Field)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_Employment = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<EmploymentStruct> tHash_Lookup_Employment =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<EmploymentStruct>getLookup(matchingModeEnum_Employment);
	   						   
		   	   	   globalMap.put("tHash_Lookup_Employment", tHash_Lookup_Employment);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_Employment begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Patient_employment_status_mapping");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Lamisplus_Employment_codesets_lookupStruct> tHash_Lookup_Lamisplus_Employment_codesets_lookup = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Lamisplus_Employment_codesets_lookupStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Lamisplus_Employment_codesets_lookupStruct>) 
					globalMap.get( "tHash_Lookup_Lamisplus_Employment_codesets_lookup" ))
					;					
					
	

Lamisplus_Employment_codesets_lookupStruct Lamisplus_Employment_codesets_lookupHashKey = new Lamisplus_Employment_codesets_lookupStruct();
Lamisplus_Employment_codesets_lookupStruct Lamisplus_Employment_codesets_lookupDefault = new Lamisplus_Employment_codesets_lookupStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
EmploymentStruct Employment_tmp = new EmploymentStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tDBInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_8", false);
		start_Hash.put("tDBInput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_8";

	
		int tos_count_tDBInput_8 = 0;
		
	
    
	
		    int nb_line_tDBInput_8 = 0;
		    java.sql.Connection conn_tDBInput_8 = null;
				String driverClass_tDBInput_8 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_8 = java.lang.Class.forName(driverClass_tDBInput_8);
				String dbUser_tDBInput_8 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_8 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_8 = decryptedPassword_tDBInput_8;
				
				String url_tDBInput_8 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_8 = java.sql.DriverManager.getConnection(url_tDBInput_8,dbUser_tDBInput_8,dbPwd_tDBInput_8);
		        
				conn_tDBInput_8.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8.createStatement();

		    String dbquery_tDBInput_8 = "SELECT person_uuid,lower(left(h.occupation,8)) as employment_status \nFROM etl_patient_stage h";
			

            	globalMap.put("tDBInput_8_QUERY",dbquery_tDBInput_8);
		    java.sql.ResultSet rs_tDBInput_8 = null;

		    try {
		    	rs_tDBInput_8 = stmt_tDBInput_8.executeQuery(dbquery_tDBInput_8);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8.getMetaData();
		    	int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8.getColumnCount();

		    String tmpContent_tDBInput_8 = null;
		    
		    
		    while (rs_tDBInput_8.next()) {
		        nb_line_tDBInput_8++;
		        
							if(colQtyInRs_tDBInput_8 < 1) {
								Patient_employment_status_mapping.person_uuid = null;
							} else {
	                         		
        	Patient_employment_status_mapping.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_8, 1, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 2) {
								Patient_employment_status_mapping.employment_status = null;
							} else {
	                         		
        	Patient_employment_status_mapping.employment_status = routines.system.JDBCUtil.getString(rs_tDBInput_8, 2, false);
		                    }
					


 



/**
 * [tDBInput_8 begin ] stop
 */
	
	/**
	 * [tDBInput_8 main ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 


	tos_count_tDBInput_8++;

/**
 * [tDBInput_8 main ] stop
 */
	
	/**
	 * [tDBInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Patient_employment_status_mapping");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "Lamisplus_Employment_codesets_lookup" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopLamisplus_Employment_codesets_lookup = false;
       		  	    	
       		  	    	
 							Lamisplus_Employment_codesets_lookupStruct Lamisplus_Employment_codesets_lookupObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    Lamisplus_Employment_codesets_lookupHashKey.display = Patient_employment_status_mapping.employment_status ;
                        		    		

								
		                        	Lamisplus_Employment_codesets_lookupHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_Lamisplus_Employment_codesets_lookup.lookup( Lamisplus_Employment_codesets_lookupHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_Lamisplus_Employment_codesets_lookup != null && tHash_Lookup_Lamisplus_Employment_codesets_lookup.getCount(Lamisplus_Employment_codesets_lookupHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'Lamisplus_Employment_codesets_lookup' and it contains more one result from keys :  Lamisplus_Employment_codesets_lookup.display = '" + Lamisplus_Employment_codesets_lookupHashKey.display + "'");
								} // G 071
							

							Lamisplus_Employment_codesets_lookupStruct Lamisplus_Employment_codesets_lookup = null;
                    		  	 
							   
                    		  	 
	       		  	    	Lamisplus_Employment_codesets_lookupStruct fromLookup_Lamisplus_Employment_codesets_lookup = null;
							Lamisplus_Employment_codesets_lookup = Lamisplus_Employment_codesets_lookupDefault;
										 
							
								 
							
							
								if (tHash_Lookup_Lamisplus_Employment_codesets_lookup !=null && tHash_Lookup_Lamisplus_Employment_codesets_lookup.hasNext()) { // G 099
								
							
								
								fromLookup_Lamisplus_Employment_codesets_lookup = tHash_Lookup_Lamisplus_Employment_codesets_lookup.next();

							
							
								} // G 099
							
							

							if(fromLookup_Lamisplus_Employment_codesets_lookup != null) {
								Lamisplus_Employment_codesets_lookup = fromLookup_Lamisplus_Employment_codesets_lookup;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

Employment = null;


// # Output table : 'Employment'
Employment_tmp.person_uuid = Patient_employment_status_mapping.person_uuid ;
Employment_tmp.occupation_id = Lamisplus_Employment_codesets_lookup.codeset_id ;
Employment_tmp.occupation_display = Lamisplus_Employment_codesets_lookup.display ;
Employment = Employment_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "Employment"
if(Employment != null) { 



	
	/**
	 * [tAdvancedHash_Employment main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Employment";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Employment");
					}
					


			   
			   

					EmploymentStruct Employment_HashRow = new EmploymentStruct();
		   	   	   
				
				Employment_HashRow.person_uuid = Employment.person_uuid;
				
				Employment_HashRow.occupation_id = Employment.occupation_id;
				
				Employment_HashRow.occupation_display = Employment.occupation_display;
				
			tHash_Lookup_Employment.put(Employment_HashRow);
			
            




 


	tos_count_tAdvancedHash_Employment++;

/**
 * [tAdvancedHash_Employment main ] stop
 */
	
	/**
	 * [tAdvancedHash_Employment process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Employment";

	

 



/**
 * [tAdvancedHash_Employment process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_Employment process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Employment";

	

 



/**
 * [tAdvancedHash_Employment process_data_end ] stop
 */

} // End of branch "Employment"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_8 end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

	}
}finally{
	if (rs_tDBInput_8 != null) {
		rs_tDBInput_8.close();
	}
	if (stmt_tDBInput_8 != null) {
		stmt_tDBInput_8.close();
	}
	if(conn_tDBInput_8 != null && !conn_tDBInput_8.isClosed()) {
		
			conn_tDBInput_8.commit();
			
		
			conn_tDBInput_8.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_8_NB_LINE",nb_line_tDBInput_8);
 

ok_Hash.put("tDBInput_8", true);
end_Hash.put("tDBInput_8", System.currentTimeMillis());




/**
 * [tDBInput_8 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_Lamisplus_Employment_codesets_lookup != null) {
						tHash_Lookup_Lamisplus_Employment_codesets_lookup.endGet();
					}
					globalMap.remove( "tHash_Lookup_Lamisplus_Employment_codesets_lookup" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Patient_employment_status_mapping");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_Employment end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Employment";

	

tHash_Lookup_Employment.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Employment");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_Employment", true);
end_Hash.put("tAdvancedHash_Employment", System.currentTimeMillis());




/**
 * [tAdvancedHash_Employment end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_Lamisplus_Employment_codesets_lookup"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_Employment finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Employment";

	

 



/**
 * [tAdvancedHash_Employment finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class Nextkin_relationshipStruct implements routines.system.IPersistableComparableLookupRow<Nextkin_relationshipStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public Long relationshipid;

				public Long getRelationshipid () {
					return this.relationshipid;
				}
				
			    public String display;

				public String getDisplay () {
					return this.display;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.person_uuid == null) ? 0 : this.person_uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Nextkin_relationshipStruct other = (Nextkin_relationshipStruct) obj;
		
						if (this.person_uuid == null) {
							if (other.person_uuid != null)
								return false;
						
						} else if (!this.person_uuid.equals(other.person_uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Nextkin_relationshipStruct other) {

		other.person_uuid = this.person_uuid;
	            other.relationshipid = this.relationshipid;
	            other.display = this.display;
	            
	}

	public void copyKeysDataTo(Nextkin_relationshipStruct other) {

		other.person_uuid = this.person_uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.relationshipid = null;
           				} else {
           			    	this.relationshipid = dis.readLong();
           				}
					
						this.display = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						if(this.relationshipid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.relationshipid);
		            	}
					
						writeString(this.display, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",relationshipid="+String.valueOf(relationshipid));
		sb.append(",display="+display);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Nextkin_relationshipStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.person_uuid, other.person_uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Patient_NextKin_relationship_mappingStruct implements routines.system.IPersistableRow<Patient_NextKin_relationship_mappingStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];

	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String contact_relationship;

				public String getContact_relationship () {
					return this.contact_relationship;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
					this.contact_relationship = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.contact_relationship,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",contact_relationship="+contact_relationship);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Patient_NextKin_relationship_mappingStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_10Struct implements routines.system.IPersistableRow<after_tDBInput_10Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String contact_relationship;

				public String getContact_relationship () {
					return this.contact_relationship;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.person_uuid == null) ? 0 : this.person_uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tDBInput_10Struct other = (after_tDBInput_10Struct) obj;
		
						if (this.person_uuid == null) {
							if (other.person_uuid != null)
								return false;
						
						} else if (!this.person_uuid.equals(other.person_uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(after_tDBInput_10Struct other) {

		other.person_uuid = this.person_uuid;
	            other.contact_relationship = this.contact_relationship;
	            
	}

	public void copyKeysDataTo(after_tDBInput_10Struct other) {

		other.person_uuid = this.person_uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
					this.contact_relationship = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.contact_relationship,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",contact_relationship="+contact_relationship);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_10Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.person_uuid, other.person_uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_9Process(globalMap);

		Patient_NextKin_relationship_mappingStruct Patient_NextKin_relationship_mapping = new Patient_NextKin_relationship_mappingStruct();
Nextkin_relationshipStruct Nextkin_relationship = new Nextkin_relationshipStruct();





	
	/**
	 * [tAdvancedHash_Nextkin_relationship begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_Nextkin_relationship", false);
		start_Hash.put("tAdvancedHash_Nextkin_relationship", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_Nextkin_relationship";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Nextkin_relationship");
					}
				
		int tos_count_tAdvancedHash_Nextkin_relationship = 0;
		

			   		// connection name:Nextkin_relationship
			   		// source node:tMap_5 - inputs:(Lamisplus_Nextkin_codeset_lookup,Patient_NextKin_relationship_mapping) outputs:(Nextkin_relationship,Nextkin_relationship) | target node:tAdvancedHash_Nextkin_relationship - inputs:(Nextkin_relationship) outputs:()
			   		// linked node: tMap_6 - inputs:(Patients_mapping,Lamisplus_orgunits_lookup,Employment,Nextkin_relationship,Education,Marital_status,Facilities_lookup,Gender) outputs:(CreatJSON_Field)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_Nextkin_relationship = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Nextkin_relationshipStruct> tHash_Lookup_Nextkin_relationship =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<Nextkin_relationshipStruct>getLookup(matchingModeEnum_Nextkin_relationship);
	   						   
		   	   	   globalMap.put("tHash_Lookup_Nextkin_relationship", tHash_Lookup_Nextkin_relationship);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_Nextkin_relationship begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Patient_NextKin_relationship_mapping");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Lamisplus_Nextkin_codeset_lookupStruct> tHash_Lookup_Lamisplus_Nextkin_codeset_lookup = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Lamisplus_Nextkin_codeset_lookupStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Lamisplus_Nextkin_codeset_lookupStruct>) 
					globalMap.get( "tHash_Lookup_Lamisplus_Nextkin_codeset_lookup" ))
					;					
					
	

Lamisplus_Nextkin_codeset_lookupStruct Lamisplus_Nextkin_codeset_lookupHashKey = new Lamisplus_Nextkin_codeset_lookupStruct();
Lamisplus_Nextkin_codeset_lookupStruct Lamisplus_Nextkin_codeset_lookupDefault = new Lamisplus_Nextkin_codeset_lookupStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
Nextkin_relationshipStruct Nextkin_relationship_tmp = new Nextkin_relationshipStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tDBInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_10", false);
		start_Hash.put("tDBInput_10", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_10";

	
		int tos_count_tDBInput_10 = 0;
		
	
    
	
		    int nb_line_tDBInput_10 = 0;
		    java.sql.Connection conn_tDBInput_10 = null;
				String driverClass_tDBInput_10 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_10 = java.lang.Class.forName(driverClass_tDBInput_10);
				String dbUser_tDBInput_10 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_10 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_10 = decryptedPassword_tDBInput_10;
				
				String url_tDBInput_10 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_10 = java.sql.DriverManager.getConnection(url_tDBInput_10,dbUser_tDBInput_10,dbPwd_tDBInput_10);
		        
				conn_tDBInput_10.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_10 = conn_tDBInput_10.createStatement();

		    String dbquery_tDBInput_10 = "SELECT person_uuid,lower(left(h.next_of_kin_relationship,8)) as contact_relationship\nFROM etl_patient_stage h";
			

            	globalMap.put("tDBInput_10_QUERY",dbquery_tDBInput_10);
		    java.sql.ResultSet rs_tDBInput_10 = null;

		    try {
		    	rs_tDBInput_10 = stmt_tDBInput_10.executeQuery(dbquery_tDBInput_10);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_10 = rs_tDBInput_10.getMetaData();
		    	int colQtyInRs_tDBInput_10 = rsmd_tDBInput_10.getColumnCount();

		    String tmpContent_tDBInput_10 = null;
		    
		    
		    while (rs_tDBInput_10.next()) {
		        nb_line_tDBInput_10++;
		        
							if(colQtyInRs_tDBInput_10 < 1) {
								Patient_NextKin_relationship_mapping.person_uuid = null;
							} else {
	                         		
        	Patient_NextKin_relationship_mapping.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_10, 1, false);
		                    }
							if(colQtyInRs_tDBInput_10 < 2) {
								Patient_NextKin_relationship_mapping.contact_relationship = null;
							} else {
	                         		
        	Patient_NextKin_relationship_mapping.contact_relationship = routines.system.JDBCUtil.getString(rs_tDBInput_10, 2, false);
		                    }
					


 



/**
 * [tDBInput_10 begin ] stop
 */
	
	/**
	 * [tDBInput_10 main ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 


	tos_count_tDBInput_10++;

/**
 * [tDBInput_10 main ] stop
 */
	
	/**
	 * [tDBInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Patient_NextKin_relationship_mapping");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "Lamisplus_Nextkin_codeset_lookup" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopLamisplus_Nextkin_codeset_lookup = false;
       		  	    	
       		  	    	
 							Lamisplus_Nextkin_codeset_lookupStruct Lamisplus_Nextkin_codeset_lookupObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    Lamisplus_Nextkin_codeset_lookupHashKey.display = Patient_NextKin_relationship_mapping.contact_relationship ;
                        		    		

								
		                        	Lamisplus_Nextkin_codeset_lookupHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_Lamisplus_Nextkin_codeset_lookup.lookup( Lamisplus_Nextkin_codeset_lookupHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_Lamisplus_Nextkin_codeset_lookup != null && tHash_Lookup_Lamisplus_Nextkin_codeset_lookup.getCount(Lamisplus_Nextkin_codeset_lookupHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'Lamisplus_Nextkin_codeset_lookup' and it contains more one result from keys :  Lamisplus_Nextkin_codeset_lookup.display = '" + Lamisplus_Nextkin_codeset_lookupHashKey.display + "'");
								} // G 071
							

							Lamisplus_Nextkin_codeset_lookupStruct Lamisplus_Nextkin_codeset_lookup = null;
                    		  	 
							   
                    		  	 
	       		  	    	Lamisplus_Nextkin_codeset_lookupStruct fromLookup_Lamisplus_Nextkin_codeset_lookup = null;
							Lamisplus_Nextkin_codeset_lookup = Lamisplus_Nextkin_codeset_lookupDefault;
										 
							
								 
							
							
								if (tHash_Lookup_Lamisplus_Nextkin_codeset_lookup !=null && tHash_Lookup_Lamisplus_Nextkin_codeset_lookup.hasNext()) { // G 099
								
							
								
								fromLookup_Lamisplus_Nextkin_codeset_lookup = tHash_Lookup_Lamisplus_Nextkin_codeset_lookup.next();

							
							
								} // G 099
							
							

							if(fromLookup_Lamisplus_Nextkin_codeset_lookup != null) {
								Lamisplus_Nextkin_codeset_lookup = fromLookup_Lamisplus_Nextkin_codeset_lookup;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

Nextkin_relationship = null;


// # Output table : 'Nextkin_relationship'
Nextkin_relationship_tmp.person_uuid = Patient_NextKin_relationship_mapping.person_uuid ;
Nextkin_relationship_tmp.relationshipid = Lamisplus_Nextkin_codeset_lookup.codeset_id ;
Nextkin_relationship_tmp.display = Lamisplus_Nextkin_codeset_lookup.kin_display ;
Nextkin_relationship = Nextkin_relationship_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "Nextkin_relationship"
if(Nextkin_relationship != null) { 



	
	/**
	 * [tAdvancedHash_Nextkin_relationship main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Nextkin_relationship";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Nextkin_relationship");
					}
					


			   
			   

					Nextkin_relationshipStruct Nextkin_relationship_HashRow = new Nextkin_relationshipStruct();
		   	   	   
				
				Nextkin_relationship_HashRow.person_uuid = Nextkin_relationship.person_uuid;
				
				Nextkin_relationship_HashRow.relationshipid = Nextkin_relationship.relationshipid;
				
				Nextkin_relationship_HashRow.display = Nextkin_relationship.display;
				
			tHash_Lookup_Nextkin_relationship.put(Nextkin_relationship_HashRow);
			
            




 


	tos_count_tAdvancedHash_Nextkin_relationship++;

/**
 * [tAdvancedHash_Nextkin_relationship main ] stop
 */
	
	/**
	 * [tAdvancedHash_Nextkin_relationship process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Nextkin_relationship";

	

 



/**
 * [tAdvancedHash_Nextkin_relationship process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_Nextkin_relationship process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Nextkin_relationship";

	

 



/**
 * [tAdvancedHash_Nextkin_relationship process_data_end ] stop
 */

} // End of branch "Nextkin_relationship"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_10 end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

	}
}finally{
	if (rs_tDBInput_10 != null) {
		rs_tDBInput_10.close();
	}
	if (stmt_tDBInput_10 != null) {
		stmt_tDBInput_10.close();
	}
	if(conn_tDBInput_10 != null && !conn_tDBInput_10.isClosed()) {
		
			conn_tDBInput_10.commit();
			
		
			conn_tDBInput_10.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_10_NB_LINE",nb_line_tDBInput_10);
 

ok_Hash.put("tDBInput_10", true);
end_Hash.put("tDBInput_10", System.currentTimeMillis());




/**
 * [tDBInput_10 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_Lamisplus_Nextkin_codeset_lookup != null) {
						tHash_Lookup_Lamisplus_Nextkin_codeset_lookup.endGet();
					}
					globalMap.remove( "tHash_Lookup_Lamisplus_Nextkin_codeset_lookup" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Patient_NextKin_relationship_mapping");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_Nextkin_relationship end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Nextkin_relationship";

	

tHash_Lookup_Nextkin_relationship.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Nextkin_relationship");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_Nextkin_relationship", true);
end_Hash.put("tAdvancedHash_Nextkin_relationship", System.currentTimeMillis());




/**
 * [tAdvancedHash_Nextkin_relationship end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_Lamisplus_Nextkin_codeset_lookup"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_10 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_Nextkin_relationship finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Nextkin_relationship";

	

 



/**
 * [tAdvancedHash_Nextkin_relationship finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class EducationStruct implements routines.system.IPersistableComparableLookupRow<EducationStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int patient_id;

				public int getPatient_id () {
					return this.patient_id;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public String display;

				public String getDisplay () {
					return this.display;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.person_uuid == null) ? 0 : this.person_uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final EducationStruct other = (EducationStruct) obj;
		
						if (this.person_uuid == null) {
							if (other.person_uuid != null)
								return false;
						
						} else if (!this.person_uuid.equals(other.person_uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(EducationStruct other) {

		other.patient_id = this.patient_id;
	            other.person_uuid = this.person_uuid;
	            other.id = this.id;
	            other.display = this.display;
	            
	}

	public void copyKeysDataTo(EducationStruct other) {

		other.person_uuid = this.person_uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.patient_id = dis.readInt();
					
			            this.id = dis.readLong();
					
						this.display = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.patient_id);
					
		            	dos.writeLong(this.id);
					
						writeString(this.display, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_id="+String.valueOf(patient_id));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",id="+String.valueOf(id));
		sb.append(",display="+display);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(EducationStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.person_uuid, other.person_uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Patient_education_mappingStruct implements routines.system.IPersistableRow<Patient_education_mappingStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];

	
			    public int patient_id;

				public int getPatient_id () {
					return this.patient_id;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String display;

				public String getDisplay () {
					return this.display;
				}
				
			    public String education;

				public String getEducation () {
					return this.education;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
			        this.patient_id = dis.readInt();
					
					this.person_uuid = readString(dis);
					
					this.display = readString(dis);
					
					this.education = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.patient_id);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.display,dos);
					
					// String
				
						writeString(this.education,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_id="+String.valueOf(patient_id));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",display="+display);
		sb.append(",education="+education);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Patient_education_mappingStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_6Struct implements routines.system.IPersistableRow<after_tDBInput_6Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int patient_id;

				public int getPatient_id () {
					return this.patient_id;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String display;

				public String getDisplay () {
					return this.display;
				}
				
			    public String education;

				public String getEducation () {
					return this.education;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.patient_id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tDBInput_6Struct other = (after_tDBInput_6Struct) obj;
		
						if (this.patient_id != other.patient_id)
							return false;
					

		return true;
    }

	public void copyDataTo(after_tDBInput_6Struct other) {

		other.patient_id = this.patient_id;
	            other.person_uuid = this.person_uuid;
	            other.display = this.display;
	            other.education = this.education;
	            
	}

	public void copyKeysDataTo(after_tDBInput_6Struct other) {

		other.patient_id = this.patient_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
			        this.patient_id = dis.readInt();
					
					this.person_uuid = readString(dis);
					
					this.display = readString(dis);
					
					this.education = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.patient_id);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.display,dos);
					
					// String
				
						writeString(this.education,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_id="+String.valueOf(patient_id));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",display="+display);
		sb.append(",education="+education);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patient_id, other.patient_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_5Process(globalMap);

		Patient_education_mappingStruct Patient_education_mapping = new Patient_education_mappingStruct();
EducationStruct Education = new EducationStruct();





	
	/**
	 * [tAdvancedHash_Education begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_Education", false);
		start_Hash.put("tAdvancedHash_Education", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_Education";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Education");
					}
				
		int tos_count_tAdvancedHash_Education = 0;
		

			   		// connection name:Education
			   		// source node:tMap_3 - inputs:(Lamisplus_education_codeset_lookup,Patient_education_mapping) outputs:(Education,Education) | target node:tAdvancedHash_Education - inputs:(Education) outputs:()
			   		// linked node: tMap_6 - inputs:(Patients_mapping,Lamisplus_orgunits_lookup,Employment,Nextkin_relationship,Education,Marital_status,Facilities_lookup,Gender) outputs:(CreatJSON_Field)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_Education = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<EducationStruct> tHash_Lookup_Education =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<EducationStruct>getLookup(matchingModeEnum_Education);
	   						   
		   	   	   globalMap.put("tHash_Lookup_Education", tHash_Lookup_Education);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_Education begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Patient_education_mapping");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Lamisplus_education_codeset_lookupStruct> tHash_Lookup_Lamisplus_education_codeset_lookup = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Lamisplus_education_codeset_lookupStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Lamisplus_education_codeset_lookupStruct>) 
					globalMap.get( "tHash_Lookup_Lamisplus_education_codeset_lookup" ))
					;					
					
	

Lamisplus_education_codeset_lookupStruct Lamisplus_education_codeset_lookupHashKey = new Lamisplus_education_codeset_lookupStruct();
Lamisplus_education_codeset_lookupStruct Lamisplus_education_codeset_lookupDefault = new Lamisplus_education_codeset_lookupStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
EducationStruct Education_tmp = new EducationStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tDBInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_6", false);
		start_Hash.put("tDBInput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_6";

	
		int tos_count_tDBInput_6 = 0;
		
	
    
	
		    int nb_line_tDBInput_6 = 0;
		    java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_6 = java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_6 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;
				
				String url_tDBInput_6 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_6 = java.sql.DriverManager.getConnection(url_tDBInput_6,dbUser_tDBInput_6,dbPwd_tDBInput_6);
		        
				conn_tDBInput_6.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

		    String dbquery_tDBInput_6 = "SELECT h.patient_id, h.person_uuid, lower(left(h.education,4)) as display, h.education as education\nFROM etl_patient_s"
+"tage h";
			

            	globalMap.put("tDBInput_6_QUERY",dbquery_tDBInput_6);
		    java.sql.ResultSet rs_tDBInput_6 = null;

		    try {
		    	rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
		    	int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

		    String tmpContent_tDBInput_6 = null;
		    
		    
		    while (rs_tDBInput_6.next()) {
		        nb_line_tDBInput_6++;
		        
							if(colQtyInRs_tDBInput_6 < 1) {
								Patient_education_mapping.patient_id = 0;
							} else {
		                          
            Patient_education_mapping.patient_id = rs_tDBInput_6.getInt(1);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 2) {
								Patient_education_mapping.person_uuid = null;
							} else {
	                         		
        	Patient_education_mapping.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_6, 2, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 3) {
								Patient_education_mapping.display = null;
							} else {
	                         		
        	Patient_education_mapping.display = routines.system.JDBCUtil.getString(rs_tDBInput_6, 3, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 4) {
								Patient_education_mapping.education = null;
							} else {
	                         		
        	Patient_education_mapping.education = routines.system.JDBCUtil.getString(rs_tDBInput_6, 4, false);
		                    }
					


 



/**
 * [tDBInput_6 begin ] stop
 */
	
	/**
	 * [tDBInput_6 main ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 


	tos_count_tDBInput_6++;

/**
 * [tDBInput_6 main ] stop
 */
	
	/**
	 * [tDBInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Patient_education_mapping");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "Lamisplus_education_codeset_lookup" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopLamisplus_education_codeset_lookup = false;
       		  	    	
       		  	    	
 							Lamisplus_education_codeset_lookupStruct Lamisplus_education_codeset_lookupObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    Lamisplus_education_codeset_lookupHashKey.display = Patient_education_mapping.display ;
                        		    		

								
		                        	Lamisplus_education_codeset_lookupHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_Lamisplus_education_codeset_lookup.lookup( Lamisplus_education_codeset_lookupHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_Lamisplus_education_codeset_lookup != null && tHash_Lookup_Lamisplus_education_codeset_lookup.getCount(Lamisplus_education_codeset_lookupHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'Lamisplus_education_codeset_lookup' and it contains more one result from keys :  Lamisplus_education_codeset_lookup.display = '" + Lamisplus_education_codeset_lookupHashKey.display + "'");
								} // G 071
							

							Lamisplus_education_codeset_lookupStruct Lamisplus_education_codeset_lookup = null;
                    		  	 
							   
                    		  	 
	       		  	    	Lamisplus_education_codeset_lookupStruct fromLookup_Lamisplus_education_codeset_lookup = null;
							Lamisplus_education_codeset_lookup = Lamisplus_education_codeset_lookupDefault;
										 
							
								 
							
							
								if (tHash_Lookup_Lamisplus_education_codeset_lookup !=null && tHash_Lookup_Lamisplus_education_codeset_lookup.hasNext()) { // G 099
								
							
								
								fromLookup_Lamisplus_education_codeset_lookup = tHash_Lookup_Lamisplus_education_codeset_lookup.next();

							
							
								} // G 099
							
							

							if(fromLookup_Lamisplus_education_codeset_lookup != null) {
								Lamisplus_education_codeset_lookup = fromLookup_Lamisplus_education_codeset_lookup;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

Education = null;


// # Output table : 'Education'
Education_tmp.patient_id = Patient_education_mapping.patient_id ;
Education_tmp.person_uuid = Patient_education_mapping.person_uuid ;
Education_tmp.id = Lamisplus_education_codeset_lookup.codeset_id ;
Education_tmp.display = Lamisplus_education_codeset_lookup.education_display ;
Education = Education_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "Education"
if(Education != null) { 



	
	/**
	 * [tAdvancedHash_Education main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Education";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Education");
					}
					


			   
			   

					EducationStruct Education_HashRow = new EducationStruct();
		   	   	   
				
				Education_HashRow.patient_id = Education.patient_id;
				
				Education_HashRow.person_uuid = Education.person_uuid;
				
				Education_HashRow.id = Education.id;
				
				Education_HashRow.display = Education.display;
				
			tHash_Lookup_Education.put(Education_HashRow);
			
            




 


	tos_count_tAdvancedHash_Education++;

/**
 * [tAdvancedHash_Education main ] stop
 */
	
	/**
	 * [tAdvancedHash_Education process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Education";

	

 



/**
 * [tAdvancedHash_Education process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_Education process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Education";

	

 



/**
 * [tAdvancedHash_Education process_data_end ] stop
 */

} // End of branch "Education"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_6 end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

	}
}finally{
	if (rs_tDBInput_6 != null) {
		rs_tDBInput_6.close();
	}
	if (stmt_tDBInput_6 != null) {
		stmt_tDBInput_6.close();
	}
	if(conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {
		
			conn_tDBInput_6.commit();
			
		
			conn_tDBInput_6.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_6_NB_LINE",nb_line_tDBInput_6);
 

ok_Hash.put("tDBInput_6", true);
end_Hash.put("tDBInput_6", System.currentTimeMillis());




/**
 * [tDBInput_6 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_Lamisplus_education_codeset_lookup != null) {
						tHash_Lookup_Lamisplus_education_codeset_lookup.endGet();
					}
					globalMap.remove( "tHash_Lookup_Lamisplus_education_codeset_lookup" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Patient_education_mapping");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_Education end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Education";

	

tHash_Lookup_Education.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Education");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_Education", true);
end_Hash.put("tAdvancedHash_Education", System.currentTimeMillis());




/**
 * [tAdvancedHash_Education end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_Lamisplus_education_codeset_lookup"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_Education finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Education";

	

 



/**
 * [tAdvancedHash_Education finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class Marital_statusStruct implements routines.system.IPersistableComparableLookupRow<Marital_statusStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public Long id;

				public Long getId () {
					return this.id;
				}
				
			    public String display;

				public String getDisplay () {
					return this.display;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.person_uuid == null) ? 0 : this.person_uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Marital_statusStruct other = (Marital_statusStruct) obj;
		
						if (this.person_uuid == null) {
							if (other.person_uuid != null)
								return false;
						
						} else if (!this.person_uuid.equals(other.person_uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Marital_statusStruct other) {

		other.person_uuid = this.person_uuid;
	            other.id = this.id;
	            other.display = this.display;
	            
	}

	public void copyKeysDataTo(Marital_statusStruct other) {

		other.person_uuid = this.person_uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id = null;
           				} else {
           			    	this.id = dis.readLong();
           				}
					
						this.display = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						if(this.id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id);
		            	}
					
						writeString(this.display, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",id="+String.valueOf(id));
		sb.append(",display="+display);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Marital_statusStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.person_uuid, other.person_uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Patient_marital_status_mappingStruct implements routines.system.IPersistableRow<Patient_marital_status_mappingStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];

	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String marital_status;

				public String getMarital_status () {
					return this.marital_status;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
					this.marital_status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.marital_status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",marital_status="+marital_status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Patient_marital_status_mappingStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_2Struct implements routines.system.IPersistableRow<after_tDBInput_2Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String marital_status;

				public String getMarital_status () {
					return this.marital_status;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.person_uuid == null) ? 0 : this.person_uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tDBInput_2Struct other = (after_tDBInput_2Struct) obj;
		
						if (this.person_uuid == null) {
							if (other.person_uuid != null)
								return false;
						
						} else if (!this.person_uuid.equals(other.person_uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(after_tDBInput_2Struct other) {

		other.person_uuid = this.person_uuid;
	            other.marital_status = this.marital_status;
	            
	}

	public void copyKeysDataTo(after_tDBInput_2Struct other) {

		other.person_uuid = this.person_uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
					this.marital_status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.marital_status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",marital_status="+marital_status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.person_uuid, other.person_uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_1Process(globalMap);

		Patient_marital_status_mappingStruct Patient_marital_status_mapping = new Patient_marital_status_mappingStruct();
Marital_statusStruct Marital_status = new Marital_statusStruct();





	
	/**
	 * [tAdvancedHash_Marital_status begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_Marital_status", false);
		start_Hash.put("tAdvancedHash_Marital_status", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_Marital_status";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Marital_status");
					}
				
		int tos_count_tAdvancedHash_Marital_status = 0;
		

			   		// connection name:Marital_status
			   		// source node:tMap_1 - inputs:(Lamisplus_marital_codeset_lookup,Patient_marital_status_mapping) outputs:(Marital_status,Marital_status) | target node:tAdvancedHash_Marital_status - inputs:(Marital_status) outputs:()
			   		// linked node: tMap_6 - inputs:(Patients_mapping,Lamisplus_orgunits_lookup,Employment,Nextkin_relationship,Education,Marital_status,Facilities_lookup,Gender) outputs:(CreatJSON_Field)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_Marital_status = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Marital_statusStruct> tHash_Lookup_Marital_status =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<Marital_statusStruct>getLookup(matchingModeEnum_Marital_status);
	   						   
		   	   	   globalMap.put("tHash_Lookup_Marital_status", tHash_Lookup_Marital_status);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_Marital_status begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Patient_marital_status_mapping");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Lamisplus_marital_codeset_lookupStruct> tHash_Lookup_Lamisplus_marital_codeset_lookup = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Lamisplus_marital_codeset_lookupStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Lamisplus_marital_codeset_lookupStruct>) 
					globalMap.get( "tHash_Lookup_Lamisplus_marital_codeset_lookup" ))
					;					
					
	

Lamisplus_marital_codeset_lookupStruct Lamisplus_marital_codeset_lookupHashKey = new Lamisplus_marital_codeset_lookupStruct();
Lamisplus_marital_codeset_lookupStruct Lamisplus_marital_codeset_lookupDefault = new Lamisplus_marital_codeset_lookupStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
Marital_statusStruct Marital_status_tmp = new Marital_statusStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_2 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
				String url_tDBInput_2 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
				conn_tDBInput_2.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT person_uuid,lower(left(h.marital_status,4)) as marital_status \nFROM etl_patient_stage h";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								Patient_marital_status_mapping.person_uuid = null;
							} else {
	                         		
        	Patient_marital_status_mapping.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								Patient_marital_status_mapping.marital_status = null;
							} else {
	                         		
        	Patient_marital_status_mapping.marital_status = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
					


 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Patient_marital_status_mapping");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "Lamisplus_marital_codeset_lookup" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopLamisplus_marital_codeset_lookup = false;
       		  	    	
       		  	    	
 							Lamisplus_marital_codeset_lookupStruct Lamisplus_marital_codeset_lookupObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    Lamisplus_marital_codeset_lookupHashKey.display = Patient_marital_status_mapping.marital_status ;
                        		    		

								
		                        	Lamisplus_marital_codeset_lookupHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_Lamisplus_marital_codeset_lookup.lookup( Lamisplus_marital_codeset_lookupHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_Lamisplus_marital_codeset_lookup != null && tHash_Lookup_Lamisplus_marital_codeset_lookup.getCount(Lamisplus_marital_codeset_lookupHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'Lamisplus_marital_codeset_lookup' and it contains more one result from keys :  Lamisplus_marital_codeset_lookup.display = '" + Lamisplus_marital_codeset_lookupHashKey.display + "'");
								} // G 071
							

							Lamisplus_marital_codeset_lookupStruct Lamisplus_marital_codeset_lookup = null;
                    		  	 
							   
                    		  	 
	       		  	    	Lamisplus_marital_codeset_lookupStruct fromLookup_Lamisplus_marital_codeset_lookup = null;
							Lamisplus_marital_codeset_lookup = Lamisplus_marital_codeset_lookupDefault;
										 
							
								 
							
							
								if (tHash_Lookup_Lamisplus_marital_codeset_lookup !=null && tHash_Lookup_Lamisplus_marital_codeset_lookup.hasNext()) { // G 099
								
							
								
								fromLookup_Lamisplus_marital_codeset_lookup = tHash_Lookup_Lamisplus_marital_codeset_lookup.next();

							
							
								} // G 099
							
							

							if(fromLookup_Lamisplus_marital_codeset_lookup != null) {
								Lamisplus_marital_codeset_lookup = fromLookup_Lamisplus_marital_codeset_lookup;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

Marital_status = null;


// # Output table : 'Marital_status'
Marital_status_tmp.person_uuid = Patient_marital_status_mapping.person_uuid ;
Marital_status_tmp.id = Lamisplus_marital_codeset_lookup.codeset_id ;
Marital_status_tmp.display = Lamisplus_marital_codeset_lookup.status_display ;
Marital_status = Marital_status_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "Marital_status"
if(Marital_status != null) { 



	
	/**
	 * [tAdvancedHash_Marital_status main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Marital_status";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Marital_status");
					}
					


			   
			   

					Marital_statusStruct Marital_status_HashRow = new Marital_statusStruct();
		   	   	   
				
				Marital_status_HashRow.person_uuid = Marital_status.person_uuid;
				
				Marital_status_HashRow.id = Marital_status.id;
				
				Marital_status_HashRow.display = Marital_status.display;
				
			tHash_Lookup_Marital_status.put(Marital_status_HashRow);
			
            




 


	tos_count_tAdvancedHash_Marital_status++;

/**
 * [tAdvancedHash_Marital_status main ] stop
 */
	
	/**
	 * [tAdvancedHash_Marital_status process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Marital_status";

	

 



/**
 * [tAdvancedHash_Marital_status process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_Marital_status process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Marital_status";

	

 



/**
 * [tAdvancedHash_Marital_status process_data_end ] stop
 */

} // End of branch "Marital_status"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
	if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
		
			conn_tDBInput_2.commit();
			
		
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_Lamisplus_marital_codeset_lookup != null) {
						tHash_Lookup_Lamisplus_marital_codeset_lookup.endGet();
					}
					globalMap.remove( "tHash_Lookup_Lamisplus_marital_codeset_lookup" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Patient_marital_status_mapping");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_Marital_status end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Marital_status";

	

tHash_Lookup_Marital_status.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Marital_status");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_Marital_status", true);
end_Hash.put("tAdvancedHash_Marital_status", System.currentTimeMillis());




/**
 * [tAdvancedHash_Marital_status end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_Lamisplus_marital_codeset_lookup"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_Marital_status finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Marital_status";

	

 



/**
 * [tAdvancedHash_Marital_status finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class GenderStruct implements routines.system.IPersistableComparableLookupRow<GenderStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public String display;

				public String getDisplay () {
					return this.display;
				}
				
			    public String sex;

				public String getSex () {
					return this.sex;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.person_uuid == null) ? 0 : this.person_uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final GenderStruct other = (GenderStruct) obj;
		
						if (this.person_uuid == null) {
							if (other.person_uuid != null)
								return false;
						
						} else if (!this.person_uuid.equals(other.person_uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(GenderStruct other) {

		other.person_uuid = this.person_uuid;
	            other.id = this.id;
	            other.display = this.display;
	            other.sex = this.sex;
	            
	}

	public void copyKeysDataTo(GenderStruct other) {

		other.person_uuid = this.person_uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readLong();
					
						this.display = readString(dis,ois);
					
						this.sex = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeLong(this.id);
					
						writeString(this.display, dos, oos);
					
						writeString(this.sex, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",id="+String.valueOf(id));
		sb.append(",display="+display);
		sb.append(",sex="+sex);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(GenderStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.person_uuid, other.person_uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Patient_gender_mappingStruct implements routines.system.IPersistableRow<Patient_gender_mappingStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];

	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String gender;

				public String getGender () {
					return this.gender;
				}
				
			    public String sex;

				public String getSex () {
					return this.sex;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
					this.gender = readString(dis);
					
					this.sex = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.gender,dos);
					
					// String
				
						writeString(this.sex,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",gender="+gender);
		sb.append(",sex="+sex);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Patient_gender_mappingStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_4Struct implements routines.system.IPersistableRow<after_tDBInput_4Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];

	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String gender;

				public String getGender () {
					return this.gender;
				}
				
			    public String sex;

				public String getSex () {
					return this.sex;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
					this.gender = readString(dis);
					
					this.sex = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.gender,dos);
					
					// String
				
						writeString(this.sex,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",gender="+gender);
		sb.append(",sex="+sex);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_3Process(globalMap);

		Patient_gender_mappingStruct Patient_gender_mapping = new Patient_gender_mappingStruct();
GenderStruct Gender = new GenderStruct();





	
	/**
	 * [tAdvancedHash_Gender begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_Gender", false);
		start_Hash.put("tAdvancedHash_Gender", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_Gender";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Gender");
					}
				
		int tos_count_tAdvancedHash_Gender = 0;
		

			   		// connection name:Gender
			   		// source node:tMap_2 - inputs:(Lamisplus_gender_codeset_lookup,Patient_gender_mapping) outputs:(Gender,Gender) | target node:tAdvancedHash_Gender - inputs:(Gender) outputs:()
			   		// linked node: tMap_6 - inputs:(Patients_mapping,Lamisplus_orgunits_lookup,Employment,Nextkin_relationship,Education,Marital_status,Facilities_lookup,Gender) outputs:(CreatJSON_Field)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_Gender = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<GenderStruct> tHash_Lookup_Gender =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<GenderStruct>getLookup(matchingModeEnum_Gender);
	   						   
		   	   	   globalMap.put("tHash_Lookup_Gender", tHash_Lookup_Gender);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_Gender begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Patient_gender_mapping");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Lamisplus_gender_codeset_lookupStruct> tHash_Lookup_Lamisplus_gender_codeset_lookup = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Lamisplus_gender_codeset_lookupStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Lamisplus_gender_codeset_lookupStruct>) 
					globalMap.get( "tHash_Lookup_Lamisplus_gender_codeset_lookup" ))
					;					
					
	

Lamisplus_gender_codeset_lookupStruct Lamisplus_gender_codeset_lookupHashKey = new Lamisplus_gender_codeset_lookupStruct();
Lamisplus_gender_codeset_lookupStruct Lamisplus_gender_codeset_lookupDefault = new Lamisplus_gender_codeset_lookupStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
GenderStruct Gender_tmp = new GenderStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_4 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
				
				String url_tDBInput_4 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4,dbUser_tDBInput_4,dbPwd_tDBInput_4);
		        
				conn_tDBInput_4.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT person_uuid,lower(left(h.gender,8)) as gender,h.gender as sex\nFROM etl_patient_stage h";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								Patient_gender_mapping.person_uuid = null;
							} else {
	                         		
        	Patient_gender_mapping.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_4, 1, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								Patient_gender_mapping.gender = null;
							} else {
	                         		
        	Patient_gender_mapping.gender = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								Patient_gender_mapping.sex = null;
							} else {
	                         		
        	Patient_gender_mapping.sex = routines.system.JDBCUtil.getString(rs_tDBInput_4, 3, false);
		                    }
					


 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Patient_gender_mapping");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "Lamisplus_gender_codeset_lookup" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopLamisplus_gender_codeset_lookup = false;
       		  	    	
       		  	    	
 							Lamisplus_gender_codeset_lookupStruct Lamisplus_gender_codeset_lookupObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    Lamisplus_gender_codeset_lookupHashKey.display = Patient_gender_mapping.gender ;
                        		    		

								
		                        	Lamisplus_gender_codeset_lookupHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_Lamisplus_gender_codeset_lookup.lookup( Lamisplus_gender_codeset_lookupHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_Lamisplus_gender_codeset_lookup != null && tHash_Lookup_Lamisplus_gender_codeset_lookup.getCount(Lamisplus_gender_codeset_lookupHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'Lamisplus_gender_codeset_lookup' and it contains more one result from keys :  Lamisplus_gender_codeset_lookup.display = '" + Lamisplus_gender_codeset_lookupHashKey.display + "'");
								} // G 071
							

							Lamisplus_gender_codeset_lookupStruct Lamisplus_gender_codeset_lookup = null;
                    		  	 
							   
                    		  	 
	       		  	    	Lamisplus_gender_codeset_lookupStruct fromLookup_Lamisplus_gender_codeset_lookup = null;
							Lamisplus_gender_codeset_lookup = Lamisplus_gender_codeset_lookupDefault;
										 
							
								 
							
							
								if (tHash_Lookup_Lamisplus_gender_codeset_lookup !=null && tHash_Lookup_Lamisplus_gender_codeset_lookup.hasNext()) { // G 099
								
							
								
								fromLookup_Lamisplus_gender_codeset_lookup = tHash_Lookup_Lamisplus_gender_codeset_lookup.next();

							
							
								} // G 099
							
							

							if(fromLookup_Lamisplus_gender_codeset_lookup != null) {
								Lamisplus_gender_codeset_lookup = fromLookup_Lamisplus_gender_codeset_lookup;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

Gender = null;


// # Output table : 'Gender'
Gender_tmp.person_uuid = Patient_gender_mapping.person_uuid ;
Gender_tmp.id = Lamisplus_gender_codeset_lookup.codeset_id ;
Gender_tmp.display = Lamisplus_gender_codeset_lookup.display_gender ;
Gender_tmp.sex = Patient_gender_mapping.sex ;
Gender = Gender_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "Gender"
if(Gender != null) { 



	
	/**
	 * [tAdvancedHash_Gender main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Gender";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Gender");
					}
					


			   
			   

					GenderStruct Gender_HashRow = new GenderStruct();
		   	   	   
				
				Gender_HashRow.person_uuid = Gender.person_uuid;
				
				Gender_HashRow.id = Gender.id;
				
				Gender_HashRow.display = Gender.display;
				
				Gender_HashRow.sex = Gender.sex;
				
			tHash_Lookup_Gender.put(Gender_HashRow);
			
            




 


	tos_count_tAdvancedHash_Gender++;

/**
 * [tAdvancedHash_Gender main ] stop
 */
	
	/**
	 * [tAdvancedHash_Gender process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Gender";

	

 



/**
 * [tAdvancedHash_Gender process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_Gender process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Gender";

	

 



/**
 * [tAdvancedHash_Gender process_data_end ] stop
 */

} // End of branch "Gender"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
	if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
		
			conn_tDBInput_4.commit();
			
		
			conn_tDBInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);
 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_Lamisplus_gender_codeset_lookup != null) {
						tHash_Lookup_Lamisplus_gender_codeset_lookup.endGet();
					}
					globalMap.remove( "tHash_Lookup_Lamisplus_gender_codeset_lookup" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Patient_gender_mapping");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_Gender end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Gender";

	

tHash_Lookup_Gender.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Gender");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_Gender", true);
end_Hash.put("tAdvancedHash_Gender", System.currentTimeMillis());




/**
 * [tAdvancedHash_Gender end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_Lamisplus_gender_codeset_lookup"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_Gender finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Gender";

	

 



/**
 * [tAdvancedHash_Gender finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class Unique_Patient_recordsStruct implements routines.system.IPersistableRow<Unique_Patient_recordsStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int patient_id;

				public int getPatient_id () {
					return this.patient_id;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String gender;

				public String getGender () {
					return this.gender;
				}
				
			    public String marital_status;

				public String getMarital_status () {
					return this.marital_status;
				}
				
			    public String education;

				public String getEducation () {
					return this.education;
				}
				
			    public String occupation;

				public String getOccupation () {
					return this.occupation;
				}
				
			    public String next_of_kin_relationship;

				public String getNext_of_kin_relationship () {
					return this.next_of_kin_relationship;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.patient_id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Unique_Patient_recordsStruct other = (Unique_Patient_recordsStruct) obj;
		
						if (this.patient_id != other.patient_id)
							return false;
					

		return true;
    }

	public void copyDataTo(Unique_Patient_recordsStruct other) {

		other.patient_id = this.patient_id;
	            other.person_uuid = this.person_uuid;
	            other.gender = this.gender;
	            other.marital_status = this.marital_status;
	            other.education = this.education;
	            other.occupation = this.occupation;
	            other.next_of_kin_relationship = this.next_of_kin_relationship;
	            
	}

	public void copyKeysDataTo(Unique_Patient_recordsStruct other) {

		other.patient_id = this.patient_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
			        this.patient_id = dis.readInt();
					
					this.person_uuid = readString(dis);
					
					this.gender = readString(dis);
					
					this.marital_status = readString(dis);
					
					this.education = readString(dis);
					
					this.occupation = readString(dis);
					
					this.next_of_kin_relationship = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.patient_id);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.gender,dos);
					
					// String
				
						writeString(this.marital_status,dos);
					
					// String
				
						writeString(this.education,dos);
					
					// String
				
						writeString(this.occupation,dos);
					
					// String
				
						writeString(this.next_of_kin_relationship,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_id="+String.valueOf(patient_id));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",gender="+gender);
		sb.append(",marital_status="+marital_status);
		sb.append(",education="+education);
		sb.append(",occupation="+occupation);
		sb.append(",next_of_kin_relationship="+next_of_kin_relationship);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Unique_Patient_recordsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patient_id, other.patient_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Duplicate_patient_recordsStruct implements routines.system.IPersistableRow<Duplicate_patient_recordsStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int patient_id;

				public int getPatient_id () {
					return this.patient_id;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String gender;

				public String getGender () {
					return this.gender;
				}
				
			    public String marital_status;

				public String getMarital_status () {
					return this.marital_status;
				}
				
			    public String education;

				public String getEducation () {
					return this.education;
				}
				
			    public String occupation;

				public String getOccupation () {
					return this.occupation;
				}
				
			    public String next_of_kin_relationship;

				public String getNext_of_kin_relationship () {
					return this.next_of_kin_relationship;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.patient_id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Duplicate_patient_recordsStruct other = (Duplicate_patient_recordsStruct) obj;
		
						if (this.patient_id != other.patient_id)
							return false;
					

		return true;
    }

	public void copyDataTo(Duplicate_patient_recordsStruct other) {

		other.patient_id = this.patient_id;
	            other.person_uuid = this.person_uuid;
	            other.gender = this.gender;
	            other.marital_status = this.marital_status;
	            other.education = this.education;
	            other.occupation = this.occupation;
	            other.next_of_kin_relationship = this.next_of_kin_relationship;
	            
	}

	public void copyKeysDataTo(Duplicate_patient_recordsStruct other) {

		other.patient_id = this.patient_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
			        this.patient_id = dis.readInt();
					
					this.person_uuid = readString(dis);
					
					this.gender = readString(dis);
					
					this.marital_status = readString(dis);
					
					this.education = readString(dis);
					
					this.occupation = readString(dis);
					
					this.next_of_kin_relationship = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.patient_id);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.gender,dos);
					
					// String
				
						writeString(this.marital_status,dos);
					
					// String
				
						writeString(this.education,dos);
					
					// String
				
						writeString(this.occupation,dos);
					
					// String
				
						writeString(this.next_of_kin_relationship,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_id="+String.valueOf(patient_id));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",gender="+gender);
		sb.append(",marital_status="+marital_status);
		sb.append(",education="+education);
		sb.append(",occupation="+occupation);
		sb.append(",next_of_kin_relationship="+next_of_kin_relationship);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Duplicate_patient_recordsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patient_id, other.patient_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Check_duplicatesStruct implements routines.system.IPersistableRow<Check_duplicatesStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int patient_id;

				public int getPatient_id () {
					return this.patient_id;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String gender;

				public String getGender () {
					return this.gender;
				}
				
			    public String marital_status;

				public String getMarital_status () {
					return this.marital_status;
				}
				
			    public String education;

				public String getEducation () {
					return this.education;
				}
				
			    public String occupation;

				public String getOccupation () {
					return this.occupation;
				}
				
			    public String next_of_kin_relationship;

				public String getNext_of_kin_relationship () {
					return this.next_of_kin_relationship;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.patient_id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Check_duplicatesStruct other = (Check_duplicatesStruct) obj;
		
						if (this.patient_id != other.patient_id)
							return false;
					

		return true;
    }

	public void copyDataTo(Check_duplicatesStruct other) {

		other.patient_id = this.patient_id;
	            other.person_uuid = this.person_uuid;
	            other.gender = this.gender;
	            other.marital_status = this.marital_status;
	            other.education = this.education;
	            other.occupation = this.occupation;
	            other.next_of_kin_relationship = this.next_of_kin_relationship;
	            
	}

	public void copyKeysDataTo(Check_duplicatesStruct other) {

		other.patient_id = this.patient_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
			        this.patient_id = dis.readInt();
					
					this.person_uuid = readString(dis);
					
					this.gender = readString(dis);
					
					this.marital_status = readString(dis);
					
					this.education = readString(dis);
					
					this.occupation = readString(dis);
					
					this.next_of_kin_relationship = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.patient_id);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.gender,dos);
					
					// String
				
						writeString(this.marital_status,dos);
					
					// String
				
						writeString(this.education,dos);
					
					// String
				
						writeString(this.occupation,dos);
					
					// String
				
						writeString(this.next_of_kin_relationship,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_id="+String.valueOf(patient_id));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",gender="+gender);
		sb.append(",marital_status="+marital_status);
		sb.append(",education="+education);
		sb.append(",occupation="+occupation);
		sb.append(",next_of_kin_relationship="+next_of_kin_relationship);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Check_duplicatesStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patient_id, other.patient_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtSortRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int patient_id;

				public int getPatient_id () {
					return this.patient_id;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String gender;

				public String getGender () {
					return this.gender;
				}
				
			    public String marital_status;

				public String getMarital_status () {
					return this.marital_status;
				}
				
			    public String education;

				public String getEducation () {
					return this.education;
				}
				
			    public String occupation;

				public String getOccupation () {
					return this.occupation;
				}
				
			    public String next_of_kin_relationship;

				public String getNext_of_kin_relationship () {
					return this.next_of_kin_relationship;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.patient_id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final OnRowsEndStructtSortRow_1 other = (OnRowsEndStructtSortRow_1) obj;
		
						if (this.patient_id != other.patient_id)
							return false;
					

		return true;
    }

	public void copyDataTo(OnRowsEndStructtSortRow_1 other) {

		other.patient_id = this.patient_id;
	            other.person_uuid = this.person_uuid;
	            other.gender = this.gender;
	            other.marital_status = this.marital_status;
	            other.education = this.education;
	            other.occupation = this.occupation;
	            other.next_of_kin_relationship = this.next_of_kin_relationship;
	            
	}

	public void copyKeysDataTo(OnRowsEndStructtSortRow_1 other) {

		other.patient_id = this.patient_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
			        this.patient_id = dis.readInt();
					
					this.person_uuid = readString(dis);
					
					this.gender = readString(dis);
					
					this.marital_status = readString(dis);
					
					this.education = readString(dis);
					
					this.occupation = readString(dis);
					
					this.next_of_kin_relationship = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.patient_id);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.gender,dos);
					
					// String
				
						writeString(this.marital_status,dos);
					
					// String
				
						writeString(this.education,dos);
					
					// String
				
						writeString(this.occupation,dos);
					
					// String
				
						writeString(this.next_of_kin_relationship,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_id="+String.valueOf(patient_id));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",gender="+gender);
		sb.append(",marital_status="+marital_status);
		sb.append(",education="+education);
		sb.append(",occupation="+occupation);
		sb.append(",next_of_kin_relationship="+next_of_kin_relationship);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtSortRow_1 other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patient_id, other.patient_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Sort_recordsStruct implements routines.system.IPersistableRow<Sort_recordsStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int patient_id;

				public int getPatient_id () {
					return this.patient_id;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String gender;

				public String getGender () {
					return this.gender;
				}
				
			    public String marital_status;

				public String getMarital_status () {
					return this.marital_status;
				}
				
			    public String education;

				public String getEducation () {
					return this.education;
				}
				
			    public String occupation;

				public String getOccupation () {
					return this.occupation;
				}
				
			    public String next_of_kin_relationship;

				public String getNext_of_kin_relationship () {
					return this.next_of_kin_relationship;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.patient_id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Sort_recordsStruct other = (Sort_recordsStruct) obj;
		
						if (this.patient_id != other.patient_id)
							return false;
					

		return true;
    }

	public void copyDataTo(Sort_recordsStruct other) {

		other.patient_id = this.patient_id;
	            other.person_uuid = this.person_uuid;
	            other.gender = this.gender;
	            other.marital_status = this.marital_status;
	            other.education = this.education;
	            other.occupation = this.occupation;
	            other.next_of_kin_relationship = this.next_of_kin_relationship;
	            
	}

	public void copyKeysDataTo(Sort_recordsStruct other) {

		other.patient_id = this.patient_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
			        this.patient_id = dis.readInt();
					
					this.person_uuid = readString(dis);
					
					this.gender = readString(dis);
					
					this.marital_status = readString(dis);
					
					this.education = readString(dis);
					
					this.occupation = readString(dis);
					
					this.next_of_kin_relationship = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.patient_id);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.gender,dos);
					
					// String
				
						writeString(this.marital_status,dos);
					
					// String
				
						writeString(this.education,dos);
					
					// String
				
						writeString(this.occupation,dos);
					
					// String
				
						writeString(this.next_of_kin_relationship,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_id="+String.valueOf(patient_id));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",gender="+gender);
		sb.append(",marital_status="+marital_status);
		sb.append(",education="+education);
		sb.append(",occupation="+occupation);
		sb.append(",next_of_kin_relationship="+next_of_kin_relationship);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Sort_recordsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.patient_id, other.patient_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Extract_Lamis3_PatientsStruct implements routines.system.IPersistableRow<Extract_Lamis3_PatientsStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];

	
			    public int patient_id;

				public int getPatient_id () {
					return this.patient_id;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String gender;

				public String getGender () {
					return this.gender;
				}
				
			    public String marital_status;

				public String getMarital_status () {
					return this.marital_status;
				}
				
			    public String education;

				public String getEducation () {
					return this.education;
				}
				
			    public String occupation;

				public String getOccupation () {
					return this.occupation;
				}
				
			    public String next_of_kin_relationship;

				public String getNext_of_kin_relationship () {
					return this.next_of_kin_relationship;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
			        this.patient_id = dis.readInt();
					
					this.person_uuid = readString(dis);
					
					this.gender = readString(dis);
					
					this.marital_status = readString(dis);
					
					this.education = readString(dis);
					
					this.occupation = readString(dis);
					
					this.next_of_kin_relationship = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.patient_id);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.gender,dos);
					
					// String
				
						writeString(this.marital_status,dos);
					
					// String
				
						writeString(this.education,dos);
					
					// String
				
						writeString(this.occupation,dos);
					
					// String
				
						writeString(this.next_of_kin_relationship,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_id="+String.valueOf(patient_id));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",gender="+gender);
		sb.append(",marital_status="+marital_status);
		sb.append(",education="+education);
		sb.append(",occupation="+occupation);
		sb.append(",next_of_kin_relationship="+next_of_kin_relationship);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Extract_Lamis3_PatientsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		Extract_Lamis3_PatientsStruct Extract_Lamis3_Patients = new Extract_Lamis3_PatientsStruct();
Sort_recordsStruct Sort_records = new Sort_recordsStruct();
Check_duplicatesStruct Check_duplicates = new Check_duplicatesStruct();
Unique_Patient_recordsStruct Unique_Patient_records = new Unique_Patient_recordsStruct();
Duplicate_patient_recordsStruct Duplicate_patient_records = new Duplicate_patient_recordsStruct();





	
	/**
	 * [tSortRow_1_SortOut begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_1_SortOut", false);
		start_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Sort_records");
					}
				
		int tos_count_tSortRow_1_SortOut = 0;
		


class ComparableSort_recordsStruct extends Sort_recordsStruct implements Comparable<ComparableSort_recordsStruct> {
	
	public int compareTo(ComparableSort_recordsStruct other) {

		if(this.patient_id != other.patient_id){
						
				return this.patient_id > other.patient_id ? 1 : -1;
							
		}
		return 0;
	}
}

java.util.List<ComparableSort_recordsStruct> list_tSortRow_1_SortOut = new java.util.ArrayList<ComparableSort_recordsStruct>();


 



/**
 * [tSortRow_1_SortOut begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Extract_Lamis3_Patients");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
Sort_recordsStruct Sort_records_tmp = new Sort_recordsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tDBInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_11", false);
		start_Hash.put("tDBInput_11", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_11";

	
		int tos_count_tDBInput_11 = 0;
		
	
    
	
		    int nb_line_tDBInput_11 = 0;
		    java.sql.Connection conn_tDBInput_11 = null;
				String driverClass_tDBInput_11 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_11 = java.lang.Class.forName(driverClass_tDBInput_11);
				String dbUser_tDBInput_11 = context.LAMIS3_Login;
				
				
	final String decryptedPassword_tDBInput_11 = context.LAMIS3_Password; 
				
				String dbPwd_tDBInput_11 = decryptedPassword_tDBInput_11;
				
				String url_tDBInput_11 = "jdbc:postgresql://" + context.LAMIS3_Server + ":" + context.LAMIS3_Port + "/" + context.LAMIS3_Database + "?" + context.LAMIS3_AdditionalParams;
				
				conn_tDBInput_11 = java.sql.DriverManager.getConnection(url_tDBInput_11,dbUser_tDBInput_11,dbPwd_tDBInput_11);
		        
				conn_tDBInput_11.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_11 = conn_tDBInput_11.createStatement();

		    String dbquery_tDBInput_11 = "SELECT p.id as patient_id,p.uuid as person_uuid,p.gender,p.marital_status,\n    p.education,p.occupation,p.next_of_kin_"
+"relationship\nFROM patient p\nJOIN ndr_facility ndrf ON ndrf.id = p.facility_id\nJOIN\npublic.dblink\n('lamis','SELECT b"
+"ase_org.name, base_org.id, org.code\nFROM base_organisation_unit base_org\nINNER JOIN base_organisation_unit_identifier "
+"org\nON org.organisation_unit_id=base_org.id WHERE organisation_unit_level_id=4'\n)\nAS lamisplus(name VARCHAR, id bigin"
+"t, code VARCHAR)\nON ndrf.datim_id = lamisplus.code\nORDER BY patient_id ASC";
			

            	globalMap.put("tDBInput_11_QUERY",dbquery_tDBInput_11);
		    java.sql.ResultSet rs_tDBInput_11 = null;

		    try {
		    	rs_tDBInput_11 = stmt_tDBInput_11.executeQuery(dbquery_tDBInput_11);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_11 = rs_tDBInput_11.getMetaData();
		    	int colQtyInRs_tDBInput_11 = rsmd_tDBInput_11.getColumnCount();

		    String tmpContent_tDBInput_11 = null;
		    
		    
		    while (rs_tDBInput_11.next()) {
		        nb_line_tDBInput_11++;
		        
							if(colQtyInRs_tDBInput_11 < 1) {
								Extract_Lamis3_Patients.patient_id = 0;
							} else {
		                          
            Extract_Lamis3_Patients.patient_id = rs_tDBInput_11.getInt(1);
            if(rs_tDBInput_11.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_11 < 2) {
								Extract_Lamis3_Patients.person_uuid = null;
							} else {
	                         		
        	Extract_Lamis3_Patients.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_11, 2, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 3) {
								Extract_Lamis3_Patients.gender = null;
							} else {
	                         		
        	Extract_Lamis3_Patients.gender = routines.system.JDBCUtil.getString(rs_tDBInput_11, 3, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 4) {
								Extract_Lamis3_Patients.marital_status = null;
							} else {
	                         		
        	Extract_Lamis3_Patients.marital_status = routines.system.JDBCUtil.getString(rs_tDBInput_11, 4, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 5) {
								Extract_Lamis3_Patients.education = null;
							} else {
	                         		
        	Extract_Lamis3_Patients.education = routines.system.JDBCUtil.getString(rs_tDBInput_11, 5, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 6) {
								Extract_Lamis3_Patients.occupation = null;
							} else {
	                         		
        	Extract_Lamis3_Patients.occupation = routines.system.JDBCUtil.getString(rs_tDBInput_11, 6, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 7) {
								Extract_Lamis3_Patients.next_of_kin_relationship = null;
							} else {
	                         		
        	Extract_Lamis3_Patients.next_of_kin_relationship = routines.system.JDBCUtil.getString(rs_tDBInput_11, 7, false);
		                    }
					


 



/**
 * [tDBInput_11 begin ] stop
 */
	
	/**
	 * [tDBInput_11 main ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 


	tos_count_tDBInput_11++;

/**
 * [tDBInput_11 main ] stop
 */
	
	/**
	 * [tDBInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Extract_Lamis3_Patients");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

Sort_records = null;


// # Output table : 'Sort_records'
Sort_records_tmp.patient_id = Extract_Lamis3_Patients.patient_id ;
Sort_records_tmp.person_uuid = Extract_Lamis3_Patients.person_uuid ;
Sort_records_tmp.gender = Extract_Lamis3_Patients.gender ;
Sort_records_tmp.marital_status = Extract_Lamis3_Patients.marital_status ;
Sort_records_tmp.education = Extract_Lamis3_Patients.education ;
Sort_records_tmp.occupation = Extract_Lamis3_Patients.occupation ;
Sort_records_tmp.next_of_kin_relationship = Extract_Lamis3_Patients.next_of_kin_relationship ;
Sort_records = Sort_records_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "Sort_records"
if(Sort_records != null) { 



	
	/**
	 * [tSortRow_1_SortOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Sort_records");
					}
					



	ComparableSort_recordsStruct arrayRowtSortRow_1_SortOut = new ComparableSort_recordsStruct();

	arrayRowtSortRow_1_SortOut.patient_id = Sort_records.patient_id;
	arrayRowtSortRow_1_SortOut.person_uuid = Sort_records.person_uuid;
	arrayRowtSortRow_1_SortOut.gender = Sort_records.gender;
	arrayRowtSortRow_1_SortOut.marital_status = Sort_records.marital_status;
	arrayRowtSortRow_1_SortOut.education = Sort_records.education;
	arrayRowtSortRow_1_SortOut.occupation = Sort_records.occupation;
	arrayRowtSortRow_1_SortOut.next_of_kin_relationship = Sort_records.next_of_kin_relationship;	
	list_tSortRow_1_SortOut.add(arrayRowtSortRow_1_SortOut);

 


	tos_count_tSortRow_1_SortOut++;

/**
 * [tSortRow_1_SortOut main ] stop
 */
	
	/**
	 * [tSortRow_1_SortOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

 



/**
 * [tSortRow_1_SortOut process_data_begin ] stop
 */
	
	/**
	 * [tSortRow_1_SortOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

 



/**
 * [tSortRow_1_SortOut process_data_end ] stop
 */

} // End of branch "Sort_records"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_11 end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

	}
}finally{
	if (rs_tDBInput_11 != null) {
		rs_tDBInput_11.close();
	}
	if (stmt_tDBInput_11 != null) {
		stmt_tDBInput_11.close();
	}
	if(conn_tDBInput_11 != null && !conn_tDBInput_11.isClosed()) {
		
			conn_tDBInput_11.commit();
			
		
			conn_tDBInput_11.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_11_NB_LINE",nb_line_tDBInput_11);
 

ok_Hash.put("tDBInput_11", true);
end_Hash.put("tDBInput_11", System.currentTimeMillis());

   			if (globalMap.get("tDBInput_11_NB_LINE") != null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If3", 0, "true");
					}
				tJava_4Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "false");
					}   	 
   				}



/**
 * [tDBInput_11 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Extract_Lamis3_Patients");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

Sort_recordsStruct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut.toArray(new ComparableSort_recordsStruct[0]);

java.util.Arrays.sort(array_tSortRow_1_SortOut);

globalMap.put("tSortRow_1",array_tSortRow_1_SortOut);


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Sort_records");
			  	}
			  	
 

ok_Hash.put("tSortRow_1_SortOut", true);
end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());




/**
 * [tSortRow_1_SortOut end ] stop
 */



	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Unique_Patient_records");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = context.LAMISPlus_Schema;
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("etl_patient_stage");
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("etl_patient_stage");
}

        int updateKeyCount_tDBOutput_3 = 2;
        if(updateKeyCount_tDBOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_3 = "jdbc:postgresql://"+context.LAMISPlus_Server+":"+context.LAMISPlus_Port+"/"+context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
    dbUser_tDBOutput_3 = context.LAMISPlus_Login;

	final String decryptedPassword_tDBOutput_3 = context.LAMISPlus_Password; 

    String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;

    conn_tDBOutput_3 = java.sql.DriverManager.getConnection(url_tDBOutput_3,dbUser_tDBOutput_3,dbPwd_tDBOutput_3);
	
	resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
        conn_tDBOutput_3.setAutoCommit(false);
        int commitEvery_tDBOutput_3 = 10000;
        int commitCounter_tDBOutput_3 = 0;



int count_tDBOutput_3=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_3 = conn_tDBOutput_3.getMetaData();
                                boolean whetherExist_tDBOutput_3 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_3 = dbMetaData_tDBOutput_3.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_3 = "public";
                                    if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_3 = conn_tDBOutput_3.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_3 = stmtSchema_tDBOutput_3.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_3.next()){
                                                defaultSchema_tDBOutput_3 = rsSchema_tDBOutput_3.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_3.next()) {
                                        String table_tDBOutput_3 = rsTable_tDBOutput_3.getString("TABLE_NAME");
                                        String schema_tDBOutput_3 = rsTable_tDBOutput_3.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_3.equals(("etl_patient_stage"))
                                            && (schema_tDBOutput_3.equals(dbschema_tDBOutput_3) || ((dbschema_tDBOutput_3 ==null || dbschema_tDBOutput_3.trim().length() ==0) && defaultSchema_tDBOutput_3.equals(schema_tDBOutput_3)))) {
                                            whetherExist_tDBOutput_3 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_3) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
                                        stmtCreate_tDBOutput_3.execute("CREATE TABLE \"" + tableName_tDBOutput_3 + "\"(\"patient_id\" SERIAL  not null ,\"person_uuid\" VARCHAR(36)  ,\"gender\" VARCHAR(7)  ,\"marital_status\" VARCHAR(50)  ,\"education\" VARCHAR(50)  ,\"occupation\" VARCHAR(50)  ,\"next_of_kin_relationship\" VARCHAR(50)  ,primary key(\"patient_id\"))");
                                    }
                                }
	    String update_tDBOutput_3 = "UPDATE \"" + tableName_tDBOutput_3 + "\" SET \"gender\" = ?,\"marital_status\" = ?,\"education\" = ?,\"occupation\" = ?,\"next_of_kin_relationship\" = ? WHERE \"patient_id\" = ? AND \"person_uuid\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(update_tDBOutput_3);
	    resourceMap.put("pstmtUpdate_tDBOutput_3", pstmtUpdate_tDBOutput_3);
	    String insert_tDBOutput_3 = "INSERT INTO \"" + tableName_tDBOutput_3 + "\" (\"patient_id\",\"person_uuid\",\"gender\",\"marital_status\",\"education\",\"occupation\",\"next_of_kin_relationship\") VALUES (?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
	    resourceMap.put("pstmtInsert_tDBOutput_3", pstmtInsert_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */




	
	/**
	 * [tDBOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_4", false);
		start_Hash.put("tDBOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Duplicate_patient_records");
					}
				
		int tos_count_tDBOutput_4 = 0;
		





String dbschema_tDBOutput_4 = null;
	dbschema_tDBOutput_4 = context.LAMISPlus_Schema;
	

String tableName_tDBOutput_4 = null;
if(dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
	tableName_tDBOutput_4 = ("patient_stage_duplicates");
} else {
	tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "\".\"" + ("patient_stage_duplicates");
}

        int updateKeyCount_tDBOutput_4 = 2;
        if(updateKeyCount_tDBOutput_4 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_4 = 0;
int nb_line_update_tDBOutput_4 = 0;
int nb_line_inserted_tDBOutput_4 = 0;
int nb_line_deleted_tDBOutput_4 = 0;
int nb_line_rejected_tDBOutput_4 = 0;

int deletedCount_tDBOutput_4=0;
int updatedCount_tDBOutput_4=0;
int insertedCount_tDBOutput_4=0;
int rejectedCount_tDBOutput_4=0;

boolean whetherReject_tDBOutput_4 = false;

java.sql.Connection conn_tDBOutput_4 = null;
String dbUser_tDBOutput_4 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_4 = "jdbc:postgresql://"+context.LAMISPlus_Server+":"+context.LAMISPlus_Port+"/"+context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
    dbUser_tDBOutput_4 = context.LAMISPlus_Login;

	final String decryptedPassword_tDBOutput_4 = context.LAMISPlus_Password; 

    String dbPwd_tDBOutput_4 = decryptedPassword_tDBOutput_4;

    conn_tDBOutput_4 = java.sql.DriverManager.getConnection(url_tDBOutput_4,dbUser_tDBOutput_4,dbPwd_tDBOutput_4);
	
	resourceMap.put("conn_tDBOutput_4", conn_tDBOutput_4);
        conn_tDBOutput_4.setAutoCommit(false);
        int commitEvery_tDBOutput_4 = 10000;
        int commitCounter_tDBOutput_4 = 0;



int count_tDBOutput_4=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_4 = conn_tDBOutput_4.getMetaData();
                                boolean whetherExist_tDBOutput_4 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_4 = dbMetaData_tDBOutput_4.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_4 = "public";
                                    if(dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_4 = conn_tDBOutput_4.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_4 = stmtSchema_tDBOutput_4.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_4.next()){
                                                defaultSchema_tDBOutput_4 = rsSchema_tDBOutput_4.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_4.next()) {
                                        String table_tDBOutput_4 = rsTable_tDBOutput_4.getString("TABLE_NAME");
                                        String schema_tDBOutput_4 = rsTable_tDBOutput_4.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_4.equals(("patient_stage_duplicates"))
                                            && (schema_tDBOutput_4.equals(dbschema_tDBOutput_4) || ((dbschema_tDBOutput_4 ==null || dbschema_tDBOutput_4.trim().length() ==0) && defaultSchema_tDBOutput_4.equals(schema_tDBOutput_4)))) {
                                            whetherExist_tDBOutput_4 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_4) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
                                        stmtCreate_tDBOutput_4.execute("CREATE TABLE \"" + tableName_tDBOutput_4 + "\"(\"patient_id\" SERIAL  not null ,\"person_uuid\" VARCHAR(36)  ,\"gender\" VARCHAR(7)  ,\"marital_status\" VARCHAR(50)  ,\"education\" VARCHAR(50)  ,\"occupation\" VARCHAR(50)  ,\"next_of_kin_relationship\" VARCHAR(50)  ,primary key(\"patient_id\"))");
                                    }
                                }
	    java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_4 + "\" WHERE \"patient_id\" = ? AND \"person_uuid\" = ?");
	    resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);
	    String insert_tDBOutput_4 = "INSERT INTO \"" + tableName_tDBOutput_4 + "\" (\"patient_id\",\"person_uuid\",\"gender\",\"marital_status\",\"education\",\"occupation\",\"next_of_kin_relationship\") VALUES (?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
	    resourceMap.put("pstmtInsert_tDBOutput_4", pstmtInsert_tDBOutput_4);
	    String update_tDBOutput_4 = "UPDATE \"" + tableName_tDBOutput_4 + "\" SET \"patient_id\" = ?,\"person_uuid\" = ?,\"gender\" = ?,\"marital_status\" = ?,\"education\" = ?,\"occupation\" = ?,\"next_of_kin_relationship\" = ? WHERE \"patient_id\" = ? AND \"person_uuid\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(update_tDBOutput_4);
	    resourceMap.put("pstmtUpdate_tDBOutput_4", pstmtUpdate_tDBOutput_4);
	    

 



/**
 * [tDBOutput_4 begin ] stop
 */



	
	/**
	 * [tUniqRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_2", false);
		start_Hash.put("tUniqRow_2", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Check_duplicates");
					}
				
		int tos_count_tUniqRow_2 = 0;
		

	
		class KeyStruct_tUniqRow_2 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String person_uuid;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.person_uuid == null) ? 0 : this.person_uuid.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;
				
									if (this.person_uuid == null) {
										if (other.person_uuid != null) 
											return false;
								
									} else if (!this.person_uuid.equals(other.person_uuid))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_2 = 0;
int nb_duplicates_tUniqRow_2 = 0;
KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>(); 

 



/**
 * [tUniqRow_2 begin ] stop
 */



	
	/**
	 * [tSortRow_1_SortIn begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_1_SortIn", false);
		start_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	
		int tos_count_tSortRow_1_SortIn = 0;
		


Sort_recordsStruct[] array_tSortRow_1_SortIn = (Sort_recordsStruct[]) globalMap.remove("tSortRow_1");

int nb_line_tSortRow_1_SortIn = 0;

Sort_recordsStruct current_tSortRow_1_SortIn = null;

for(int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++){
	current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
	Check_duplicates.patient_id = current_tSortRow_1_SortIn.patient_id;
	Check_duplicates.person_uuid = current_tSortRow_1_SortIn.person_uuid;
	Check_duplicates.gender = current_tSortRow_1_SortIn.gender;
	Check_duplicates.marital_status = current_tSortRow_1_SortIn.marital_status;
	Check_duplicates.education = current_tSortRow_1_SortIn.education;
	Check_duplicates.occupation = current_tSortRow_1_SortIn.occupation;
	Check_duplicates.next_of_kin_relationship = current_tSortRow_1_SortIn.next_of_kin_relationship;
	// increase number of line sorted
	nb_line_tSortRow_1_SortIn++;

 



/**
 * [tSortRow_1_SortIn begin ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 


	tos_count_tSortRow_1_SortIn++;

/**
 * [tSortRow_1_SortIn main ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 



/**
 * [tSortRow_1_SortIn process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Check_duplicates");
					}
					
Duplicate_patient_records = null;			Unique_Patient_records = null;			
if(Check_duplicates.person_uuid == null){
	finder_tUniqRow_2.person_uuid = null;
}else{
	finder_tUniqRow_2.person_uuid = Check_duplicates.person_uuid.toLowerCase();
}	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
if(Check_duplicates.person_uuid == null){
	new_tUniqRow_2.person_uuid = null;
}else{
	new_tUniqRow_2.person_uuid = Check_duplicates.person_uuid.toLowerCase();
}
		
		keystUniqRow_2.add(new_tUniqRow_2);if(Unique_Patient_records == null){ 
	
	Unique_Patient_records = new Unique_Patient_recordsStruct();
}Unique_Patient_records.patient_id = Check_duplicates.patient_id;			Unique_Patient_records.person_uuid = Check_duplicates.person_uuid;			Unique_Patient_records.gender = Check_duplicates.gender;			Unique_Patient_records.marital_status = Check_duplicates.marital_status;			Unique_Patient_records.education = Check_duplicates.education;			Unique_Patient_records.occupation = Check_duplicates.occupation;			Unique_Patient_records.next_of_kin_relationship = Check_duplicates.next_of_kin_relationship;					
		nb_uniques_tUniqRow_2++;
	} else {
if(Duplicate_patient_records == null){ 
	
	Duplicate_patient_records = new Duplicate_patient_recordsStruct();
}				Duplicate_patient_records.patient_id = Check_duplicates.patient_id;			Duplicate_patient_records.person_uuid = Check_duplicates.person_uuid;			Duplicate_patient_records.gender = Check_duplicates.gender;			Duplicate_patient_records.marital_status = Check_duplicates.marital_status;			Duplicate_patient_records.education = Check_duplicates.education;			Duplicate_patient_records.occupation = Check_duplicates.occupation;			Duplicate_patient_records.next_of_kin_relationship = Check_duplicates.next_of_kin_relationship;			
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
	
	/**
	 * [tUniqRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_begin ] stop
 */
// Start of branch "Unique_Patient_records"
if(Unique_Patient_records != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Unique_Patient_records");
					}
					



        whetherReject_tDBOutput_3 = false;
            int updateFlag_tDBOutput_3=0;
                    if(Unique_Patient_records.gender == null) {
pstmtUpdate_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(1, Unique_Patient_records.gender);
}

                    if(Unique_Patient_records.marital_status == null) {
pstmtUpdate_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(2, Unique_Patient_records.marital_status);
}

                    if(Unique_Patient_records.education == null) {
pstmtUpdate_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(3, Unique_Patient_records.education);
}

                    if(Unique_Patient_records.occupation == null) {
pstmtUpdate_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(4, Unique_Patient_records.occupation);
}

                    if(Unique_Patient_records.next_of_kin_relationship == null) {
pstmtUpdate_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(5, Unique_Patient_records.next_of_kin_relationship);
}


                    pstmtUpdate_tDBOutput_3.setInt(6 + count_tDBOutput_3, Unique_Patient_records.patient_id);


                    if(Unique_Patient_records.person_uuid == null) {
pstmtUpdate_tDBOutput_3.setNull(7 + count_tDBOutput_3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(7 + count_tDBOutput_3, Unique_Patient_records.person_uuid);
}


            try {
				
                updateFlag_tDBOutput_3=pstmtUpdate_tDBOutput_3.executeUpdate();
                updatedCount_tDBOutput_3 = updatedCount_tDBOutput_3+updateFlag_tDBOutput_3;
				
            if(updateFlag_tDBOutput_3 == 0) {
            	
                        pstmtInsert_tDBOutput_3.setInt(1, Unique_Patient_records.patient_id);

                        if(Unique_Patient_records.person_uuid == null) {
pstmtInsert_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(2, Unique_Patient_records.person_uuid);
}

                        if(Unique_Patient_records.gender == null) {
pstmtInsert_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(3, Unique_Patient_records.gender);
}

                        if(Unique_Patient_records.marital_status == null) {
pstmtInsert_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(4, Unique_Patient_records.marital_status);
}

                        if(Unique_Patient_records.education == null) {
pstmtInsert_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(5, Unique_Patient_records.education);
}

                        if(Unique_Patient_records.occupation == null) {
pstmtInsert_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(6, Unique_Patient_records.occupation);
}

                        if(Unique_Patient_records.next_of_kin_relationship == null) {
pstmtInsert_tDBOutput_3.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(7, Unique_Patient_records.next_of_kin_relationship);
}

					
                    insertedCount_tDBOutput_3 = insertedCount_tDBOutput_3 + pstmtInsert_tDBOutput_3.executeUpdate();
                    nb_line_tDBOutput_3++;
					
    	            }else{
    					nb_line_tDBOutput_3++;
    					
     					
    				}
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_3 = true;
                        nb_line_tDBOutput_3++;
                            System.err.print(e.getMessage());
                }
    		    commitCounter_tDBOutput_3++;
                if(commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {
                	conn_tDBOutput_3.commit();
                	
                	commitCounter_tDBOutput_3=0;
                }

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "Unique_Patient_records"




// Start of branch "Duplicate_patient_records"
if(Duplicate_patient_records != null) { 



	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Duplicate_patient_records");
					}
					



        whetherReject_tDBOutput_4 = false;
                    pstmt_tDBOutput_4.setInt(1, Duplicate_patient_records.patient_id);

                    if(Duplicate_patient_records.person_uuid == null) {
pstmt_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(2, Duplicate_patient_records.person_uuid);
}

            int checkCount_tDBOutput_4 = -1;
            try (java.sql.ResultSet rs_tDBOutput_4 = pstmt_tDBOutput_4.executeQuery()) {
                while(rs_tDBOutput_4.next()) {
                    checkCount_tDBOutput_4 = rs_tDBOutput_4.getInt(1);
                }
            }
            if(checkCount_tDBOutput_4 > 0) {
                        pstmtUpdate_tDBOutput_4.setInt(1, Duplicate_patient_records.patient_id);

                        if(Duplicate_patient_records.person_uuid == null) {
pstmtUpdate_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(2, Duplicate_patient_records.person_uuid);
}

                        if(Duplicate_patient_records.gender == null) {
pstmtUpdate_tDBOutput_4.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(3, Duplicate_patient_records.gender);
}

                        if(Duplicate_patient_records.marital_status == null) {
pstmtUpdate_tDBOutput_4.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(4, Duplicate_patient_records.marital_status);
}

                        if(Duplicate_patient_records.education == null) {
pstmtUpdate_tDBOutput_4.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(5, Duplicate_patient_records.education);
}

                        if(Duplicate_patient_records.occupation == null) {
pstmtUpdate_tDBOutput_4.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(6, Duplicate_patient_records.occupation);
}

                        if(Duplicate_patient_records.next_of_kin_relationship == null) {
pstmtUpdate_tDBOutput_4.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(7, Duplicate_patient_records.next_of_kin_relationship);
}

                        pstmtUpdate_tDBOutput_4.setInt(8 + count_tDBOutput_4, Duplicate_patient_records.patient_id);

                        if(Duplicate_patient_records.person_uuid == null) {
pstmtUpdate_tDBOutput_4.setNull(9 + count_tDBOutput_4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(9 + count_tDBOutput_4, Duplicate_patient_records.person_uuid);
}

                try {
					
                    updatedCount_tDBOutput_4 = updatedCount_tDBOutput_4 + pstmtUpdate_tDBOutput_4.executeUpdate();
                    nb_line_tDBOutput_4++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_4 = true;
                        nb_line_tDBOutput_4++;
                            System.err.print(e.getMessage());
                }
            } else {
                        pstmtInsert_tDBOutput_4.setInt(1, Duplicate_patient_records.patient_id);

                        if(Duplicate_patient_records.person_uuid == null) {
pstmtInsert_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(2, Duplicate_patient_records.person_uuid);
}

                        if(Duplicate_patient_records.gender == null) {
pstmtInsert_tDBOutput_4.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(3, Duplicate_patient_records.gender);
}

                        if(Duplicate_patient_records.marital_status == null) {
pstmtInsert_tDBOutput_4.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(4, Duplicate_patient_records.marital_status);
}

                        if(Duplicate_patient_records.education == null) {
pstmtInsert_tDBOutput_4.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(5, Duplicate_patient_records.education);
}

                        if(Duplicate_patient_records.occupation == null) {
pstmtInsert_tDBOutput_4.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(6, Duplicate_patient_records.occupation);
}

                        if(Duplicate_patient_records.next_of_kin_relationship == null) {
pstmtInsert_tDBOutput_4.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(7, Duplicate_patient_records.next_of_kin_relationship);
}

                try {
					
                    insertedCount_tDBOutput_4 = insertedCount_tDBOutput_4 + pstmtInsert_tDBOutput_4.executeUpdate();
                    nb_line_tDBOutput_4++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_4 = true;
                        nb_line_tDBOutput_4++;
                            System.err.print(e.getMessage());
                }
            }
    		    commitCounter_tDBOutput_4++;
                if(commitEvery_tDBOutput_4 <= commitCounter_tDBOutput_4) {
                	conn_tDBOutput_4.commit();
                	
                	commitCounter_tDBOutput_4=0;
                }

 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */

} // End of branch "Duplicate_patient_records"




	
	/**
	 * [tUniqRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_end ] stop
 */



	
	/**
	 * [tSortRow_1_SortIn process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 



/**
 * [tSortRow_1_SortIn process_data_end ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	


}

globalMap.put("tSortRow_1_SortIn_NB_LINE",nb_line_tSortRow_1_SortIn);

 

ok_Hash.put("tSortRow_1_SortIn", true);
end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());




/**
 * [tSortRow_1_SortIn end ] stop
 */

	
	/**
	 * [tUniqRow_2 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

globalMap.put("tUniqRow_2_NB_UNIQUES",nb_uniques_tUniqRow_2);
globalMap.put("tUniqRow_2_NB_DUPLICATES",nb_duplicates_tUniqRow_2);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Check_duplicates");
			  	}
			  	
 

ok_Hash.put("tUniqRow_2", true);
end_Hash.put("tUniqRow_2", System.currentTimeMillis());




/**
 * [tUniqRow_2 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



        if(pstmtUpdate_tDBOutput_3 != null){
            pstmtUpdate_tDBOutput_3.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_3");
        }
        if(pstmtInsert_tDBOutput_3 != null){
            pstmtInsert_tDBOutput_3.close();
            resourceMap.remove("pstmtInsert_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);
			
			conn_tDBOutput_3.commit();
			
		
    	conn_tDBOutput_3 .close();
    	
    	resourceMap.put("finish_tDBOutput_3", true);
    	

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Unique_Patient_records");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */




	
	/**
	 * [tDBOutput_4 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



        if(pstmtUpdate_tDBOutput_4 != null){
            pstmtUpdate_tDBOutput_4.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_4");
        }
        if(pstmtInsert_tDBOutput_4 != null){
            pstmtInsert_tDBOutput_4.close();
            resourceMap.remove("pstmtInsert_tDBOutput_4");
        }
        if(pstmt_tDBOutput_4 != null) {
            pstmt_tDBOutput_4.close();
            resourceMap.remove("pstmt_tDBOutput_4");
        }
    resourceMap.put("statementClosed_tDBOutput_4", true);
			
			conn_tDBOutput_4.commit();
			
		
    	conn_tDBOutput_4 .close();
    	
    	resourceMap.put("finish_tDBOutput_4", true);
    	

	nb_line_deleted_tDBOutput_4=nb_line_deleted_tDBOutput_4+ deletedCount_tDBOutput_4;
	nb_line_update_tDBOutput_4=nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
	nb_line_inserted_tDBOutput_4=nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
	nb_line_rejected_tDBOutput_4=nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;
	
        globalMap.put("tDBOutput_4_NB_LINE",nb_line_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_UPDATED",nb_line_update_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_DELETED",nb_line_deleted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Duplicate_patient_records");
			  	}
			  	
 

ok_Hash.put("tDBOutput_4", true);
end_Hash.put("tDBOutput_4", System.currentTimeMillis());




/**
 * [tDBOutput_4 end ] stop
 */















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_11:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBInput_17Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tSortRow_1_SortIn"
							globalMap.remove("tSortRow_1");
						
				try{
					
	
	/**
	 * [tDBInput_11 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

 



/**
 * [tSortRow_1_SortOut finally ] stop
 */

	
	/**
	 * [tSortRow_1_SortIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 



/**
 * [tSortRow_1_SortIn finally ] stop
 */

	
	/**
	 * [tUniqRow_2 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_3 = null;
                if ((pstmtUpdateToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_3")) != null) {
                    pstmtUpdateToClose_tDBOutput_3.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_3 = null;
                if ((pstmtInsertToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_3")) != null) {
                    pstmtInsertToClose_tDBOutput_3.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_3") == null){
            java.sql.Connection ctn_tDBOutput_3 = null;
            if((ctn_tDBOutput_3 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_3")) != null){
                try {
                    ctn_tDBOutput_3.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_3) {
                    String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :" + sqlEx_tDBOutput_3.getMessage();
                    System.err.println(errorMessage_tDBOutput_3);
                }
            }
        }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */




	
	/**
	 * [tDBOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_4 = null;
                if ((pstmtUpdateToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_4")) != null) {
                    pstmtUpdateToClose_tDBOutput_4.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_4 = null;
                if ((pstmtInsertToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_4")) != null) {
                    pstmtInsertToClose_tDBOutput_4.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
                if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_4")) != null) {
                    pstmtToClose_tDBOutput_4.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_4") == null){
            java.sql.Connection ctn_tDBOutput_4 = null;
            if((ctn_tDBOutput_4 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_4")) != null){
                try {
                    ctn_tDBOutput_4.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_4) {
                    String errorMessage_tDBOutput_4 = "failed to close the connection in tDBOutput_4 :" + sqlEx_tDBOutput_4.getMessage();
                    System.err.println(errorMessage_tDBOutput_4);
                }
            }
        }
    }
 



/**
 * [tDBOutput_4 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 1);
	}
	

public void tJava_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_4", false);
		start_Hash.put("tJava_4", System.currentTimeMillis());
		
	
	currentComponent="tJava_4";

	
		int tos_count_tJava_4 = 0;
		


System.out.println("*****************************************************************");
System.out.println("***********PATIENT_PERSON MIGRATION REPORT START*****************");
java.time.LocalDateTime startTime = java.time.LocalDateTime.now();
globalMap.put("startTime", startTime);
System.out.println("Start time - "+ startTime);

System.out.println("Total patients fetched from LAMIS3 DB - "+globalMap.get("tDBInput_11_NB_LINE"));
 



/**
 * [tJava_4 begin ] stop
 */
	
	/**
	 * [tJava_4 main ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 


	tos_count_tJava_4++;

/**
 * [tJava_4 main ] stop
 */
	
	/**
	 * [tJava_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 process_data_begin ] stop
 */
	
	/**
	 * [tJava_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 process_data_end ] stop
 */
	
	/**
	 * [tJava_4 end ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 

ok_Hash.put("tJava_4", true);
end_Hash.put("tJava_4", System.currentTimeMillis());




/**
 * [tJava_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_4 finally ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}
	


public static class facility_extractionStruct implements routines.system.IPersistableRow<facility_extractionStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public String facility_name;

				public String getFacility_name () {
					return this.facility_name;
				}
				
			    public String lga_name;

				public String getLga_name () {
					return this.lga_name;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.datim_id == null) ? 0 : this.datim_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final facility_extractionStruct other = (facility_extractionStruct) obj;
		
						if (this.datim_id == null) {
							if (other.datim_id != null)
								return false;
						
						} else if (!this.datim_id.equals(other.datim_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(facility_extractionStruct other) {

		other.id = this.id;
	            other.facility_name = this.facility_name;
	            other.lga_name = this.lga_name;
	            other.datim_id = this.datim_id;
	            
	}

	public void copyKeysDataTo(facility_extractionStruct other) {

		other.datim_id = this.datim_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
					this.facility_name = readString(dis);
					
					this.lga_name = readString(dis);
					
					this.datim_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
					// String
				
						writeString(this.facility_name,dos);
					
					// String
				
						writeString(this.lga_name,dos);
					
					// String
				
						writeString(this.datim_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",facility_name="+facility_name);
		sb.append(",lga_name="+lga_name);
		sb.append(",datim_id="+datim_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(facility_extractionStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.datim_id, other.datim_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		facility_extractionStruct facility_extraction = new facility_extractionStruct();




	
	/**
	 * [tDBOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_5", false);
		start_Hash.put("tDBOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"facility_extraction");
					}
				
		int tos_count_tDBOutput_5 = 0;
		





String dbschema_tDBOutput_5 = null;
	dbschema_tDBOutput_5 = context.LAMISPlus_Schema;
	

String tableName_tDBOutput_5 = null;
if(dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
	tableName_tDBOutput_5 = ("etl_facility");
} else {
	tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "\".\"" + ("etl_facility");
}

        int updateKeyCount_tDBOutput_5 = 1;
        if(updateKeyCount_tDBOutput_5 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_5 = 0;
int nb_line_update_tDBOutput_5 = 0;
int nb_line_inserted_tDBOutput_5 = 0;
int nb_line_deleted_tDBOutput_5 = 0;
int nb_line_rejected_tDBOutput_5 = 0;

int deletedCount_tDBOutput_5=0;
int updatedCount_tDBOutput_5=0;
int insertedCount_tDBOutput_5=0;
int rejectedCount_tDBOutput_5=0;

boolean whetherReject_tDBOutput_5 = false;

java.sql.Connection conn_tDBOutput_5 = null;
String dbUser_tDBOutput_5 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_5 = "jdbc:postgresql://"+context.LAMISPlus_Server+":"+context.LAMISPlus_Port+"/"+context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
    dbUser_tDBOutput_5 = context.LAMISPlus_Login;

	final String decryptedPassword_tDBOutput_5 = context.LAMISPlus_Password; 

    String dbPwd_tDBOutput_5 = decryptedPassword_tDBOutput_5;

    conn_tDBOutput_5 = java.sql.DriverManager.getConnection(url_tDBOutput_5,dbUser_tDBOutput_5,dbPwd_tDBOutput_5);
	
	resourceMap.put("conn_tDBOutput_5", conn_tDBOutput_5);
        conn_tDBOutput_5.setAutoCommit(false);
        int commitEvery_tDBOutput_5 = 10000;
        int commitCounter_tDBOutput_5 = 0;



int count_tDBOutput_5=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_5 = conn_tDBOutput_5.getMetaData();
                                boolean whetherExist_tDBOutput_5 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_5 = dbMetaData_tDBOutput_5.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_5 = "public";
                                    if(dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_5 = conn_tDBOutput_5.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_5 = stmtSchema_tDBOutput_5.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_5.next()){
                                                defaultSchema_tDBOutput_5 = rsSchema_tDBOutput_5.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_5.next()) {
                                        String table_tDBOutput_5 = rsTable_tDBOutput_5.getString("TABLE_NAME");
                                        String schema_tDBOutput_5 = rsTable_tDBOutput_5.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_5.equals(("etl_facility"))
                                            && (schema_tDBOutput_5.equals(dbschema_tDBOutput_5) || ((dbschema_tDBOutput_5 ==null || dbschema_tDBOutput_5.trim().length() ==0) && defaultSchema_tDBOutput_5.equals(schema_tDBOutput_5)))) {
                                            whetherExist_tDBOutput_5 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_5) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_5 = conn_tDBOutput_5.createStatement()) {
                                        stmtCreate_tDBOutput_5.execute("CREATE TABLE \"" + tableName_tDBOutput_5 + "\"(\"id\" BIGSERIAL  not null ,\"facility_name\" VARCHAR(100)   not null ,\"lga_name\" VARCHAR(45)   not null ,\"datim_id\" VARCHAR(32)   not null ,primary key(\"datim_id\"))");
                                    }
                                }
	    java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_5 + "\" WHERE \"datim_id\" = ?");
	    resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);
	    String insert_tDBOutput_5 = "INSERT INTO \"" + tableName_tDBOutput_5 + "\" (\"id\",\"facility_name\",\"lga_name\",\"datim_id\") VALUES (?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);
	    resourceMap.put("pstmtInsert_tDBOutput_5", pstmtInsert_tDBOutput_5);
	    String update_tDBOutput_5 = "UPDATE \"" + tableName_tDBOutput_5 + "\" SET \"id\" = ?,\"facility_name\" = ?,\"lga_name\" = ? WHERE \"datim_id\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(update_tDBOutput_5);
	    resourceMap.put("pstmtUpdate_tDBOutput_5", pstmtUpdate_tDBOutput_5);
	    

 



/**
 * [tDBOutput_5 begin ] stop
 */



	
	/**
	 * [tDBInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_12", false);
		start_Hash.put("tDBInput_12", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_12";

	
		int tos_count_tDBInput_12 = 0;
		
	
    
	
		    int nb_line_tDBInput_12 = 0;
		    java.sql.Connection conn_tDBInput_12 = null;
				String driverClass_tDBInput_12 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_12 = java.lang.Class.forName(driverClass_tDBInput_12);
				String dbUser_tDBInput_12 = context.LAMIS3_Login;
				
				
	final String decryptedPassword_tDBInput_12 = context.LAMIS3_Password; 
				
				String dbPwd_tDBInput_12 = decryptedPassword_tDBInput_12;
				
				String url_tDBInput_12 = "jdbc:postgresql://" + context.LAMIS3_Server + ":" + context.LAMIS3_Port + "/" + context.LAMIS3_Database + "?" + context.LAMIS3_AdditionalParams;
				
				conn_tDBInput_12 = java.sql.DriverManager.getConnection(url_tDBInput_12,dbUser_tDBInput_12,dbPwd_tDBInput_12);
		        
				conn_tDBInput_12.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_12 = conn_tDBInput_12.createStatement();

		    String dbquery_tDBInput_12 = "SELECT DISTINCT \n	fc.id as id, \n	fc.name AS facility_name,\n	lg.name AS lga_name, \n	nf.datim_id AS datim_id\n FROM p"
+"ublic.patient ps\n INNER JOIN facility fc\n  ON ps.facility_id=fc.id\n INNER JOIN lga lg\n  ON fc.lga_id=lg.id\nINNER JO"
+"IN ndr_facility nf\n  ON nf.id=ps.facility_id";
			

            	globalMap.put("tDBInput_12_QUERY",dbquery_tDBInput_12);
		    java.sql.ResultSet rs_tDBInput_12 = null;

		    try {
		    	rs_tDBInput_12 = stmt_tDBInput_12.executeQuery(dbquery_tDBInput_12);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_12 = rs_tDBInput_12.getMetaData();
		    	int colQtyInRs_tDBInput_12 = rsmd_tDBInput_12.getColumnCount();

		    String tmpContent_tDBInput_12 = null;
		    
		    
		    while (rs_tDBInput_12.next()) {
		        nb_line_tDBInput_12++;
		        
							if(colQtyInRs_tDBInput_12 < 1) {
								facility_extraction.id = 0;
							} else {
		                          
            facility_extraction.id = rs_tDBInput_12.getLong(1);
            if(rs_tDBInput_12.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_12 < 2) {
								facility_extraction.facility_name = null;
							} else {
	                         		
        	facility_extraction.facility_name = routines.system.JDBCUtil.getString(rs_tDBInput_12, 2, false);
		                    }
							if(colQtyInRs_tDBInput_12 < 3) {
								facility_extraction.lga_name = null;
							} else {
	                         		
        	facility_extraction.lga_name = routines.system.JDBCUtil.getString(rs_tDBInput_12, 3, false);
		                    }
							if(colQtyInRs_tDBInput_12 < 4) {
								facility_extraction.datim_id = null;
							} else {
	                         		
        	facility_extraction.datim_id = routines.system.JDBCUtil.getString(rs_tDBInput_12, 4, false);
		                    }
					


 



/**
 * [tDBInput_12 begin ] stop
 */
	
	/**
	 * [tDBInput_12 main ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 


	tos_count_tDBInput_12++;

/**
 * [tDBInput_12 main ] stop
 */
	
	/**
	 * [tDBInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_5 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"facility_extraction");
					}
					



        whetherReject_tDBOutput_5 = false;
                    if(facility_extraction.datim_id == null) {
pstmt_tDBOutput_5.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(1, facility_extraction.datim_id);
}

            int checkCount_tDBOutput_5 = -1;
            try (java.sql.ResultSet rs_tDBOutput_5 = pstmt_tDBOutput_5.executeQuery()) {
                while(rs_tDBOutput_5.next()) {
                    checkCount_tDBOutput_5 = rs_tDBOutput_5.getInt(1);
                }
            }
            if(checkCount_tDBOutput_5 > 0) {
                        pstmtUpdate_tDBOutput_5.setLong(1, facility_extraction.id);

                        if(facility_extraction.facility_name == null) {
pstmtUpdate_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(2, facility_extraction.facility_name);
}

                        if(facility_extraction.lga_name == null) {
pstmtUpdate_tDBOutput_5.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(3, facility_extraction.lga_name);
}

                        if(facility_extraction.datim_id == null) {
pstmtUpdate_tDBOutput_5.setNull(4 + count_tDBOutput_5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(4 + count_tDBOutput_5, facility_extraction.datim_id);
}

                try {
					
                    updatedCount_tDBOutput_5 = updatedCount_tDBOutput_5 + pstmtUpdate_tDBOutput_5.executeUpdate();
                    nb_line_tDBOutput_5++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_5 = true;
                        nb_line_tDBOutput_5++;
                            System.err.print(e.getMessage());
                }
            } else {
                        pstmtInsert_tDBOutput_5.setLong(1, facility_extraction.id);

                        if(facility_extraction.facility_name == null) {
pstmtInsert_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(2, facility_extraction.facility_name);
}

                        if(facility_extraction.lga_name == null) {
pstmtInsert_tDBOutput_5.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(3, facility_extraction.lga_name);
}

                        if(facility_extraction.datim_id == null) {
pstmtInsert_tDBOutput_5.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(4, facility_extraction.datim_id);
}

                try {
					
                    insertedCount_tDBOutput_5 = insertedCount_tDBOutput_5 + pstmtInsert_tDBOutput_5.executeUpdate();
                    nb_line_tDBOutput_5++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_5 = true;
                        nb_line_tDBOutput_5++;
                            System.err.print(e.getMessage());
                }
            }
            if(!whetherReject_tDBOutput_5) {
            }
    		    commitCounter_tDBOutput_5++;
                if(commitEvery_tDBOutput_5 <= commitCounter_tDBOutput_5) {
                	conn_tDBOutput_5.commit();
                	
                	commitCounter_tDBOutput_5=0;
                }

 


	tos_count_tDBOutput_5++;

/**
 * [tDBOutput_5 main ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_12 end ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

	}
}finally{
	if (rs_tDBInput_12 != null) {
		rs_tDBInput_12.close();
	}
	if (stmt_tDBInput_12 != null) {
		stmt_tDBInput_12.close();
	}
	if(conn_tDBInput_12 != null && !conn_tDBInput_12.isClosed()) {
		
			conn_tDBInput_12.commit();
			
		
			conn_tDBInput_12.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_12_NB_LINE",nb_line_tDBInput_12);
 

ok_Hash.put("tDBInput_12", true);
end_Hash.put("tDBInput_12", System.currentTimeMillis());

   			if (globalMap.get("tDBInput_12_NB_LINE") != null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If5", 0, "true");
					}
				tJava_5Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If5", 0, "false");
					}   	 
   				}



/**
 * [tDBInput_12 end ] stop
 */

	
	/**
	 * [tDBOutput_5 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



        if(pstmtUpdate_tDBOutput_5 != null){
            pstmtUpdate_tDBOutput_5.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_5");
        }
        if(pstmtInsert_tDBOutput_5 != null){
            pstmtInsert_tDBOutput_5.close();
            resourceMap.remove("pstmtInsert_tDBOutput_5");
        }
        if(pstmt_tDBOutput_5 != null) {
            pstmt_tDBOutput_5.close();
            resourceMap.remove("pstmt_tDBOutput_5");
        }
    resourceMap.put("statementClosed_tDBOutput_5", true);
			
			conn_tDBOutput_5.commit();
			
		
    	conn_tDBOutput_5 .close();
    	
    	resourceMap.put("finish_tDBOutput_5", true);
    	

	nb_line_deleted_tDBOutput_5=nb_line_deleted_tDBOutput_5+ deletedCount_tDBOutput_5;
	nb_line_update_tDBOutput_5=nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
	nb_line_inserted_tDBOutput_5=nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
	nb_line_rejected_tDBOutput_5=nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;
	
        globalMap.put("tDBOutput_5_NB_LINE",nb_line_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_UPDATED",nb_line_update_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_DELETED",nb_line_deleted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"facility_extraction");
			  	}
			  	
 

ok_Hash.put("tDBOutput_5", true);
end_Hash.put("tDBOutput_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tJava_3Process(globalMap);



/**
 * [tDBOutput_5 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_12:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tDBInput_11Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_12 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 finally ] stop
 */

	
	/**
	 * [tDBOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_5 = null;
                if ((pstmtUpdateToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_5")) != null) {
                    pstmtUpdateToClose_tDBOutput_5.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_5 = null;
                if ((pstmtInsertToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_5")) != null) {
                    pstmtInsertToClose_tDBOutput_5.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
                if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_5")) != null) {
                    pstmtToClose_tDBOutput_5.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_5") == null){
            java.sql.Connection ctn_tDBOutput_5 = null;
            if((ctn_tDBOutput_5 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_5")) != null){
                try {
                    ctn_tDBOutput_5.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_5) {
                    String errorMessage_tDBOutput_5 = "failed to close the connection in tDBOutput_5 :" + sqlEx_tDBOutput_5.getMessage();
                    System.err.println(errorMessage_tDBOutput_5);
                }
            }
        }
    }
 



/**
 * [tDBOutput_5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_12_SUBPROCESS_STATE", 1);
	}
	

public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";

	
		int tos_count_tJava_3 = 0;
		


System.out.println("");
int totalMigrated = globalMap.get("tDBOutput_5_NB_LINE_UPDATED") != null ? (Integer)globalMap.get("tDBOutput_5_NB_LINE_UPDATED") : 0;

System.out.println("Total facility already migrated "+totalMigrated);

System.out.println("Total new records migrated - "+globalMap.get("tDBOutput_5_NB_LINE_INSERTED"));
if(globalMap.get("tDBOutput_5_ERROR_MESSAGE") != null){
System.out.println("Migration Error - "+globalMap.get("tDBOutput_5_ERROR_MESSAGE"));
}
System.out.println("Total erroneous records not migrated - "+globalMap.get("tFileOutputDelimited_5_NB_LINE"));
java.time.LocalDateTime endTime = java.time.LocalDateTime.now();
System.out.println("End time - "+ endTime);
java.time.LocalDateTime statTime = (java.time.LocalDateTime)globalMap.get("startTime");

java.time.Duration duration = java.time.Duration.between(statTime, endTime);
System.out.println("Duration - "+ duration);

System.out.println("*************FACILITY MIGRATION REPORT END*****************");
System.out.println("**********************************************************");
System.out.println("");
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());




/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	

public void tJava_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_5", false);
		start_Hash.put("tJava_5", System.currentTimeMillis());
		
	
	currentComponent="tJava_5";

	
		int tos_count_tJava_5 = 0;
		


System.out.println("*****************************************************************");
System.out.println("***********FACILITY MIGRATION REPORT START*****************");
java.time.LocalDateTime startTime = java.time.LocalDateTime.now();
globalMap.put("startTime", startTime);
System.out.println("Start time - "+ startTime);

System.out.println("Total number of facilities fetched from LAMIS3 DB - "+globalMap.get("tDBInput_12_NB_LINE"));
 



/**
 * [tJava_5 begin ] stop
 */
	
	/**
	 * [tJava_5 main ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 


	tos_count_tJava_5++;

/**
 * [tJava_5 main ] stop
 */
	
	/**
	 * [tJava_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 process_data_begin ] stop
 */
	
	/**
	 * [tJava_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 process_data_end ] stop
 */
	
	/**
	 * [tJava_5 end ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 

ok_Hash.put("tJava_5", true);
end_Hash.put("tJava_5", System.currentTimeMillis());




/**
 * [tJava_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_5 finally ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}
	


public static class final_mapperStruct implements routines.system.IPersistableRow<final_mapperStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String hospital_number;

				public String getHospital_number () {
					return this.hospital_number;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String first_name;

				public String getFirst_name () {
					return this.first_name;
				}
				
			    public String surname;

				public String getSurname () {
					return this.surname;
				}
				
			    public String other_name;

				public String getOther_name () {
					return this.other_name;
				}
				
			    public String gender;

				public String getGender () {
					return this.gender;
				}
				
			    public java.util.Date date_of_birth;

				public java.util.Date getDate_of_birth () {
					return this.date_of_birth;
				}
				
			    public Boolean is_date_of_birth_estimated;

				public Boolean getIs_date_of_birth_estimated () {
					return this.is_date_of_birth_estimated;
				}
				
			    public String education;

				public String getEducation () {
					return this.education;
				}
				
			    public String marital_status;

				public String getMarital_status () {
					return this.marital_status;
				}
				
			    public String employment_status;

				public String getEmployment_status () {
					return this.employment_status;
				}
				
			    public String address;

				public String getAddress () {
					return this.address;
				}
				
			    public String contact_point;

				public String getContact_point () {
					return this.contact_point;
				}
				
			    public String contact;

				public String getContact () {
					return this.contact;
				}
				
			    public java.util.Date date_of_registration;

				public java.util.Date getDate_of_registration () {
					return this.date_of_registration;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public boolean active;

				public boolean getActive () {
					return this.active;
				}
				
			    public Boolean deceased;

				public Boolean getDeceased () {
					return this.deceased;
				}
				
			    public java.util.Date deceased_date_time;

				public java.util.Date getDeceased_date_time () {
					return this.deceased_date_time;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String identifier;

				public String getIdentifier () {
					return this.identifier;
				}
				
			    public long facility_id;

				public long getFacility_id () {
					return this.facility_id;
				}
				
			    public String organization;

				public String getOrganization () {
					return this.organization;
				}
				
			    public String sex;

				public String getSex () {
					return this.sex;
				}
				
			    public String full_name;

				public String getFull_name () {
					return this.full_name;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
						result = prime * result + ((this.sex == null) ? 0 : this.sex.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final final_mapperStruct other = (final_mapperStruct) obj;
		
						if (this.id != other.id)
							return false;
					
						if (this.sex == null) {
							if (other.sex != null)
								return false;
						
						} else if (!this.sex.equals(other.sex))
						
							return false;
					

		return true;
    }

	public void copyDataTo(final_mapperStruct other) {

		other.id = this.id;
	            other.hospital_number = this.hospital_number;
	            other.uuid = this.uuid;
	            other.first_name = this.first_name;
	            other.surname = this.surname;
	            other.other_name = this.other_name;
	            other.gender = this.gender;
	            other.date_of_birth = this.date_of_birth;
	            other.is_date_of_birth_estimated = this.is_date_of_birth_estimated;
	            other.education = this.education;
	            other.marital_status = this.marital_status;
	            other.employment_status = this.employment_status;
	            other.address = this.address;
	            other.contact_point = this.contact_point;
	            other.contact = this.contact;
	            other.date_of_registration = this.date_of_registration;
	            other.archived = this.archived;
	            other.active = this.active;
	            other.deceased = this.deceased;
	            other.deceased_date_time = this.deceased_date_time;
	            other.created_date = this.created_date;
	            other.last_modified_date = this.last_modified_date;
	            other.created_by = this.created_by;
	            other.last_modified_by = this.last_modified_by;
	            other.identifier = this.identifier;
	            other.facility_id = this.facility_id;
	            other.organization = this.organization;
	            other.sex = this.sex;
	            other.full_name = this.full_name;
	            
	}

	public void copyKeysDataTo(final_mapperStruct other) {

		other.id = this.id;
	            	other.sex = this.sex;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.hospital_number = readString(dis);
					
					this.uuid = readString(dis);
					
					this.first_name = readString(dis);
					
					this.surname = readString(dis);
					
					this.other_name = readString(dis);
					
					this.gender = readString(dis);
					
					this.date_of_birth = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_date_of_birth_estimated = null;
           				} else {
           			    	this.is_date_of_birth_estimated = dis.readBoolean();
           				}
					
					this.education = readString(dis);
					
					this.marital_status = readString(dis);
					
					this.employment_status = readString(dis);
					
					this.address = readString(dis);
					
					this.contact_point = readString(dis);
					
					this.contact = readString(dis);
					
					this.date_of_registration = readDate(dis);
					
						this.archived = readInteger(dis);
					
			        this.active = dis.readBoolean();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.deceased = null;
           				} else {
           			    	this.deceased = dis.readBoolean();
           				}
					
					this.deceased_date_time = readDate(dis);
					
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_by = readString(dis);
					
					this.identifier = readString(dis);
					
			        this.facility_id = dis.readLong();
					
					this.organization = readString(dis);
					
					this.sex = readString(dis);
					
					this.full_name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.hospital_number,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.first_name,dos);
					
					// String
				
						writeString(this.surname,dos);
					
					// String
				
						writeString(this.other_name,dos);
					
					// String
				
						writeString(this.gender,dos);
					
					// java.util.Date
				
						writeDate(this.date_of_birth,dos);
					
					// Boolean
				
						if(this.is_date_of_birth_estimated == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_date_of_birth_estimated);
		            	}
					
					// String
				
						writeString(this.education,dos);
					
					// String
				
						writeString(this.marital_status,dos);
					
					// String
				
						writeString(this.employment_status,dos);
					
					// String
				
						writeString(this.address,dos);
					
					// String
				
						writeString(this.contact_point,dos);
					
					// String
				
						writeString(this.contact,dos);
					
					// java.util.Date
				
						writeDate(this.date_of_registration,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.active);
					
					// Boolean
				
						if(this.deceased == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.deceased);
		            	}
					
					// java.util.Date
				
						writeDate(this.deceased_date_time,dos);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.identifier,dos);
					
					// long
				
		            	dos.writeLong(this.facility_id);
					
					// String
				
						writeString(this.organization,dos);
					
					// String
				
						writeString(this.sex,dos);
					
					// String
				
						writeString(this.full_name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",hospital_number="+hospital_number);
		sb.append(",uuid="+uuid);
		sb.append(",first_name="+first_name);
		sb.append(",surname="+surname);
		sb.append(",other_name="+other_name);
		sb.append(",gender="+gender);
		sb.append(",date_of_birth="+String.valueOf(date_of_birth));
		sb.append(",is_date_of_birth_estimated="+String.valueOf(is_date_of_birth_estimated));
		sb.append(",education="+education);
		sb.append(",marital_status="+marital_status);
		sb.append(",employment_status="+employment_status);
		sb.append(",address="+address);
		sb.append(",contact_point="+contact_point);
		sb.append(",contact="+contact);
		sb.append(",date_of_registration="+String.valueOf(date_of_registration));
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",active="+String.valueOf(active));
		sb.append(",deceased="+String.valueOf(deceased));
		sb.append(",deceased_date_time="+String.valueOf(deceased_date_time));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",identifier="+identifier);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",organization="+organization);
		sb.append(",sex="+sex);
		sb.append(",full_name="+full_name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(final_mapperStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.sex, other.sex);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Unique_PatientsStruct implements routines.system.IPersistableRow<Unique_PatientsStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String hospital_number;

				public String getHospital_number () {
					return this.hospital_number;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String first_name;

				public String getFirst_name () {
					return this.first_name;
				}
				
			    public String surname;

				public String getSurname () {
					return this.surname;
				}
				
			    public String other_name;

				public String getOther_name () {
					return this.other_name;
				}
				
			    public String gender;

				public String getGender () {
					return this.gender;
				}
				
			    public java.util.Date date_of_birth;

				public java.util.Date getDate_of_birth () {
					return this.date_of_birth;
				}
				
			    public Boolean is_date_of_birth_estimated;

				public Boolean getIs_date_of_birth_estimated () {
					return this.is_date_of_birth_estimated;
				}
				
			    public String education;

				public String getEducation () {
					return this.education;
				}
				
			    public String marital_status;

				public String getMarital_status () {
					return this.marital_status;
				}
				
			    public String employment_status;

				public String getEmployment_status () {
					return this.employment_status;
				}
				
			    public String address;

				public String getAddress () {
					return this.address;
				}
				
			    public String contact_point;

				public String getContact_point () {
					return this.contact_point;
				}
				
			    public String contact;

				public String getContact () {
					return this.contact;
				}
				
			    public java.util.Date date_of_registration;

				public java.util.Date getDate_of_registration () {
					return this.date_of_registration;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public boolean active;

				public boolean getActive () {
					return this.active;
				}
				
			    public Boolean deceased;

				public Boolean getDeceased () {
					return this.deceased;
				}
				
			    public java.util.Date deceased_date_time;

				public java.util.Date getDeceased_date_time () {
					return this.deceased_date_time;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String identifier;

				public String getIdentifier () {
					return this.identifier;
				}
				
			    public long facility_id;

				public long getFacility_id () {
					return this.facility_id;
				}
				
			    public String organization;

				public String getOrganization () {
					return this.organization;
				}
				
			    public String sex;

				public String getSex () {
					return this.sex;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.hospital_number = readString(dis);
					
					this.uuid = readString(dis);
					
					this.first_name = readString(dis);
					
					this.surname = readString(dis);
					
					this.other_name = readString(dis);
					
					this.gender = readString(dis);
					
					this.date_of_birth = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_date_of_birth_estimated = null;
           				} else {
           			    	this.is_date_of_birth_estimated = dis.readBoolean();
           				}
					
					this.education = readString(dis);
					
					this.marital_status = readString(dis);
					
					this.employment_status = readString(dis);
					
					this.address = readString(dis);
					
					this.contact_point = readString(dis);
					
					this.contact = readString(dis);
					
					this.date_of_registration = readDate(dis);
					
						this.archived = readInteger(dis);
					
			        this.active = dis.readBoolean();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.deceased = null;
           				} else {
           			    	this.deceased = dis.readBoolean();
           				}
					
					this.deceased_date_time = readDate(dis);
					
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_by = readString(dis);
					
					this.identifier = readString(dis);
					
			        this.facility_id = dis.readLong();
					
					this.organization = readString(dis);
					
					this.sex = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.hospital_number,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.first_name,dos);
					
					// String
				
						writeString(this.surname,dos);
					
					// String
				
						writeString(this.other_name,dos);
					
					// String
				
						writeString(this.gender,dos);
					
					// java.util.Date
				
						writeDate(this.date_of_birth,dos);
					
					// Boolean
				
						if(this.is_date_of_birth_estimated == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_date_of_birth_estimated);
		            	}
					
					// String
				
						writeString(this.education,dos);
					
					// String
				
						writeString(this.marital_status,dos);
					
					// String
				
						writeString(this.employment_status,dos);
					
					// String
				
						writeString(this.address,dos);
					
					// String
				
						writeString(this.contact_point,dos);
					
					// String
				
						writeString(this.contact,dos);
					
					// java.util.Date
				
						writeDate(this.date_of_registration,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.active);
					
					// Boolean
				
						if(this.deceased == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.deceased);
		            	}
					
					// java.util.Date
				
						writeDate(this.deceased_date_time,dos);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.identifier,dos);
					
					// long
				
		            	dos.writeLong(this.facility_id);
					
					// String
				
						writeString(this.organization,dos);
					
					// String
				
						writeString(this.sex,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",hospital_number="+hospital_number);
		sb.append(",uuid="+uuid);
		sb.append(",first_name="+first_name);
		sb.append(",surname="+surname);
		sb.append(",other_name="+other_name);
		sb.append(",gender="+gender);
		sb.append(",date_of_birth="+String.valueOf(date_of_birth));
		sb.append(",is_date_of_birth_estimated="+String.valueOf(is_date_of_birth_estimated));
		sb.append(",education="+education);
		sb.append(",marital_status="+marital_status);
		sb.append(",employment_status="+employment_status);
		sb.append(",address="+address);
		sb.append(",contact_point="+contact_point);
		sb.append(",contact="+contact);
		sb.append(",date_of_registration="+String.valueOf(date_of_registration));
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",active="+String.valueOf(active));
		sb.append(",deceased="+String.valueOf(deceased));
		sb.append(",deceased_date_time="+String.valueOf(deceased_date_time));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",identifier="+identifier);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",organization="+organization);
		sb.append(",sex="+sex);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Unique_PatientsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Duplicate_PatientsStruct implements routines.system.IPersistableRow<Duplicate_PatientsStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String hospital_number;

				public String getHospital_number () {
					return this.hospital_number;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String first_name;

				public String getFirst_name () {
					return this.first_name;
				}
				
			    public String surname;

				public String getSurname () {
					return this.surname;
				}
				
			    public String other_name;

				public String getOther_name () {
					return this.other_name;
				}
				
			    public String gender;

				public String getGender () {
					return this.gender;
				}
				
			    public java.util.Date date_of_birth;

				public java.util.Date getDate_of_birth () {
					return this.date_of_birth;
				}
				
			    public Boolean is_date_of_birth_estimated;

				public Boolean getIs_date_of_birth_estimated () {
					return this.is_date_of_birth_estimated;
				}
				
			    public String education;

				public String getEducation () {
					return this.education;
				}
				
			    public String marital_status;

				public String getMarital_status () {
					return this.marital_status;
				}
				
			    public String employment_status;

				public String getEmployment_status () {
					return this.employment_status;
				}
				
			    public String address;

				public String getAddress () {
					return this.address;
				}
				
			    public String contact_point;

				public String getContact_point () {
					return this.contact_point;
				}
				
			    public String contact;

				public String getContact () {
					return this.contact;
				}
				
			    public java.util.Date date_of_registration;

				public java.util.Date getDate_of_registration () {
					return this.date_of_registration;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public boolean active;

				public boolean getActive () {
					return this.active;
				}
				
			    public Boolean deceased;

				public Boolean getDeceased () {
					return this.deceased;
				}
				
			    public java.util.Date deceased_date_time;

				public java.util.Date getDeceased_date_time () {
					return this.deceased_date_time;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String identifier;

				public String getIdentifier () {
					return this.identifier;
				}
				
			    public long facility_id;

				public long getFacility_id () {
					return this.facility_id;
				}
				
			    public String organization;

				public String getOrganization () {
					return this.organization;
				}
				
			    public String sex;

				public String getSex () {
					return this.sex;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
						result = prime * result + ((this.sex == null) ? 0 : this.sex.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Duplicate_PatientsStruct other = (Duplicate_PatientsStruct) obj;
		
						if (this.id != other.id)
							return false;
					
						if (this.sex == null) {
							if (other.sex != null)
								return false;
						
						} else if (!this.sex.equals(other.sex))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Duplicate_PatientsStruct other) {

		other.id = this.id;
	            other.hospital_number = this.hospital_number;
	            other.uuid = this.uuid;
	            other.first_name = this.first_name;
	            other.surname = this.surname;
	            other.other_name = this.other_name;
	            other.gender = this.gender;
	            other.date_of_birth = this.date_of_birth;
	            other.is_date_of_birth_estimated = this.is_date_of_birth_estimated;
	            other.education = this.education;
	            other.marital_status = this.marital_status;
	            other.employment_status = this.employment_status;
	            other.address = this.address;
	            other.contact_point = this.contact_point;
	            other.contact = this.contact;
	            other.date_of_registration = this.date_of_registration;
	            other.archived = this.archived;
	            other.active = this.active;
	            other.deceased = this.deceased;
	            other.deceased_date_time = this.deceased_date_time;
	            other.created_date = this.created_date;
	            other.last_modified_date = this.last_modified_date;
	            other.created_by = this.created_by;
	            other.last_modified_by = this.last_modified_by;
	            other.identifier = this.identifier;
	            other.facility_id = this.facility_id;
	            other.organization = this.organization;
	            other.sex = this.sex;
	            
	}

	public void copyKeysDataTo(Duplicate_PatientsStruct other) {

		other.id = this.id;
	            	other.sex = this.sex;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.hospital_number = readString(dis);
					
					this.uuid = readString(dis);
					
					this.first_name = readString(dis);
					
					this.surname = readString(dis);
					
					this.other_name = readString(dis);
					
					this.gender = readString(dis);
					
					this.date_of_birth = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_date_of_birth_estimated = null;
           				} else {
           			    	this.is_date_of_birth_estimated = dis.readBoolean();
           				}
					
					this.education = readString(dis);
					
					this.marital_status = readString(dis);
					
					this.employment_status = readString(dis);
					
					this.address = readString(dis);
					
					this.contact_point = readString(dis);
					
					this.contact = readString(dis);
					
					this.date_of_registration = readDate(dis);
					
						this.archived = readInteger(dis);
					
			        this.active = dis.readBoolean();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.deceased = null;
           				} else {
           			    	this.deceased = dis.readBoolean();
           				}
					
					this.deceased_date_time = readDate(dis);
					
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_by = readString(dis);
					
					this.identifier = readString(dis);
					
			        this.facility_id = dis.readLong();
					
					this.organization = readString(dis);
					
					this.sex = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.hospital_number,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.first_name,dos);
					
					// String
				
						writeString(this.surname,dos);
					
					// String
				
						writeString(this.other_name,dos);
					
					// String
				
						writeString(this.gender,dos);
					
					// java.util.Date
				
						writeDate(this.date_of_birth,dos);
					
					// Boolean
				
						if(this.is_date_of_birth_estimated == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_date_of_birth_estimated);
		            	}
					
					// String
				
						writeString(this.education,dos);
					
					// String
				
						writeString(this.marital_status,dos);
					
					// String
				
						writeString(this.employment_status,dos);
					
					// String
				
						writeString(this.address,dos);
					
					// String
				
						writeString(this.contact_point,dos);
					
					// String
				
						writeString(this.contact,dos);
					
					// java.util.Date
				
						writeDate(this.date_of_registration,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.active);
					
					// Boolean
				
						if(this.deceased == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.deceased);
		            	}
					
					// java.util.Date
				
						writeDate(this.deceased_date_time,dos);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.identifier,dos);
					
					// long
				
		            	dos.writeLong(this.facility_id);
					
					// String
				
						writeString(this.organization,dos);
					
					// String
				
						writeString(this.sex,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",hospital_number="+hospital_number);
		sb.append(",uuid="+uuid);
		sb.append(",first_name="+first_name);
		sb.append(",surname="+surname);
		sb.append(",other_name="+other_name);
		sb.append(",gender="+gender);
		sb.append(",date_of_birth="+String.valueOf(date_of_birth));
		sb.append(",is_date_of_birth_estimated="+String.valueOf(is_date_of_birth_estimated));
		sb.append(",education="+education);
		sb.append(",marital_status="+marital_status);
		sb.append(",employment_status="+employment_status);
		sb.append(",address="+address);
		sb.append(",contact_point="+contact_point);
		sb.append(",contact="+contact);
		sb.append(",date_of_registration="+String.valueOf(date_of_registration));
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",active="+String.valueOf(active));
		sb.append(",deceased="+String.valueOf(deceased));
		sb.append(",deceased_date_time="+String.valueOf(deceased_date_time));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",identifier="+identifier);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",organization="+organization);
		sb.append(",sex="+sex);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Duplicate_PatientsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.sex, other.sex);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String hospital_number;

				public String getHospital_number () {
					return this.hospital_number;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String first_name;

				public String getFirst_name () {
					return this.first_name;
				}
				
			    public String surname;

				public String getSurname () {
					return this.surname;
				}
				
			    public String other_name;

				public String getOther_name () {
					return this.other_name;
				}
				
			    public String gender;

				public String getGender () {
					return this.gender;
				}
				
			    public java.util.Date date_of_birth;

				public java.util.Date getDate_of_birth () {
					return this.date_of_birth;
				}
				
			    public Boolean is_date_of_birth_estimated;

				public Boolean getIs_date_of_birth_estimated () {
					return this.is_date_of_birth_estimated;
				}
				
			    public String education;

				public String getEducation () {
					return this.education;
				}
				
			    public String marital_status;

				public String getMarital_status () {
					return this.marital_status;
				}
				
			    public String employment_status;

				public String getEmployment_status () {
					return this.employment_status;
				}
				
			    public String address;

				public String getAddress () {
					return this.address;
				}
				
			    public String contact_point;

				public String getContact_point () {
					return this.contact_point;
				}
				
			    public String contact;

				public String getContact () {
					return this.contact;
				}
				
			    public java.util.Date date_of_registration;

				public java.util.Date getDate_of_registration () {
					return this.date_of_registration;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public boolean active;

				public boolean getActive () {
					return this.active;
				}
				
			    public Boolean deceased;

				public Boolean getDeceased () {
					return this.deceased;
				}
				
			    public java.util.Date deceased_date_time;

				public java.util.Date getDeceased_date_time () {
					return this.deceased_date_time;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String identifier;

				public String getIdentifier () {
					return this.identifier;
				}
				
			    public long facility_id;

				public long getFacility_id () {
					return this.facility_id;
				}
				
			    public String organization;

				public String getOrganization () {
					return this.organization;
				}
				
			    public String sex;

				public String getSex () {
					return this.sex;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
						result = prime * result + ((this.sex == null) ? 0 : this.sex.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.id != other.id)
							return false;
					
						if (this.sex == null) {
							if (other.sex != null)
								return false;
						
						} else if (!this.sex.equals(other.sex))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.id = this.id;
	            other.hospital_number = this.hospital_number;
	            other.uuid = this.uuid;
	            other.first_name = this.first_name;
	            other.surname = this.surname;
	            other.other_name = this.other_name;
	            other.gender = this.gender;
	            other.date_of_birth = this.date_of_birth;
	            other.is_date_of_birth_estimated = this.is_date_of_birth_estimated;
	            other.education = this.education;
	            other.marital_status = this.marital_status;
	            other.employment_status = this.employment_status;
	            other.address = this.address;
	            other.contact_point = this.contact_point;
	            other.contact = this.contact;
	            other.date_of_registration = this.date_of_registration;
	            other.archived = this.archived;
	            other.active = this.active;
	            other.deceased = this.deceased;
	            other.deceased_date_time = this.deceased_date_time;
	            other.created_date = this.created_date;
	            other.last_modified_date = this.last_modified_date;
	            other.created_by = this.created_by;
	            other.last_modified_by = this.last_modified_by;
	            other.identifier = this.identifier;
	            other.facility_id = this.facility_id;
	            other.organization = this.organization;
	            other.sex = this.sex;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.id = this.id;
	            	other.sex = this.sex;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.hospital_number = readString(dis);
					
					this.uuid = readString(dis);
					
					this.first_name = readString(dis);
					
					this.surname = readString(dis);
					
					this.other_name = readString(dis);
					
					this.gender = readString(dis);
					
					this.date_of_birth = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_date_of_birth_estimated = null;
           				} else {
           			    	this.is_date_of_birth_estimated = dis.readBoolean();
           				}
					
					this.education = readString(dis);
					
					this.marital_status = readString(dis);
					
					this.employment_status = readString(dis);
					
					this.address = readString(dis);
					
					this.contact_point = readString(dis);
					
					this.contact = readString(dis);
					
					this.date_of_registration = readDate(dis);
					
						this.archived = readInteger(dis);
					
			        this.active = dis.readBoolean();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.deceased = null;
           				} else {
           			    	this.deceased = dis.readBoolean();
           				}
					
					this.deceased_date_time = readDate(dis);
					
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_by = readString(dis);
					
					this.identifier = readString(dis);
					
			        this.facility_id = dis.readLong();
					
					this.organization = readString(dis);
					
					this.sex = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.hospital_number,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.first_name,dos);
					
					// String
				
						writeString(this.surname,dos);
					
					// String
				
						writeString(this.other_name,dos);
					
					// String
				
						writeString(this.gender,dos);
					
					// java.util.Date
				
						writeDate(this.date_of_birth,dos);
					
					// Boolean
				
						if(this.is_date_of_birth_estimated == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_date_of_birth_estimated);
		            	}
					
					// String
				
						writeString(this.education,dos);
					
					// String
				
						writeString(this.marital_status,dos);
					
					// String
				
						writeString(this.employment_status,dos);
					
					// String
				
						writeString(this.address,dos);
					
					// String
				
						writeString(this.contact_point,dos);
					
					// String
				
						writeString(this.contact,dos);
					
					// java.util.Date
				
						writeDate(this.date_of_registration,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.active);
					
					// Boolean
				
						if(this.deceased == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.deceased);
		            	}
					
					// java.util.Date
				
						writeDate(this.deceased_date_time,dos);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.identifier,dos);
					
					// long
				
		            	dos.writeLong(this.facility_id);
					
					// String
				
						writeString(this.organization,dos);
					
					// String
				
						writeString(this.sex,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",hospital_number="+hospital_number);
		sb.append(",uuid="+uuid);
		sb.append(",first_name="+first_name);
		sb.append(",surname="+surname);
		sb.append(",other_name="+other_name);
		sb.append(",gender="+gender);
		sb.append(",date_of_birth="+String.valueOf(date_of_birth));
		sb.append(",is_date_of_birth_estimated="+String.valueOf(is_date_of_birth_estimated));
		sb.append(",education="+education);
		sb.append(",marital_status="+marital_status);
		sb.append(",employment_status="+employment_status);
		sb.append(",address="+address);
		sb.append(",contact_point="+contact_point);
		sb.append(",contact="+contact);
		sb.append(",date_of_registration="+String.valueOf(date_of_registration));
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",active="+String.valueOf(active));
		sb.append(",deceased="+String.valueOf(deceased));
		sb.append(",deceased_date_time="+String.valueOf(deceased_date_time));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",identifier="+identifier);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",organization="+organization);
		sb.append(",sex="+sex);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.sex, other.sex);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Check_duplicatsStruct implements routines.system.IPersistableRow<Check_duplicatsStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String hospital_number;

				public String getHospital_number () {
					return this.hospital_number;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String first_name;

				public String getFirst_name () {
					return this.first_name;
				}
				
			    public String surname;

				public String getSurname () {
					return this.surname;
				}
				
			    public String other_name;

				public String getOther_name () {
					return this.other_name;
				}
				
			    public String gender;

				public String getGender () {
					return this.gender;
				}
				
			    public java.util.Date date_of_birth;

				public java.util.Date getDate_of_birth () {
					return this.date_of_birth;
				}
				
			    public Boolean is_date_of_birth_estimated;

				public Boolean getIs_date_of_birth_estimated () {
					return this.is_date_of_birth_estimated;
				}
				
			    public String education;

				public String getEducation () {
					return this.education;
				}
				
			    public String marital_status;

				public String getMarital_status () {
					return this.marital_status;
				}
				
			    public String employment_status;

				public String getEmployment_status () {
					return this.employment_status;
				}
				
			    public String address;

				public String getAddress () {
					return this.address;
				}
				
			    public String contact_point;

				public String getContact_point () {
					return this.contact_point;
				}
				
			    public String contact;

				public String getContact () {
					return this.contact;
				}
				
			    public java.util.Date date_of_registration;

				public java.util.Date getDate_of_registration () {
					return this.date_of_registration;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public boolean active;

				public boolean getActive () {
					return this.active;
				}
				
			    public Boolean deceased;

				public Boolean getDeceased () {
					return this.deceased;
				}
				
			    public java.util.Date deceased_date_time;

				public java.util.Date getDeceased_date_time () {
					return this.deceased_date_time;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String identifier;

				public String getIdentifier () {
					return this.identifier;
				}
				
			    public long facility_id;

				public long getFacility_id () {
					return this.facility_id;
				}
				
			    public String organization;

				public String getOrganization () {
					return this.organization;
				}
				
			    public String sex;

				public String getSex () {
					return this.sex;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
						result = prime * result + ((this.sex == null) ? 0 : this.sex.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Check_duplicatsStruct other = (Check_duplicatsStruct) obj;
		
						if (this.id != other.id)
							return false;
					
						if (this.sex == null) {
							if (other.sex != null)
								return false;
						
						} else if (!this.sex.equals(other.sex))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Check_duplicatsStruct other) {

		other.id = this.id;
	            other.hospital_number = this.hospital_number;
	            other.uuid = this.uuid;
	            other.first_name = this.first_name;
	            other.surname = this.surname;
	            other.other_name = this.other_name;
	            other.gender = this.gender;
	            other.date_of_birth = this.date_of_birth;
	            other.is_date_of_birth_estimated = this.is_date_of_birth_estimated;
	            other.education = this.education;
	            other.marital_status = this.marital_status;
	            other.employment_status = this.employment_status;
	            other.address = this.address;
	            other.contact_point = this.contact_point;
	            other.contact = this.contact;
	            other.date_of_registration = this.date_of_registration;
	            other.archived = this.archived;
	            other.active = this.active;
	            other.deceased = this.deceased;
	            other.deceased_date_time = this.deceased_date_time;
	            other.created_date = this.created_date;
	            other.last_modified_date = this.last_modified_date;
	            other.created_by = this.created_by;
	            other.last_modified_by = this.last_modified_by;
	            other.identifier = this.identifier;
	            other.facility_id = this.facility_id;
	            other.organization = this.organization;
	            other.sex = this.sex;
	            
	}

	public void copyKeysDataTo(Check_duplicatsStruct other) {

		other.id = this.id;
	            	other.sex = this.sex;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.hospital_number = readString(dis);
					
					this.uuid = readString(dis);
					
					this.first_name = readString(dis);
					
					this.surname = readString(dis);
					
					this.other_name = readString(dis);
					
					this.gender = readString(dis);
					
					this.date_of_birth = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_date_of_birth_estimated = null;
           				} else {
           			    	this.is_date_of_birth_estimated = dis.readBoolean();
           				}
					
					this.education = readString(dis);
					
					this.marital_status = readString(dis);
					
					this.employment_status = readString(dis);
					
					this.address = readString(dis);
					
					this.contact_point = readString(dis);
					
					this.contact = readString(dis);
					
					this.date_of_registration = readDate(dis);
					
						this.archived = readInteger(dis);
					
			        this.active = dis.readBoolean();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.deceased = null;
           				} else {
           			    	this.deceased = dis.readBoolean();
           				}
					
					this.deceased_date_time = readDate(dis);
					
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_by = readString(dis);
					
					this.identifier = readString(dis);
					
			        this.facility_id = dis.readLong();
					
					this.organization = readString(dis);
					
					this.sex = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.hospital_number,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.first_name,dos);
					
					// String
				
						writeString(this.surname,dos);
					
					// String
				
						writeString(this.other_name,dos);
					
					// String
				
						writeString(this.gender,dos);
					
					// java.util.Date
				
						writeDate(this.date_of_birth,dos);
					
					// Boolean
				
						if(this.is_date_of_birth_estimated == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_date_of_birth_estimated);
		            	}
					
					// String
				
						writeString(this.education,dos);
					
					// String
				
						writeString(this.marital_status,dos);
					
					// String
				
						writeString(this.employment_status,dos);
					
					// String
				
						writeString(this.address,dos);
					
					// String
				
						writeString(this.contact_point,dos);
					
					// String
				
						writeString(this.contact,dos);
					
					// java.util.Date
				
						writeDate(this.date_of_registration,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.active);
					
					// Boolean
				
						if(this.deceased == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.deceased);
		            	}
					
					// java.util.Date
				
						writeDate(this.deceased_date_time,dos);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.identifier,dos);
					
					// long
				
		            	dos.writeLong(this.facility_id);
					
					// String
				
						writeString(this.organization,dos);
					
					// String
				
						writeString(this.sex,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",hospital_number="+hospital_number);
		sb.append(",uuid="+uuid);
		sb.append(",first_name="+first_name);
		sb.append(",surname="+surname);
		sb.append(",other_name="+other_name);
		sb.append(",gender="+gender);
		sb.append(",date_of_birth="+String.valueOf(date_of_birth));
		sb.append(",is_date_of_birth_estimated="+String.valueOf(is_date_of_birth_estimated));
		sb.append(",education="+education);
		sb.append(",marital_status="+marital_status);
		sb.append(",employment_status="+employment_status);
		sb.append(",address="+address);
		sb.append(",contact_point="+contact_point);
		sb.append(",contact="+contact);
		sb.append(",date_of_registration="+String.valueOf(date_of_registration));
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",active="+String.valueOf(active));
		sb.append(",deceased="+String.valueOf(deceased));
		sb.append(",deceased_date_time="+String.valueOf(deceased_date_time));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",identifier="+identifier);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",organization="+organization);
		sb.append(",sex="+sex);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Check_duplicatsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.sex, other.sex);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Extract_fieldsStruct implements routines.system.IPersistableRow<Extract_fieldsStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Patient_Person = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String hospital_number;

				public String getHospital_number () {
					return this.hospital_number;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String first_name;

				public String getFirst_name () {
					return this.first_name;
				}
				
			    public String surname;

				public String getSurname () {
					return this.surname;
				}
				
			    public String other_name;

				public String getOther_name () {
					return this.other_name;
				}
				
			    public String gender;

				public String getGender () {
					return this.gender;
				}
				
			    public java.util.Date date_of_birth;

				public java.util.Date getDate_of_birth () {
					return this.date_of_birth;
				}
				
			    public Boolean is_date_of_birth_estimated;

				public Boolean getIs_date_of_birth_estimated () {
					return this.is_date_of_birth_estimated;
				}
				
			    public String education;

				public String getEducation () {
					return this.education;
				}
				
			    public String marital_status;

				public String getMarital_status () {
					return this.marital_status;
				}
				
			    public String employment_status;

				public String getEmployment_status () {
					return this.employment_status;
				}
				
			    public String address;

				public String getAddress () {
					return this.address;
				}
				
			    public String contact_point;

				public String getContact_point () {
					return this.contact_point;
				}
				
			    public String contact;

				public String getContact () {
					return this.contact;
				}
				
			    public String next_of_kin;

				public String getNext_of_kin () {
					return this.next_of_kin;
				}
				
			    public String next_of_kin_address;

				public String getNext_of_kin_address () {
					return this.next_of_kin_address;
				}
				
			    public String next_of_kin_phone;

				public String getNext_of_kin_phone () {
					return this.next_of_kin_phone;
				}
				
			    public String next_of_kin_relationship;

				public String getNext_of_kin_relationship () {
					return this.next_of_kin_relationship;
				}
				
			    public java.util.Date date_of_registration;

				public java.util.Date getDate_of_registration () {
					return this.date_of_registration;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public boolean active;

				public boolean getActive () {
					return this.active;
				}
				
			    public Boolean deceased;

				public Boolean getDeceased () {
					return this.deceased;
				}
				
			    public java.util.Date deceased_date_time;

				public java.util.Date getDeceased_date_time () {
					return this.deceased_date_time;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String identifier;

				public String getIdentifier () {
					return this.identifier;
				}
				
			    public String state_name;

				public String getState_name () {
					return this.state_name;
				}
				
			    public Long state_id;

				public Long getState_id () {
					return this.state_id;
				}
				
			    public Long district_id;

				public Long getDistrict_id () {
					return this.district_id;
				}
				
			    public String district;

				public String getDistrict () {
					return this.district;
				}
				
			    public long facility_id;

				public long getFacility_id () {
					return this.facility_id;
				}
				
			    public String facility_name;

				public String getFacility_name () {
					return this.facility_name;
				}
				
			    public String contact_loop;

				public String getContact_loop () {
					return this.contact_loop;
				}
				
			    public String education_loop;

				public String getEducation_loop () {
					return this.education_loop;
				}
				
			    public String status_loop;

				public String getStatus_loop () {
					return this.status_loop;
				}
				
			    public String employmentLoop;

				public String getEmploymentLoop () {
					return this.employmentLoop;
				}
				
			    public String address_loop;

				public String getAddress_loop () {
					return this.address_loop;
				}
				
			    public String phone_loop;

				public String getPhone_loop () {
					return this.phone_loop;
				}
				
			    public String orgunit_loop;

				public String getOrgunit_loop () {
					return this.orgunit_loop;
				}
				
			    public Long marital_id;

				public Long getMarital_id () {
					return this.marital_id;
				}
				
			    public String marital_display;

				public String getMarital_display () {
					return this.marital_display;
				}
				
			    public Long gender_id;

				public Long getGender_id () {
					return this.gender_id;
				}
				
			    public String gender_display;

				public String getGender_display () {
					return this.gender_display;
				}
				
			    public Long education_id;

				public Long getEducation_id () {
					return this.education_id;
				}
				
			    public String education_display;

				public String getEducation_display () {
					return this.education_display;
				}
				
			    public long occupation_id;

				public long getOccupation_id () {
					return this.occupation_id;
				}
				
			    public String occupation_display;

				public String getOccupation_display () {
					return this.occupation_display;
				}
				
			    public Long relationshipid;

				public Long getRelationshipid () {
					return this.relationshipid;
				}
				
			    public String sex;

				public String getSex () {
					return this.sex;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
						result = prime * result + ((this.gender_display == null) ? 0 : this.gender_display.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Extract_fieldsStruct other = (Extract_fieldsStruct) obj;
		
						if (this.id != other.id)
							return false;
					
						if (this.gender_display == null) {
							if (other.gender_display != null)
								return false;
						
						} else if (!this.gender_display.equals(other.gender_display))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Extract_fieldsStruct other) {

		other.id = this.id;
	            other.hospital_number = this.hospital_number;
	            other.uuid = this.uuid;
	            other.first_name = this.first_name;
	            other.surname = this.surname;
	            other.other_name = this.other_name;
	            other.gender = this.gender;
	            other.date_of_birth = this.date_of_birth;
	            other.is_date_of_birth_estimated = this.is_date_of_birth_estimated;
	            other.education = this.education;
	            other.marital_status = this.marital_status;
	            other.employment_status = this.employment_status;
	            other.address = this.address;
	            other.contact_point = this.contact_point;
	            other.contact = this.contact;
	            other.next_of_kin = this.next_of_kin;
	            other.next_of_kin_address = this.next_of_kin_address;
	            other.next_of_kin_phone = this.next_of_kin_phone;
	            other.next_of_kin_relationship = this.next_of_kin_relationship;
	            other.date_of_registration = this.date_of_registration;
	            other.archived = this.archived;
	            other.active = this.active;
	            other.deceased = this.deceased;
	            other.deceased_date_time = this.deceased_date_time;
	            other.created_date = this.created_date;
	            other.last_modified_date = this.last_modified_date;
	            other.created_by = this.created_by;
	            other.last_modified_by = this.last_modified_by;
	            other.identifier = this.identifier;
	            other.state_name = this.state_name;
	            other.state_id = this.state_id;
	            other.district_id = this.district_id;
	            other.district = this.district;
	            other.facility_id = this.facility_id;
	            other.facility_name = this.facility_name;
	            other.contact_loop = this.contact_loop;
	            other.education_loop = this.education_loop;
	            other.status_loop = this.status_loop;
	            other.employmentLoop = this.employmentLoop;
	            other.address_loop = this.address_loop;
	            other.phone_loop = this.phone_loop;
	            other.orgunit_loop = this.orgunit_loop;
	            other.marital_id = this.marital_id;
	            other.marital_display = this.marital_display;
	            other.gender_id = this.gender_id;
	            other.gender_display = this.gender_display;
	            other.education_id = this.education_id;
	            other.education_display = this.education_display;
	            other.occupation_id = this.occupation_id;
	            other.occupation_display = this.occupation_display;
	            other.relationshipid = this.relationshipid;
	            other.sex = this.sex;
	            
	}

	public void copyKeysDataTo(Extract_fieldsStruct other) {

		other.id = this.id;
	            	other.gender_display = this.gender_display;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Patient_Person.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Patient_Person.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Patient_Person = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Patient_Person, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Patient_Person) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.hospital_number = readString(dis);
					
					this.uuid = readString(dis);
					
					this.first_name = readString(dis);
					
					this.surname = readString(dis);
					
					this.other_name = readString(dis);
					
					this.gender = readString(dis);
					
					this.date_of_birth = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_date_of_birth_estimated = null;
           				} else {
           			    	this.is_date_of_birth_estimated = dis.readBoolean();
           				}
					
					this.education = readString(dis);
					
					this.marital_status = readString(dis);
					
					this.employment_status = readString(dis);
					
					this.address = readString(dis);
					
					this.contact_point = readString(dis);
					
					this.contact = readString(dis);
					
					this.next_of_kin = readString(dis);
					
					this.next_of_kin_address = readString(dis);
					
					this.next_of_kin_phone = readString(dis);
					
					this.next_of_kin_relationship = readString(dis);
					
					this.date_of_registration = readDate(dis);
					
						this.archived = readInteger(dis);
					
			        this.active = dis.readBoolean();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.deceased = null;
           				} else {
           			    	this.deceased = dis.readBoolean();
           				}
					
					this.deceased_date_time = readDate(dis);
					
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_by = readString(dis);
					
					this.identifier = readString(dis);
					
					this.state_name = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.state_id = null;
           				} else {
           			    	this.state_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.district_id = null;
           				} else {
           			    	this.district_id = dis.readLong();
           				}
					
					this.district = readString(dis);
					
			        this.facility_id = dis.readLong();
					
					this.facility_name = readString(dis);
					
					this.contact_loop = readString(dis);
					
					this.education_loop = readString(dis);
					
					this.status_loop = readString(dis);
					
					this.employmentLoop = readString(dis);
					
					this.address_loop = readString(dis);
					
					this.phone_loop = readString(dis);
					
					this.orgunit_loop = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.marital_id = null;
           				} else {
           			    	this.marital_id = dis.readLong();
           				}
					
					this.marital_display = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.gender_id = null;
           				} else {
           			    	this.gender_id = dis.readLong();
           				}
					
					this.gender_display = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.education_id = null;
           				} else {
           			    	this.education_id = dis.readLong();
           				}
					
					this.education_display = readString(dis);
					
			        this.occupation_id = dis.readLong();
					
					this.occupation_display = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.relationshipid = null;
           				} else {
           			    	this.relationshipid = dis.readLong();
           				}
					
					this.sex = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.hospital_number,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.first_name,dos);
					
					// String
				
						writeString(this.surname,dos);
					
					// String
				
						writeString(this.other_name,dos);
					
					// String
				
						writeString(this.gender,dos);
					
					// java.util.Date
				
						writeDate(this.date_of_birth,dos);
					
					// Boolean
				
						if(this.is_date_of_birth_estimated == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_date_of_birth_estimated);
		            	}
					
					// String
				
						writeString(this.education,dos);
					
					// String
				
						writeString(this.marital_status,dos);
					
					// String
				
						writeString(this.employment_status,dos);
					
					// String
				
						writeString(this.address,dos);
					
					// String
				
						writeString(this.contact_point,dos);
					
					// String
				
						writeString(this.contact,dos);
					
					// String
				
						writeString(this.next_of_kin,dos);
					
					// String
				
						writeString(this.next_of_kin_address,dos);
					
					// String
				
						writeString(this.next_of_kin_phone,dos);
					
					// String
				
						writeString(this.next_of_kin_relationship,dos);
					
					// java.util.Date
				
						writeDate(this.date_of_registration,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.active);
					
					// Boolean
				
						if(this.deceased == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.deceased);
		            	}
					
					// java.util.Date
				
						writeDate(this.deceased_date_time,dos);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.identifier,dos);
					
					// String
				
						writeString(this.state_name,dos);
					
					// Long
				
						if(this.state_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.state_id);
		            	}
					
					// Long
				
						if(this.district_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.district_id);
		            	}
					
					// String
				
						writeString(this.district,dos);
					
					// long
				
		            	dos.writeLong(this.facility_id);
					
					// String
				
						writeString(this.facility_name,dos);
					
					// String
				
						writeString(this.contact_loop,dos);
					
					// String
				
						writeString(this.education_loop,dos);
					
					// String
				
						writeString(this.status_loop,dos);
					
					// String
				
						writeString(this.employmentLoop,dos);
					
					// String
				
						writeString(this.address_loop,dos);
					
					// String
				
						writeString(this.phone_loop,dos);
					
					// String
				
						writeString(this.orgunit_loop,dos);
					
					// Long
				
						if(this.marital_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.marital_id);
		            	}
					
					// String
				
						writeString(this.marital_display,dos);
					
					// Long
				
						if(this.gender_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.gender_id);
		            	}
					
					// String
				
						writeString(this.gender_display,dos);
					
					// Long
				
						if(this.education_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.education_id);
		            	}
					
					// String
				
						writeString(this.education_display,dos);
					
					// long
				
		            	dos.writeLong(this.occupation_id);
					
					// String
				
						writeString(this.occupation_display,dos);
					
					// Long
				
						if(this.relationshipid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.relationshipid);
		            	}
					
					// String
				
						writeString(this.sex,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",hospital_number="+hospital_number);
		sb.append(",uuid="+uuid);
		sb.append(",first_name="+first_name);
		sb.append(",surname="+surname);
		sb.append(",other_name="+other_name);
		sb.append(",gender="+gender);
		sb.append(",date_of_birth="+String.valueOf(date_of_birth));
		sb.append(",is_date_of_birth_estimated="+String.valueOf(is_date_of_birth_estimated));
		sb.append(",education="+education);
		sb.append(",marital_status="+marital_status);
		sb.append(",employment_status="+employment_status);
		sb.append(",address="+address);
		sb.append(",contact_point="+contact_point);
		sb.append(",contact="+contact);
		sb.append(",next_of_kin="+next_of_kin);
		sb.append(",next_of_kin_address="+next_of_kin_address);
		sb.append(",next_of_kin_phone="+next_of_kin_phone);
		sb.append(",next_of_kin_relationship="+next_of_kin_relationship);
		sb.append(",date_of_registration="+String.valueOf(date_of_registration));
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",active="+String.valueOf(active));
		sb.append(",deceased="+String.valueOf(deceased));
		sb.append(",deceased_date_time="+String.valueOf(deceased_date_time));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",identifier="+identifier);
		sb.append(",state_name="+state_name);
		sb.append(",state_id="+String.valueOf(state_id));
		sb.append(",district_id="+String.valueOf(district_id));
		sb.append(",district="+district);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",facility_name="+facility_name);
		sb.append(",contact_loop="+contact_loop);
		sb.append(",education_loop="+education_loop);
		sb.append(",status_loop="+status_loop);
		sb.append(",employmentLoop="+employmentLoop);
		sb.append(",address_loop="+address_loop);
		sb.append(",phone_loop="+phone_loop);
		sb.append(",orgunit_loop="+orgunit_loop);
		sb.append(",marital_id="+String.valueOf(marital_id));
		sb.append(",marital_display="+marital_display);
		sb.append(",gender_id="+String.valueOf(gender_id));
		sb.append(",gender_display="+gender_display);
		sb.append(",education_id="+String.valueOf(education_id));
		sb.append(",education_display="+education_display);
		sb.append(",occupation_id="+String.valueOf(occupation_id));
		sb.append(",occupation_display="+occupation_display);
		sb.append(",relationshipid="+String.valueOf(relationshipid));
		sb.append(",sex="+sex);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Extract_fieldsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.gender_display, other.gender_display);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tWriteJSONField_5_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWriteJSONField_5_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		Extract_fieldsStruct Extract_fields = new Extract_fieldsStruct();
Check_duplicatsStruct Check_duplicats = new Check_duplicatsStruct();
row1Struct row1 = new row1Struct();
Unique_PatientsStruct Unique_Patients = new Unique_PatientsStruct();
final_mapperStruct final_mapper = new final_mapperStruct();
Duplicate_PatientsStruct Duplicate_Patients = new Duplicate_PatientsStruct();








	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"final_mapper");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = context.LAMISPlus_Schema;
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("patient_person");
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("patient_person");
}

        int updateKeyCount_tDBOutput_1 = 2;
        if(updateKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_1 = "jdbc:postgresql://"+context.LAMISPlus_Server+":"+context.LAMISPlus_Port+"/"+context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
    dbUser_tDBOutput_1 = context.LAMISPlus_Login;

	final String decryptedPassword_tDBOutput_1 = context.LAMISPlus_Password; 

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;



int count_tDBOutput_1=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
                                boolean whetherExist_tDBOutput_1 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_1 = "public";
                                    if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_1 = conn_tDBOutput_1.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_1 = stmtSchema_tDBOutput_1.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_1.next()){
                                                defaultSchema_tDBOutput_1 = rsSchema_tDBOutput_1.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_1.next()) {
                                        String table_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_NAME");
                                        String schema_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_1.equals(("patient_person"))
                                            && (schema_tDBOutput_1.equals(dbschema_tDBOutput_1) || ((dbschema_tDBOutput_1 ==null || dbschema_tDBOutput_1.trim().length() ==0) && defaultSchema_tDBOutput_1.equals(schema_tDBOutput_1)))) {
                                            whetherExist_tDBOutput_1 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_1) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                        stmtCreate_tDBOutput_1.execute("CREATE TABLE \"" + tableName_tDBOutput_1 + "\"(\"id\" SERIAL  not null ,\"hospital_number\" VARCHAR(25)   not null ,\"uuid\" VARCHAR(36)  ,\"first_name\" VARCHAR(230)  ,\"surname\" VARCHAR(45)  ,\"other_name\" VARCHAR(75)  ,\"" + "gender" + "\" VARCHAR(50),\"date_of_birth\" DATE ,\"is_date_of_birth_estimated\" BOOL ,\"" + "education" + "\" VARCHAR(50),\"" + "marital_status" + "\" VARCHAR(50),\"" + "employment_status" + "\" VARCHAR(50),\"" + "address" + "\" VARCHAR(50),\"" + "contact_point" + "\" VARCHAR(50),\"" + "contact" + "\" VARCHAR(50),\"date_of_registration\" DATE  not null ,\"archived\" INT4 ,\"active\" BOOL default true  not null ,\"deceased\" BOOL ,\"deceased_date_time\" TIMESTAMP ,\"created_date\" TIMESTAMP ,\"last_modified_date\" TIMESTAMP(29)  ,\"created_by\" VARCHAR ,\"last_modified_by\" VARCHAR ,\"" + "identifier" + "\" VARCHAR(50),\"facility_id\" INT8  not null ,\"" + "organization" + "\" VARCHAR(50),\"sex\" TEXT ,\"full_name\" VARCHAR(100)  ,primary key(\"id\",\"sex\"))");
                                    }
                                }
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_1 + "\" WHERE \"id\" = ? AND \"uuid\" = ?");
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1 + "\" (\"id\",\"hospital_number\",\"uuid\",\"first_name\",\"surname\",\"other_name\",\"" + "gender" + "\",\"date_of_birth\",\"is_date_of_birth_estimated\",\"" + "education" + "\",\"" + "marital_status" + "\",\"" + "employment_status" + "\",\"" + "address" + "\",\"" + "contact_point" + "\",\"" + "contact" + "\",\"date_of_registration\",\"archived\",\"active\",\"deceased\",\"deceased_date_time\",\"created_date\",\"last_modified_date\",\"created_by\",\"last_modified_by\",\"" + "identifier" + "\",\"facility_id\",\"" + "organization" + "\",\"sex\",\"full_name\") VALUES (?,?,?,?,?,?," + "?::json" + ",?,?," + "?::json" + "," + "?::json" + "," + "?::json" + "," + "?::json" + "," + "?::json" + "," + "?::json" + ",?,?,?,?,?,?,?,?,?," + "?::json" + ",?," + "?::json" + ",?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
	    String update_tDBOutput_1 = "UPDATE \"" + tableName_tDBOutput_1 + "\" SET \"id\" = ?,\"hospital_number\" = ?,\"uuid\" = ?,\"first_name\" = ?,\"surname\" = ?,\"other_name\" = ?,\"" + "gender" + "\" = " + "?::json" + ",\"date_of_birth\" = ?,\"is_date_of_birth_estimated\" = ?,\"" + "education" + "\" = " + "?::json" + ",\"" + "marital_status" + "\" = " + "?::json" + ",\"" + "employment_status" + "\" = " + "?::json" + ",\"" + "address" + "\" = " + "?::json" + ",\"" + "contact_point" + "\" = " + "?::json" + ",\"" + "contact" + "\" = " + "?::json" + ",\"date_of_registration\" = ?,\"archived\" = ?,\"active\" = ?,\"deceased\" = ?,\"deceased_date_time\" = ?,\"created_date\" = ?,\"last_modified_date\" = ?,\"created_by\" = ?,\"last_modified_by\" = ?,\"" + "identifier" + "\" = " + "?::json" + ",\"facility_id\" = ?,\"" + "organization" + "\" = " + "?::json" + ",\"sex\" = ?,\"full_name\" = ? WHERE \"id\" = ? AND \"uuid\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
	    resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Unique_Patients");
					}
				
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
final_mapperStruct final_mapper_tmp = new final_mapperStruct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */




	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Duplicate_Patients");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = context.LAMISPlus_Schema;
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("etl_patient_duplicate_records");
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("etl_patient_duplicate_records");
}

        int updateKeyCount_tDBOutput_2 = 1;
        if(updateKeyCount_tDBOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_2 = "jdbc:postgresql://"+context.LAMISPlus_Server+":"+context.LAMISPlus_Port+"/"+context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
    dbUser_tDBOutput_2 = context.LAMISPlus_Login;

	final String decryptedPassword_tDBOutput_2 = context.LAMISPlus_Password; 

    String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;

    conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2,dbUser_tDBOutput_2,dbPwd_tDBOutput_2);
	
	resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
        conn_tDBOutput_2.setAutoCommit(false);
        int commitEvery_tDBOutput_2 = 10000;
        int commitCounter_tDBOutput_2 = 0;



int count_tDBOutput_2=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_2 = conn_tDBOutput_2.getMetaData();
                                boolean whetherExist_tDBOutput_2 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_2 = dbMetaData_tDBOutput_2.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_2 = "public";
                                    if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_2 = conn_tDBOutput_2.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_2 = stmtSchema_tDBOutput_2.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_2.next()){
                                                defaultSchema_tDBOutput_2 = rsSchema_tDBOutput_2.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_2.next()) {
                                        String table_tDBOutput_2 = rsTable_tDBOutput_2.getString("TABLE_NAME");
                                        String schema_tDBOutput_2 = rsTable_tDBOutput_2.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_2.equals(("etl_patient_duplicate_records"))
                                            && (schema_tDBOutput_2.equals(dbschema_tDBOutput_2) || ((dbschema_tDBOutput_2 ==null || dbschema_tDBOutput_2.trim().length() ==0) && defaultSchema_tDBOutput_2.equals(schema_tDBOutput_2)))) {
                                            whetherExist_tDBOutput_2 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_2) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                                        stmtCreate_tDBOutput_2.execute("CREATE TABLE \"" + tableName_tDBOutput_2 + "\"(\"id\" SERIAL  not null ,\"hospital_number\" VARCHAR(25)   not null ,\"uuid\" VARCHAR(36)  ,\"first_name\" VARCHAR(230)  ,\"surname\" VARCHAR(45)  ,\"other_name\" VARCHAR(75)  ,\"gender\" VARCHAR(500)  ,\"date_of_birth\" DATE ,\"is_date_of_birth_estimated\" BOOL ,\"education\" VARCHAR(1500)  ,\"marital_status\" VARCHAR(1500)  ,\"employment_status\" VARCHAR(1500)  ,\"address\" VARCHAR(1500)  ,\"contact_point\" VARCHAR(1500)  ,\"contact\" VARCHAR(1500)  ,\"date_of_registration\" DATE  not null ,\"archived\" INT4 ,\"active\" BOOL default true  not null ,\"deceased\" BOOL ,\"deceased_date_time\" TIMESTAMP ,\"created_date\" TIMESTAMP ,\"last_modified_date\" TIMESTAMP(29)  ,\"created_by\" VARCHAR ,\"last_modified_by\" VARCHAR ,\"identifier\" VARCHAR(25)  ,\"facility_id\" INT8  not null ,\"organization\" VARCHAR ,\"sex\" TEXT ,primary key(\"id\"))");
                                    }
                                }
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_2 + "\" WHERE \"id\" = ?");
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2 + "\" (\"id\",\"hospital_number\",\"uuid\",\"first_name\",\"surname\",\"other_name\",\"gender\",\"date_of_birth\",\"is_date_of_birth_estimated\",\"education\",\"marital_status\",\"employment_status\",\"address\",\"contact_point\",\"contact\",\"date_of_registration\",\"archived\",\"active\",\"deceased\",\"deceased_date_time\",\"created_date\",\"last_modified_date\",\"created_by\",\"last_modified_by\",\"identifier\",\"facility_id\",\"organization\",\"sex\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmtInsert_tDBOutput_2", pstmtInsert_tDBOutput_2);
	    String update_tDBOutput_2 = "UPDATE \"" + tableName_tDBOutput_2 + "\" SET \"id\" = ?,\"hospital_number\" = ?,\"uuid\" = ?,\"first_name\" = ?,\"surname\" = ?,\"other_name\" = ?,\"gender\" = ?,\"date_of_birth\" = ?,\"is_date_of_birth_estimated\" = ?,\"education\" = ?,\"marital_status\" = ?,\"employment_status\" = ?,\"address\" = ?,\"contact_point\" = ?,\"contact\" = ?,\"date_of_registration\" = ?,\"archived\" = ?,\"active\" = ?,\"deceased\" = ?,\"deceased_date_time\" = ?,\"created_date\" = ?,\"last_modified_date\" = ?,\"created_by\" = ?,\"last_modified_by\" = ?,\"identifier\" = ?,\"facility_id\" = ?,\"organization\" = ?,\"sex\" = ? WHERE \"id\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(update_tDBOutput_2);
	    resourceMap.put("pstmtUpdate_tDBOutput_2", pstmtUpdate_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tUniqRow_1 = 0;
		

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					int id;
					String uuid;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
									result = prime * result + (int) this.id;
									
								result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this.id != other.id) 
										return false;
								
									if (this.uuid == null) {
										if (other.uuid != null) 
											return false;
								
									} else if (!this.uuid.equals(other.uuid))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Check_duplicats");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tExtractJSONFields_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tExtractJSONFields_2", false);
		start_Hash.put("tExtractJSONFields_2", System.currentTimeMillis());
		
	
	currentComponent="tExtractJSONFields_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Extract_fields");
					}
				
		int tos_count_tExtractJSONFields_2 = 0;
		

int nb_line_tExtractJSONFields_2 = 0;
String jsonStr_tExtractJSONFields_2 = "";

	

class JsonPathCache_tExtractJSONFields_2 {
	final java.util.Map<String,com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String,com.jayway.jsonpath.JsonPath>();
	
	public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
		if(jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
			return jsonPathString2compiledJsonPath.get(jsonPath);
		} else {
			com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath.compile(jsonPath);
			jsonPathString2compiledJsonPath.put(jsonPath,compiledLoopPath);
			return compiledLoopPath;
		}
	}
}

JsonPathCache_tExtractJSONFields_2 jsonPathCache_tExtractJSONFields_2 = new JsonPathCache_tExtractJSONFields_2();

 



/**
 * [tExtractJSONFields_2 begin ] stop
 */



	
	/**
	 * [tWriteJSONField_5_In begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_5_In", false);
		start_Hash.put("tWriteJSONField_5_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_5";
	
	currentComponent="tWriteJSONField_5_In";

	
		int tos_count_tWriteJSONField_5_In = 0;
		

				int nb_line_tWriteJSONField_5_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_5_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_tWriteJSONField_5_In.clearNamespaces();
			    xmlSerializer_tWriteJSONField_5_In.setSkipNamespaces(true);
			    xmlSerializer_tWriteJSONField_5_In.setForceTopLevelObject(false);
				xmlSerializer_tWriteJSONField_5_In.setUseEmptyStrings(false);
				
					   java.util.Queue<Extract_fieldsStruct> queue_tWriteJSONField_5_In = (java.util.Queue<Extract_fieldsStruct>) globalMap.get("queue_tWriteJSONField_5_In");
					
				String readFinishMarkWithPipeId_tWriteJSONField_5_In = "tWriteJSONField_5_In_FINISH"+(queue_tWriteJSONField_5_In==null?"":queue_tWriteJSONField_5_In.hashCode());
				String str_tWriteJSONField_5_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_5_In) || !queue_tWriteJSONField_5_In.isEmpty()) {
					if (!queue_tWriteJSONField_5_In.isEmpty()) {
			

 



/**
 * [tWriteJSONField_5_In begin ] stop
 */
	
	/**
	 * [tWriteJSONField_5_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_5";
	
	currentComponent="tWriteJSONField_5_In";

	

                    Extract_fieldsStruct result_tWriteJSONField_5_In = queue_tWriteJSONField_5_In.poll();
                    str_tWriteJSONField_5_In = result_tWriteJSONField_5_In.address;
                                Extract_fields.address = result_tWriteJSONField_5_In.address;
        //Convert XML to JSON
        net.sf.json.JsonStandard jsonStandard_tWriteJSONField_5_In =  net.sf.json.JsonStandard.LEGACY  ;
        xmlSerializer_tWriteJSONField_5_In.setJsonStandard(jsonStandard_tWriteJSONField_5_In);
        net.sf.json.JSON json_tWriteJSONField_5_In = xmlSerializer_tWriteJSONField_5_In.read(str_tWriteJSONField_5_In);
        Extract_fields.address = net.sf.json.util.JSONUtils.jsonToStandardizedString(json_tWriteJSONField_5_In, jsonStandard_tWriteJSONField_5_In);
    
        nb_line_tWriteJSONField_5_In++;

 


	tos_count_tWriteJSONField_5_In++;

/**
 * [tWriteJSONField_5_In main ] stop
 */
	
	/**
	 * [tWriteJSONField_5_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_5";
	
	currentComponent="tWriteJSONField_5_In";

	

 



/**
 * [tWriteJSONField_5_In process_data_begin ] stop
 */

	
	/**
	 * [tExtractJSONFields_2 main ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Extract_fields");
					}
					

            if(Extract_fields.address!=null){// C_01
                jsonStr_tExtractJSONFields_2 = Extract_fields.address.toString();
   
Check_duplicats = null;

	

String loopPath_tExtractJSONFields_2 = "$";
java.util.List<Object> resultset_tExtractJSONFields_2 = new java.util.ArrayList<Object>();

boolean isStructError_tExtractJSONFields_2 = true;
com.jayway.jsonpath.ReadContext document_tExtractJSONFields_2 = null;
try {
	document_tExtractJSONFields_2 = com.jayway.jsonpath.JsonPath.parse(jsonStr_tExtractJSONFields_2);
	com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(loopPath_tExtractJSONFields_2);
	Object result_tExtractJSONFields_2 = document_tExtractJSONFields_2.read(compiledLoopPath_tExtractJSONFields_2,net.minidev.json.JSONObject.class);
	if (result_tExtractJSONFields_2 instanceof net.minidev.json.JSONArray) {
		resultset_tExtractJSONFields_2 = (net.minidev.json.JSONArray) result_tExtractJSONFields_2;
	} else {
		resultset_tExtractJSONFields_2.add(result_tExtractJSONFields_2);
	}
	
	isStructError_tExtractJSONFields_2 = false;
} catch (java.lang.Exception ex_tExtractJSONFields_2) {
		System.err.println(ex_tExtractJSONFields_2.getMessage());
}

String jsonPath_tExtractJSONFields_2 = null;
com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_2 = null;

Object value_tExtractJSONFields_2 = null;

Object root_tExtractJSONFields_2 = null;
for(int i_tExtractJSONFields_2=0; isStructError_tExtractJSONFields_2 || (i_tExtractJSONFields_2 < resultset_tExtractJSONFields_2.size());i_tExtractJSONFields_2++){
	if(!isStructError_tExtractJSONFields_2){
		Object row_tExtractJSONFields_2 = resultset_tExtractJSONFields_2.get(i_tExtractJSONFields_2);
            Check_duplicats = null;
	Check_duplicats = new Check_duplicatsStruct();
	nb_line_tExtractJSONFields_2++;
	try {
		jsonPath_tExtractJSONFields_2 = "$.id";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				if(value_tExtractJSONFields_2 != null && !value_tExtractJSONFields_2.toString().isEmpty()) {
					Check_duplicats.id = ParserUtils.parseTo_int(value_tExtractJSONFields_2.toString());
				} else {
					Check_duplicats.id = 

		0

;
				}
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			Check_duplicats.id = 

		0

;
		}
		jsonPath_tExtractJSONFields_2 = "$.hospital_number";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				Check_duplicats.hospital_number = value_tExtractJSONFields_2 == null ? 

		null

 : value_tExtractJSONFields_2.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			Check_duplicats.hospital_number = 

		null

;
		}
		jsonPath_tExtractJSONFields_2 = "$.uuid";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				Check_duplicats.uuid = value_tExtractJSONFields_2 == null ? 

		null

 : value_tExtractJSONFields_2.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			Check_duplicats.uuid = 

		null

;
		}
		jsonPath_tExtractJSONFields_2 = "$.first_name";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				Check_duplicats.first_name = value_tExtractJSONFields_2 == null ? 

		null

 : value_tExtractJSONFields_2.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			Check_duplicats.first_name = 

		null

;
		}
		jsonPath_tExtractJSONFields_2 = "$.surname";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				Check_duplicats.surname = value_tExtractJSONFields_2 == null ? 

		null

 : value_tExtractJSONFields_2.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			Check_duplicats.surname = 

		null

;
		}
		jsonPath_tExtractJSONFields_2 = "$.other_name";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				Check_duplicats.other_name = value_tExtractJSONFields_2 == null ? 

		null

 : value_tExtractJSONFields_2.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			Check_duplicats.other_name = 

		null

;
		}
		jsonPath_tExtractJSONFields_2 = "$.gender";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				Check_duplicats.gender = value_tExtractJSONFields_2 == null ? 

		null

 : value_tExtractJSONFields_2.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			Check_duplicats.gender = 

		null

;
		}
		jsonPath_tExtractJSONFields_2 = "$.date_of_birth";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				if(value_tExtractJSONFields_2 != null && !value_tExtractJSONFields_2.toString().isEmpty()) {
					Check_duplicats.date_of_birth = ParserUtils.parseTo_Date(value_tExtractJSONFields_2.toString(), "yyyy-MM-dd");
				} else {
					Check_duplicats.date_of_birth = 

		null

;
				}
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			Check_duplicats.date_of_birth = 

		null

;
		}
		jsonPath_tExtractJSONFields_2 = "$.is_date_of_birth_estimated";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				if(value_tExtractJSONFields_2 != null && !value_tExtractJSONFields_2.toString().isEmpty()) {
					Check_duplicats.is_date_of_birth_estimated = ParserUtils.parseTo_Boolean(value_tExtractJSONFields_2.toString());
				} else {
					Check_duplicats.is_date_of_birth_estimated = 

		null

;
				}
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			Check_duplicats.is_date_of_birth_estimated = 

		null

;
		}
		jsonPath_tExtractJSONFields_2 = "$.education";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				Check_duplicats.education = value_tExtractJSONFields_2 == null ? 

		null

 : value_tExtractJSONFields_2.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			Check_duplicats.education = 

		null

;
		}
		jsonPath_tExtractJSONFields_2 = "$.marital_status";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				Check_duplicats.marital_status = value_tExtractJSONFields_2 == null ? 

		null

 : value_tExtractJSONFields_2.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			Check_duplicats.marital_status = 

		null

;
		}
		jsonPath_tExtractJSONFields_2 = "$.employment_status";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				Check_duplicats.employment_status = value_tExtractJSONFields_2 == null ? 

		null

 : value_tExtractJSONFields_2.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			Check_duplicats.employment_status = 

		null

;
		}
		jsonPath_tExtractJSONFields_2 = "$.address";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				Check_duplicats.address = value_tExtractJSONFields_2 == null ? 

		null

 : value_tExtractJSONFields_2.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			Check_duplicats.address = 

		null

;
		}
		jsonPath_tExtractJSONFields_2 = "$.contact_point";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				Check_duplicats.contact_point = value_tExtractJSONFields_2 == null ? 

		null

 : value_tExtractJSONFields_2.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			Check_duplicats.contact_point = 

		null

;
		}
		jsonPath_tExtractJSONFields_2 = "$.contact";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				Check_duplicats.contact = value_tExtractJSONFields_2 == null ? 

		null

 : value_tExtractJSONFields_2.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			Check_duplicats.contact = 

		null

;
		}
		jsonPath_tExtractJSONFields_2 = "$.date_of_registration";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				if(value_tExtractJSONFields_2 != null && !value_tExtractJSONFields_2.toString().isEmpty()) {
					Check_duplicats.date_of_registration = ParserUtils.parseTo_Date(value_tExtractJSONFields_2.toString(), "yyyy-MM-dd");
				} else {
					Check_duplicats.date_of_registration = 

		null

;
				}
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			Check_duplicats.date_of_registration = 

		null

;
		}
		jsonPath_tExtractJSONFields_2 = "$.archived";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				if(value_tExtractJSONFields_2 != null && !value_tExtractJSONFields_2.toString().isEmpty()) {
					Check_duplicats.archived = ParserUtils.parseTo_Integer(value_tExtractJSONFields_2.toString());
				} else {
					Check_duplicats.archived = 

		null

;
				}
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			Check_duplicats.archived = 

		null

;
		}
		jsonPath_tExtractJSONFields_2 = "$.active";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				if(value_tExtractJSONFields_2 != null && !value_tExtractJSONFields_2.toString().isEmpty()) {
					Check_duplicats.active = ParserUtils.parseTo_boolean(value_tExtractJSONFields_2.toString());
				} else {
					Check_duplicats.active = 

		true

;
				}
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			Check_duplicats.active = 

		true

;
		}
		jsonPath_tExtractJSONFields_2 = "$.deceased";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				if(value_tExtractJSONFields_2 != null && !value_tExtractJSONFields_2.toString().isEmpty()) {
					Check_duplicats.deceased = ParserUtils.parseTo_Boolean(value_tExtractJSONFields_2.toString());
				} else {
					Check_duplicats.deceased = 

		null

;
				}
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			Check_duplicats.deceased = 

		null

;
		}
        		Check_duplicats.deceased_date_time = Extract_fields.deceased_date_time;
		jsonPath_tExtractJSONFields_2 = "$.created_date";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				if(value_tExtractJSONFields_2 != null && !value_tExtractJSONFields_2.toString().isEmpty()) {
					Check_duplicats.created_date = ParserUtils.parseTo_Date(value_tExtractJSONFields_2.toString(), "yyyy-MM-dd HH:mm:ss");
				} else {
					Check_duplicats.created_date = 

		null

;
				}
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			Check_duplicats.created_date = 

		null

;
		}
		jsonPath_tExtractJSONFields_2 = "$.last_modified_date";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				if(value_tExtractJSONFields_2 != null && !value_tExtractJSONFields_2.toString().isEmpty()) {
					Check_duplicats.last_modified_date = ParserUtils.parseTo_Date(value_tExtractJSONFields_2.toString(), "yyyy-MM-dd HH:mm:ss");
				} else {
					Check_duplicats.last_modified_date = 

		null

;
				}
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			Check_duplicats.last_modified_date = 

		null

;
		}
		jsonPath_tExtractJSONFields_2 = "$.created_by";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				Check_duplicats.created_by = value_tExtractJSONFields_2 == null ? 

		null

 : value_tExtractJSONFields_2.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			Check_duplicats.created_by = 

		null

;
		}
		jsonPath_tExtractJSONFields_2 = "$.last_modified_by";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				Check_duplicats.last_modified_by = value_tExtractJSONFields_2 == null ? 

		null

 : value_tExtractJSONFields_2.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			Check_duplicats.last_modified_by = 

		null

;
		}
		jsonPath_tExtractJSONFields_2 = "$.identifier";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				Check_duplicats.identifier = value_tExtractJSONFields_2 == null ? 

		null

 : value_tExtractJSONFields_2.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			Check_duplicats.identifier = 

		null

;
		}
		jsonPath_tExtractJSONFields_2 = "$.facility_id";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				if(value_tExtractJSONFields_2 != null && !value_tExtractJSONFields_2.toString().isEmpty()) {
					Check_duplicats.facility_id = ParserUtils.parseTo_long(value_tExtractJSONFields_2.toString());
				} else {
					Check_duplicats.facility_id = 

		0

;
				}
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			Check_duplicats.facility_id = 

		0

;
		}
		jsonPath_tExtractJSONFields_2 = "$.organization";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				Check_duplicats.organization = value_tExtractJSONFields_2 == null ? 

		null

 : value_tExtractJSONFields_2.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			Check_duplicats.organization = 

		null

;
		}
		jsonPath_tExtractJSONFields_2 = "$.sex";
		compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);
		
		try {
		    
		        value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2.read(row_tExtractJSONFields_2);
		    
				Check_duplicats.sex = value_tExtractJSONFields_2 == null ? 

		null

 : value_tExtractJSONFields_2.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
			Check_duplicats.sex = 

		null

;
		}	
	} catch (java.lang.Exception ex_tExtractJSONFields_2) {
		    System.err.println(ex_tExtractJSONFields_2.getMessage());
		    Check_duplicats = null;	
	}
	
	}
    
	isStructError_tExtractJSONFields_2 = false;
	
//}


 


	tos_count_tExtractJSONFields_2++;

/**
 * [tExtractJSONFields_2 main ] stop
 */
	
	/**
	 * [tExtractJSONFields_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_2";

	

 



/**
 * [tExtractJSONFields_2 process_data_begin ] stop
 */
// Start of branch "Check_duplicats"
if(Check_duplicats != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Check_duplicats");
					}
					

    /**
This code is used to transform fields with code lookups that returns null(0) ids
The logic was requested by John and Emeka to resolve inputs with null codesets
In gender, education, marital status, and employment_status JSON formated fields
**/
row1.id = Check_duplicats.id;
row1.hospital_number = Check_duplicats.hospital_number;
row1.uuid = Check_duplicats.uuid;

//row1.first_name = Check_duplicats.first_name;
if(Check_duplicats.first_name == null||Check_duplicats.first_name.matches("^\\[]$")){
  	row1.first_name = null;  	
}
else {
  	row1.first_name = Check_duplicats.first_name;
}


row1.surname = Check_duplicats.surname;
row1.other_name = Check_duplicats.other_name;

//row1.gender = Check_duplicats.gender;
if(Check_duplicats.gender == null ||
	Check_duplicats.gender.matches("^\\{\"display\":\\[],\"id\":0\\}$")){
  	row1.gender = null;  	
}
else {
  	row1.gender = Check_duplicats.gender;
}

row1.date_of_birth = Check_duplicats.date_of_birth;
row1.is_date_of_birth_estimated = Check_duplicats.is_date_of_birth_estimated;

//transformed to take care of nulls row1.education = Check_duplicats.education;
if(Check_duplicats.education == null ||
	Check_duplicats.education.matches("^\\{\"display\":\\[],\"id\":0\\}$")){
  	row1.education = null;  	
}
else {
  	row1.education = Check_duplicats.education;
}

//transformed to take care of nulls row1.marital_status = Check_duplicats.marital_status;
if(Check_duplicats.marital_status == null ||
	Check_duplicats.marital_status.matches("^\\{\"display\":\\[],\"id\":0\\}$")){
  	row1.marital_status = null;  	
}
else {
  	row1.marital_status = Check_duplicats.marital_status;
}

// transformed to take of nulls in row1.employment_status = Check_duplicats.employment_status;
if(Check_duplicats.employment_status == null ||
	Check_duplicats.employment_status.matches("^\\{\"display\":\\[],\"id\":0\\}$")){
  	row1.employment_status = null;  	
}
else {
  	row1.employment_status = Check_duplicats.employment_status;
}

row1.address = Check_duplicats.address;


// transformed to take of nulls in row1.contact_point = Check_duplicats.contact_point;
if(Check_duplicats.contact_point == null ||
	Check_duplicats.contact_point.matches("\\{\"contactPoint\":\\[\\{\"type\":\"phone\",\"value\":\\[]\\}]\\}")){
  	row1.contact_point = "{\"contactPoint\":[{\"type\":\"phone\",\"value\":null}]}";  	
}
else {
  	row1.contact_point = Check_duplicats.contact_point;
}

//row1.contact = Check_duplicats.contact;
if(Check_duplicats.contact == null ||
Check_duplicats.contact.matches( "^\\{\"contact\":\\[\\{\"firstName\":\\[],\"address\":\\{\"city\":null,\"organisationUnitId\":null,\"line\":\\[],\"stateId\":null,\"district\":null,\"postalCode\":null,\"countryId\":\"1\"\\},\"contactPoint\":\\{\"type\":\"phone\",\"value\":\"None\"\\},\"surname\":\\[],\"genderId\":null,\"otherName\":null,\"relationshipId\":0\\}]\\}$"))
{
row1.contact = null;  	
}
else {
  row1.contact = Check_duplicats.contact;
}

row1.date_of_registration = Check_duplicats.date_of_registration;
row1.archived = Check_duplicats.archived;
row1.active = Check_duplicats.active;
row1.deceased = Check_duplicats.deceased;
row1.deceased_date_time = Check_duplicats.deceased_date_time;
row1.created_date = Check_duplicats.created_date;
row1.last_modified_date = Check_duplicats.last_modified_date;
row1.created_by = Check_duplicats.created_by;
row1.last_modified_by = Check_duplicats.last_modified_by;
row1.identifier = Check_duplicats.identifier;
row1.facility_id = Check_duplicats.facility_id;
row1.organization = Check_duplicats.organization;

// row1.sex = Check_duplicats.sex;
if(Check_duplicats.sex == null || Check_duplicats.sex.matches("^\\[]$")){
  	row1.sex = null;  	
}
else {
  	row1.sex = Check_duplicats.sex;
}

    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					
Duplicate_Patients = null;			Unique_Patients = null;			
finder_tUniqRow_1.id = row1.id;
if(row1.uuid == null){
	finder_tUniqRow_1.uuid = null;
}else{
	finder_tUniqRow_1.uuid = row1.uuid.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
new_tUniqRow_1.id = row1.id;
if(row1.uuid == null){
	new_tUniqRow_1.uuid = null;
}else{
	new_tUniqRow_1.uuid = row1.uuid.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(Unique_Patients == null){ 
	
	Unique_Patients = new Unique_PatientsStruct();
}Unique_Patients.id = row1.id;			Unique_Patients.hospital_number = row1.hospital_number;			Unique_Patients.uuid = row1.uuid;			Unique_Patients.first_name = row1.first_name;			Unique_Patients.surname = row1.surname;			Unique_Patients.other_name = row1.other_name;			Unique_Patients.gender = row1.gender;			Unique_Patients.date_of_birth = row1.date_of_birth;			Unique_Patients.is_date_of_birth_estimated = row1.is_date_of_birth_estimated;			Unique_Patients.education = row1.education;			Unique_Patients.marital_status = row1.marital_status;			Unique_Patients.employment_status = row1.employment_status;			Unique_Patients.address = row1.address;			Unique_Patients.contact_point = row1.contact_point;			Unique_Patients.contact = row1.contact;			Unique_Patients.date_of_registration = row1.date_of_registration;			Unique_Patients.archived = row1.archived;			Unique_Patients.active = row1.active;			Unique_Patients.deceased = row1.deceased;			Unique_Patients.deceased_date_time = row1.deceased_date_time;			Unique_Patients.created_date = row1.created_date;			Unique_Patients.last_modified_date = row1.last_modified_date;			Unique_Patients.created_by = row1.created_by;			Unique_Patients.last_modified_by = row1.last_modified_by;			Unique_Patients.identifier = row1.identifier;			Unique_Patients.facility_id = row1.facility_id;			Unique_Patients.organization = row1.organization;			Unique_Patients.sex = row1.sex;					
		nb_uniques_tUniqRow_1++;
	} else {
if(Duplicate_Patients == null){ 
	
	Duplicate_Patients = new Duplicate_PatientsStruct();
}				Duplicate_Patients.id = row1.id;			Duplicate_Patients.hospital_number = row1.hospital_number;			Duplicate_Patients.uuid = row1.uuid;			Duplicate_Patients.first_name = row1.first_name;			Duplicate_Patients.surname = row1.surname;			Duplicate_Patients.other_name = row1.other_name;			Duplicate_Patients.gender = row1.gender;			Duplicate_Patients.date_of_birth = row1.date_of_birth;			Duplicate_Patients.is_date_of_birth_estimated = row1.is_date_of_birth_estimated;			Duplicate_Patients.education = row1.education;			Duplicate_Patients.marital_status = row1.marital_status;			Duplicate_Patients.employment_status = row1.employment_status;			Duplicate_Patients.address = row1.address;			Duplicate_Patients.contact_point = row1.contact_point;			Duplicate_Patients.contact = row1.contact;			Duplicate_Patients.date_of_registration = row1.date_of_registration;			Duplicate_Patients.archived = row1.archived;			Duplicate_Patients.active = row1.active;			Duplicate_Patients.deceased = row1.deceased;			Duplicate_Patients.deceased_date_time = row1.deceased_date_time;			Duplicate_Patients.created_date = row1.created_date;			Duplicate_Patients.last_modified_date = row1.last_modified_date;			Duplicate_Patients.created_by = row1.created_by;			Duplicate_Patients.last_modified_by = row1.last_modified_by;			Duplicate_Patients.identifier = row1.identifier;			Duplicate_Patients.facility_id = row1.facility_id;			Duplicate_Patients.organization = row1.organization;			Duplicate_Patients.sex = row1.sex;			
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "Unique_Patients"
if(Unique_Patients != null) { 



	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Unique_Patients");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_9 = false;
		  boolean mainRowRejected_tMap_9 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

final_mapper = null;


// # Output table : 'final_mapper'
final_mapper_tmp.id = Unique_Patients.id ;
final_mapper_tmp.hospital_number = Unique_Patients.hospital_number ;
final_mapper_tmp.uuid = Unique_Patients.uuid ;
final_mapper_tmp.first_name = Unique_Patients.first_name ;
final_mapper_tmp.surname = Unique_Patients.surname ;
final_mapper_tmp.other_name = Unique_Patients.other_name ;
final_mapper_tmp.gender = Unique_Patients.gender ;
final_mapper_tmp.date_of_birth = Unique_Patients.date_of_birth ;
final_mapper_tmp.is_date_of_birth_estimated = Unique_Patients.is_date_of_birth_estimated ;
final_mapper_tmp.education = Unique_Patients.education ;
final_mapper_tmp.marital_status = Unique_Patients.marital_status ;
final_mapper_tmp.employment_status = Unique_Patients.employment_status ;
final_mapper_tmp.address = Unique_Patients.address ;
final_mapper_tmp.contact_point = Unique_Patients.contact_point ;
final_mapper_tmp.contact = Unique_Patients.contact ;
final_mapper_tmp.date_of_registration = Unique_Patients.date_of_registration ;
final_mapper_tmp.archived = Unique_Patients.archived ;
final_mapper_tmp.active = Unique_Patients.active ;
final_mapper_tmp.deceased = Unique_Patients.deceased ;
final_mapper_tmp.deceased_date_time = Unique_Patients.deceased_date_time ;
final_mapper_tmp.created_date = Unique_Patients.created_date ;
final_mapper_tmp.last_modified_date = Unique_Patients.last_modified_date ;
final_mapper_tmp.created_by = Unique_Patients.created_by ;
final_mapper_tmp.last_modified_by = Unique_Patients.last_modified_by ;
final_mapper_tmp.identifier = Unique_Patients.identifier ;
final_mapper_tmp.facility_id = Unique_Patients.facility_id ;
final_mapper_tmp.organization = Unique_Patients.organization ;
final_mapper_tmp.sex = Unique_Patients.sex ;
final_mapper_tmp.full_name = Unique_Patients.first_name + Unique_Patients.surname ;
final_mapper = final_mapper_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "final_mapper"
if(final_mapper != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"final_mapper");
					}
					



        whetherReject_tDBOutput_1 = false;
                    pstmt_tDBOutput_1.setInt(1, final_mapper.id);

                    if(final_mapper.uuid == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, final_mapper.uuid);
}

            int checkCount_tDBOutput_1 = -1;
            try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
                while(rs_tDBOutput_1.next()) {
                    checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
                }
            }
            if(checkCount_tDBOutput_1 > 0) {
                        pstmtUpdate_tDBOutput_1.setInt(1, final_mapper.id);

                        if(final_mapper.hospital_number == null) {
pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(2, final_mapper.hospital_number);
}

                        if(final_mapper.uuid == null) {
pstmtUpdate_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(3, final_mapper.uuid);
}

                        if(final_mapper.first_name == null) {
pstmtUpdate_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(4, final_mapper.first_name);
}

                        if(final_mapper.surname == null) {
pstmtUpdate_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(5, final_mapper.surname);
}

                        if(final_mapper.other_name == null) {
pstmtUpdate_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(6, final_mapper.other_name);
}

                        if(final_mapper.gender == null) {
pstmtUpdate_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(7, final_mapper.gender);
}

                        if(final_mapper.date_of_birth != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(8, new java.sql.Timestamp(final_mapper.date_of_birth.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(8, java.sql.Types.TIMESTAMP);
}

                        if(final_mapper.is_date_of_birth_estimated == null) {
pstmtUpdate_tDBOutput_1.setNull(9, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tDBOutput_1.setBoolean(9, final_mapper.is_date_of_birth_estimated);
}

                        if(final_mapper.education == null) {
pstmtUpdate_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(10, final_mapper.education);
}

                        if(final_mapper.marital_status == null) {
pstmtUpdate_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(11, final_mapper.marital_status);
}

                        if(final_mapper.employment_status == null) {
pstmtUpdate_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(12, final_mapper.employment_status);
}

                        if(final_mapper.address == null) {
pstmtUpdate_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(13, final_mapper.address);
}

                        if(final_mapper.contact_point == null) {
pstmtUpdate_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(14, final_mapper.contact_point);
}

                        if(final_mapper.contact == null) {
pstmtUpdate_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(15, final_mapper.contact);
}

                        if(final_mapper.date_of_registration != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(16, new java.sql.Timestamp(final_mapper.date_of_registration.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(16, java.sql.Types.TIMESTAMP);
}

                        if(final_mapper.archived == null) {
pstmtUpdate_tDBOutput_1.setNull(17, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(17, final_mapper.archived);
}

                        pstmtUpdate_tDBOutput_1.setBoolean(18, final_mapper.active);

                        if(final_mapper.deceased == null) {
pstmtUpdate_tDBOutput_1.setNull(19, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tDBOutput_1.setBoolean(19, final_mapper.deceased);
}

                        if(final_mapper.deceased_date_time != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(20, new java.sql.Timestamp(final_mapper.deceased_date_time.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(20, java.sql.Types.TIMESTAMP);
}

                        if(final_mapper.created_date != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(21, new java.sql.Timestamp(final_mapper.created_date.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(21, java.sql.Types.TIMESTAMP);
}

                        if(final_mapper.last_modified_date != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(22, new java.sql.Timestamp(final_mapper.last_modified_date.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(22, java.sql.Types.TIMESTAMP);
}

                        if(final_mapper.created_by == null) {
pstmtUpdate_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(23, final_mapper.created_by);
}

                        if(final_mapper.last_modified_by == null) {
pstmtUpdate_tDBOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(24, final_mapper.last_modified_by);
}

                        if(final_mapper.identifier == null) {
pstmtUpdate_tDBOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(25, final_mapper.identifier);
}

                        pstmtUpdate_tDBOutput_1.setLong(26, final_mapper.facility_id);

                        if(final_mapper.organization == null) {
pstmtUpdate_tDBOutput_1.setNull(27, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(27, final_mapper.organization);
}

                        if(final_mapper.sex == null) {
pstmtUpdate_tDBOutput_1.setNull(28, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(28, final_mapper.sex);
}

                        if(final_mapper.full_name == null) {
pstmtUpdate_tDBOutput_1.setNull(29, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(29, final_mapper.full_name);
}

                        pstmtUpdate_tDBOutput_1.setInt(30 + count_tDBOutput_1, final_mapper.id);

                        if(final_mapper.uuid == null) {
pstmtUpdate_tDBOutput_1.setNull(31 + count_tDBOutput_1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(31 + count_tDBOutput_1, final_mapper.uuid);
}

                try {
					
                    updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1 + pstmtUpdate_tDBOutput_1.executeUpdate();
                    nb_line_tDBOutput_1++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_1 = true;
                        nb_line_tDBOutput_1++;
                            System.err.print(e.getMessage());
                }
            } else {
                        pstmtInsert_tDBOutput_1.setInt(1, final_mapper.id);

                        if(final_mapper.hospital_number == null) {
pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(2, final_mapper.hospital_number);
}

                        if(final_mapper.uuid == null) {
pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(3, final_mapper.uuid);
}

                        if(final_mapper.first_name == null) {
pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(4, final_mapper.first_name);
}

                        if(final_mapper.surname == null) {
pstmtInsert_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(5, final_mapper.surname);
}

                        if(final_mapper.other_name == null) {
pstmtInsert_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(6, final_mapper.other_name);
}

                        if(final_mapper.gender == null) {
pstmtInsert_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(7, final_mapper.gender);
}

                        if(final_mapper.date_of_birth != null) {
pstmtInsert_tDBOutput_1.setTimestamp(8, new java.sql.Timestamp(final_mapper.date_of_birth.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(8, java.sql.Types.TIMESTAMP);
}

                        if(final_mapper.is_date_of_birth_estimated == null) {
pstmtInsert_tDBOutput_1.setNull(9, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_1.setBoolean(9, final_mapper.is_date_of_birth_estimated);
}

                        if(final_mapper.education == null) {
pstmtInsert_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(10, final_mapper.education);
}

                        if(final_mapper.marital_status == null) {
pstmtInsert_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(11, final_mapper.marital_status);
}

                        if(final_mapper.employment_status == null) {
pstmtInsert_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(12, final_mapper.employment_status);
}

                        if(final_mapper.address == null) {
pstmtInsert_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(13, final_mapper.address);
}

                        if(final_mapper.contact_point == null) {
pstmtInsert_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(14, final_mapper.contact_point);
}

                        if(final_mapper.contact == null) {
pstmtInsert_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(15, final_mapper.contact);
}

                        if(final_mapper.date_of_registration != null) {
pstmtInsert_tDBOutput_1.setTimestamp(16, new java.sql.Timestamp(final_mapper.date_of_registration.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(16, java.sql.Types.TIMESTAMP);
}

                        if(final_mapper.archived == null) {
pstmtInsert_tDBOutput_1.setNull(17, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(17, final_mapper.archived);
}

                        pstmtInsert_tDBOutput_1.setBoolean(18, final_mapper.active);

                        if(final_mapper.deceased == null) {
pstmtInsert_tDBOutput_1.setNull(19, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_1.setBoolean(19, final_mapper.deceased);
}

                        if(final_mapper.deceased_date_time != null) {
pstmtInsert_tDBOutput_1.setTimestamp(20, new java.sql.Timestamp(final_mapper.deceased_date_time.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(20, java.sql.Types.TIMESTAMP);
}

                        if(final_mapper.created_date != null) {
pstmtInsert_tDBOutput_1.setTimestamp(21, new java.sql.Timestamp(final_mapper.created_date.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(21, java.sql.Types.TIMESTAMP);
}

                        if(final_mapper.last_modified_date != null) {
pstmtInsert_tDBOutput_1.setTimestamp(22, new java.sql.Timestamp(final_mapper.last_modified_date.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(22, java.sql.Types.TIMESTAMP);
}

                        if(final_mapper.created_by == null) {
pstmtInsert_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(23, final_mapper.created_by);
}

                        if(final_mapper.last_modified_by == null) {
pstmtInsert_tDBOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(24, final_mapper.last_modified_by);
}

                        if(final_mapper.identifier == null) {
pstmtInsert_tDBOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(25, final_mapper.identifier);
}

                        pstmtInsert_tDBOutput_1.setLong(26, final_mapper.facility_id);

                        if(final_mapper.organization == null) {
pstmtInsert_tDBOutput_1.setNull(27, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(27, final_mapper.organization);
}

                        if(final_mapper.sex == null) {
pstmtInsert_tDBOutput_1.setNull(28, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(28, final_mapper.sex);
}

                        if(final_mapper.full_name == null) {
pstmtInsert_tDBOutput_1.setNull(29, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(29, final_mapper.full_name);
}

                try {
					
                    insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1 + pstmtInsert_tDBOutput_1.executeUpdate();
                    nb_line_tDBOutput_1++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_1 = true;
                        nb_line_tDBOutput_1++;
                            System.err.print(e.getMessage());
                }
            }
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                	conn_tDBOutput_1.commit();
                	
                	commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "final_mapper"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_end ] stop
 */

} // End of branch "Unique_Patients"




// Start of branch "Duplicate_Patients"
if(Duplicate_Patients != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Duplicate_Patients");
					}
					



        whetherReject_tDBOutput_2 = false;
                    pstmt_tDBOutput_2.setInt(1, Duplicate_Patients.id);

            int checkCount_tDBOutput_2 = -1;
            try (java.sql.ResultSet rs_tDBOutput_2 = pstmt_tDBOutput_2.executeQuery()) {
                while(rs_tDBOutput_2.next()) {
                    checkCount_tDBOutput_2 = rs_tDBOutput_2.getInt(1);
                }
            }
            if(checkCount_tDBOutput_2 > 0) {
                        pstmtUpdate_tDBOutput_2.setInt(1, Duplicate_Patients.id);

                        if(Duplicate_Patients.hospital_number == null) {
pstmtUpdate_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(2, Duplicate_Patients.hospital_number);
}

                        if(Duplicate_Patients.uuid == null) {
pstmtUpdate_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(3, Duplicate_Patients.uuid);
}

                        if(Duplicate_Patients.first_name == null) {
pstmtUpdate_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(4, Duplicate_Patients.first_name);
}

                        if(Duplicate_Patients.surname == null) {
pstmtUpdate_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(5, Duplicate_Patients.surname);
}

                        if(Duplicate_Patients.other_name == null) {
pstmtUpdate_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(6, Duplicate_Patients.other_name);
}

                        if(Duplicate_Patients.gender == null) {
pstmtUpdate_tDBOutput_2.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(7, Duplicate_Patients.gender);
}

                        if(Duplicate_Patients.date_of_birth != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(8, new java.sql.Timestamp(Duplicate_Patients.date_of_birth.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(8, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_Patients.is_date_of_birth_estimated == null) {
pstmtUpdate_tDBOutput_2.setNull(9, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tDBOutput_2.setBoolean(9, Duplicate_Patients.is_date_of_birth_estimated);
}

                        if(Duplicate_Patients.education == null) {
pstmtUpdate_tDBOutput_2.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(10, Duplicate_Patients.education);
}

                        if(Duplicate_Patients.marital_status == null) {
pstmtUpdate_tDBOutput_2.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(11, Duplicate_Patients.marital_status);
}

                        if(Duplicate_Patients.employment_status == null) {
pstmtUpdate_tDBOutput_2.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(12, Duplicate_Patients.employment_status);
}

                        if(Duplicate_Patients.address == null) {
pstmtUpdate_tDBOutput_2.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(13, Duplicate_Patients.address);
}

                        if(Duplicate_Patients.contact_point == null) {
pstmtUpdate_tDBOutput_2.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(14, Duplicate_Patients.contact_point);
}

                        if(Duplicate_Patients.contact == null) {
pstmtUpdate_tDBOutput_2.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(15, Duplicate_Patients.contact);
}

                        if(Duplicate_Patients.date_of_registration != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(16, new java.sql.Timestamp(Duplicate_Patients.date_of_registration.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(16, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_Patients.archived == null) {
pstmtUpdate_tDBOutput_2.setNull(17, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setInt(17, Duplicate_Patients.archived);
}

                        pstmtUpdate_tDBOutput_2.setBoolean(18, Duplicate_Patients.active);

                        if(Duplicate_Patients.deceased == null) {
pstmtUpdate_tDBOutput_2.setNull(19, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tDBOutput_2.setBoolean(19, Duplicate_Patients.deceased);
}

                        if(Duplicate_Patients.deceased_date_time != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(20, new java.sql.Timestamp(Duplicate_Patients.deceased_date_time.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(20, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_Patients.created_date != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(21, new java.sql.Timestamp(Duplicate_Patients.created_date.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(21, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_Patients.last_modified_date != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(22, new java.sql.Timestamp(Duplicate_Patients.last_modified_date.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(22, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_Patients.created_by == null) {
pstmtUpdate_tDBOutput_2.setNull(23, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(23, Duplicate_Patients.created_by);
}

                        if(Duplicate_Patients.last_modified_by == null) {
pstmtUpdate_tDBOutput_2.setNull(24, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(24, Duplicate_Patients.last_modified_by);
}

                        if(Duplicate_Patients.identifier == null) {
pstmtUpdate_tDBOutput_2.setNull(25, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(25, Duplicate_Patients.identifier);
}

                        pstmtUpdate_tDBOutput_2.setLong(26, Duplicate_Patients.facility_id);

                        if(Duplicate_Patients.organization == null) {
pstmtUpdate_tDBOutput_2.setNull(27, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(27, Duplicate_Patients.organization);
}

                        if(Duplicate_Patients.sex == null) {
pstmtUpdate_tDBOutput_2.setNull(28, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(28, Duplicate_Patients.sex);
}

                        pstmtUpdate_tDBOutput_2.setInt(29 + count_tDBOutput_2, Duplicate_Patients.id);

                try {
					
                    updatedCount_tDBOutput_2 = updatedCount_tDBOutput_2 + pstmtUpdate_tDBOutput_2.executeUpdate();
                    nb_line_tDBOutput_2++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_2 = true;
                        nb_line_tDBOutput_2++;
                            System.err.print(e.getMessage());
                }
            } else {
                        pstmtInsert_tDBOutput_2.setInt(1, Duplicate_Patients.id);

                        if(Duplicate_Patients.hospital_number == null) {
pstmtInsert_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(2, Duplicate_Patients.hospital_number);
}

                        if(Duplicate_Patients.uuid == null) {
pstmtInsert_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(3, Duplicate_Patients.uuid);
}

                        if(Duplicate_Patients.first_name == null) {
pstmtInsert_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(4, Duplicate_Patients.first_name);
}

                        if(Duplicate_Patients.surname == null) {
pstmtInsert_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(5, Duplicate_Patients.surname);
}

                        if(Duplicate_Patients.other_name == null) {
pstmtInsert_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(6, Duplicate_Patients.other_name);
}

                        if(Duplicate_Patients.gender == null) {
pstmtInsert_tDBOutput_2.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(7, Duplicate_Patients.gender);
}

                        if(Duplicate_Patients.date_of_birth != null) {
pstmtInsert_tDBOutput_2.setTimestamp(8, new java.sql.Timestamp(Duplicate_Patients.date_of_birth.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(8, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_Patients.is_date_of_birth_estimated == null) {
pstmtInsert_tDBOutput_2.setNull(9, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_2.setBoolean(9, Duplicate_Patients.is_date_of_birth_estimated);
}

                        if(Duplicate_Patients.education == null) {
pstmtInsert_tDBOutput_2.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(10, Duplicate_Patients.education);
}

                        if(Duplicate_Patients.marital_status == null) {
pstmtInsert_tDBOutput_2.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(11, Duplicate_Patients.marital_status);
}

                        if(Duplicate_Patients.employment_status == null) {
pstmtInsert_tDBOutput_2.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(12, Duplicate_Patients.employment_status);
}

                        if(Duplicate_Patients.address == null) {
pstmtInsert_tDBOutput_2.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(13, Duplicate_Patients.address);
}

                        if(Duplicate_Patients.contact_point == null) {
pstmtInsert_tDBOutput_2.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(14, Duplicate_Patients.contact_point);
}

                        if(Duplicate_Patients.contact == null) {
pstmtInsert_tDBOutput_2.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(15, Duplicate_Patients.contact);
}

                        if(Duplicate_Patients.date_of_registration != null) {
pstmtInsert_tDBOutput_2.setTimestamp(16, new java.sql.Timestamp(Duplicate_Patients.date_of_registration.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(16, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_Patients.archived == null) {
pstmtInsert_tDBOutput_2.setNull(17, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setInt(17, Duplicate_Patients.archived);
}

                        pstmtInsert_tDBOutput_2.setBoolean(18, Duplicate_Patients.active);

                        if(Duplicate_Patients.deceased == null) {
pstmtInsert_tDBOutput_2.setNull(19, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_2.setBoolean(19, Duplicate_Patients.deceased);
}

                        if(Duplicate_Patients.deceased_date_time != null) {
pstmtInsert_tDBOutput_2.setTimestamp(20, new java.sql.Timestamp(Duplicate_Patients.deceased_date_time.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(20, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_Patients.created_date != null) {
pstmtInsert_tDBOutput_2.setTimestamp(21, new java.sql.Timestamp(Duplicate_Patients.created_date.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(21, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_Patients.last_modified_date != null) {
pstmtInsert_tDBOutput_2.setTimestamp(22, new java.sql.Timestamp(Duplicate_Patients.last_modified_date.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(22, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_Patients.created_by == null) {
pstmtInsert_tDBOutput_2.setNull(23, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(23, Duplicate_Patients.created_by);
}

                        if(Duplicate_Patients.last_modified_by == null) {
pstmtInsert_tDBOutput_2.setNull(24, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(24, Duplicate_Patients.last_modified_by);
}

                        if(Duplicate_Patients.identifier == null) {
pstmtInsert_tDBOutput_2.setNull(25, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(25, Duplicate_Patients.identifier);
}

                        pstmtInsert_tDBOutput_2.setLong(26, Duplicate_Patients.facility_id);

                        if(Duplicate_Patients.organization == null) {
pstmtInsert_tDBOutput_2.setNull(27, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(27, Duplicate_Patients.organization);
}

                        if(Duplicate_Patients.sex == null) {
pstmtInsert_tDBOutput_2.setNull(28, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(28, Duplicate_Patients.sex);
}

                try {
					
                    insertedCount_tDBOutput_2 = insertedCount_tDBOutput_2 + pstmtInsert_tDBOutput_2.executeUpdate();
                    nb_line_tDBOutput_2++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_2 = true;
                        nb_line_tDBOutput_2++;
                            System.err.print(e.getMessage());
                }
            }
    		    commitCounter_tDBOutput_2++;
                if(commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
                	conn_tDBOutput_2.commit();
                	
                	commitCounter_tDBOutput_2=0;
                }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "Duplicate_Patients"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "Check_duplicats"

		// end for
	}


	
		} // C_01
	
	
	/**
	 * [tExtractJSONFields_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_2";

	

 



/**
 * [tExtractJSONFields_2 process_data_end ] stop
 */



	
	/**
	 * [tWriteJSONField_5_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_5";
	
	currentComponent="tWriteJSONField_5_In";

	

 



/**
 * [tWriteJSONField_5_In process_data_end ] stop
 */
	
	/**
	 * [tWriteJSONField_5_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_5";
	
	currentComponent="tWriteJSONField_5_In";

	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_5_In = "tWriteJSONField_5_In_FINISH_WITH_EXCEPTION"+(queue_tWriteJSONField_5_In==null?"":queue_tWriteJSONField_5_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_5_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_5_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_5_In);
						return;
					}
					globalMap.remove("queue_tWriteJSONField_5_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_5_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_5_In);
			
globalMap.put("tWriteJSONField_5_NB_LINE",nb_line_tWriteJSONField_5_In);
 

ok_Hash.put("tWriteJSONField_5_In", true);
end_Hash.put("tWriteJSONField_5_In", System.currentTimeMillis());




/**
 * [tWriteJSONField_5_In end ] stop
 */

	
	/**
	 * [tExtractJSONFields_2 end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_2";

	
   globalMap.put("tExtractJSONFields_1_NB_LINE", nb_line_tExtractJSONFields_2);


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Extract_fields");
			  	}
			  	
 

ok_Hash.put("tExtractJSONFields_2", true);
end_Hash.put("tExtractJSONFields_2", System.currentTimeMillis());




/**
 * [tExtractJSONFields_2 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Check_duplicats");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Unique_Patients");
			  	}
			  	
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



        if(pstmtUpdate_tDBOutput_1 != null){
            pstmtUpdate_tDBOutput_1.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_1");
        }
        if(pstmtInsert_tDBOutput_1 != null){
            pstmtInsert_tDBOutput_1.close();
            resourceMap.remove("pstmtInsert_tDBOutput_1");
        }
        if(pstmt_tDBOutput_1 != null) {
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
			
			conn_tDBOutput_1.commit();
			
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"final_mapper");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */







	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



        if(pstmtUpdate_tDBOutput_2 != null){
            pstmtUpdate_tDBOutput_2.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_2");
        }
        if(pstmtInsert_tDBOutput_2 != null){
            pstmtInsert_tDBOutput_2.close();
            resourceMap.remove("pstmtInsert_tDBOutput_2");
        }
        if(pstmt_tDBOutput_2 != null) {
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);
			
			conn_tDBOutput_2.commit();
			
		
    	conn_tDBOutput_2 .close();
    	
    	resourceMap.put("finish_tDBOutput_2", true);
    	

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Duplicate_Patients");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWriteJSONField_5_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_5";
	
	currentComponent="tWriteJSONField_5_In";

	

 



/**
 * [tWriteJSONField_5_In finally ] stop
 */

	
	/**
	 * [tExtractJSONFields_2 finally ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_2";

	

 



/**
 * [tExtractJSONFields_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
                if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_1")) != null) {
                    pstmtUpdateToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
                if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_1")) != null) {
                    pstmtInsertToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */







	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_2 = null;
                if ((pstmtUpdateToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_2")) != null) {
                    pstmtUpdateToClose_tDBOutput_2.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_2 = null;
                if ((pstmtInsertToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_2")) != null) {
                    pstmtInsertToClose_tDBOutput_2.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_2") == null){
            java.sql.Connection ctn_tDBOutput_2 = null;
            if((ctn_tDBOutput_2 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_2")) != null){
                try {
                    ctn_tDBOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_2) {
                    String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :" + sqlEx_tDBOutput_2.getMessage();
                    System.err.println(errorMessage_tDBOutput_2);
                }
            }
        }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWriteJSONField_5_In_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Lamisplus";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Patient_Person Patient_PersonClass = new Patient_Person();

        int exitCode = Patient_PersonClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Patient_Person.class.getClassLoader().getResourceAsStream("lamisplus_etl/patient_person_6_0/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Patient_Person.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("LAMIS3_Database", "id_String");
                            context.LAMIS3_Database=(String) context.getProperty("LAMIS3_Database");
                        context.setContextType("LAMIS3_Port", "id_String");
                            context.LAMIS3_Port=(String) context.getProperty("LAMIS3_Port");
                        context.setContextType("LAMIS3_AdditionalParams", "id_String");
                            context.LAMIS3_AdditionalParams=(String) context.getProperty("LAMIS3_AdditionalParams");
                        context.setContextType("LAMIS3_Schema", "id_String");
                            context.LAMIS3_Schema=(String) context.getProperty("LAMIS3_Schema");
                        context.setContextType("LAMIS3_Password", "id_Password");
                            String pwd_LAMIS3_Password_value = context.getProperty("LAMIS3_Password");
                            context.LAMIS3_Password = null;
                            if(pwd_LAMIS3_Password_value!=null) {
                                if(context_param.containsKey("LAMIS3_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.LAMIS3_Password = pwd_LAMIS3_Password_value;
                                } else if (!pwd_LAMIS3_Password_value.isEmpty()) {
                                    try {
                                        context.LAMIS3_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_LAMIS3_Password_value);
                                        context.put("LAMIS3_Password",context.LAMIS3_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("LAMIS3_Server", "id_String");
                            context.LAMIS3_Server=(String) context.getProperty("LAMIS3_Server");
                        context.setContextType("LAMIS3_Login", "id_String");
                            context.LAMIS3_Login=(String) context.getProperty("LAMIS3_Login");
                        context.setContextType("LAMISPlus_Port", "id_String");
                            context.LAMISPlus_Port=(String) context.getProperty("LAMISPlus_Port");
                        context.setContextType("LAMISPlus_Server", "id_String");
                            context.LAMISPlus_Server=(String) context.getProperty("LAMISPlus_Server");
                        context.setContextType("LAMISPlus_Schema", "id_String");
                            context.LAMISPlus_Schema=(String) context.getProperty("LAMISPlus_Schema");
                        context.setContextType("LAMISPlus_Login", "id_String");
                            context.LAMISPlus_Login=(String) context.getProperty("LAMISPlus_Login");
                        context.setContextType("LAMISPlus_AdditionalParams", "id_String");
                            context.LAMISPlus_AdditionalParams=(String) context.getProperty("LAMISPlus_AdditionalParams");
                        context.setContextType("LAMISPlus_Password", "id_Password");
                            String pwd_LAMISPlus_Password_value = context.getProperty("LAMISPlus_Password");
                            context.LAMISPlus_Password = null;
                            if(pwd_LAMISPlus_Password_value!=null) {
                                if(context_param.containsKey("LAMISPlus_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.LAMISPlus_Password = pwd_LAMISPlus_Password_value;
                                } else if (!pwd_LAMISPlus_Password_value.isEmpty()) {
                                    try {
                                        context.LAMISPlus_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_LAMISPlus_Password_value);
                                        context.put("LAMISPlus_Password",context.LAMISPlus_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("LAMISPlus_Database", "id_String");
                            context.LAMISPlus_Database=(String) context.getProperty("LAMISPlus_Database");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("LAMIS3_Database")) {
                context.LAMIS3_Database = (String) parentContextMap.get("LAMIS3_Database");
            }if (parentContextMap.containsKey("LAMIS3_Port")) {
                context.LAMIS3_Port = (String) parentContextMap.get("LAMIS3_Port");
            }if (parentContextMap.containsKey("LAMIS3_AdditionalParams")) {
                context.LAMIS3_AdditionalParams = (String) parentContextMap.get("LAMIS3_AdditionalParams");
            }if (parentContextMap.containsKey("LAMIS3_Schema")) {
                context.LAMIS3_Schema = (String) parentContextMap.get("LAMIS3_Schema");
            }if (parentContextMap.containsKey("LAMIS3_Password")) {
                context.LAMIS3_Password = (java.lang.String) parentContextMap.get("LAMIS3_Password");
            }if (parentContextMap.containsKey("LAMIS3_Server")) {
                context.LAMIS3_Server = (String) parentContextMap.get("LAMIS3_Server");
            }if (parentContextMap.containsKey("LAMIS3_Login")) {
                context.LAMIS3_Login = (String) parentContextMap.get("LAMIS3_Login");
            }if (parentContextMap.containsKey("LAMISPlus_Port")) {
                context.LAMISPlus_Port = (String) parentContextMap.get("LAMISPlus_Port");
            }if (parentContextMap.containsKey("LAMISPlus_Server")) {
                context.LAMISPlus_Server = (String) parentContextMap.get("LAMISPlus_Server");
            }if (parentContextMap.containsKey("LAMISPlus_Schema")) {
                context.LAMISPlus_Schema = (String) parentContextMap.get("LAMISPlus_Schema");
            }if (parentContextMap.containsKey("LAMISPlus_Login")) {
                context.LAMISPlus_Login = (String) parentContextMap.get("LAMISPlus_Login");
            }if (parentContextMap.containsKey("LAMISPlus_AdditionalParams")) {
                context.LAMISPlus_AdditionalParams = (String) parentContextMap.get("LAMISPlus_AdditionalParams");
            }if (parentContextMap.containsKey("LAMISPlus_Password")) {
                context.LAMISPlus_Password = (java.lang.String) parentContextMap.get("LAMISPlus_Password");
            }if (parentContextMap.containsKey("LAMISPlus_Database")) {
                context.LAMISPlus_Database = (String) parentContextMap.get("LAMISPlus_Database");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("LAMIS3_Password");
			parametersToEncrypt.add("LAMISPlus_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_12Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_12) {
globalMap.put("tDBInput_12_SUBPROCESS_STATE", -1);

e_tDBInput_12.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Patient_Person");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     864489 characters generated by Talend Open Studio for Big Data 
 *     on the November 20, 2022 9:40:05 PM WAT
 ************************************************************************************************/