// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package lamisplus_etl.triage_vital_signs_6_0;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: Triage_Vital_Signs Purpose: Triage_VitalSigns<br>
 * Description: Triage_VitalSigns <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class Triage_Vital_Signs implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(LAMISPlus_Schema != null){
				
					this.setProperty("LAMISPlus_Schema", LAMISPlus_Schema.toString());
				
			}
			
			if(LAMISPlus_AdditionalParams != null){
				
					this.setProperty("LAMISPlus_AdditionalParams", LAMISPlus_AdditionalParams.toString());
				
			}
			
			if(LAMISPlus_Database != null){
				
					this.setProperty("LAMISPlus_Database", LAMISPlus_Database.toString());
				
			}
			
			if(LAMISPlus_Login != null){
				
					this.setProperty("LAMISPlus_Login", LAMISPlus_Login.toString());
				
			}
			
			if(LAMISPlus_Server != null){
				
					this.setProperty("LAMISPlus_Server", LAMISPlus_Server.toString());
				
			}
			
			if(LAMISPlus_Password != null){
				
					this.setProperty("LAMISPlus_Password", LAMISPlus_Password.toString());
				
			}
			
			if(LAMISPlus_Port != null){
				
					this.setProperty("LAMISPlus_Port", LAMISPlus_Port.toString());
				
			}
			
			if(LAMIS3_Login != null){
				
					this.setProperty("LAMIS3_Login", LAMIS3_Login.toString());
				
			}
			
			if(LAMIS3_Port != null){
				
					this.setProperty("LAMIS3_Port", LAMIS3_Port.toString());
				
			}
			
			if(LAMIS3_AdditionalParams != null){
				
					this.setProperty("LAMIS3_AdditionalParams", LAMIS3_AdditionalParams.toString());
				
			}
			
			if(LAMIS3_Database != null){
				
					this.setProperty("LAMIS3_Database", LAMIS3_Database.toString());
				
			}
			
			if(LAMIS3_Password != null){
				
					this.setProperty("LAMIS3_Password", LAMIS3_Password.toString());
				
			}
			
			if(LAMIS3_Server != null){
				
					this.setProperty("LAMIS3_Server", LAMIS3_Server.toString());
				
			}
			
			if(LAMIS3_Schema != null){
				
					this.setProperty("LAMIS3_Schema", LAMIS3_Schema.toString());
				
			}
			
		}

public String LAMISPlus_Schema;
public String getLAMISPlus_Schema(){
	return this.LAMISPlus_Schema;
}
public String LAMISPlus_AdditionalParams;
public String getLAMISPlus_AdditionalParams(){
	return this.LAMISPlus_AdditionalParams;
}
public String LAMISPlus_Database;
public String getLAMISPlus_Database(){
	return this.LAMISPlus_Database;
}
public String LAMISPlus_Login;
public String getLAMISPlus_Login(){
	return this.LAMISPlus_Login;
}
public String LAMISPlus_Server;
public String getLAMISPlus_Server(){
	return this.LAMISPlus_Server;
}
public java.lang.String LAMISPlus_Password;
public java.lang.String getLAMISPlus_Password(){
	return this.LAMISPlus_Password;
}
public String LAMISPlus_Port;
public String getLAMISPlus_Port(){
	return this.LAMISPlus_Port;
}
public String LAMIS3_Login;
public String getLAMIS3_Login(){
	return this.LAMIS3_Login;
}
public String LAMIS3_Port;
public String getLAMIS3_Port(){
	return this.LAMIS3_Port;
}
public String LAMIS3_AdditionalParams;
public String getLAMIS3_AdditionalParams(){
	return this.LAMIS3_AdditionalParams;
}
public String LAMIS3_Database;
public String getLAMIS3_Database(){
	return this.LAMIS3_Database;
}
public java.lang.String LAMIS3_Password;
public java.lang.String getLAMIS3_Password(){
	return this.LAMIS3_Password;
}
public String LAMIS3_Server;
public String getLAMIS3_Server(){
	return this.LAMIS3_Server;
}
public String LAMIS3_Schema;
public String getLAMIS3_Schema(){
	return this.LAMIS3_Schema;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "6.0";
	private final String jobName = "Triage_Vital_Signs";
	private final String projectName = "LAMISPLUS_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Triage_Vital_Signs.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Triage_Vital_Signs.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_extract_facilitis_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_patient_visit_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSortRow_3_SortOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tSortRow_3_SortIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tSortRow_3_SortIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class extractStruct implements routines.system.IPersistableRow<extractStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public long facility_id;

				public long getFacility_id () {
					return this.facility_id;
				}
				
			    public java.util.Date encounter_date;

				public java.util.Date getEncounter_date () {
					return this.encounter_date;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public Double body_weight;

				public Double getBody_weight () {
					return this.body_weight;
				}
				
			    public Double diastolic;

				public Double getDiastolic () {
					return this.diastolic;
				}
				
			    public Double systolic;

				public Double getSystolic () {
					return this.systolic;
				}
				
			    public Double height;

				public Double getHeight () {
					return this.height;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				
			    public int id;

				public int getId () {
					return this.id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final extractStruct other = (extractStruct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(extractStruct other) {

		other.person_uuid = this.person_uuid;
	            other.facility_id = this.facility_id;
	            other.encounter_date = this.encounter_date;
	            other.created_date = this.created_date;
	            other.last_modified_date = this.last_modified_date;
	            other.uuid = this.uuid;
	            other.archived = this.archived;
	            other.body_weight = this.body_weight;
	            other.diastolic = this.diastolic;
	            other.systolic = this.systolic;
	            other.height = this.height;
	            other.datim_id = this.datim_id;
	            other.visit_id = this.visit_id;
	            other.id = this.id;
	            
	}

	public void copyKeysDataTo(extractStruct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Triage_Vital_Signs) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
			        this.facility_id = dis.readLong();
					
					this.encounter_date = readDate(dis);
					
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.uuid = readString(dis);
					
						this.archived = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.body_weight = null;
           				} else {
           			    	this.body_weight = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.diastolic = null;
           				} else {
           			    	this.diastolic = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.systolic = null;
           				} else {
           			    	this.systolic = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.height = null;
           				} else {
           			    	this.height = dis.readDouble();
           				}
					
					this.datim_id = readString(dis);
					
					this.visit_id = readString(dis);
					
			        this.id = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
					// long
				
		            	dos.writeLong(this.facility_id);
					
					// java.util.Date
				
						writeDate(this.encounter_date,dos);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// Double
				
						if(this.body_weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.body_weight);
		            	}
					
					// Double
				
						if(this.diastolic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.diastolic);
		            	}
					
					// Double
				
						if(this.systolic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.systolic);
		            	}
					
					// Double
				
						if(this.height == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.height);
		            	}
					
					// String
				
						writeString(this.datim_id,dos);
					
					// String
				
						writeString(this.visit_id,dos);
					
					// int
				
		            	dos.writeInt(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",encounter_date="+String.valueOf(encounter_date));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",uuid="+uuid);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",body_weight="+String.valueOf(body_weight));
		sb.append(",diastolic="+String.valueOf(diastolic));
		sb.append(",systolic="+String.valueOf(systolic));
		sb.append(",height="+String.valueOf(height));
		sb.append(",datim_id="+datim_id);
		sb.append(",visit_id="+visit_id);
		sb.append(",id="+String.valueOf(id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(extractStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class clinic_triageStruct implements routines.system.IPersistableRow<clinic_triageStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[0];

	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public int facility_id;

				public int getFacility_id () {
					return this.facility_id;
				}
				
			    public java.util.Date encounter_date;

				public java.util.Date getEncounter_date () {
					return this.encounter_date;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public Double body_weight;

				public Double getBody_weight () {
					return this.body_weight;
				}
				
			    public Double diastolic;

				public Double getDiastolic () {
					return this.diastolic;
				}
				
			    public Double systolic;

				public Double getSystolic () {
					return this.systolic;
				}
				
			    public Double height;

				public Double getHeight () {
					return this.height;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Triage_Vital_Signs) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
			        this.facility_id = dis.readInt();
					
					this.encounter_date = readDate(dis);
					
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.uuid = readString(dis);
					
						this.archived = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.body_weight = null;
           				} else {
           			    	this.body_weight = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.diastolic = null;
           				} else {
           			    	this.diastolic = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.systolic = null;
           				} else {
           			    	this.systolic = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.height = null;
           				} else {
           			    	this.height = dis.readDouble();
           				}
					
					this.datim_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
					// int
				
		            	dos.writeInt(this.facility_id);
					
					// java.util.Date
				
						writeDate(this.encounter_date,dos);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// Double
				
						if(this.body_weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.body_weight);
		            	}
					
					// Double
				
						if(this.diastolic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.diastolic);
		            	}
					
					// Double
				
						if(this.systolic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.systolic);
		            	}
					
					// Double
				
						if(this.height == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.height);
		            	}
					
					// String
				
						writeString(this.datim_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",encounter_date="+String.valueOf(encounter_date));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",uuid="+uuid);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",body_weight="+String.valueOf(body_weight));
		sb.append(",diastolic="+String.valueOf(diastolic));
		sb.append(",systolic="+String.valueOf(systolic));
		sb.append(",height="+String.valueOf(height));
		sb.append(",datim_id="+datim_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(clinic_triageStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public int facility_id;

				public int getFacility_id () {
					return this.facility_id;
				}
				
			    public java.util.Date encounter_date;

				public java.util.Date getEncounter_date () {
					return this.encounter_date;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public Double body_weight;

				public Double getBody_weight () {
					return this.body_weight;
				}
				
			    public Double diastolic;

				public Double getDiastolic () {
					return this.diastolic;
				}
				
			    public Double systolic;

				public Double getSystolic () {
					return this.systolic;
				}
				
			    public Double height;

				public Double getHeight () {
					return this.height;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tDBInput_1Struct other = (after_tDBInput_1Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(after_tDBInput_1Struct other) {

		other.person_uuid = this.person_uuid;
	            other.facility_id = this.facility_id;
	            other.encounter_date = this.encounter_date;
	            other.created_date = this.created_date;
	            other.last_modified_date = this.last_modified_date;
	            other.uuid = this.uuid;
	            other.archived = this.archived;
	            other.body_weight = this.body_weight;
	            other.diastolic = this.diastolic;
	            other.systolic = this.systolic;
	            other.height = this.height;
	            other.datim_id = this.datim_id;
	            
	}

	public void copyKeysDataTo(after_tDBInput_1Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Triage_Vital_Signs) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
			        this.facility_id = dis.readInt();
					
					this.encounter_date = readDate(dis);
					
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.uuid = readString(dis);
					
						this.archived = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.body_weight = null;
           				} else {
           			    	this.body_weight = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.diastolic = null;
           				} else {
           			    	this.diastolic = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.systolic = null;
           				} else {
           			    	this.systolic = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.height = null;
           				} else {
           			    	this.height = dis.readDouble();
           				}
					
					this.datim_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
					// int
				
		            	dos.writeInt(this.facility_id);
					
					// java.util.Date
				
						writeDate(this.encounter_date,dos);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// Double
				
						if(this.body_weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.body_weight);
		            	}
					
					// Double
				
						if(this.diastolic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.diastolic);
		            	}
					
					// Double
				
						if(this.systolic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.systolic);
		            	}
					
					// Double
				
						if(this.height == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.height);
		            	}
					
					// String
				
						writeString(this.datim_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",encounter_date="+String.valueOf(encounter_date));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",uuid="+uuid);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",body_weight="+String.valueOf(body_weight));
		sb.append(",diastolic="+String.valueOf(diastolic));
		sb.append(",systolic="+String.valueOf(systolic));
		sb.append(",height="+String.valueOf(height));
		sb.append(",datim_id="+datim_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_2Process(globalMap);

		clinic_triageStruct clinic_triage = new clinic_triageStruct();
extractStruct extract = new extractStruct();





	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"extract");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = context.LAMISPlus_Schema;
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("etl_triage_vital_sign_stage");
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("etl_triage_vital_sign_stage");
}

        int updateKeyCount_tDBOutput_1 = 1;
        if(updateKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_1 = "jdbc:postgresql://"+context.LAMISPlus_Server+":"+context.LAMISPlus_Port+"/"+context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
    dbUser_tDBOutput_1 = context.LAMISPlus_Login;

	final String decryptedPassword_tDBOutput_1 = context.LAMISPlus_Password; 

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;



int count_tDBOutput_1=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
                                boolean whetherExist_tDBOutput_1 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_1 = "public";
                                    if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_1 = conn_tDBOutput_1.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_1 = stmtSchema_tDBOutput_1.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_1.next()){
                                                defaultSchema_tDBOutput_1 = rsSchema_tDBOutput_1.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_1.next()) {
                                        String table_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_NAME");
                                        String schema_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_1.equals(("etl_triage_vital_sign_stage"))
                                            && (schema_tDBOutput_1.equals(dbschema_tDBOutput_1) || ((dbschema_tDBOutput_1 ==null || dbschema_tDBOutput_1.trim().length() ==0) && defaultSchema_tDBOutput_1.equals(schema_tDBOutput_1)))) {
                                            whetherExist_tDBOutput_1 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_1) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                        stmtCreate_tDBOutput_1.execute("CREATE TABLE \"" + tableName_tDBOutput_1 + "\"(\"person_uuid\" VARCHAR(36)  ,\"facility_id\" INT8  not null ,\"encounter_date\" DATE  not null ,\"created_date\" TIMESTAMP(29)  ,\"last_modified_date\" TIMESTAMP(29)  ,\"uuid\" VARCHAR(50)  ,\"archived\" INT4 ,\"body_weight\" FLOAT8 ,\"diastolic\" FLOAT8 ,\"systolic\" FLOAT8 ,\"height\" FLOAT8 ,\"datim_id\" VARCHAR(32)   not null ,\"visit_id\" VARCHAR(50)   not null ,\"id\" INT4  not null ,primary key(\"id\"))");
                                    }
                                }
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_1 + "\" WHERE \"id\" = ?");
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1 + "\" (\"person_uuid\",\"facility_id\",\"encounter_date\",\"created_date\",\"last_modified_date\",\"uuid\",\"archived\",\"body_weight\",\"diastolic\",\"systolic\",\"height\",\"datim_id\",\"visit_id\",\"id\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
	    String update_tDBOutput_1 = "UPDATE \"" + tableName_tDBOutput_1 + "\" SET \"person_uuid\" = ?,\"facility_id\" = ?,\"encounter_date\" = ?,\"created_date\" = ?,\"last_modified_date\" = ?,\"uuid\" = ?,\"archived\" = ?,\"body_weight\" = ?,\"diastolic\" = ?,\"systolic\" = ?,\"height\" = ?,\"datim_id\" = ?,\"visit_id\" = ? WHERE \"id\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
	    resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"clinic_triage");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<patient_visitStruct> tHash_Lookup_patient_visit = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<patient_visitStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<patient_visitStruct>) 
					globalMap.get( "tHash_Lookup_patient_visit" ))
					;					
					
	

patient_visitStruct patient_visitHashKey = new patient_visitStruct();
patient_visitStruct patient_visitDefault = new patient_visitStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
extractStruct extract_tmp = new extractStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.LAMIS3_Login;
				
				
	final String decryptedPassword_tDBInput_1 = context.LAMIS3_Password; 
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
				String url_tDBInput_1 = "jdbc:postgresql://" + context.LAMIS3_Server + ":" + context.LAMIS3_Port + "/" + context.LAMIS3_Database + "?" + context.LAMIS3_AdditionalParams;
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
				conn_tDBInput_1.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT p.uuid as person_uuid, \n    c.facility_id,\n	c.date_visit as encounter_date, \n	c.last_modified as created_date"
+", \n	c.last_modified as last_modified_date,\n	CONCAT(c.id, c.uuid)::VARCHAR as uuid,\n    c.archived::integer, \n	c.body"
+"_weight, \n	NULLIF(regexp_replace((case when length(split_part(c.bp, '/', 1))>1 then cast(split_part(c.bp, '/', 1)as var"
+"char) else null end), '\\D','','g'), '')::double precision as diastolic,\n   	NULLIF(regexp_replace((case when length(sp"
+"lit_part(c.bp, '/', 2))>1 then cast(split_part(c.bp, '/', 2)as varchar) else null end), '\\D','','g'), '')::double preci"
+"sion as systolic, \n	c.height,\n    n.datim_id AS datim_id\n    FROM clinic c \n    INNER JOIN patient p \n    ON p.id=c"
+".patient_id\n    INNER JOIN ndr_facility n \n    ON n.id=p.facility_id";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								clinic_triage.person_uuid = null;
							} else {
	                         		
        	clinic_triage.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								clinic_triage.facility_id = 0;
							} else {
		                          
            clinic_triage.facility_id = rs_tDBInput_1.getInt(2);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								clinic_triage.encounter_date = null;
							} else {
										
			clinic_triage.encounter_date = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 3);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								clinic_triage.created_date = null;
							} else {
										
			clinic_triage.created_date = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 4);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								clinic_triage.last_modified_date = null;
							} else {
										
			clinic_triage.last_modified_date = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 5);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								clinic_triage.uuid = null;
							} else {
	                         		
        	clinic_triage.uuid = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								clinic_triage.archived = null;
							} else {
		                          
            clinic_triage.archived = rs_tDBInput_1.getInt(7);
            if(rs_tDBInput_1.wasNull()){
                    clinic_triage.archived = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								clinic_triage.body_weight = null;
							} else {
	                         		
            clinic_triage.body_weight = rs_tDBInput_1.getDouble(8);
            if(rs_tDBInput_1.wasNull()){
                    clinic_triage.body_weight = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								clinic_triage.diastolic = null;
							} else {
	                         		
            clinic_triage.diastolic = rs_tDBInput_1.getDouble(9);
            if(rs_tDBInput_1.wasNull()){
                    clinic_triage.diastolic = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								clinic_triage.systolic = null;
							} else {
	                         		
            clinic_triage.systolic = rs_tDBInput_1.getDouble(10);
            if(rs_tDBInput_1.wasNull()){
                    clinic_triage.systolic = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								clinic_triage.height = null;
							} else {
	                         		
            clinic_triage.height = rs_tDBInput_1.getDouble(11);
            if(rs_tDBInput_1.wasNull()){
                    clinic_triage.height = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								clinic_triage.datim_id = null;
							} else {
	                         		
        	clinic_triage.datim_id = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, false);
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"clinic_triage");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "patient_visit" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooppatient_visit = false;
       		  	    	
       		  	    	
 							patient_visitStruct patient_visitObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    patient_visitHashKey.person_uuid = clinic_triage.person_uuid ;
                        		    		
                        		    		    patient_visitHashKey.visit_start_date = clinic_triage.encounter_date  == null ? null : new java.util.Date(clinic_triage.encounter_date .getTime());
                        		    		
                        		    		    patient_visitHashKey.visit_end_date = clinic_triage.encounter_date  == null ? null : new java.util.Date(clinic_triage.encounter_date .getTime());
                        		    		

								
		                        	patient_visitHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_patient_visit.lookup( patient_visitHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_patient_visit != null && tHash_Lookup_patient_visit.getCount(patient_visitHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'patient_visit' and it contains more one result from keys :  patient_visit.person_uuid = '" + patient_visitHashKey.person_uuid + "', patient_visit.visit_start_date = '" + patient_visitHashKey.visit_start_date + "', patient_visit.visit_end_date = '" + patient_visitHashKey.visit_end_date + "'");
								} // G 071
							

							patient_visitStruct patient_visit = null;
                    		  	 
							   
                    		  	 
	       		  	    	patient_visitStruct fromLookup_patient_visit = null;
							patient_visit = patient_visitDefault;
										 
							
								 
							
							
								if (tHash_Lookup_patient_visit !=null && tHash_Lookup_patient_visit.hasNext()) { // G 099
								
							
								
								fromLookup_patient_visit = tHash_Lookup_patient_visit.next();

							
							
								} // G 099
							
							

							if(fromLookup_patient_visit != null) {
								patient_visit = fromLookup_patient_visit;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

extract = null;


// # Output table : 'extract'
extract_tmp.person_uuid = clinic_triage.person_uuid ;
extract_tmp.facility_id = clinic_triage.facility_id ;
extract_tmp.encounter_date = clinic_triage.encounter_date ;
extract_tmp.created_date = clinic_triage.created_date ;
extract_tmp.last_modified_date = clinic_triage.last_modified_date ;
extract_tmp.uuid = clinic_triage.uuid ;
extract_tmp.archived = clinic_triage.archived ;
extract_tmp.body_weight = clinic_triage.body_weight ;
extract_tmp.diastolic = clinic_triage.diastolic ;
extract_tmp.systolic = clinic_triage.systolic ;
extract_tmp.height = clinic_triage.height ;
extract_tmp.datim_id = clinic_triage.datim_id ;
extract_tmp.visit_id = patient_visit.uuid;
extract_tmp.id = Numeric.sequence("id",1,1) ;
extract = extract_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "extract"
if(extract != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"extract");
					}
					



        whetherReject_tDBOutput_1 = false;
                    pstmt_tDBOutput_1.setInt(1, extract.id);

            int checkCount_tDBOutput_1 = -1;
            try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
                while(rs_tDBOutput_1.next()) {
                    checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
                }
            }
            if(checkCount_tDBOutput_1 > 0) {
                        if(extract.person_uuid == null) {
pstmtUpdate_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(1, extract.person_uuid);
}

                        pstmtUpdate_tDBOutput_1.setLong(2, extract.facility_id);

                        if(extract.encounter_date != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(3, new java.sql.Timestamp(extract.encounter_date.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(3, java.sql.Types.TIMESTAMP);
}

                        if(extract.created_date != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(4, new java.sql.Timestamp(extract.created_date.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(4, java.sql.Types.TIMESTAMP);
}

                        if(extract.last_modified_date != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(5, new java.sql.Timestamp(extract.last_modified_date.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(5, java.sql.Types.TIMESTAMP);
}

                        if(extract.uuid == null) {
pstmtUpdate_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(6, extract.uuid);
}

                        if(extract.archived == null) {
pstmtUpdate_tDBOutput_1.setNull(7, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(7, extract.archived);
}

                        if(extract.body_weight == null) {
pstmtUpdate_tDBOutput_1.setNull(8, java.sql.Types.DOUBLE);
} else {pstmtUpdate_tDBOutput_1.setDouble(8, extract.body_weight);
}

                        if(extract.diastolic == null) {
pstmtUpdate_tDBOutput_1.setNull(9, java.sql.Types.DOUBLE);
} else {pstmtUpdate_tDBOutput_1.setDouble(9, extract.diastolic);
}

                        if(extract.systolic == null) {
pstmtUpdate_tDBOutput_1.setNull(10, java.sql.Types.DOUBLE);
} else {pstmtUpdate_tDBOutput_1.setDouble(10, extract.systolic);
}

                        if(extract.height == null) {
pstmtUpdate_tDBOutput_1.setNull(11, java.sql.Types.DOUBLE);
} else {pstmtUpdate_tDBOutput_1.setDouble(11, extract.height);
}

                        if(extract.datim_id == null) {
pstmtUpdate_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(12, extract.datim_id);
}

                        if(extract.visit_id == null) {
pstmtUpdate_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(13, extract.visit_id);
}

                        pstmtUpdate_tDBOutput_1.setInt(14 + count_tDBOutput_1, extract.id);

                try {
					
                    updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1 + pstmtUpdate_tDBOutput_1.executeUpdate();
                    nb_line_tDBOutput_1++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_1 = true;
                        nb_line_tDBOutput_1++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(extract.person_uuid == null) {
pstmtInsert_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(1, extract.person_uuid);
}

                        pstmtInsert_tDBOutput_1.setLong(2, extract.facility_id);

                        if(extract.encounter_date != null) {
pstmtInsert_tDBOutput_1.setTimestamp(3, new java.sql.Timestamp(extract.encounter_date.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.TIMESTAMP);
}

                        if(extract.created_date != null) {
pstmtInsert_tDBOutput_1.setTimestamp(4, new java.sql.Timestamp(extract.created_date.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.TIMESTAMP);
}

                        if(extract.last_modified_date != null) {
pstmtInsert_tDBOutput_1.setTimestamp(5, new java.sql.Timestamp(extract.last_modified_date.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(5, java.sql.Types.TIMESTAMP);
}

                        if(extract.uuid == null) {
pstmtInsert_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(6, extract.uuid);
}

                        if(extract.archived == null) {
pstmtInsert_tDBOutput_1.setNull(7, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(7, extract.archived);
}

                        if(extract.body_weight == null) {
pstmtInsert_tDBOutput_1.setNull(8, java.sql.Types.DOUBLE);
} else {pstmtInsert_tDBOutput_1.setDouble(8, extract.body_weight);
}

                        if(extract.diastolic == null) {
pstmtInsert_tDBOutput_1.setNull(9, java.sql.Types.DOUBLE);
} else {pstmtInsert_tDBOutput_1.setDouble(9, extract.diastolic);
}

                        if(extract.systolic == null) {
pstmtInsert_tDBOutput_1.setNull(10, java.sql.Types.DOUBLE);
} else {pstmtInsert_tDBOutput_1.setDouble(10, extract.systolic);
}

                        if(extract.height == null) {
pstmtInsert_tDBOutput_1.setNull(11, java.sql.Types.DOUBLE);
} else {pstmtInsert_tDBOutput_1.setDouble(11, extract.height);
}

                        if(extract.datim_id == null) {
pstmtInsert_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(12, extract.datim_id);
}

                        if(extract.visit_id == null) {
pstmtInsert_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(13, extract.visit_id);
}

                        pstmtInsert_tDBOutput_1.setInt(14, extract.id);

                try {
					
                    insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1 + pstmtInsert_tDBOutput_1.executeUpdate();
                    nb_line_tDBOutput_1++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_1 = true;
                        nb_line_tDBOutput_1++;
                            System.err.print(e.getMessage());
                }
            }
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                	conn_tDBOutput_1.commit();
                	
                	commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "extract"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
	if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
		
			conn_tDBInput_1.commit();
			
		
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());

   			if (globalMap.get("tDBInput_1_NB_LINE") != null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				tJava_1Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}



/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_patient_visit != null) {
						tHash_Lookup_patient_visit.endGet();
					}
					globalMap.remove( "tHash_Lookup_patient_visit" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"clinic_triage");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



        if(pstmtUpdate_tDBOutput_1 != null){
            pstmtUpdate_tDBOutput_1.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_1");
        }
        if(pstmtInsert_tDBOutput_1 != null){
            pstmtInsert_tDBOutput_1.close();
            resourceMap.remove("pstmtInsert_tDBOutput_1");
        }
        if(pstmt_tDBOutput_1 != null) {
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
			
			conn_tDBOutput_1.commit();
			
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"extract");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBInput_9Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_patient_visit"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
                if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_1")) != null) {
                    pstmtUpdateToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
                if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_1")) != null) {
                    pstmtInsertToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class Unique_clinicsStruct implements routines.system.IPersistableRow<Unique_clinicsStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long id;

				public Long getId () {
					return this.id;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public Long facility_id;

				public Long getFacility_id () {
					return this.facility_id;
				}
				
			    public java.util.Date encounter_date;

				public java.util.Date getEncounter_date () {
					return this.encounter_date;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				
			    public int archived;

				public int getArchived () {
					return this.archived;
				}
				
			    public Double body_weight;

				public Double getBody_weight () {
					return this.body_weight;
				}
				
			    public Double diastolic;

				public Double getDiastolic () {
					return this.diastolic;
				}
				
			    public Double systolic;

				public Double getSystolic () {
					return this.systolic;
				}
				
			    public Double height;

				public Double getHeight () {
					return this.height;
				}
				
			    public Double temperature;

				public Double getTemperature () {
					return this.temperature;
				}
				
			    public Double pulse;

				public Double getPulse () {
					return this.pulse;
				}
				
			    public Double respiratory_rate;

				public Double getRespiratory_rate () {
					return this.respiratory_rate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Unique_clinicsStruct other = (Unique_clinicsStruct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Unique_clinicsStruct other) {

		other.id = this.id;
	            other.person_uuid = this.person_uuid;
	            other.facility_id = this.facility_id;
	            other.encounter_date = this.encounter_date;
	            other.created_date = this.created_date;
	            other.last_modified_date = this.last_modified_date;
	            other.created_by = this.created_by;
	            other.last_modified_by = this.last_modified_by;
	            other.uuid = this.uuid;
	            other.visit_id = this.visit_id;
	            other.archived = this.archived;
	            other.body_weight = this.body_weight;
	            other.diastolic = this.diastolic;
	            other.systolic = this.systolic;
	            other.height = this.height;
	            other.temperature = this.temperature;
	            other.pulse = this.pulse;
	            other.respiratory_rate = this.respiratory_rate;
	            
	}

	public void copyKeysDataTo(Unique_clinicsStruct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Triage_Vital_Signs) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id = null;
           				} else {
           			    	this.id = dis.readLong();
           				}
					
					this.person_uuid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.facility_id = null;
           				} else {
           			    	this.facility_id = dis.readLong();
           				}
					
					this.encounter_date = readDate(dis);
					
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_by = readString(dis);
					
					this.uuid = readString(dis);
					
					this.visit_id = readString(dis);
					
			        this.archived = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.body_weight = null;
           				} else {
           			    	this.body_weight = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.diastolic = null;
           				} else {
           			    	this.diastolic = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.systolic = null;
           				} else {
           			    	this.systolic = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.height = null;
           				} else {
           			    	this.height = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.temperature = null;
           				} else {
           			    	this.temperature = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pulse = null;
           				} else {
           			    	this.pulse = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.respiratory_rate = null;
           				} else {
           			    	this.respiratory_rate = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id);
		            	}
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// Long
				
						if(this.facility_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.facility_id);
		            	}
					
					// java.util.Date
				
						writeDate(this.encounter_date,dos);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.visit_id,dos);
					
					// int
				
		            	dos.writeInt(this.archived);
					
					// Double
				
						if(this.body_weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.body_weight);
		            	}
					
					// Double
				
						if(this.diastolic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.diastolic);
		            	}
					
					// Double
				
						if(this.systolic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.systolic);
		            	}
					
					// Double
				
						if(this.height == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.height);
		            	}
					
					// Double
				
						if(this.temperature == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.temperature);
		            	}
					
					// Double
				
						if(this.pulse == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.pulse);
		            	}
					
					// Double
				
						if(this.respiratory_rate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.respiratory_rate);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",encounter_date="+String.valueOf(encounter_date));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",uuid="+uuid);
		sb.append(",visit_id="+visit_id);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",body_weight="+String.valueOf(body_weight));
		sb.append(",diastolic="+String.valueOf(diastolic));
		sb.append(",systolic="+String.valueOf(systolic));
		sb.append(",height="+String.valueOf(height));
		sb.append(",temperature="+String.valueOf(temperature));
		sb.append(",pulse="+String.valueOf(pulse));
		sb.append(",respiratory_rate="+String.valueOf(respiratory_rate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Unique_clinicsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Duplicate_clinicsStruct implements routines.system.IPersistableRow<Duplicate_clinicsStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long id;

				public Long getId () {
					return this.id;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public Long facility_id;

				public Long getFacility_id () {
					return this.facility_id;
				}
				
			    public java.util.Date encounter_date;

				public java.util.Date getEncounter_date () {
					return this.encounter_date;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				
			    public int archived;

				public int getArchived () {
					return this.archived;
				}
				
			    public Double body_weight;

				public Double getBody_weight () {
					return this.body_weight;
				}
				
			    public Double diastolic;

				public Double getDiastolic () {
					return this.diastolic;
				}
				
			    public Double systolic;

				public Double getSystolic () {
					return this.systolic;
				}
				
			    public Double height;

				public Double getHeight () {
					return this.height;
				}
				
			    public Double temperature;

				public Double getTemperature () {
					return this.temperature;
				}
				
			    public Double pulse;

				public Double getPulse () {
					return this.pulse;
				}
				
			    public Double respiratory_rate;

				public Double getRespiratory_rate () {
					return this.respiratory_rate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Duplicate_clinicsStruct other = (Duplicate_clinicsStruct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Duplicate_clinicsStruct other) {

		other.id = this.id;
	            other.person_uuid = this.person_uuid;
	            other.facility_id = this.facility_id;
	            other.encounter_date = this.encounter_date;
	            other.created_date = this.created_date;
	            other.last_modified_date = this.last_modified_date;
	            other.created_by = this.created_by;
	            other.last_modified_by = this.last_modified_by;
	            other.uuid = this.uuid;
	            other.visit_id = this.visit_id;
	            other.archived = this.archived;
	            other.body_weight = this.body_weight;
	            other.diastolic = this.diastolic;
	            other.systolic = this.systolic;
	            other.height = this.height;
	            other.temperature = this.temperature;
	            other.pulse = this.pulse;
	            other.respiratory_rate = this.respiratory_rate;
	            
	}

	public void copyKeysDataTo(Duplicate_clinicsStruct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Triage_Vital_Signs) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id = null;
           				} else {
           			    	this.id = dis.readLong();
           				}
					
					this.person_uuid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.facility_id = null;
           				} else {
           			    	this.facility_id = dis.readLong();
           				}
					
					this.encounter_date = readDate(dis);
					
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_by = readString(dis);
					
					this.uuid = readString(dis);
					
					this.visit_id = readString(dis);
					
			        this.archived = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.body_weight = null;
           				} else {
           			    	this.body_weight = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.diastolic = null;
           				} else {
           			    	this.diastolic = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.systolic = null;
           				} else {
           			    	this.systolic = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.height = null;
           				} else {
           			    	this.height = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.temperature = null;
           				} else {
           			    	this.temperature = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pulse = null;
           				} else {
           			    	this.pulse = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.respiratory_rate = null;
           				} else {
           			    	this.respiratory_rate = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id);
		            	}
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// Long
				
						if(this.facility_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.facility_id);
		            	}
					
					// java.util.Date
				
						writeDate(this.encounter_date,dos);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.visit_id,dos);
					
					// int
				
		            	dos.writeInt(this.archived);
					
					// Double
				
						if(this.body_weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.body_weight);
		            	}
					
					// Double
				
						if(this.diastolic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.diastolic);
		            	}
					
					// Double
				
						if(this.systolic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.systolic);
		            	}
					
					// Double
				
						if(this.height == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.height);
		            	}
					
					// Double
				
						if(this.temperature == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.temperature);
		            	}
					
					// Double
				
						if(this.pulse == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.pulse);
		            	}
					
					// Double
				
						if(this.respiratory_rate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.respiratory_rate);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",encounter_date="+String.valueOf(encounter_date));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",uuid="+uuid);
		sb.append(",visit_id="+visit_id);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",body_weight="+String.valueOf(body_weight));
		sb.append(",diastolic="+String.valueOf(diastolic));
		sb.append(",systolic="+String.valueOf(systolic));
		sb.append(",height="+String.valueOf(height));
		sb.append(",temperature="+String.valueOf(temperature));
		sb.append(",pulse="+String.valueOf(pulse));
		sb.append(",respiratory_rate="+String.valueOf(respiratory_rate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Duplicate_clinicsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class check_duplicatesStruct implements routines.system.IPersistableRow<check_duplicatesStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long id;

				public Long getId () {
					return this.id;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public Long facility_id;

				public Long getFacility_id () {
					return this.facility_id;
				}
				
			    public java.util.Date encounter_date;

				public java.util.Date getEncounter_date () {
					return this.encounter_date;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				
			    public int archived;

				public int getArchived () {
					return this.archived;
				}
				
			    public Double body_weight;

				public Double getBody_weight () {
					return this.body_weight;
				}
				
			    public Double diastolic;

				public Double getDiastolic () {
					return this.diastolic;
				}
				
			    public Double systolic;

				public Double getSystolic () {
					return this.systolic;
				}
				
			    public Double height;

				public Double getHeight () {
					return this.height;
				}
				
			    public Double temperature;

				public Double getTemperature () {
					return this.temperature;
				}
				
			    public Double pulse;

				public Double getPulse () {
					return this.pulse;
				}
				
			    public Double respiratory_rate;

				public Double getRespiratory_rate () {
					return this.respiratory_rate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final check_duplicatesStruct other = (check_duplicatesStruct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(check_duplicatesStruct other) {

		other.id = this.id;
	            other.person_uuid = this.person_uuid;
	            other.facility_id = this.facility_id;
	            other.encounter_date = this.encounter_date;
	            other.created_date = this.created_date;
	            other.last_modified_date = this.last_modified_date;
	            other.created_by = this.created_by;
	            other.last_modified_by = this.last_modified_by;
	            other.uuid = this.uuid;
	            other.visit_id = this.visit_id;
	            other.archived = this.archived;
	            other.body_weight = this.body_weight;
	            other.diastolic = this.diastolic;
	            other.systolic = this.systolic;
	            other.height = this.height;
	            other.temperature = this.temperature;
	            other.pulse = this.pulse;
	            other.respiratory_rate = this.respiratory_rate;
	            
	}

	public void copyKeysDataTo(check_duplicatesStruct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Triage_Vital_Signs) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id = null;
           				} else {
           			    	this.id = dis.readLong();
           				}
					
					this.person_uuid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.facility_id = null;
           				} else {
           			    	this.facility_id = dis.readLong();
           				}
					
					this.encounter_date = readDate(dis);
					
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_by = readString(dis);
					
					this.uuid = readString(dis);
					
					this.visit_id = readString(dis);
					
			        this.archived = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.body_weight = null;
           				} else {
           			    	this.body_weight = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.diastolic = null;
           				} else {
           			    	this.diastolic = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.systolic = null;
           				} else {
           			    	this.systolic = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.height = null;
           				} else {
           			    	this.height = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.temperature = null;
           				} else {
           			    	this.temperature = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pulse = null;
           				} else {
           			    	this.pulse = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.respiratory_rate = null;
           				} else {
           			    	this.respiratory_rate = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id);
		            	}
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// Long
				
						if(this.facility_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.facility_id);
		            	}
					
					// java.util.Date
				
						writeDate(this.encounter_date,dos);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.visit_id,dos);
					
					// int
				
		            	dos.writeInt(this.archived);
					
					// Double
				
						if(this.body_weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.body_weight);
		            	}
					
					// Double
				
						if(this.diastolic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.diastolic);
		            	}
					
					// Double
				
						if(this.systolic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.systolic);
		            	}
					
					// Double
				
						if(this.height == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.height);
		            	}
					
					// Double
				
						if(this.temperature == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.temperature);
		            	}
					
					// Double
				
						if(this.pulse == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.pulse);
		            	}
					
					// Double
				
						if(this.respiratory_rate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.respiratory_rate);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",encounter_date="+String.valueOf(encounter_date));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",uuid="+uuid);
		sb.append(",visit_id="+visit_id);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",body_weight="+String.valueOf(body_weight));
		sb.append(",diastolic="+String.valueOf(diastolic));
		sb.append(",systolic="+String.valueOf(systolic));
		sb.append(",height="+String.valueOf(height));
		sb.append(",temperature="+String.valueOf(temperature));
		sb.append(",pulse="+String.valueOf(pulse));
		sb.append(",respiratory_rate="+String.valueOf(respiratory_rate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(check_duplicatesStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtSortRow_3 implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_3> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long id;

				public Long getId () {
					return this.id;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public Long facility_id;

				public Long getFacility_id () {
					return this.facility_id;
				}
				
			    public java.util.Date encounter_date;

				public java.util.Date getEncounter_date () {
					return this.encounter_date;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				
			    public int archived;

				public int getArchived () {
					return this.archived;
				}
				
			    public Double body_weight;

				public Double getBody_weight () {
					return this.body_weight;
				}
				
			    public Double diastolic;

				public Double getDiastolic () {
					return this.diastolic;
				}
				
			    public Double systolic;

				public Double getSystolic () {
					return this.systolic;
				}
				
			    public Double height;

				public Double getHeight () {
					return this.height;
				}
				
			    public Double temperature;

				public Double getTemperature () {
					return this.temperature;
				}
				
			    public Double pulse;

				public Double getPulse () {
					return this.pulse;
				}
				
			    public Double respiratory_rate;

				public Double getRespiratory_rate () {
					return this.respiratory_rate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final OnRowsEndStructtSortRow_3 other = (OnRowsEndStructtSortRow_3) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(OnRowsEndStructtSortRow_3 other) {

		other.id = this.id;
	            other.person_uuid = this.person_uuid;
	            other.facility_id = this.facility_id;
	            other.encounter_date = this.encounter_date;
	            other.created_date = this.created_date;
	            other.last_modified_date = this.last_modified_date;
	            other.created_by = this.created_by;
	            other.last_modified_by = this.last_modified_by;
	            other.uuid = this.uuid;
	            other.visit_id = this.visit_id;
	            other.archived = this.archived;
	            other.body_weight = this.body_weight;
	            other.diastolic = this.diastolic;
	            other.systolic = this.systolic;
	            other.height = this.height;
	            other.temperature = this.temperature;
	            other.pulse = this.pulse;
	            other.respiratory_rate = this.respiratory_rate;
	            
	}

	public void copyKeysDataTo(OnRowsEndStructtSortRow_3 other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Triage_Vital_Signs) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id = null;
           				} else {
           			    	this.id = dis.readLong();
           				}
					
					this.person_uuid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.facility_id = null;
           				} else {
           			    	this.facility_id = dis.readLong();
           				}
					
					this.encounter_date = readDate(dis);
					
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_by = readString(dis);
					
					this.uuid = readString(dis);
					
					this.visit_id = readString(dis);
					
			        this.archived = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.body_weight = null;
           				} else {
           			    	this.body_weight = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.diastolic = null;
           				} else {
           			    	this.diastolic = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.systolic = null;
           				} else {
           			    	this.systolic = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.height = null;
           				} else {
           			    	this.height = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.temperature = null;
           				} else {
           			    	this.temperature = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pulse = null;
           				} else {
           			    	this.pulse = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.respiratory_rate = null;
           				} else {
           			    	this.respiratory_rate = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id);
		            	}
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// Long
				
						if(this.facility_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.facility_id);
		            	}
					
					// java.util.Date
				
						writeDate(this.encounter_date,dos);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.visit_id,dos);
					
					// int
				
		            	dos.writeInt(this.archived);
					
					// Double
				
						if(this.body_weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.body_weight);
		            	}
					
					// Double
				
						if(this.diastolic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.diastolic);
		            	}
					
					// Double
				
						if(this.systolic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.systolic);
		            	}
					
					// Double
				
						if(this.height == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.height);
		            	}
					
					// Double
				
						if(this.temperature == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.temperature);
		            	}
					
					// Double
				
						if(this.pulse == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.pulse);
		            	}
					
					// Double
				
						if(this.respiratory_rate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.respiratory_rate);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",encounter_date="+String.valueOf(encounter_date));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",uuid="+uuid);
		sb.append(",visit_id="+visit_id);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",body_weight="+String.valueOf(body_weight));
		sb.append(",diastolic="+String.valueOf(diastolic));
		sb.append(",systolic="+String.valueOf(systolic));
		sb.append(",height="+String.valueOf(height));
		sb.append(",temperature="+String.valueOf(temperature));
		sb.append(",pulse="+String.valueOf(pulse));
		sb.append(",respiratory_rate="+String.valueOf(respiratory_rate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtSortRow_3 other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Sort_clinicsStruct implements routines.system.IPersistableRow<Sort_clinicsStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long id;

				public Long getId () {
					return this.id;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public Long facility_id;

				public Long getFacility_id () {
					return this.facility_id;
				}
				
			    public java.util.Date encounter_date;

				public java.util.Date getEncounter_date () {
					return this.encounter_date;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				
			    public int archived;

				public int getArchived () {
					return this.archived;
				}
				
			    public Double body_weight;

				public Double getBody_weight () {
					return this.body_weight;
				}
				
			    public Double diastolic;

				public Double getDiastolic () {
					return this.diastolic;
				}
				
			    public Double systolic;

				public Double getSystolic () {
					return this.systolic;
				}
				
			    public Double height;

				public Double getHeight () {
					return this.height;
				}
				
			    public Double temperature;

				public Double getTemperature () {
					return this.temperature;
				}
				
			    public Double pulse;

				public Double getPulse () {
					return this.pulse;
				}
				
			    public Double respiratory_rate;

				public Double getRespiratory_rate () {
					return this.respiratory_rate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Sort_clinicsStruct other = (Sort_clinicsStruct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Sort_clinicsStruct other) {

		other.id = this.id;
	            other.person_uuid = this.person_uuid;
	            other.facility_id = this.facility_id;
	            other.encounter_date = this.encounter_date;
	            other.created_date = this.created_date;
	            other.last_modified_date = this.last_modified_date;
	            other.created_by = this.created_by;
	            other.last_modified_by = this.last_modified_by;
	            other.uuid = this.uuid;
	            other.visit_id = this.visit_id;
	            other.archived = this.archived;
	            other.body_weight = this.body_weight;
	            other.diastolic = this.diastolic;
	            other.systolic = this.systolic;
	            other.height = this.height;
	            other.temperature = this.temperature;
	            other.pulse = this.pulse;
	            other.respiratory_rate = this.respiratory_rate;
	            
	}

	public void copyKeysDataTo(Sort_clinicsStruct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Triage_Vital_Signs) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.id = null;
           				} else {
           			    	this.id = dis.readLong();
           				}
					
					this.person_uuid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.facility_id = null;
           				} else {
           			    	this.facility_id = dis.readLong();
           				}
					
					this.encounter_date = readDate(dis);
					
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_by = readString(dis);
					
					this.uuid = readString(dis);
					
					this.visit_id = readString(dis);
					
			        this.archived = dis.readInt();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.body_weight = null;
           				} else {
           			    	this.body_weight = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.diastolic = null;
           				} else {
           			    	this.diastolic = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.systolic = null;
           				} else {
           			    	this.systolic = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.height = null;
           				} else {
           			    	this.height = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.temperature = null;
           				} else {
           			    	this.temperature = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pulse = null;
           				} else {
           			    	this.pulse = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.respiratory_rate = null;
           				} else {
           			    	this.respiratory_rate = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.id);
		            	}
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// Long
				
						if(this.facility_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.facility_id);
		            	}
					
					// java.util.Date
				
						writeDate(this.encounter_date,dos);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.visit_id,dos);
					
					// int
				
		            	dos.writeInt(this.archived);
					
					// Double
				
						if(this.body_weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.body_weight);
		            	}
					
					// Double
				
						if(this.diastolic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.diastolic);
		            	}
					
					// Double
				
						if(this.systolic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.systolic);
		            	}
					
					// Double
				
						if(this.height == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.height);
		            	}
					
					// Double
				
						if(this.temperature == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.temperature);
		            	}
					
					// Double
				
						if(this.pulse == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.pulse);
		            	}
					
					// Double
				
						if(this.respiratory_rate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.respiratory_rate);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",encounter_date="+String.valueOf(encounter_date));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",uuid="+uuid);
		sb.append(",visit_id="+visit_id);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",body_weight="+String.valueOf(body_weight));
		sb.append(",diastolic="+String.valueOf(diastolic));
		sb.append(",systolic="+String.valueOf(systolic));
		sb.append(",height="+String.valueOf(height));
		sb.append(",temperature="+String.valueOf(temperature));
		sb.append(",pulse="+String.valueOf(pulse));
		sb.append(",respiratory_rate="+String.valueOf(respiratory_rate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Sort_clinicsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class extract_vistitsStruct implements routines.system.IPersistableRow<extract_vistitsStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[0];

	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public java.util.Date encounter_date;

				public java.util.Date getEncounter_date () {
					return this.encounter_date;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public Double body_weight;

				public Double getBody_weight () {
					return this.body_weight;
				}
				
			    public Double diastolic;

				public Double getDiastolic () {
					return this.diastolic;
				}
				
			    public Double systolic;

				public Double getSystolic () {
					return this.systolic;
				}
				
			    public Double height;

				public Double getHeight () {
					return this.height;
				}
				
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Triage_Vital_Signs) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
					this.person_uuid = readString(dis);
					
					this.encounter_date = readDate(dis);
					
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.uuid = readString(dis);
					
						this.archived = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.body_weight = null;
           				} else {
           			    	this.body_weight = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.diastolic = null;
           				} else {
           			    	this.diastolic = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.systolic = null;
           				} else {
           			    	this.systolic = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.height = null;
           				} else {
           			    	this.height = dis.readDouble();
           				}
					
					this.visit_id = readString(dis);
					
					this.datim_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// java.util.Date
				
						writeDate(this.encounter_date,dos);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// Double
				
						if(this.body_weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.body_weight);
		            	}
					
					// Double
				
						if(this.diastolic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.diastolic);
		            	}
					
					// Double
				
						if(this.systolic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.systolic);
		            	}
					
					// Double
				
						if(this.height == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.height);
		            	}
					
					// String
				
						writeString(this.visit_id,dos);
					
					// String
				
						writeString(this.datim_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",encounter_date="+String.valueOf(encounter_date));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",uuid="+uuid);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",body_weight="+String.valueOf(body_weight));
		sb.append(",diastolic="+String.valueOf(diastolic));
		sb.append(",systolic="+String.valueOf(systolic));
		sb.append(",height="+String.valueOf(height));
		sb.append(",visit_id="+visit_id);
		sb.append(",datim_id="+datim_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(extract_vistitsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_9Struct implements routines.system.IPersistableRow<after_tDBInput_9Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[0];

	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public java.util.Date encounter_date;

				public java.util.Date getEncounter_date () {
					return this.encounter_date;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public Double body_weight;

				public Double getBody_weight () {
					return this.body_weight;
				}
				
			    public Double diastolic;

				public Double getDiastolic () {
					return this.diastolic;
				}
				
			    public Double systolic;

				public Double getSystolic () {
					return this.systolic;
				}
				
			    public Double height;

				public Double getHeight () {
					return this.height;
				}
				
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Triage_Vital_Signs) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
					this.person_uuid = readString(dis);
					
					this.encounter_date = readDate(dis);
					
					this.created_date = readDate(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.uuid = readString(dis);
					
						this.archived = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.body_weight = null;
           				} else {
           			    	this.body_weight = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.diastolic = null;
           				} else {
           			    	this.diastolic = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.systolic = null;
           				} else {
           			    	this.systolic = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.height = null;
           				} else {
           			    	this.height = dis.readDouble();
           				}
					
					this.visit_id = readString(dis);
					
					this.datim_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// java.util.Date
				
						writeDate(this.encounter_date,dos);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// Double
				
						if(this.body_weight == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.body_weight);
		            	}
					
					// Double
				
						if(this.diastolic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.diastolic);
		            	}
					
					// Double
				
						if(this.systolic == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.systolic);
		            	}
					
					// Double
				
						if(this.height == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.height);
		            	}
					
					// String
				
						writeString(this.visit_id,dos);
					
					// String
				
						writeString(this.datim_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",encounter_date="+String.valueOf(encounter_date));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",uuid="+uuid);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",body_weight="+String.valueOf(body_weight));
		sb.append(",diastolic="+String.valueOf(diastolic));
		sb.append(",systolic="+String.valueOf(systolic));
		sb.append(",height="+String.valueOf(height));
		sb.append(",visit_id="+visit_id);
		sb.append(",datim_id="+datim_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_10Process(globalMap);

		extract_vistitsStruct extract_vistits = new extract_vistitsStruct();
Sort_clinicsStruct Sort_clinics = new Sort_clinicsStruct();
check_duplicatesStruct check_duplicates = new check_duplicatesStruct();
Unique_clinicsStruct Unique_clinics = new Unique_clinicsStruct();
Duplicate_clinicsStruct Duplicate_clinics = new Duplicate_clinicsStruct();





	
	/**
	 * [tSortRow_3_SortOut begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_3_SortOut", false);
		start_Hash.put("tSortRow_3_SortOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_3";
	
	currentComponent="tSortRow_3_SortOut";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Sort_clinics");
					}
				
		int tos_count_tSortRow_3_SortOut = 0;
		


class ComparableSort_clinicsStruct extends Sort_clinicsStruct implements Comparable<ComparableSort_clinicsStruct> {
	
	public int compareTo(ComparableSort_clinicsStruct other) {

		if(this.id == null && other.id != null){
			return -1;
						
		}else if(this.id != null && other.id == null){
			return 1;
						
		}else if(this.id != null && other.id != null){
			if(!this.id.equals(other.id)){
				return this.id.compareTo(other.id);
			}
		}
		return 0;
	}
}

java.util.List<ComparableSort_clinicsStruct> list_tSortRow_3_SortOut = new java.util.ArrayList<ComparableSort_clinicsStruct>();


 



/**
 * [tSortRow_3_SortOut begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"extract_vistits");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<extract_facilitisStruct> tHash_Lookup_extract_facilitis = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<extract_facilitisStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<extract_facilitisStruct>) 
					globalMap.get( "tHash_Lookup_extract_facilitis" ))
					;					
					
	

extract_facilitisStruct extract_facilitisHashKey = new extract_facilitisStruct();
extract_facilitisStruct extract_facilitisDefault = new extract_facilitisStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
Sort_clinicsStruct Sort_clinics_tmp = new Sort_clinicsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tDBInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_9", false);
		start_Hash.put("tDBInput_9", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_9";

	
		int tos_count_tDBInput_9 = 0;
		
	
    
	
		    int nb_line_tDBInput_9 = 0;
		    java.sql.Connection conn_tDBInput_9 = null;
				String driverClass_tDBInput_9 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_9 = java.lang.Class.forName(driverClass_tDBInput_9);
				String dbUser_tDBInput_9 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_9 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_9 = decryptedPassword_tDBInput_9;
				
				String url_tDBInput_9 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_9 = java.sql.DriverManager.getConnection(url_tDBInput_9,dbUser_tDBInput_9,dbPwd_tDBInput_9);
		        
				conn_tDBInput_9.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9.createStatement();

		    String dbquery_tDBInput_9 = "SELECT DISTINCT id,person_uuid, encounter_date, created_date, last_modified_date,\n    uuid, archived, body_weight, dia"
+"stolic,  systolic,  height,  visit_id, datim_id\n FROM etl_triage_vital_sign_stage";
			

            	globalMap.put("tDBInput_9_QUERY",dbquery_tDBInput_9);
		    java.sql.ResultSet rs_tDBInput_9 = null;

		    try {
		    	rs_tDBInput_9 = stmt_tDBInput_9.executeQuery(dbquery_tDBInput_9);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9.getMetaData();
		    	int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9.getColumnCount();

		    String tmpContent_tDBInput_9 = null;
		    
		    
		    while (rs_tDBInput_9.next()) {
		        nb_line_tDBInput_9++;
		        
							if(colQtyInRs_tDBInput_9 < 1) {
								extract_vistits.id = 0;
							} else {
		                          
            extract_vistits.id = rs_tDBInput_9.getLong(1);
            if(rs_tDBInput_9.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_9 < 2) {
								extract_vistits.person_uuid = null;
							} else {
	                         		
        	extract_vistits.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_9, 2, false);
		                    }
							if(colQtyInRs_tDBInput_9 < 3) {
								extract_vistits.encounter_date = null;
							} else {
										
			extract_vistits.encounter_date = routines.system.JDBCUtil.getDate(rs_tDBInput_9, 3);
		                    }
							if(colQtyInRs_tDBInput_9 < 4) {
								extract_vistits.created_date = null;
							} else {
										
			extract_vistits.created_date = routines.system.JDBCUtil.getDate(rs_tDBInput_9, 4);
		                    }
							if(colQtyInRs_tDBInput_9 < 5) {
								extract_vistits.last_modified_date = null;
							} else {
										
			extract_vistits.last_modified_date = routines.system.JDBCUtil.getDate(rs_tDBInput_9, 5);
		                    }
							if(colQtyInRs_tDBInput_9 < 6) {
								extract_vistits.uuid = null;
							} else {
	                         		
        	extract_vistits.uuid = routines.system.JDBCUtil.getString(rs_tDBInput_9, 6, false);
		                    }
							if(colQtyInRs_tDBInput_9 < 7) {
								extract_vistits.archived = null;
							} else {
		                          
            extract_vistits.archived = rs_tDBInput_9.getInt(7);
            if(rs_tDBInput_9.wasNull()){
                    extract_vistits.archived = null;
            }
		                    }
							if(colQtyInRs_tDBInput_9 < 8) {
								extract_vistits.body_weight = null;
							} else {
	                         		
            extract_vistits.body_weight = rs_tDBInput_9.getDouble(8);
            if(rs_tDBInput_9.wasNull()){
                    extract_vistits.body_weight = null;
            }
		                    }
							if(colQtyInRs_tDBInput_9 < 9) {
								extract_vistits.diastolic = null;
							} else {
	                         		
            extract_vistits.diastolic = rs_tDBInput_9.getDouble(9);
            if(rs_tDBInput_9.wasNull()){
                    extract_vistits.diastolic = null;
            }
		                    }
							if(colQtyInRs_tDBInput_9 < 10) {
								extract_vistits.systolic = null;
							} else {
	                         		
            extract_vistits.systolic = rs_tDBInput_9.getDouble(10);
            if(rs_tDBInput_9.wasNull()){
                    extract_vistits.systolic = null;
            }
		                    }
							if(colQtyInRs_tDBInput_9 < 11) {
								extract_vistits.height = null;
							} else {
	                         		
            extract_vistits.height = rs_tDBInput_9.getDouble(11);
            if(rs_tDBInput_9.wasNull()){
                    extract_vistits.height = null;
            }
		                    }
							if(colQtyInRs_tDBInput_9 < 12) {
								extract_vistits.visit_id = null;
							} else {
	                         		
        	extract_vistits.visit_id = routines.system.JDBCUtil.getString(rs_tDBInput_9, 12, false);
		                    }
							if(colQtyInRs_tDBInput_9 < 13) {
								extract_vistits.datim_id = null;
							} else {
	                         		
        	extract_vistits.datim_id = routines.system.JDBCUtil.getString(rs_tDBInput_9, 13, false);
		                    }
					


 



/**
 * [tDBInput_9 begin ] stop
 */
	
	/**
	 * [tDBInput_9 main ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 


	tos_count_tDBInput_9++;

/**
 * [tDBInput_9 main ] stop
 */
	
	/**
	 * [tDBInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"extract_vistits");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "extract_facilitis" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopextract_facilitis = false;
       		  	    	
       		  	    	
 							extract_facilitisStruct extract_facilitisObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    extract_facilitisHashKey.datim_code = extract_vistits.datim_id ;
                        		    		

								
		                        	extract_facilitisHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_extract_facilitis.lookup( extract_facilitisHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_extract_facilitis != null && tHash_Lookup_extract_facilitis.getCount(extract_facilitisHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'extract_facilitis' and it contains more one result from keys :  extract_facilitis.datim_code = '" + extract_facilitisHashKey.datim_code + "'");
								} // G 071
							

							extract_facilitisStruct extract_facilitis = null;
                    		  	 
							   
                    		  	 
	       		  	    	extract_facilitisStruct fromLookup_extract_facilitis = null;
							extract_facilitis = extract_facilitisDefault;
										 
							
								 
							
							
								if (tHash_Lookup_extract_facilitis !=null && tHash_Lookup_extract_facilitis.hasNext()) { // G 099
								
							
								
								fromLookup_extract_facilitis = tHash_Lookup_extract_facilitis.next();

							
							
								} // G 099
							
							

							if(fromLookup_extract_facilitis != null) {
								extract_facilitis = fromLookup_extract_facilitis;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

Sort_clinics = null;


// # Output table : 'Sort_clinics'
Sort_clinics_tmp.id = extract_vistits.id ;
Sort_clinics_tmp.person_uuid = extract_vistits.person_uuid ;
Sort_clinics_tmp.facility_id = extract_facilitis.id ;
Sort_clinics_tmp.encounter_date = extract_vistits.encounter_date ;
Sort_clinics_tmp.created_date = extract_vistits.created_date ;
Sort_clinics_tmp.last_modified_date = extract_vistits.last_modified_date ;
Sort_clinics_tmp.created_by = "ETL";
Sort_clinics_tmp.last_modified_by = "ETL";
Sort_clinics_tmp.uuid = extract_vistits.uuid ;
Sort_clinics_tmp.visit_id = extract_vistits.visit_id ;
Sort_clinics_tmp.archived = (extract_vistits.archived==1)?0:extract_vistits.archived ;
Sort_clinics_tmp.body_weight = extract_vistits.body_weight ;
Sort_clinics_tmp.diastolic = extract_vistits.diastolic ;
Sort_clinics_tmp.systolic = extract_vistits.systolic ;
Sort_clinics_tmp.height = extract_vistits.height ;
Sort_clinics_tmp.temperature = null;
Sort_clinics_tmp.pulse = null;
Sort_clinics_tmp.respiratory_rate = null;
Sort_clinics = Sort_clinics_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "Sort_clinics"
if(Sort_clinics != null) { 



	
	/**
	 * [tSortRow_3_SortOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_3";
	
	currentComponent="tSortRow_3_SortOut";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Sort_clinics");
					}
					



	ComparableSort_clinicsStruct arrayRowtSortRow_3_SortOut = new ComparableSort_clinicsStruct();

	arrayRowtSortRow_3_SortOut.id = Sort_clinics.id;
	arrayRowtSortRow_3_SortOut.person_uuid = Sort_clinics.person_uuid;
	arrayRowtSortRow_3_SortOut.facility_id = Sort_clinics.facility_id;
	arrayRowtSortRow_3_SortOut.encounter_date = Sort_clinics.encounter_date;
	arrayRowtSortRow_3_SortOut.created_date = Sort_clinics.created_date;
	arrayRowtSortRow_3_SortOut.last_modified_date = Sort_clinics.last_modified_date;
	arrayRowtSortRow_3_SortOut.created_by = Sort_clinics.created_by;
	arrayRowtSortRow_3_SortOut.last_modified_by = Sort_clinics.last_modified_by;
	arrayRowtSortRow_3_SortOut.uuid = Sort_clinics.uuid;
	arrayRowtSortRow_3_SortOut.visit_id = Sort_clinics.visit_id;
	arrayRowtSortRow_3_SortOut.archived = Sort_clinics.archived;
	arrayRowtSortRow_3_SortOut.body_weight = Sort_clinics.body_weight;
	arrayRowtSortRow_3_SortOut.diastolic = Sort_clinics.diastolic;
	arrayRowtSortRow_3_SortOut.systolic = Sort_clinics.systolic;
	arrayRowtSortRow_3_SortOut.height = Sort_clinics.height;
	arrayRowtSortRow_3_SortOut.temperature = Sort_clinics.temperature;
	arrayRowtSortRow_3_SortOut.pulse = Sort_clinics.pulse;
	arrayRowtSortRow_3_SortOut.respiratory_rate = Sort_clinics.respiratory_rate;	
	list_tSortRow_3_SortOut.add(arrayRowtSortRow_3_SortOut);

 


	tos_count_tSortRow_3_SortOut++;

/**
 * [tSortRow_3_SortOut main ] stop
 */
	
	/**
	 * [tSortRow_3_SortOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_3";
	
	currentComponent="tSortRow_3_SortOut";

	

 



/**
 * [tSortRow_3_SortOut process_data_begin ] stop
 */
	
	/**
	 * [tSortRow_3_SortOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_3";
	
	currentComponent="tSortRow_3_SortOut";

	

 



/**
 * [tSortRow_3_SortOut process_data_end ] stop
 */

} // End of branch "Sort_clinics"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_9 end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

	}
}finally{
	if (rs_tDBInput_9 != null) {
		rs_tDBInput_9.close();
	}
	if (stmt_tDBInput_9 != null) {
		stmt_tDBInput_9.close();
	}
	if(conn_tDBInput_9 != null && !conn_tDBInput_9.isClosed()) {
		
			conn_tDBInput_9.commit();
			
		
			conn_tDBInput_9.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_9_NB_LINE",nb_line_tDBInput_9);
 

ok_Hash.put("tDBInput_9", true);
end_Hash.put("tDBInput_9", System.currentTimeMillis());

   			if (globalMap.get("tDBInput_9_NB_LINE") != null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				tJava_2Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}



/**
 * [tDBInput_9 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_extract_facilitis != null) {
						tHash_Lookup_extract_facilitis.endGet();
					}
					globalMap.remove( "tHash_Lookup_extract_facilitis" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"extract_vistits");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tSortRow_3_SortOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_3";
	
	currentComponent="tSortRow_3_SortOut";

	

Sort_clinicsStruct[] array_tSortRow_3_SortOut = list_tSortRow_3_SortOut.toArray(new ComparableSort_clinicsStruct[0]);

java.util.Arrays.sort(array_tSortRow_3_SortOut);

globalMap.put("tSortRow_3",array_tSortRow_3_SortOut);


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Sort_clinics");
			  	}
			  	
 

ok_Hash.put("tSortRow_3_SortOut", true);
end_Hash.put("tSortRow_3_SortOut", System.currentTimeMillis());




/**
 * [tSortRow_3_SortOut end ] stop
 */



	
	/**
	 * [tDBOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_5", false);
		start_Hash.put("tDBOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Unique_clinics");
					}
				
		int tos_count_tDBOutput_5 = 0;
		





String dbschema_tDBOutput_5 = null;
	dbschema_tDBOutput_5 = context.LAMISPlus_Schema;
	

String tableName_tDBOutput_5 = null;
if(dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
	tableName_tDBOutput_5 = ("triage_vital_sign");
} else {
	tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "\".\"" + ("triage_vital_sign");
}

        int updateKeyCount_tDBOutput_5 = 1;
        if(updateKeyCount_tDBOutput_5 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_5 = 0;
int nb_line_update_tDBOutput_5 = 0;
int nb_line_inserted_tDBOutput_5 = 0;
int nb_line_deleted_tDBOutput_5 = 0;
int nb_line_rejected_tDBOutput_5 = 0;

int deletedCount_tDBOutput_5=0;
int updatedCount_tDBOutput_5=0;
int insertedCount_tDBOutput_5=0;
int rejectedCount_tDBOutput_5=0;

boolean whetherReject_tDBOutput_5 = false;

java.sql.Connection conn_tDBOutput_5 = null;
String dbUser_tDBOutput_5 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_5 = "jdbc:postgresql://"+context.LAMISPlus_Server+":"+context.LAMISPlus_Port+"/"+context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
    dbUser_tDBOutput_5 = context.LAMISPlus_Login;

	final String decryptedPassword_tDBOutput_5 = context.LAMISPlus_Password; 

    String dbPwd_tDBOutput_5 = decryptedPassword_tDBOutput_5;

    conn_tDBOutput_5 = java.sql.DriverManager.getConnection(url_tDBOutput_5,dbUser_tDBOutput_5,dbPwd_tDBOutput_5);
	
	resourceMap.put("conn_tDBOutput_5", conn_tDBOutput_5);
        conn_tDBOutput_5.setAutoCommit(false);
        int commitEvery_tDBOutput_5 = 10000;
        int commitCounter_tDBOutput_5 = 0;



int count_tDBOutput_5=0;
	    java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_5 + "\" WHERE \"id\" = ?");
	    resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);
	    String insert_tDBOutput_5 = "INSERT INTO \"" + tableName_tDBOutput_5 + "\" (\"id\",\"person_uuid\",\"facility_id\",\"encounter_date\",\"created_date\",\"last_modified_date\",\"created_by\",\"last_modified_by\",\"uuid\",\"visit_id\",\"archived\",\"body_weight\",\"diastolic\",\"systolic\",\"height\",\"temperature\",\"pulse\",\"respiratory_rate\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);
	    resourceMap.put("pstmtInsert_tDBOutput_5", pstmtInsert_tDBOutput_5);
	    String update_tDBOutput_5 = "UPDATE \"" + tableName_tDBOutput_5 + "\" SET \"id\" = ?,\"person_uuid\" = ?,\"facility_id\" = ?,\"encounter_date\" = ?,\"created_date\" = ?,\"last_modified_date\" = ?,\"created_by\" = ?,\"last_modified_by\" = ?,\"uuid\" = ?,\"visit_id\" = ?,\"archived\" = ?,\"body_weight\" = ?,\"diastolic\" = ?,\"systolic\" = ?,\"height\" = ?,\"temperature\" = ?,\"pulse\" = ?,\"respiratory_rate\" = ? WHERE \"id\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(update_tDBOutput_5);
	    resourceMap.put("pstmtUpdate_tDBOutput_5", pstmtUpdate_tDBOutput_5);
	    

 



/**
 * [tDBOutput_5 begin ] stop
 */




	
	/**
	 * [tDBOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_6", false);
		start_Hash.put("tDBOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Duplicate_clinics");
					}
				
		int tos_count_tDBOutput_6 = 0;
		





String dbschema_tDBOutput_6 = null;
	dbschema_tDBOutput_6 = context.LAMISPlus_Schema;
	

String tableName_tDBOutput_6 = null;
if(dbschema_tDBOutput_6 == null || dbschema_tDBOutput_6.trim().length() == 0) {
	tableName_tDBOutput_6 = ("triage_vital_sign_duplicates");
} else {
	tableName_tDBOutput_6 = dbschema_tDBOutput_6 + "\".\"" + ("triage_vital_sign_duplicates");
}

        int updateKeyCount_tDBOutput_6 = 1;
        if(updateKeyCount_tDBOutput_6 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_6 = 0;
int nb_line_update_tDBOutput_6 = 0;
int nb_line_inserted_tDBOutput_6 = 0;
int nb_line_deleted_tDBOutput_6 = 0;
int nb_line_rejected_tDBOutput_6 = 0;

int deletedCount_tDBOutput_6=0;
int updatedCount_tDBOutput_6=0;
int insertedCount_tDBOutput_6=0;
int rejectedCount_tDBOutput_6=0;

boolean whetherReject_tDBOutput_6 = false;

java.sql.Connection conn_tDBOutput_6 = null;
String dbUser_tDBOutput_6 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_6 = "jdbc:postgresql://"+context.LAMISPlus_Server+":"+context.LAMISPlus_Port+"/"+context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
    dbUser_tDBOutput_6 = context.LAMISPlus_Login;

	final String decryptedPassword_tDBOutput_6 = context.LAMISPlus_Password; 

    String dbPwd_tDBOutput_6 = decryptedPassword_tDBOutput_6;

    conn_tDBOutput_6 = java.sql.DriverManager.getConnection(url_tDBOutput_6,dbUser_tDBOutput_6,dbPwd_tDBOutput_6);
	
	resourceMap.put("conn_tDBOutput_6", conn_tDBOutput_6);
        conn_tDBOutput_6.setAutoCommit(false);
        int commitEvery_tDBOutput_6 = 10000;
        int commitCounter_tDBOutput_6 = 0;



int count_tDBOutput_6=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_6 = conn_tDBOutput_6.getMetaData();
                                boolean whetherExist_tDBOutput_6 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_6 = dbMetaData_tDBOutput_6.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_6 = "public";
                                    if(dbschema_tDBOutput_6 == null || dbschema_tDBOutput_6.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_6 = conn_tDBOutput_6.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_6 = stmtSchema_tDBOutput_6.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_6.next()){
                                                defaultSchema_tDBOutput_6 = rsSchema_tDBOutput_6.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_6.next()) {
                                        String table_tDBOutput_6 = rsTable_tDBOutput_6.getString("TABLE_NAME");
                                        String schema_tDBOutput_6 = rsTable_tDBOutput_6.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_6.equals(("triage_vital_sign_duplicates"))
                                            && (schema_tDBOutput_6.equals(dbschema_tDBOutput_6) || ((dbschema_tDBOutput_6 ==null || dbschema_tDBOutput_6.trim().length() ==0) && defaultSchema_tDBOutput_6.equals(schema_tDBOutput_6)))) {
                                            whetherExist_tDBOutput_6 = true;
                                            break;
                                        }
                                    }
                                }
                                if(whetherExist_tDBOutput_6) {
                                    try (java.sql.Statement stmtDrop_tDBOutput_6 = conn_tDBOutput_6.createStatement()) {
                                        stmtDrop_tDBOutput_6.execute("DROP TABLE \"" + tableName_tDBOutput_6 + "\"" );
                                    }
                                }
                                try(java.sql.Statement stmtCreate_tDBOutput_6 = conn_tDBOutput_6.createStatement()) {
                                    stmtCreate_tDBOutput_6.execute("CREATE TABLE \"" + tableName_tDBOutput_6 + "\"(\"id\" INT4 ,\"person_uuid\" VARCHAR(230)  ,\"facility_id\" INT4 ,\"encounter_date\" DATE ,\"created_date\" TIMESTAMP ,\"last_modified_date\" TIMESTAMP(29)  ,\"created_by\" VARCHAR(230)  ,\"last_modified_by\" VARCHAR(239)  ,\"uuid\" VARCHAR ,\"visit_id\" VARCHAR(50)  ,\"archived\" INT4  not null ,\"body_weight\" FLOAT8 ,\"diastolic\" FLOAT8 ,\"systolic\" FLOAT8 ,\"height\" FLOAT8 ,\"temperature\" FLOAT8 ,\"pulse\" FLOAT8 ,\"respiratory_rate\" FLOAT8 ,primary key(\"id\"))");
                                }
	    java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_6 + "\" WHERE \"id\" = ?");
	    resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);
	    String insert_tDBOutput_6 = "INSERT INTO \"" + tableName_tDBOutput_6 + "\" (\"id\",\"person_uuid\",\"facility_id\",\"encounter_date\",\"created_date\",\"last_modified_date\",\"created_by\",\"last_modified_by\",\"uuid\",\"visit_id\",\"archived\",\"body_weight\",\"diastolic\",\"systolic\",\"height\",\"temperature\",\"pulse\",\"respiratory_rate\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_6 = conn_tDBOutput_6.prepareStatement(insert_tDBOutput_6);
	    resourceMap.put("pstmtInsert_tDBOutput_6", pstmtInsert_tDBOutput_6);
	    String update_tDBOutput_6 = "UPDATE \"" + tableName_tDBOutput_6 + "\" SET \"id\" = ?,\"person_uuid\" = ?,\"facility_id\" = ?,\"encounter_date\" = ?,\"created_date\" = ?,\"last_modified_date\" = ?,\"created_by\" = ?,\"last_modified_by\" = ?,\"uuid\" = ?,\"visit_id\" = ?,\"archived\" = ?,\"body_weight\" = ?,\"diastolic\" = ?,\"systolic\" = ?,\"height\" = ?,\"temperature\" = ?,\"pulse\" = ?,\"respiratory_rate\" = ? WHERE \"id\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_6 = conn_tDBOutput_6.prepareStatement(update_tDBOutput_6);
	    resourceMap.put("pstmtUpdate_tDBOutput_6", pstmtUpdate_tDBOutput_6);
	    

 



/**
 * [tDBOutput_6 begin ] stop
 */



	
	/**
	 * [tUniqRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_3", false);
		start_Hash.put("tUniqRow_3", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"check_duplicates");
					}
				
		int tos_count_tUniqRow_3 = 0;
		

	
		class KeyStruct_tUniqRow_3 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String uuid;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_3 other = (KeyStruct_tUniqRow_3) obj;
				
									if (this.uuid == null) {
										if (other.uuid != null) 
											return false;
								
									} else if (!this.uuid.equals(other.uuid))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_3 = 0;
int nb_duplicates_tUniqRow_3 = 0;
KeyStruct_tUniqRow_3 finder_tUniqRow_3 = new KeyStruct_tUniqRow_3();
java.util.Set<KeyStruct_tUniqRow_3> keystUniqRow_3 = new java.util.HashSet<KeyStruct_tUniqRow_3>(); 

 



/**
 * [tUniqRow_3 begin ] stop
 */



	
	/**
	 * [tSortRow_3_SortIn begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_3_SortIn", false);
		start_Hash.put("tSortRow_3_SortIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_3";
	
	currentComponent="tSortRow_3_SortIn";

	
		int tos_count_tSortRow_3_SortIn = 0;
		


Sort_clinicsStruct[] array_tSortRow_3_SortIn = (Sort_clinicsStruct[]) globalMap.remove("tSortRow_3");

int nb_line_tSortRow_3_SortIn = 0;

Sort_clinicsStruct current_tSortRow_3_SortIn = null;

for(int i_tSortRow_3_SortIn = 0; i_tSortRow_3_SortIn < array_tSortRow_3_SortIn.length; i_tSortRow_3_SortIn++){
	current_tSortRow_3_SortIn = array_tSortRow_3_SortIn[i_tSortRow_3_SortIn];
	check_duplicates.id = current_tSortRow_3_SortIn.id;
	check_duplicates.person_uuid = current_tSortRow_3_SortIn.person_uuid;
	check_duplicates.facility_id = current_tSortRow_3_SortIn.facility_id;
	check_duplicates.encounter_date = current_tSortRow_3_SortIn.encounter_date;
	check_duplicates.created_date = current_tSortRow_3_SortIn.created_date;
	check_duplicates.last_modified_date = current_tSortRow_3_SortIn.last_modified_date;
	check_duplicates.created_by = current_tSortRow_3_SortIn.created_by;
	check_duplicates.last_modified_by = current_tSortRow_3_SortIn.last_modified_by;
	check_duplicates.uuid = current_tSortRow_3_SortIn.uuid;
	check_duplicates.visit_id = current_tSortRow_3_SortIn.visit_id;
	check_duplicates.archived = current_tSortRow_3_SortIn.archived;
	check_duplicates.body_weight = current_tSortRow_3_SortIn.body_weight;
	check_duplicates.diastolic = current_tSortRow_3_SortIn.diastolic;
	check_duplicates.systolic = current_tSortRow_3_SortIn.systolic;
	check_duplicates.height = current_tSortRow_3_SortIn.height;
	check_duplicates.temperature = current_tSortRow_3_SortIn.temperature;
	check_duplicates.pulse = current_tSortRow_3_SortIn.pulse;
	check_duplicates.respiratory_rate = current_tSortRow_3_SortIn.respiratory_rate;
	// increase number of line sorted
	nb_line_tSortRow_3_SortIn++;

 



/**
 * [tSortRow_3_SortIn begin ] stop
 */
	
	/**
	 * [tSortRow_3_SortIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_3";
	
	currentComponent="tSortRow_3_SortIn";

	

 


	tos_count_tSortRow_3_SortIn++;

/**
 * [tSortRow_3_SortIn main ] stop
 */
	
	/**
	 * [tSortRow_3_SortIn process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_3";
	
	currentComponent="tSortRow_3_SortIn";

	

 



/**
 * [tSortRow_3_SortIn process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_3 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"check_duplicates");
					}
					
Duplicate_clinics = null;			Unique_clinics = null;			
if(check_duplicates.uuid == null){
	finder_tUniqRow_3.uuid = null;
}else{
	finder_tUniqRow_3.uuid = check_duplicates.uuid.toLowerCase();
}	
finder_tUniqRow_3.hashCodeDirty = true;
if (!keystUniqRow_3.contains(finder_tUniqRow_3)) {
		KeyStruct_tUniqRow_3 new_tUniqRow_3 = new KeyStruct_tUniqRow_3();

		
if(check_duplicates.uuid == null){
	new_tUniqRow_3.uuid = null;
}else{
	new_tUniqRow_3.uuid = check_duplicates.uuid.toLowerCase();
}
		
		keystUniqRow_3.add(new_tUniqRow_3);if(Unique_clinics == null){ 
	
	Unique_clinics = new Unique_clinicsStruct();
}Unique_clinics.id = check_duplicates.id;			Unique_clinics.person_uuid = check_duplicates.person_uuid;			Unique_clinics.facility_id = check_duplicates.facility_id;			Unique_clinics.encounter_date = check_duplicates.encounter_date;			Unique_clinics.created_date = check_duplicates.created_date;			Unique_clinics.last_modified_date = check_duplicates.last_modified_date;			Unique_clinics.created_by = check_duplicates.created_by;			Unique_clinics.last_modified_by = check_duplicates.last_modified_by;			Unique_clinics.uuid = check_duplicates.uuid;			Unique_clinics.visit_id = check_duplicates.visit_id;			Unique_clinics.archived = check_duplicates.archived;			Unique_clinics.body_weight = check_duplicates.body_weight;			Unique_clinics.diastolic = check_duplicates.diastolic;			Unique_clinics.systolic = check_duplicates.systolic;			Unique_clinics.height = check_duplicates.height;			Unique_clinics.temperature = check_duplicates.temperature;			Unique_clinics.pulse = check_duplicates.pulse;			Unique_clinics.respiratory_rate = check_duplicates.respiratory_rate;					
		nb_uniques_tUniqRow_3++;
	} else {
if(Duplicate_clinics == null){ 
	
	Duplicate_clinics = new Duplicate_clinicsStruct();
}				Duplicate_clinics.id = check_duplicates.id;			Duplicate_clinics.person_uuid = check_duplicates.person_uuid;			Duplicate_clinics.facility_id = check_duplicates.facility_id;			Duplicate_clinics.encounter_date = check_duplicates.encounter_date;			Duplicate_clinics.created_date = check_duplicates.created_date;			Duplicate_clinics.last_modified_date = check_duplicates.last_modified_date;			Duplicate_clinics.created_by = check_duplicates.created_by;			Duplicate_clinics.last_modified_by = check_duplicates.last_modified_by;			Duplicate_clinics.uuid = check_duplicates.uuid;			Duplicate_clinics.visit_id = check_duplicates.visit_id;			Duplicate_clinics.archived = check_duplicates.archived;			Duplicate_clinics.body_weight = check_duplicates.body_weight;			Duplicate_clinics.diastolic = check_duplicates.diastolic;			Duplicate_clinics.systolic = check_duplicates.systolic;			Duplicate_clinics.height = check_duplicates.height;			Duplicate_clinics.temperature = check_duplicates.temperature;			Duplicate_clinics.pulse = check_duplicates.pulse;			Duplicate_clinics.respiratory_rate = check_duplicates.respiratory_rate;			
	  nb_duplicates_tUniqRow_3++;
	}

 


	tos_count_tUniqRow_3++;

/**
 * [tUniqRow_3 main ] stop
 */
	
	/**
	 * [tUniqRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

 



/**
 * [tUniqRow_3 process_data_begin ] stop
 */
// Start of branch "Unique_clinics"
if(Unique_clinics != null) { 



	
	/**
	 * [tDBOutput_5 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Unique_clinics");
					}
					



        whetherReject_tDBOutput_5 = false;
                    if(Unique_clinics.id == null) {
pstmt_tDBOutput_5.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_5.setLong(1, Unique_clinics.id);
}

            int checkCount_tDBOutput_5 = -1;
            try (java.sql.ResultSet rs_tDBOutput_5 = pstmt_tDBOutput_5.executeQuery()) {
                while(rs_tDBOutput_5.next()) {
                    checkCount_tDBOutput_5 = rs_tDBOutput_5.getInt(1);
                }
            }
            if(checkCount_tDBOutput_5 > 0) {
                        if(Unique_clinics.id == null) {
pstmtUpdate_tDBOutput_5.setNull(1, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_5.setLong(1, Unique_clinics.id);
}

                        if(Unique_clinics.person_uuid == null) {
pstmtUpdate_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(2, Unique_clinics.person_uuid);
}

                        if(Unique_clinics.facility_id == null) {
pstmtUpdate_tDBOutput_5.setNull(3, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_5.setLong(3, Unique_clinics.facility_id);
}

                        if(Unique_clinics.encounter_date != null) {
pstmtUpdate_tDBOutput_5.setTimestamp(4, new java.sql.Timestamp(Unique_clinics.encounter_date.getTime()));
} else {
pstmtUpdate_tDBOutput_5.setNull(4, java.sql.Types.TIMESTAMP);
}

                        if(Unique_clinics.created_date != null) {
pstmtUpdate_tDBOutput_5.setTimestamp(5, new java.sql.Timestamp(Unique_clinics.created_date.getTime()));
} else {
pstmtUpdate_tDBOutput_5.setNull(5, java.sql.Types.TIMESTAMP);
}

                        if(Unique_clinics.last_modified_date != null) {
pstmtUpdate_tDBOutput_5.setTimestamp(6, new java.sql.Timestamp(Unique_clinics.last_modified_date.getTime()));
} else {
pstmtUpdate_tDBOutput_5.setNull(6, java.sql.Types.TIMESTAMP);
}

                        if(Unique_clinics.created_by == null) {
pstmtUpdate_tDBOutput_5.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(7, Unique_clinics.created_by);
}

                        if(Unique_clinics.last_modified_by == null) {
pstmtUpdate_tDBOutput_5.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(8, Unique_clinics.last_modified_by);
}

                        if(Unique_clinics.uuid == null) {
pstmtUpdate_tDBOutput_5.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(9, Unique_clinics.uuid);
}

                        if(Unique_clinics.visit_id == null) {
pstmtUpdate_tDBOutput_5.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(10, Unique_clinics.visit_id);
}

                        pstmtUpdate_tDBOutput_5.setInt(11, Unique_clinics.archived);

                        if(Unique_clinics.body_weight == null) {
pstmtUpdate_tDBOutput_5.setNull(12, java.sql.Types.DOUBLE);
} else {pstmtUpdate_tDBOutput_5.setDouble(12, Unique_clinics.body_weight);
}

                        if(Unique_clinics.diastolic == null) {
pstmtUpdate_tDBOutput_5.setNull(13, java.sql.Types.DOUBLE);
} else {pstmtUpdate_tDBOutput_5.setDouble(13, Unique_clinics.diastolic);
}

                        if(Unique_clinics.systolic == null) {
pstmtUpdate_tDBOutput_5.setNull(14, java.sql.Types.DOUBLE);
} else {pstmtUpdate_tDBOutput_5.setDouble(14, Unique_clinics.systolic);
}

                        if(Unique_clinics.height == null) {
pstmtUpdate_tDBOutput_5.setNull(15, java.sql.Types.DOUBLE);
} else {pstmtUpdate_tDBOutput_5.setDouble(15, Unique_clinics.height);
}

                        if(Unique_clinics.temperature == null) {
pstmtUpdate_tDBOutput_5.setNull(16, java.sql.Types.DOUBLE);
} else {pstmtUpdate_tDBOutput_5.setDouble(16, Unique_clinics.temperature);
}

                        if(Unique_clinics.pulse == null) {
pstmtUpdate_tDBOutput_5.setNull(17, java.sql.Types.DOUBLE);
} else {pstmtUpdate_tDBOutput_5.setDouble(17, Unique_clinics.pulse);
}

                        if(Unique_clinics.respiratory_rate == null) {
pstmtUpdate_tDBOutput_5.setNull(18, java.sql.Types.DOUBLE);
} else {pstmtUpdate_tDBOutput_5.setDouble(18, Unique_clinics.respiratory_rate);
}

                        if(Unique_clinics.id == null) {
pstmtUpdate_tDBOutput_5.setNull(19 + count_tDBOutput_5, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_5.setLong(19 + count_tDBOutput_5, Unique_clinics.id);
}

                try {
					
                    updatedCount_tDBOutput_5 = updatedCount_tDBOutput_5 + pstmtUpdate_tDBOutput_5.executeUpdate();
                    nb_line_tDBOutput_5++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_5 = true;
                        nb_line_tDBOutput_5++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(Unique_clinics.id == null) {
pstmtInsert_tDBOutput_5.setNull(1, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_5.setLong(1, Unique_clinics.id);
}

                        if(Unique_clinics.person_uuid == null) {
pstmtInsert_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(2, Unique_clinics.person_uuid);
}

                        if(Unique_clinics.facility_id == null) {
pstmtInsert_tDBOutput_5.setNull(3, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_5.setLong(3, Unique_clinics.facility_id);
}

                        if(Unique_clinics.encounter_date != null) {
pstmtInsert_tDBOutput_5.setTimestamp(4, new java.sql.Timestamp(Unique_clinics.encounter_date.getTime()));
} else {
pstmtInsert_tDBOutput_5.setNull(4, java.sql.Types.TIMESTAMP);
}

                        if(Unique_clinics.created_date != null) {
pstmtInsert_tDBOutput_5.setTimestamp(5, new java.sql.Timestamp(Unique_clinics.created_date.getTime()));
} else {
pstmtInsert_tDBOutput_5.setNull(5, java.sql.Types.TIMESTAMP);
}

                        if(Unique_clinics.last_modified_date != null) {
pstmtInsert_tDBOutput_5.setTimestamp(6, new java.sql.Timestamp(Unique_clinics.last_modified_date.getTime()));
} else {
pstmtInsert_tDBOutput_5.setNull(6, java.sql.Types.TIMESTAMP);
}

                        if(Unique_clinics.created_by == null) {
pstmtInsert_tDBOutput_5.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(7, Unique_clinics.created_by);
}

                        if(Unique_clinics.last_modified_by == null) {
pstmtInsert_tDBOutput_5.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(8, Unique_clinics.last_modified_by);
}

                        if(Unique_clinics.uuid == null) {
pstmtInsert_tDBOutput_5.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(9, Unique_clinics.uuid);
}

                        if(Unique_clinics.visit_id == null) {
pstmtInsert_tDBOutput_5.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(10, Unique_clinics.visit_id);
}

                        pstmtInsert_tDBOutput_5.setInt(11, Unique_clinics.archived);

                        if(Unique_clinics.body_weight == null) {
pstmtInsert_tDBOutput_5.setNull(12, java.sql.Types.DOUBLE);
} else {pstmtInsert_tDBOutput_5.setDouble(12, Unique_clinics.body_weight);
}

                        if(Unique_clinics.diastolic == null) {
pstmtInsert_tDBOutput_5.setNull(13, java.sql.Types.DOUBLE);
} else {pstmtInsert_tDBOutput_5.setDouble(13, Unique_clinics.diastolic);
}

                        if(Unique_clinics.systolic == null) {
pstmtInsert_tDBOutput_5.setNull(14, java.sql.Types.DOUBLE);
} else {pstmtInsert_tDBOutput_5.setDouble(14, Unique_clinics.systolic);
}

                        if(Unique_clinics.height == null) {
pstmtInsert_tDBOutput_5.setNull(15, java.sql.Types.DOUBLE);
} else {pstmtInsert_tDBOutput_5.setDouble(15, Unique_clinics.height);
}

                        if(Unique_clinics.temperature == null) {
pstmtInsert_tDBOutput_5.setNull(16, java.sql.Types.DOUBLE);
} else {pstmtInsert_tDBOutput_5.setDouble(16, Unique_clinics.temperature);
}

                        if(Unique_clinics.pulse == null) {
pstmtInsert_tDBOutput_5.setNull(17, java.sql.Types.DOUBLE);
} else {pstmtInsert_tDBOutput_5.setDouble(17, Unique_clinics.pulse);
}

                        if(Unique_clinics.respiratory_rate == null) {
pstmtInsert_tDBOutput_5.setNull(18, java.sql.Types.DOUBLE);
} else {pstmtInsert_tDBOutput_5.setDouble(18, Unique_clinics.respiratory_rate);
}

                try {
					
                    insertedCount_tDBOutput_5 = insertedCount_tDBOutput_5 + pstmtInsert_tDBOutput_5.executeUpdate();
                    nb_line_tDBOutput_5++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_5 = true;
                        nb_line_tDBOutput_5++;
                            System.err.print(e.getMessage());
                }
            }
            if(!whetherReject_tDBOutput_5) {
            }
    		    commitCounter_tDBOutput_5++;
                if(commitEvery_tDBOutput_5 <= commitCounter_tDBOutput_5) {
                	conn_tDBOutput_5.commit();
                	
                	commitCounter_tDBOutput_5=0;
                }

 


	tos_count_tDBOutput_5++;

/**
 * [tDBOutput_5 main ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_end ] stop
 */

} // End of branch "Unique_clinics"




// Start of branch "Duplicate_clinics"
if(Duplicate_clinics != null) { 



	
	/**
	 * [tDBOutput_6 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Duplicate_clinics");
					}
					



        whetherReject_tDBOutput_6 = false;
                    if(Duplicate_clinics.id == null) {
pstmt_tDBOutput_6.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_6.setLong(1, Duplicate_clinics.id);
}

            int checkCount_tDBOutput_6 = -1;
            try (java.sql.ResultSet rs_tDBOutput_6 = pstmt_tDBOutput_6.executeQuery()) {
                while(rs_tDBOutput_6.next()) {
                    checkCount_tDBOutput_6 = rs_tDBOutput_6.getInt(1);
                }
            }
            if(checkCount_tDBOutput_6 > 0) {
                        if(Duplicate_clinics.id == null) {
pstmtUpdate_tDBOutput_6.setNull(1, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_6.setLong(1, Duplicate_clinics.id);
}

                        if(Duplicate_clinics.person_uuid == null) {
pstmtUpdate_tDBOutput_6.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_6.setString(2, Duplicate_clinics.person_uuid);
}

                        if(Duplicate_clinics.facility_id == null) {
pstmtUpdate_tDBOutput_6.setNull(3, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_6.setLong(3, Duplicate_clinics.facility_id);
}

                        if(Duplicate_clinics.encounter_date != null) {
pstmtUpdate_tDBOutput_6.setTimestamp(4, new java.sql.Timestamp(Duplicate_clinics.encounter_date.getTime()));
} else {
pstmtUpdate_tDBOutput_6.setNull(4, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_clinics.created_date != null) {
pstmtUpdate_tDBOutput_6.setTimestamp(5, new java.sql.Timestamp(Duplicate_clinics.created_date.getTime()));
} else {
pstmtUpdate_tDBOutput_6.setNull(5, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_clinics.last_modified_date != null) {
pstmtUpdate_tDBOutput_6.setTimestamp(6, new java.sql.Timestamp(Duplicate_clinics.last_modified_date.getTime()));
} else {
pstmtUpdate_tDBOutput_6.setNull(6, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_clinics.created_by == null) {
pstmtUpdate_tDBOutput_6.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_6.setString(7, Duplicate_clinics.created_by);
}

                        if(Duplicate_clinics.last_modified_by == null) {
pstmtUpdate_tDBOutput_6.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_6.setString(8, Duplicate_clinics.last_modified_by);
}

                        if(Duplicate_clinics.uuid == null) {
pstmtUpdate_tDBOutput_6.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_6.setString(9, Duplicate_clinics.uuid);
}

                        if(Duplicate_clinics.visit_id == null) {
pstmtUpdate_tDBOutput_6.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_6.setString(10, Duplicate_clinics.visit_id);
}

                        pstmtUpdate_tDBOutput_6.setInt(11, Duplicate_clinics.archived);

                        if(Duplicate_clinics.body_weight == null) {
pstmtUpdate_tDBOutput_6.setNull(12, java.sql.Types.DOUBLE);
} else {pstmtUpdate_tDBOutput_6.setDouble(12, Duplicate_clinics.body_weight);
}

                        if(Duplicate_clinics.diastolic == null) {
pstmtUpdate_tDBOutput_6.setNull(13, java.sql.Types.DOUBLE);
} else {pstmtUpdate_tDBOutput_6.setDouble(13, Duplicate_clinics.diastolic);
}

                        if(Duplicate_clinics.systolic == null) {
pstmtUpdate_tDBOutput_6.setNull(14, java.sql.Types.DOUBLE);
} else {pstmtUpdate_tDBOutput_6.setDouble(14, Duplicate_clinics.systolic);
}

                        if(Duplicate_clinics.height == null) {
pstmtUpdate_tDBOutput_6.setNull(15, java.sql.Types.DOUBLE);
} else {pstmtUpdate_tDBOutput_6.setDouble(15, Duplicate_clinics.height);
}

                        if(Duplicate_clinics.temperature == null) {
pstmtUpdate_tDBOutput_6.setNull(16, java.sql.Types.DOUBLE);
} else {pstmtUpdate_tDBOutput_6.setDouble(16, Duplicate_clinics.temperature);
}

                        if(Duplicate_clinics.pulse == null) {
pstmtUpdate_tDBOutput_6.setNull(17, java.sql.Types.DOUBLE);
} else {pstmtUpdate_tDBOutput_6.setDouble(17, Duplicate_clinics.pulse);
}

                        if(Duplicate_clinics.respiratory_rate == null) {
pstmtUpdate_tDBOutput_6.setNull(18, java.sql.Types.DOUBLE);
} else {pstmtUpdate_tDBOutput_6.setDouble(18, Duplicate_clinics.respiratory_rate);
}

                        if(Duplicate_clinics.id == null) {
pstmtUpdate_tDBOutput_6.setNull(19 + count_tDBOutput_6, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_6.setLong(19 + count_tDBOutput_6, Duplicate_clinics.id);
}

                try {
					
                    updatedCount_tDBOutput_6 = updatedCount_tDBOutput_6 + pstmtUpdate_tDBOutput_6.executeUpdate();
                    nb_line_tDBOutput_6++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_6 = true;
                        nb_line_tDBOutput_6++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(Duplicate_clinics.id == null) {
pstmtInsert_tDBOutput_6.setNull(1, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_6.setLong(1, Duplicate_clinics.id);
}

                        if(Duplicate_clinics.person_uuid == null) {
pstmtInsert_tDBOutput_6.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_6.setString(2, Duplicate_clinics.person_uuid);
}

                        if(Duplicate_clinics.facility_id == null) {
pstmtInsert_tDBOutput_6.setNull(3, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_6.setLong(3, Duplicate_clinics.facility_id);
}

                        if(Duplicate_clinics.encounter_date != null) {
pstmtInsert_tDBOutput_6.setTimestamp(4, new java.sql.Timestamp(Duplicate_clinics.encounter_date.getTime()));
} else {
pstmtInsert_tDBOutput_6.setNull(4, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_clinics.created_date != null) {
pstmtInsert_tDBOutput_6.setTimestamp(5, new java.sql.Timestamp(Duplicate_clinics.created_date.getTime()));
} else {
pstmtInsert_tDBOutput_6.setNull(5, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_clinics.last_modified_date != null) {
pstmtInsert_tDBOutput_6.setTimestamp(6, new java.sql.Timestamp(Duplicate_clinics.last_modified_date.getTime()));
} else {
pstmtInsert_tDBOutput_6.setNull(6, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_clinics.created_by == null) {
pstmtInsert_tDBOutput_6.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_6.setString(7, Duplicate_clinics.created_by);
}

                        if(Duplicate_clinics.last_modified_by == null) {
pstmtInsert_tDBOutput_6.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_6.setString(8, Duplicate_clinics.last_modified_by);
}

                        if(Duplicate_clinics.uuid == null) {
pstmtInsert_tDBOutput_6.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_6.setString(9, Duplicate_clinics.uuid);
}

                        if(Duplicate_clinics.visit_id == null) {
pstmtInsert_tDBOutput_6.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_6.setString(10, Duplicate_clinics.visit_id);
}

                        pstmtInsert_tDBOutput_6.setInt(11, Duplicate_clinics.archived);

                        if(Duplicate_clinics.body_weight == null) {
pstmtInsert_tDBOutput_6.setNull(12, java.sql.Types.DOUBLE);
} else {pstmtInsert_tDBOutput_6.setDouble(12, Duplicate_clinics.body_weight);
}

                        if(Duplicate_clinics.diastolic == null) {
pstmtInsert_tDBOutput_6.setNull(13, java.sql.Types.DOUBLE);
} else {pstmtInsert_tDBOutput_6.setDouble(13, Duplicate_clinics.diastolic);
}

                        if(Duplicate_clinics.systolic == null) {
pstmtInsert_tDBOutput_6.setNull(14, java.sql.Types.DOUBLE);
} else {pstmtInsert_tDBOutput_6.setDouble(14, Duplicate_clinics.systolic);
}

                        if(Duplicate_clinics.height == null) {
pstmtInsert_tDBOutput_6.setNull(15, java.sql.Types.DOUBLE);
} else {pstmtInsert_tDBOutput_6.setDouble(15, Duplicate_clinics.height);
}

                        if(Duplicate_clinics.temperature == null) {
pstmtInsert_tDBOutput_6.setNull(16, java.sql.Types.DOUBLE);
} else {pstmtInsert_tDBOutput_6.setDouble(16, Duplicate_clinics.temperature);
}

                        if(Duplicate_clinics.pulse == null) {
pstmtInsert_tDBOutput_6.setNull(17, java.sql.Types.DOUBLE);
} else {pstmtInsert_tDBOutput_6.setDouble(17, Duplicate_clinics.pulse);
}

                        if(Duplicate_clinics.respiratory_rate == null) {
pstmtInsert_tDBOutput_6.setNull(18, java.sql.Types.DOUBLE);
} else {pstmtInsert_tDBOutput_6.setDouble(18, Duplicate_clinics.respiratory_rate);
}

                try {
					
                    insertedCount_tDBOutput_6 = insertedCount_tDBOutput_6 + pstmtInsert_tDBOutput_6.executeUpdate();
                    nb_line_tDBOutput_6++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_6 = true;
                        nb_line_tDBOutput_6++;
                            System.err.print(e.getMessage());
                }
            }
    		    commitCounter_tDBOutput_6++;
                if(commitEvery_tDBOutput_6 <= commitCounter_tDBOutput_6) {
                	conn_tDBOutput_6.commit();
                	
                	commitCounter_tDBOutput_6=0;
                }

 


	tos_count_tDBOutput_6++;

/**
 * [tDBOutput_6 main ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

 



/**
 * [tDBOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

 



/**
 * [tDBOutput_6 process_data_end ] stop
 */

} // End of branch "Duplicate_clinics"




	
	/**
	 * [tUniqRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

 



/**
 * [tUniqRow_3 process_data_end ] stop
 */



	
	/**
	 * [tSortRow_3_SortIn process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_3";
	
	currentComponent="tSortRow_3_SortIn";

	

 



/**
 * [tSortRow_3_SortIn process_data_end ] stop
 */
	
	/**
	 * [tSortRow_3_SortIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_3";
	
	currentComponent="tSortRow_3_SortIn";

	


}

globalMap.put("tSortRow_3_SortIn_NB_LINE",nb_line_tSortRow_3_SortIn);

 

ok_Hash.put("tSortRow_3_SortIn", true);
end_Hash.put("tSortRow_3_SortIn", System.currentTimeMillis());




/**
 * [tSortRow_3_SortIn end ] stop
 */

	
	/**
	 * [tUniqRow_3 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

globalMap.put("tUniqRow_3_NB_UNIQUES",nb_uniques_tUniqRow_3);
globalMap.put("tUniqRow_3_NB_DUPLICATES",nb_duplicates_tUniqRow_3);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"check_duplicates");
			  	}
			  	
 

ok_Hash.put("tUniqRow_3", true);
end_Hash.put("tUniqRow_3", System.currentTimeMillis());




/**
 * [tUniqRow_3 end ] stop
 */

	
	/**
	 * [tDBOutput_5 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



        if(pstmtUpdate_tDBOutput_5 != null){
            pstmtUpdate_tDBOutput_5.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_5");
        }
        if(pstmtInsert_tDBOutput_5 != null){
            pstmtInsert_tDBOutput_5.close();
            resourceMap.remove("pstmtInsert_tDBOutput_5");
        }
        if(pstmt_tDBOutput_5 != null) {
            pstmt_tDBOutput_5.close();
            resourceMap.remove("pstmt_tDBOutput_5");
        }
    resourceMap.put("statementClosed_tDBOutput_5", true);
			
			conn_tDBOutput_5.commit();
			
		
    	conn_tDBOutput_5 .close();
    	
    	resourceMap.put("finish_tDBOutput_5", true);
    	

	nb_line_deleted_tDBOutput_5=nb_line_deleted_tDBOutput_5+ deletedCount_tDBOutput_5;
	nb_line_update_tDBOutput_5=nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
	nb_line_inserted_tDBOutput_5=nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
	nb_line_rejected_tDBOutput_5=nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;
	
        globalMap.put("tDBOutput_5_NB_LINE",nb_line_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_UPDATED",nb_line_update_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_DELETED",nb_line_deleted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Unique_clinics");
			  	}
			  	
 

ok_Hash.put("tDBOutput_5", true);
end_Hash.put("tDBOutput_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJava_3Process(globalMap);



/**
 * [tDBOutput_5 end ] stop
 */




	
	/**
	 * [tDBOutput_6 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	



        if(pstmtUpdate_tDBOutput_6 != null){
            pstmtUpdate_tDBOutput_6.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_6");
        }
        if(pstmtInsert_tDBOutput_6 != null){
            pstmtInsert_tDBOutput_6.close();
            resourceMap.remove("pstmtInsert_tDBOutput_6");
        }
        if(pstmt_tDBOutput_6 != null) {
            pstmt_tDBOutput_6.close();
            resourceMap.remove("pstmt_tDBOutput_6");
        }
    resourceMap.put("statementClosed_tDBOutput_6", true);
			
			conn_tDBOutput_6.commit();
			
		
    	conn_tDBOutput_6 .close();
    	
    	resourceMap.put("finish_tDBOutput_6", true);
    	

	nb_line_deleted_tDBOutput_6=nb_line_deleted_tDBOutput_6+ deletedCount_tDBOutput_6;
	nb_line_update_tDBOutput_6=nb_line_update_tDBOutput_6 + updatedCount_tDBOutput_6;
	nb_line_inserted_tDBOutput_6=nb_line_inserted_tDBOutput_6 + insertedCount_tDBOutput_6;
	nb_line_rejected_tDBOutput_6=nb_line_rejected_tDBOutput_6 + rejectedCount_tDBOutput_6;
	
        globalMap.put("tDBOutput_6_NB_LINE",nb_line_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_UPDATED",nb_line_update_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_DELETED",nb_line_deleted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_6);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Duplicate_clinics");
			  	}
			  	
 

ok_Hash.put("tDBOutput_6", true);
end_Hash.put("tDBOutput_6", System.currentTimeMillis());




/**
 * [tDBOutput_6 end ] stop
 */















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tSortRow_3_SortIn"
							globalMap.remove("tSortRow_3");
						
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_extract_facilitis"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_9 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tSortRow_3_SortOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_3";
	
	currentComponent="tSortRow_3_SortOut";

	

 



/**
 * [tSortRow_3_SortOut finally ] stop
 */

	
	/**
	 * [tSortRow_3_SortIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_3";
	
	currentComponent="tSortRow_3_SortIn";

	

 



/**
 * [tSortRow_3_SortIn finally ] stop
 */

	
	/**
	 * [tUniqRow_3 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

 



/**
 * [tUniqRow_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_5 = null;
                if ((pstmtUpdateToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_5")) != null) {
                    pstmtUpdateToClose_tDBOutput_5.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_5 = null;
                if ((pstmtInsertToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_5")) != null) {
                    pstmtInsertToClose_tDBOutput_5.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
                if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_5")) != null) {
                    pstmtToClose_tDBOutput_5.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_5") == null){
            java.sql.Connection ctn_tDBOutput_5 = null;
            if((ctn_tDBOutput_5 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_5")) != null){
                try {
                    ctn_tDBOutput_5.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_5) {
                    String errorMessage_tDBOutput_5 = "failed to close the connection in tDBOutput_5 :" + sqlEx_tDBOutput_5.getMessage();
                    System.err.println(errorMessage_tDBOutput_5);
                }
            }
        }
    }
 



/**
 * [tDBOutput_5 finally ] stop
 */




	
	/**
	 * [tDBOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_6 = null;
                if ((pstmtUpdateToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_6")) != null) {
                    pstmtUpdateToClose_tDBOutput_6.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_6 = null;
                if ((pstmtInsertToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_6")) != null) {
                    pstmtInsertToClose_tDBOutput_6.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
                if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_6")) != null) {
                    pstmtToClose_tDBOutput_6.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_6") == null){
            java.sql.Connection ctn_tDBOutput_6 = null;
            if((ctn_tDBOutput_6 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_6")) != null){
                try {
                    ctn_tDBOutput_6.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_6) {
                    String errorMessage_tDBOutput_6 = "failed to close the connection in tDBOutput_6 :" + sqlEx_tDBOutput_6.getMessage();
                    System.err.println(errorMessage_tDBOutput_6);
                }
            }
        }
    }
 



/**
 * [tDBOutput_6 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}
	

public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";

	
		int tos_count_tJava_3 = 0;
		


int totalMigrated = globalMap.get("tDBOutput_5_NB_LINE_UPDATED") != null ? (Integer)globalMap.get("tDBOutput_5_NB_LINE_UPDATED") : 0;

System.out.println("Total triage_vital_sign already migrated "+totalMigrated);

System.out.println("Total new records migrated - "+globalMap.get("tDBOutput_5_NB_LINE_INSERTED"));
if(globalMap.get("tDBOutput_5_ERROR_MESSAGE") != null){
System.out.println("Migration Error - "+globalMap.get("tDBOutput_5_ERROR_MESSAGE"));
}
System.out.println("Total erroneous records not migrated - "+globalMap.get("tFileOutputDelimited_5_NB_LINE"));

java.time.LocalDateTime endTime = java.time.LocalDateTime.now();
System.out.println("End time - "+ endTime);
java.time.LocalDateTime statTime = (java.time.LocalDateTime)globalMap.get("startTime");

java.time.Duration duration = java.time.Duration.between(statTime, endTime);
System.out.println("Duration - "+ duration);

System.out.println("*************TRIAGE VITAL SIGN END*****************");
System.out.println("****************************************************************");
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());




/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	

public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";

	
		int tos_count_tJava_2 = 0;
		


System.out.println("Total Patient's vital fetched from triage_vital_sign_stage - "+globalMap.get("tDBInput_9_NB_LINE"));
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


System.out.println("*****************************************************************");
System.out.println("***********TRIAGE VITAL SIGN MIGRATION REPORT START*****************");
java.time.LocalDateTime startTime = java.time.LocalDateTime.now();
globalMap.put("startTime", startTime);
System.out.println("Start time - "+ startTime);

System.out.println("Total Patient's vital stage fetched from LAMIS3 clinic - "+globalMap.get("tDBInput_1_NB_LINE"));
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class extract_facilitisStruct implements routines.system.IPersistableComparableLookupRow<extract_facilitisStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String orgunit_name;

				public String getOrgunit_name () {
					return this.orgunit_name;
				}
				
			    public String datim_code;

				public String getDatim_code () {
					return this.datim_code;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.datim_code == null) ? 0 : this.datim_code.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final extract_facilitisStruct other = (extract_facilitisStruct) obj;
		
						if (this.datim_code == null) {
							if (other.datim_code != null)
								return false;
						
						} else if (!this.datim_code.equals(other.datim_code))
						
							return false;
					

		return true;
    }

	public void copyDataTo(extract_facilitisStruct other) {

		other.id = this.id;
	            other.name = this.name;
	            other.orgunit_name = this.orgunit_name;
	            other.datim_code = this.datim_code;
	            
	}

	public void copyKeysDataTo(extract_facilitisStruct other) {

		other.datim_code = this.datim_code;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Triage_Vital_Signs) {

        	try {

        		int length = 0;
		
					this.datim_code = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.datim_code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readLong();
					
						this.name = readString(dis,ois);
					
						this.orgunit_name = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeLong(this.id);
					
						writeString(this.name, dos, oos);
					
						writeString(this.orgunit_name, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",orgunit_name="+orgunit_name);
		sb.append(",datim_code="+datim_code);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(extract_facilitisStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.datim_code, other.datim_code);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		extract_facilitisStruct extract_facilitis = new extract_facilitisStruct();




	
	/**
	 * [tAdvancedHash_extract_facilitis begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_extract_facilitis", false);
		start_Hash.put("tAdvancedHash_extract_facilitis", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_extract_facilitis";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"extract_facilitis");
					}
				
		int tos_count_tAdvancedHash_extract_facilitis = 0;
		

			   		// connection name:extract_facilitis
			   		// source node:tDBInput_10 - inputs:(after_tDBInput_9) outputs:(extract_facilitis,extract_facilitis) | target node:tAdvancedHash_extract_facilitis - inputs:(extract_facilitis) outputs:()
			   		// linked node: tMap_5 - inputs:(extract_vistits,extract_facilitis) outputs:(Sort_clinics)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_extract_facilitis = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<extract_facilitisStruct> tHash_Lookup_extract_facilitis =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<extract_facilitisStruct>getLookup(matchingModeEnum_extract_facilitis);
	   						   
		   	   	   globalMap.put("tHash_Lookup_extract_facilitis", tHash_Lookup_extract_facilitis);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_extract_facilitis begin ] stop
 */



	
	/**
	 * [tDBInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_10", false);
		start_Hash.put("tDBInput_10", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_10";

	
		int tos_count_tDBInput_10 = 0;
		
	
    
	
		    int nb_line_tDBInput_10 = 0;
		    java.sql.Connection conn_tDBInput_10 = null;
				String driverClass_tDBInput_10 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_10 = java.lang.Class.forName(driverClass_tDBInput_10);
				String dbUser_tDBInput_10 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_10 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_10 = decryptedPassword_tDBInput_10;
				
				String url_tDBInput_10 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_10 = java.sql.DriverManager.getConnection(url_tDBInput_10,dbUser_tDBInput_10,dbPwd_tDBInput_10);
		        
				conn_tDBInput_10.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_10 = conn_tDBInput_10.createStatement();

		    String dbquery_tDBInput_10 = "SELECT facility.id,\n	facility.name,\n	orgunit.name as orgunit_name,\n	oid.code as datim_code\nFROM base_organisation_u"
+"nit facility\nJOIN base_organisation_unit orgunit\nON facility.parent_organisation_unit_id = orgunit.id\nJOIN base_organ"
+"isation_unit_identifier oid\nON facility.id = oid.organisation_unit_id\nWHERE facility.organisation_unit_level_id =4 AND"
+" EXISTS(\nSELECT * FROM public.dblink\n('lamis',\n'SELECT DISTINCT \n	fc.id as id, \n	fc.name AS facility_name,\n	lg.nam"
+"e AS lga_name, \n	nf.datim_id AS datim_id\n FROM public.patient ps\n INNER JOIN facility fc\n  ON ps.facility_id=fc.id\n"
+" INNER JOIN lga lg\n  ON fc.lga_id=lg.id\nINNER JOIN ndr_facility nf\n  ON nf.id=ps.facility_id'\n) AS DATA(\n		id INTEG"
+"ER,\n		facility_name VARCHAR,\n		lga_name VARCHAR,\n		datim_id VARCHAR\n	)\nWHERE oid.code=datim_id\n)\nORDER BY facilit"
+"y.id ASC";
			

            	globalMap.put("tDBInput_10_QUERY",dbquery_tDBInput_10);
		    java.sql.ResultSet rs_tDBInput_10 = null;

		    try {
		    	rs_tDBInput_10 = stmt_tDBInput_10.executeQuery(dbquery_tDBInput_10);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_10 = rs_tDBInput_10.getMetaData();
		    	int colQtyInRs_tDBInput_10 = rsmd_tDBInput_10.getColumnCount();

		    String tmpContent_tDBInput_10 = null;
		    
		    
		    while (rs_tDBInput_10.next()) {
		        nb_line_tDBInput_10++;
		        
							if(colQtyInRs_tDBInput_10 < 1) {
								extract_facilitis.id = 0;
							} else {
		                          
            extract_facilitis.id = rs_tDBInput_10.getLong(1);
            if(rs_tDBInput_10.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 2) {
								extract_facilitis.name = null;
							} else {
	                         		
        	extract_facilitis.name = routines.system.JDBCUtil.getString(rs_tDBInput_10, 2, false);
		                    }
							if(colQtyInRs_tDBInput_10 < 3) {
								extract_facilitis.orgunit_name = null;
							} else {
	                         		
        	extract_facilitis.orgunit_name = routines.system.JDBCUtil.getString(rs_tDBInput_10, 3, false);
		                    }
							if(colQtyInRs_tDBInput_10 < 4) {
								extract_facilitis.datim_code = null;
							} else {
	                         		
        	extract_facilitis.datim_code = routines.system.JDBCUtil.getString(rs_tDBInput_10, 4, false);
		                    }
					


 



/**
 * [tDBInput_10 begin ] stop
 */
	
	/**
	 * [tDBInput_10 main ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 


	tos_count_tDBInput_10++;

/**
 * [tDBInput_10 main ] stop
 */
	
	/**
	 * [tDBInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_extract_facilitis main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_extract_facilitis";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"extract_facilitis");
					}
					


			   
			   

					extract_facilitisStruct extract_facilitis_HashRow = new extract_facilitisStruct();
		   	   	   
				
				extract_facilitis_HashRow.id = extract_facilitis.id;
				
				extract_facilitis_HashRow.name = extract_facilitis.name;
				
				extract_facilitis_HashRow.orgunit_name = extract_facilitis.orgunit_name;
				
				extract_facilitis_HashRow.datim_code = extract_facilitis.datim_code;
				
			tHash_Lookup_extract_facilitis.put(extract_facilitis_HashRow);
			
            




 


	tos_count_tAdvancedHash_extract_facilitis++;

/**
 * [tAdvancedHash_extract_facilitis main ] stop
 */
	
	/**
	 * [tAdvancedHash_extract_facilitis process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_extract_facilitis";

	

 



/**
 * [tAdvancedHash_extract_facilitis process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_extract_facilitis process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_extract_facilitis";

	

 



/**
 * [tAdvancedHash_extract_facilitis process_data_end ] stop
 */



	
	/**
	 * [tDBInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_10 end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

	}
}finally{
	if (rs_tDBInput_10 != null) {
		rs_tDBInput_10.close();
	}
	if (stmt_tDBInput_10 != null) {
		stmt_tDBInput_10.close();
	}
	if(conn_tDBInput_10 != null && !conn_tDBInput_10.isClosed()) {
		
			conn_tDBInput_10.commit();
			
		
			conn_tDBInput_10.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_10_NB_LINE",nb_line_tDBInput_10);
 

ok_Hash.put("tDBInput_10", true);
end_Hash.put("tDBInput_10", System.currentTimeMillis());




/**
 * [tDBInput_10 end ] stop
 */

	
	/**
	 * [tAdvancedHash_extract_facilitis end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_extract_facilitis";

	

tHash_Lookup_extract_facilitis.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"extract_facilitis");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_extract_facilitis", true);
end_Hash.put("tAdvancedHash_extract_facilitis", System.currentTimeMillis());




/**
 * [tAdvancedHash_extract_facilitis end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_10 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_extract_facilitis finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_extract_facilitis";

	

 



/**
 * [tAdvancedHash_extract_facilitis finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class patient_visitStruct implements routines.system.IPersistableComparableLookupRow<patient_visitStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public Long facility_id;

				public Long getFacility_id () {
					return this.facility_id;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public java.util.Date visit_start_date;

				public java.util.Date getVisit_start_date () {
					return this.visit_start_date;
				}
				
			    public java.util.Date visit_end_date;

				public java.util.Date getVisit_end_date () {
					return this.visit_end_date;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.person_uuid == null) ? 0 : this.person_uuid.hashCode());
					
						result = prime * result + ((this.visit_start_date == null) ? 0 : this.visit_start_date.hashCode());
					
						result = prime * result + ((this.visit_end_date == null) ? 0 : this.visit_end_date.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final patient_visitStruct other = (patient_visitStruct) obj;
		
						if (this.person_uuid == null) {
							if (other.person_uuid != null)
								return false;
						
						} else if (!this.person_uuid.equals(other.person_uuid))
						
							return false;
					
						if (this.visit_start_date == null) {
							if (other.visit_start_date != null)
								return false;
						
						} else if (!this.visit_start_date.equals(other.visit_start_date))
						
							return false;
					
						if (this.visit_end_date == null) {
							if (other.visit_end_date != null)
								return false;
						
						} else if (!this.visit_end_date.equals(other.visit_end_date))
						
							return false;
					

		return true;
    }

	public void copyDataTo(patient_visitStruct other) {

		other.id = this.id;
	            other.created_date = this.created_date;
	            other.created_by = this.created_by;
	            other.last_modified_date = this.last_modified_date;
	            other.last_modified_by = this.last_modified_by;
	            other.facility_id = this.facility_id;
	            other.person_uuid = this.person_uuid;
	            other.visit_start_date = this.visit_start_date;
	            other.visit_end_date = this.visit_end_date;
	            other.uuid = this.uuid;
	            other.archived = this.archived;
	            
	}

	public void copyKeysDataTo(patient_visitStruct other) {

		other.person_uuid = this.person_uuid;
	            	other.visit_start_date = this.visit_start_date;
	            	other.visit_end_date = this.visit_end_date;
	            	
	}




	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_Triage_Vital_Signs, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_Triage_Vital_Signs) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
					this.visit_start_date = readDate(dis);
					
					this.visit_end_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
					// java.util.Date
				
						writeDate(this.visit_start_date,dos);
					
					// java.util.Date
				
						writeDate(this.visit_end_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
						this.created_date = readDate(dis,ois);
					
						this.created_by = readString(dis,ois);
					
						this.last_modified_date = readDate(dis,ois);
					
						this.last_modified_by = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.facility_id = null;
           				} else {
           			    	this.facility_id = dis.readLong();
           				}
					
						this.uuid = readString(dis,ois);
					
						this.archived = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
						writeDate(this.created_date, dos, oos);
					
						writeString(this.created_by, dos, oos);
					
						writeDate(this.last_modified_date, dos, oos);
					
						writeString(this.last_modified_by, dos, oos);
					
						if(this.facility_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.facility_id);
		            	}
					
						writeString(this.uuid, dos, oos);
					
					writeInteger(this.archived, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",visit_start_date="+String.valueOf(visit_start_date));
		sb.append(",visit_end_date="+String.valueOf(visit_end_date));
		sb.append(",uuid="+uuid);
		sb.append(",archived="+String.valueOf(archived));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(patient_visitStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.person_uuid, other.person_uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.visit_start_date, other.visit_start_date);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.visit_end_date, other.visit_end_date);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		patient_visitStruct patient_visit = new patient_visitStruct();




	
	/**
	 * [tAdvancedHash_patient_visit begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_patient_visit", false);
		start_Hash.put("tAdvancedHash_patient_visit", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_patient_visit";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"patient_visit");
					}
				
		int tos_count_tAdvancedHash_patient_visit = 0;
		

			   		// connection name:patient_visit
			   		// source node:tDBInput_2 - inputs:(after_tDBInput_1) outputs:(patient_visit,patient_visit) | target node:tAdvancedHash_patient_visit - inputs:(patient_visit) outputs:()
			   		// linked node: tMap_1 - inputs:(clinic_triage,patient_visit) outputs:(extract)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_patient_visit = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<patient_visitStruct> tHash_Lookup_patient_visit =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<patient_visitStruct>getLookup(matchingModeEnum_patient_visit);
	   						   
		   	   	   globalMap.put("tHash_Lookup_patient_visit", tHash_Lookup_patient_visit);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_patient_visit begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_2 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
				String url_tDBInput_2 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
				conn_tDBInput_2.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT * FROM patient_visit vs";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								patient_visit.id = 0;
							} else {
		                          
            patient_visit.id = rs_tDBInput_2.getInt(1);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								patient_visit.created_date = null;
							} else {
										
			patient_visit.created_date = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 2);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								patient_visit.created_by = null;
							} else {
	                         		
        	patient_visit.created_by = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								patient_visit.last_modified_date = null;
							} else {
										
			patient_visit.last_modified_date = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 4);
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								patient_visit.last_modified_by = null;
							} else {
	                         		
        	patient_visit.last_modified_by = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								patient_visit.facility_id = null;
							} else {
		                          
            patient_visit.facility_id = rs_tDBInput_2.getLong(6);
            if(rs_tDBInput_2.wasNull()){
                    patient_visit.facility_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								patient_visit.person_uuid = null;
							} else {
	                         		
        	patient_visit.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								patient_visit.visit_start_date = null;
							} else {
										
			patient_visit.visit_start_date = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 8);
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								patient_visit.visit_end_date = null;
							} else {
										
			patient_visit.visit_end_date = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 9);
		                    }
							if(colQtyInRs_tDBInput_2 < 10) {
								patient_visit.uuid = null;
							} else {
	                         		
        	patient_visit.uuid = routines.system.JDBCUtil.getString(rs_tDBInput_2, 10, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 11) {
								patient_visit.archived = null;
							} else {
		                          
            patient_visit.archived = rs_tDBInput_2.getInt(11);
            if(rs_tDBInput_2.wasNull()){
                    patient_visit.archived = null;
            }
		                    }
					


 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_patient_visit main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_patient_visit";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"patient_visit");
					}
					


			   
			   

					patient_visitStruct patient_visit_HashRow = new patient_visitStruct();
		   	   	   
				
				patient_visit_HashRow.id = patient_visit.id;
				
				patient_visit_HashRow.created_date = patient_visit.created_date;
				
				patient_visit_HashRow.created_by = patient_visit.created_by;
				
				patient_visit_HashRow.last_modified_date = patient_visit.last_modified_date;
				
				patient_visit_HashRow.last_modified_by = patient_visit.last_modified_by;
				
				patient_visit_HashRow.facility_id = patient_visit.facility_id;
				
				patient_visit_HashRow.person_uuid = patient_visit.person_uuid;
				
				patient_visit_HashRow.visit_start_date = patient_visit.visit_start_date;
				
				patient_visit_HashRow.visit_end_date = patient_visit.visit_end_date;
				
				patient_visit_HashRow.uuid = patient_visit.uuid;
				
				patient_visit_HashRow.archived = patient_visit.archived;
				
			tHash_Lookup_patient_visit.put(patient_visit_HashRow);
			
            




 


	tos_count_tAdvancedHash_patient_visit++;

/**
 * [tAdvancedHash_patient_visit main ] stop
 */
	
	/**
	 * [tAdvancedHash_patient_visit process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_patient_visit";

	

 



/**
 * [tAdvancedHash_patient_visit process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_patient_visit process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_patient_visit";

	

 



/**
 * [tAdvancedHash_patient_visit process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
	if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
		
			conn_tDBInput_2.commit();
			
		
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_patient_visit end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_patient_visit";

	

tHash_Lookup_patient_visit.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"patient_visit");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_patient_visit", true);
end_Hash.put("tAdvancedHash_patient_visit", System.currentTimeMillis());




/**
 * [tAdvancedHash_patient_visit end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_patient_visit finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_patient_visit";

	

 



/**
 * [tAdvancedHash_patient_visit finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Lamisplus";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Triage_Vital_Signs Triage_Vital_SignsClass = new Triage_Vital_Signs();

        int exitCode = Triage_Vital_SignsClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Triage_Vital_Signs.class.getClassLoader().getResourceAsStream("lamisplus_etl/triage_vital_signs_6_0/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Triage_Vital_Signs.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("LAMISPlus_Schema", "id_String");
                            context.LAMISPlus_Schema=(String) context.getProperty("LAMISPlus_Schema");
                        context.setContextType("LAMISPlus_AdditionalParams", "id_String");
                            context.LAMISPlus_AdditionalParams=(String) context.getProperty("LAMISPlus_AdditionalParams");
                        context.setContextType("LAMISPlus_Database", "id_String");
                            context.LAMISPlus_Database=(String) context.getProperty("LAMISPlus_Database");
                        context.setContextType("LAMISPlus_Login", "id_String");
                            context.LAMISPlus_Login=(String) context.getProperty("LAMISPlus_Login");
                        context.setContextType("LAMISPlus_Server", "id_String");
                            context.LAMISPlus_Server=(String) context.getProperty("LAMISPlus_Server");
                        context.setContextType("LAMISPlus_Password", "id_Password");
                            String pwd_LAMISPlus_Password_value = context.getProperty("LAMISPlus_Password");
                            context.LAMISPlus_Password = null;
                            if(pwd_LAMISPlus_Password_value!=null) {
                                if(context_param.containsKey("LAMISPlus_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.LAMISPlus_Password = pwd_LAMISPlus_Password_value;
                                } else if (!pwd_LAMISPlus_Password_value.isEmpty()) {
                                    try {
                                        context.LAMISPlus_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_LAMISPlus_Password_value);
                                        context.put("LAMISPlus_Password",context.LAMISPlus_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("LAMISPlus_Port", "id_String");
                            context.LAMISPlus_Port=(String) context.getProperty("LAMISPlus_Port");
                        context.setContextType("LAMIS3_Login", "id_String");
                            context.LAMIS3_Login=(String) context.getProperty("LAMIS3_Login");
                        context.setContextType("LAMIS3_Port", "id_String");
                            context.LAMIS3_Port=(String) context.getProperty("LAMIS3_Port");
                        context.setContextType("LAMIS3_AdditionalParams", "id_String");
                            context.LAMIS3_AdditionalParams=(String) context.getProperty("LAMIS3_AdditionalParams");
                        context.setContextType("LAMIS3_Database", "id_String");
                            context.LAMIS3_Database=(String) context.getProperty("LAMIS3_Database");
                        context.setContextType("LAMIS3_Password", "id_Password");
                            String pwd_LAMIS3_Password_value = context.getProperty("LAMIS3_Password");
                            context.LAMIS3_Password = null;
                            if(pwd_LAMIS3_Password_value!=null) {
                                if(context_param.containsKey("LAMIS3_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.LAMIS3_Password = pwd_LAMIS3_Password_value;
                                } else if (!pwd_LAMIS3_Password_value.isEmpty()) {
                                    try {
                                        context.LAMIS3_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_LAMIS3_Password_value);
                                        context.put("LAMIS3_Password",context.LAMIS3_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("LAMIS3_Server", "id_String");
                            context.LAMIS3_Server=(String) context.getProperty("LAMIS3_Server");
                        context.setContextType("LAMIS3_Schema", "id_String");
                            context.LAMIS3_Schema=(String) context.getProperty("LAMIS3_Schema");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("LAMISPlus_Schema")) {
                context.LAMISPlus_Schema = (String) parentContextMap.get("LAMISPlus_Schema");
            }if (parentContextMap.containsKey("LAMISPlus_AdditionalParams")) {
                context.LAMISPlus_AdditionalParams = (String) parentContextMap.get("LAMISPlus_AdditionalParams");
            }if (parentContextMap.containsKey("LAMISPlus_Database")) {
                context.LAMISPlus_Database = (String) parentContextMap.get("LAMISPlus_Database");
            }if (parentContextMap.containsKey("LAMISPlus_Login")) {
                context.LAMISPlus_Login = (String) parentContextMap.get("LAMISPlus_Login");
            }if (parentContextMap.containsKey("LAMISPlus_Server")) {
                context.LAMISPlus_Server = (String) parentContextMap.get("LAMISPlus_Server");
            }if (parentContextMap.containsKey("LAMISPlus_Password")) {
                context.LAMISPlus_Password = (java.lang.String) parentContextMap.get("LAMISPlus_Password");
            }if (parentContextMap.containsKey("LAMISPlus_Port")) {
                context.LAMISPlus_Port = (String) parentContextMap.get("LAMISPlus_Port");
            }if (parentContextMap.containsKey("LAMIS3_Login")) {
                context.LAMIS3_Login = (String) parentContextMap.get("LAMIS3_Login");
            }if (parentContextMap.containsKey("LAMIS3_Port")) {
                context.LAMIS3_Port = (String) parentContextMap.get("LAMIS3_Port");
            }if (parentContextMap.containsKey("LAMIS3_AdditionalParams")) {
                context.LAMIS3_AdditionalParams = (String) parentContextMap.get("LAMIS3_AdditionalParams");
            }if (parentContextMap.containsKey("LAMIS3_Database")) {
                context.LAMIS3_Database = (String) parentContextMap.get("LAMIS3_Database");
            }if (parentContextMap.containsKey("LAMIS3_Password")) {
                context.LAMIS3_Password = (java.lang.String) parentContextMap.get("LAMIS3_Password");
            }if (parentContextMap.containsKey("LAMIS3_Server")) {
                context.LAMIS3_Server = (String) parentContextMap.get("LAMIS3_Server");
            }if (parentContextMap.containsKey("LAMIS3_Schema")) {
                context.LAMIS3_Schema = (String) parentContextMap.get("LAMIS3_Schema");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("LAMISPlus_Password");
			parametersToEncrypt.add("LAMIS3_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Triage_Vital_Signs");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     312308 characters generated by Talend Open Studio for Big Data 
 *     on the October 28, 2022 5:30:49 PM WAT
 ************************************************************************************************/