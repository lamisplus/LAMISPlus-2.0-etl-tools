// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package lamisplus_etl.hiv_enrollment_6_0;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.PreganancyStatus;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_4
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: HIV_Enrollment Purpose: Patient_HIV_Enrollment<br>
 * Description: Patient_HIV_Enrollment <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class HIV_Enrollment implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(LAMISPlus_AdditionalParams != null){
				
					this.setProperty("LAMISPlus_AdditionalParams", LAMISPlus_AdditionalParams.toString());
				
			}
			
			if(LAMISPlus_Database != null){
				
					this.setProperty("LAMISPlus_Database", LAMISPlus_Database.toString());
				
			}
			
			if(LAMISPlus_Login != null){
				
					this.setProperty("LAMISPlus_Login", LAMISPlus_Login.toString());
				
			}
			
			if(LAMISPlus_Server != null){
				
					this.setProperty("LAMISPlus_Server", LAMISPlus_Server.toString());
				
			}
			
			if(LAMISPlus_Port != null){
				
					this.setProperty("LAMISPlus_Port", LAMISPlus_Port.toString());
				
			}
			
			if(LAMISPlus_Password != null){
				
					this.setProperty("LAMISPlus_Password", LAMISPlus_Password.toString());
				
			}
			
			if(LAMISPlus_Schema != null){
				
					this.setProperty("LAMISPlus_Schema", LAMISPlus_Schema.toString());
				
			}
			
			if(LAMIS3_AdditionalParams != null){
				
					this.setProperty("LAMIS3_AdditionalParams", LAMIS3_AdditionalParams.toString());
				
			}
			
			if(LAMIS3_Database != null){
				
					this.setProperty("LAMIS3_Database", LAMIS3_Database.toString());
				
			}
			
			if(LAMIS3_Login != null){
				
					this.setProperty("LAMIS3_Login", LAMIS3_Login.toString());
				
			}
			
			if(LAMIS3_Password != null){
				
					this.setProperty("LAMIS3_Password", LAMIS3_Password.toString());
				
			}
			
			if(LAMIS3_Port != null){
				
					this.setProperty("LAMIS3_Port", LAMIS3_Port.toString());
				
			}
			
			if(LAMIS3_Schema != null){
				
					this.setProperty("LAMIS3_Schema", LAMIS3_Schema.toString());
				
			}
			
			if(LAMIS3_Server != null){
				
					this.setProperty("LAMIS3_Server", LAMIS3_Server.toString());
				
			}
			
			if(Lamisplus2_sinkdb_connection_Database != null){
				
					this.setProperty("Lamisplus2_sinkdb_connection_Database", Lamisplus2_sinkdb_connection_Database.toString());
				
			}
			
			if(Lamisplus2_sinkdb_connection_Login != null){
				
					this.setProperty("Lamisplus2_sinkdb_connection_Login", Lamisplus2_sinkdb_connection_Login.toString());
				
			}
			
			if(Lamisplus2_sinkdb_connection_Password != null){
				
					this.setProperty("Lamisplus2_sinkdb_connection_Password", Lamisplus2_sinkdb_connection_Password.toString());
				
			}
			
			if(Lamisplus2_sinkdb_connection_Port != null){
				
					this.setProperty("Lamisplus2_sinkdb_connection_Port", Lamisplus2_sinkdb_connection_Port.toString());
				
			}
			
			if(Lamisplus2_sinkdb_connection_Schema != null){
				
					this.setProperty("Lamisplus2_sinkdb_connection_Schema", Lamisplus2_sinkdb_connection_Schema.toString());
				
			}
			
			if(Lamisplus2_sinkdb_connection_Server != null){
				
					this.setProperty("Lamisplus2_sinkdb_connection_Server", Lamisplus2_sinkdb_connection_Server.toString());
				
			}
			
		}

public String LAMISPlus_AdditionalParams;
public String getLAMISPlus_AdditionalParams(){
	return this.LAMISPlus_AdditionalParams;
}
public String LAMISPlus_Database;
public String getLAMISPlus_Database(){
	return this.LAMISPlus_Database;
}
public String LAMISPlus_Login;
public String getLAMISPlus_Login(){
	return this.LAMISPlus_Login;
}
public String LAMISPlus_Server;
public String getLAMISPlus_Server(){
	return this.LAMISPlus_Server;
}
public String LAMISPlus_Port;
public String getLAMISPlus_Port(){
	return this.LAMISPlus_Port;
}
public java.lang.String LAMISPlus_Password;
public java.lang.String getLAMISPlus_Password(){
	return this.LAMISPlus_Password;
}
public String LAMISPlus_Schema;
public String getLAMISPlus_Schema(){
	return this.LAMISPlus_Schema;
}
public String LAMIS3_AdditionalParams;
public String getLAMIS3_AdditionalParams(){
	return this.LAMIS3_AdditionalParams;
}
public String LAMIS3_Database;
public String getLAMIS3_Database(){
	return this.LAMIS3_Database;
}
public String LAMIS3_Login;
public String getLAMIS3_Login(){
	return this.LAMIS3_Login;
}
public java.lang.String LAMIS3_Password;
public java.lang.String getLAMIS3_Password(){
	return this.LAMIS3_Password;
}
public String LAMIS3_Port;
public String getLAMIS3_Port(){
	return this.LAMIS3_Port;
}
public String LAMIS3_Schema;
public String getLAMIS3_Schema(){
	return this.LAMIS3_Schema;
}
public String LAMIS3_Server;
public String getLAMIS3_Server(){
	return this.LAMIS3_Server;
}
public String Lamisplus2_sinkdb_connection_Database;
public String getLamisplus2_sinkdb_connection_Database(){
	return this.Lamisplus2_sinkdb_connection_Database;
}
public String Lamisplus2_sinkdb_connection_Login;
public String getLamisplus2_sinkdb_connection_Login(){
	return this.Lamisplus2_sinkdb_connection_Login;
}
public java.lang.String Lamisplus2_sinkdb_connection_Password;
public java.lang.String getLamisplus2_sinkdb_connection_Password(){
	return this.Lamisplus2_sinkdb_connection_Password;
}
public String Lamisplus2_sinkdb_connection_Port;
public String getLamisplus2_sinkdb_connection_Port(){
	return this.Lamisplus2_sinkdb_connection_Port;
}
public String Lamisplus2_sinkdb_connection_Schema;
public String getLamisplus2_sinkdb_connection_Schema(){
	return this.Lamisplus2_sinkdb_connection_Schema;
}
public String Lamisplus2_sinkdb_connection_Server;
public String getLamisplus2_sinkdb_connection_Server(){
	return this.Lamisplus2_sinkdb_connection_Server;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "6.0";
	private final String jobName = "HIV_Enrollment";
	private final String projectName = "LAMISPLUS_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				HIV_Enrollment.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(HIV_Enrollment.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_facility_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_entry_points_codeset_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_enrollment_codeset_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_Enrollment_settings_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_hiv_registration_status_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_Hiv_status_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_source_referal_codeset_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_Source_referral_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_TB_status_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_TBstatus_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_target_groups_codeset_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_Target_group_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_fetch_pregnancy_codeset_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_load_pregancy_data_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSortRow_1_SortOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tSortRow_1_SortIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tSortRow_1_SortIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_16_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String unique_id;

				public String getUnique_id () {
					return this.unique_id;
				}
				
			    public String entry_point_id;

				public String getEntry_point_id () {
					return this.entry_point_id;
				}
				
			    public String target_group_id;

				public String getTarget_group_id () {
					return this.target_group_id;
				}
				
			    public java.util.Date date_confirmed_hiv;

				public java.util.Date getDate_confirmed_hiv () {
					return this.date_confirmed_hiv;
				}
				
			    public java.util.Date date_enrolled_pmtct;

				public java.util.Date getDate_enrolled_pmtct () {
					return this.date_enrolled_pmtct;
				}
				
			    public java.util.Date time_hiv_diagnosis;

				public java.util.Date getTime_hiv_diagnosis () {
					return this.time_hiv_diagnosis;
				}
				
			    public java.util.Date date_of_registration;

				public java.util.Date getDate_of_registration () {
					return this.date_of_registration;
				}
				
			    public java.util.Date date_started;

				public java.util.Date getDate_started () {
					return this.date_started;
				}
				
			    public String source_of_referrer_id;

				public String getSource_of_referrer_id () {
					return this.source_of_referrer_id;
				}
				
			    public Boolean pregnant;

				public Boolean getPregnant () {
					return this.pregnant;
				}
				
			    public Boolean breastfeeding;

				public Boolean getBreastfeeding () {
					return this.breastfeeding;
				}
				
			    public String status_at_registration_id;

				public String getStatus_at_registration_id () {
					return this.status_at_registration_id;
				}
				
			    public String enrollment_setting_id;

				public String getEnrollment_setting_id () {
					return this.enrollment_setting_id;
				}
				
			    public Boolean send_message;

				public Boolean getSend_message () {
					return this.send_message;
				}
				
			    public Boolean archived;

				public Boolean getArchived () {
					return this.archived;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public Integer facility_id;

				public Integer getFacility_id () {
					return this.facility_id;
				}
				
			    public String facility_name;

				public String getFacility_name () {
					return this.facility_name;
				}
				
			    public String lga_name;

				public String getLga_name () {
					return this.lga_name;
				}
				
			    public Integer visit_id;

				public Integer getVisit_id () {
					return this.visit_id;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String ovc_number;

				public String getOvc_number () {
					return this.ovc_number;
				}
				
			    public java.util.Date date_of_lpm;

				public java.util.Date getDate_of_lpm () {
					return this.date_of_lpm;
				}
				
			    public String pregnancy_status_id;

				public String getPregnancy_status_id () {
					return this.pregnancy_status_id;
				}
				
			    public String tb_status_id;

				public String getTb_status_id () {
					return this.tb_status_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.id = this.id;
	            other.person_uuid = this.person_uuid;
	            other.unique_id = this.unique_id;
	            other.entry_point_id = this.entry_point_id;
	            other.target_group_id = this.target_group_id;
	            other.date_confirmed_hiv = this.date_confirmed_hiv;
	            other.date_enrolled_pmtct = this.date_enrolled_pmtct;
	            other.time_hiv_diagnosis = this.time_hiv_diagnosis;
	            other.date_of_registration = this.date_of_registration;
	            other.date_started = this.date_started;
	            other.source_of_referrer_id = this.source_of_referrer_id;
	            other.pregnant = this.pregnant;
	            other.breastfeeding = this.breastfeeding;
	            other.status_at_registration_id = this.status_at_registration_id;
	            other.enrollment_setting_id = this.enrollment_setting_id;
	            other.send_message = this.send_message;
	            other.archived = this.archived;
	            other.created_date = this.created_date;
	            other.created_by = this.created_by;
	            other.last_modified_date = this.last_modified_date;
	            other.last_modified_by = this.last_modified_by;
	            other.facility_id = this.facility_id;
	            other.facility_name = this.facility_name;
	            other.lga_name = this.lga_name;
	            other.visit_id = this.visit_id;
	            other.uuid = this.uuid;
	            other.ovc_number = this.ovc_number;
	            other.date_of_lpm = this.date_of_lpm;
	            other.pregnancy_status_id = this.pregnancy_status_id;
	            other.tb_status_id = this.tb_status_id;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.id = this.id;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.person_uuid = readString(dis);
					
					this.unique_id = readString(dis);
					
					this.entry_point_id = readString(dis);
					
					this.target_group_id = readString(dis);
					
					this.date_confirmed_hiv = readDate(dis);
					
					this.date_enrolled_pmtct = readDate(dis);
					
					this.time_hiv_diagnosis = readDate(dis);
					
					this.date_of_registration = readDate(dis);
					
					this.date_started = readDate(dis);
					
					this.source_of_referrer_id = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pregnant = null;
           				} else {
           			    	this.pregnant = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.breastfeeding = null;
           				} else {
           			    	this.breastfeeding = dis.readBoolean();
           				}
					
					this.status_at_registration_id = readString(dis);
					
					this.enrollment_setting_id = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.send_message = null;
           				} else {
           			    	this.send_message = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.archived = null;
           				} else {
           			    	this.archived = dis.readBoolean();
           				}
					
					this.created_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.last_modified_by = readString(dis);
					
						this.facility_id = readInteger(dis);
					
					this.facility_name = readString(dis);
					
					this.lga_name = readString(dis);
					
						this.visit_id = readInteger(dis);
					
					this.uuid = readString(dis);
					
					this.ovc_number = readString(dis);
					
					this.date_of_lpm = readDate(dis);
					
					this.pregnancy_status_id = readString(dis);
					
					this.tb_status_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.unique_id,dos);
					
					// String
				
						writeString(this.entry_point_id,dos);
					
					// String
				
						writeString(this.target_group_id,dos);
					
					// java.util.Date
				
						writeDate(this.date_confirmed_hiv,dos);
					
					// java.util.Date
				
						writeDate(this.date_enrolled_pmtct,dos);
					
					// java.util.Date
				
						writeDate(this.time_hiv_diagnosis,dos);
					
					// java.util.Date
				
						writeDate(this.date_of_registration,dos);
					
					// java.util.Date
				
						writeDate(this.date_started,dos);
					
					// String
				
						writeString(this.source_of_referrer_id,dos);
					
					// Boolean
				
						if(this.pregnant == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.pregnant);
		            	}
					
					// Boolean
				
						if(this.breastfeeding == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.breastfeeding);
		            	}
					
					// String
				
						writeString(this.status_at_registration_id,dos);
					
					// String
				
						writeString(this.enrollment_setting_id,dos);
					
					// Boolean
				
						if(this.send_message == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.send_message);
		            	}
					
					// Boolean
				
						if(this.archived == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.archived);
		            	}
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// Integer
				
						writeInteger(this.facility_id,dos);
					
					// String
				
						writeString(this.facility_name,dos);
					
					// String
				
						writeString(this.lga_name,dos);
					
					// Integer
				
						writeInteger(this.visit_id,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.ovc_number,dos);
					
					// java.util.Date
				
						writeDate(this.date_of_lpm,dos);
					
					// String
				
						writeString(this.pregnancy_status_id,dos);
					
					// String
				
						writeString(this.tb_status_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",unique_id="+unique_id);
		sb.append(",entry_point_id="+entry_point_id);
		sb.append(",target_group_id="+target_group_id);
		sb.append(",date_confirmed_hiv="+String.valueOf(date_confirmed_hiv));
		sb.append(",date_enrolled_pmtct="+String.valueOf(date_enrolled_pmtct));
		sb.append(",time_hiv_diagnosis="+String.valueOf(time_hiv_diagnosis));
		sb.append(",date_of_registration="+String.valueOf(date_of_registration));
		sb.append(",date_started="+String.valueOf(date_started));
		sb.append(",source_of_referrer_id="+source_of_referrer_id);
		sb.append(",pregnant="+String.valueOf(pregnant));
		sb.append(",breastfeeding="+String.valueOf(breastfeeding));
		sb.append(",status_at_registration_id="+status_at_registration_id);
		sb.append(",enrollment_setting_id="+enrollment_setting_id);
		sb.append(",send_message="+String.valueOf(send_message));
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",facility_name="+facility_name);
		sb.append(",lga_name="+lga_name);
		sb.append(",visit_id="+String.valueOf(visit_id));
		sb.append(",uuid="+uuid);
		sb.append(",ovc_number="+ovc_number);
		sb.append(",date_of_lpm="+String.valueOf(date_of_lpm));
		sb.append(",pregnancy_status_id="+pregnancy_status_id);
		sb.append(",tb_status_id="+tb_status_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String unique_id;

				public String getUnique_id () {
					return this.unique_id;
				}
				
			    public String entry_point_id;

				public String getEntry_point_id () {
					return this.entry_point_id;
				}
				
			    public String target_group_id;

				public String getTarget_group_id () {
					return this.target_group_id;
				}
				
			    public java.util.Date date_confirmed_hiv;

				public java.util.Date getDate_confirmed_hiv () {
					return this.date_confirmed_hiv;
				}
				
			    public java.util.Date date_enrolled_pmtct;

				public java.util.Date getDate_enrolled_pmtct () {
					return this.date_enrolled_pmtct;
				}
				
			    public java.util.Date time_hiv_diagnosis;

				public java.util.Date getTime_hiv_diagnosis () {
					return this.time_hiv_diagnosis;
				}
				
			    public java.util.Date date_of_registration;

				public java.util.Date getDate_of_registration () {
					return this.date_of_registration;
				}
				
			    public java.util.Date date_started;

				public java.util.Date getDate_started () {
					return this.date_started;
				}
				
			    public String source_of_referrer_id;

				public String getSource_of_referrer_id () {
					return this.source_of_referrer_id;
				}
				
			    public Boolean pregnant;

				public Boolean getPregnant () {
					return this.pregnant;
				}
				
			    public Boolean breastfeeding;

				public Boolean getBreastfeeding () {
					return this.breastfeeding;
				}
				
			    public String status_at_registration_id;

				public String getStatus_at_registration_id () {
					return this.status_at_registration_id;
				}
				
			    public String enrollment_setting_id;

				public String getEnrollment_setting_id () {
					return this.enrollment_setting_id;
				}
				
			    public Boolean send_message;

				public Boolean getSend_message () {
					return this.send_message;
				}
				
			    public Boolean archived;

				public Boolean getArchived () {
					return this.archived;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public Integer facility_id;

				public Integer getFacility_id () {
					return this.facility_id;
				}
				
			    public String facility_name;

				public String getFacility_name () {
					return this.facility_name;
				}
				
			    public String lga_name;

				public String getLga_name () {
					return this.lga_name;
				}
				
			    public Integer visit_id;

				public Integer getVisit_id () {
					return this.visit_id;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String ovc_number;

				public String getOvc_number () {
					return this.ovc_number;
				}
				
			    public java.util.Date date_of_lpm;

				public java.util.Date getDate_of_lpm () {
					return this.date_of_lpm;
				}
				
			    public String pregnancy_status_id;

				public String getPregnancy_status_id () {
					return this.pregnancy_status_id;
				}
				
			    public String tb_status_id;

				public String getTb_status_id () {
					return this.tb_status_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row5Struct other = (row5Struct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row5Struct other) {

		other.id = this.id;
	            other.person_uuid = this.person_uuid;
	            other.unique_id = this.unique_id;
	            other.entry_point_id = this.entry_point_id;
	            other.target_group_id = this.target_group_id;
	            other.date_confirmed_hiv = this.date_confirmed_hiv;
	            other.date_enrolled_pmtct = this.date_enrolled_pmtct;
	            other.time_hiv_diagnosis = this.time_hiv_diagnosis;
	            other.date_of_registration = this.date_of_registration;
	            other.date_started = this.date_started;
	            other.source_of_referrer_id = this.source_of_referrer_id;
	            other.pregnant = this.pregnant;
	            other.breastfeeding = this.breastfeeding;
	            other.status_at_registration_id = this.status_at_registration_id;
	            other.enrollment_setting_id = this.enrollment_setting_id;
	            other.send_message = this.send_message;
	            other.archived = this.archived;
	            other.created_date = this.created_date;
	            other.created_by = this.created_by;
	            other.last_modified_date = this.last_modified_date;
	            other.last_modified_by = this.last_modified_by;
	            other.facility_id = this.facility_id;
	            other.facility_name = this.facility_name;
	            other.lga_name = this.lga_name;
	            other.visit_id = this.visit_id;
	            other.uuid = this.uuid;
	            other.ovc_number = this.ovc_number;
	            other.date_of_lpm = this.date_of_lpm;
	            other.pregnancy_status_id = this.pregnancy_status_id;
	            other.tb_status_id = this.tb_status_id;
	            
	}

	public void copyKeysDataTo(row5Struct other) {

		other.id = this.id;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.person_uuid = readString(dis);
					
					this.unique_id = readString(dis);
					
					this.entry_point_id = readString(dis);
					
					this.target_group_id = readString(dis);
					
					this.date_confirmed_hiv = readDate(dis);
					
					this.date_enrolled_pmtct = readDate(dis);
					
					this.time_hiv_diagnosis = readDate(dis);
					
					this.date_of_registration = readDate(dis);
					
					this.date_started = readDate(dis);
					
					this.source_of_referrer_id = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pregnant = null;
           				} else {
           			    	this.pregnant = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.breastfeeding = null;
           				} else {
           			    	this.breastfeeding = dis.readBoolean();
           				}
					
					this.status_at_registration_id = readString(dis);
					
					this.enrollment_setting_id = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.send_message = null;
           				} else {
           			    	this.send_message = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.archived = null;
           				} else {
           			    	this.archived = dis.readBoolean();
           				}
					
					this.created_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.last_modified_by = readString(dis);
					
						this.facility_id = readInteger(dis);
					
					this.facility_name = readString(dis);
					
					this.lga_name = readString(dis);
					
						this.visit_id = readInteger(dis);
					
					this.uuid = readString(dis);
					
					this.ovc_number = readString(dis);
					
					this.date_of_lpm = readDate(dis);
					
					this.pregnancy_status_id = readString(dis);
					
					this.tb_status_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.unique_id,dos);
					
					// String
				
						writeString(this.entry_point_id,dos);
					
					// String
				
						writeString(this.target_group_id,dos);
					
					// java.util.Date
				
						writeDate(this.date_confirmed_hiv,dos);
					
					// java.util.Date
				
						writeDate(this.date_enrolled_pmtct,dos);
					
					// java.util.Date
				
						writeDate(this.time_hiv_diagnosis,dos);
					
					// java.util.Date
				
						writeDate(this.date_of_registration,dos);
					
					// java.util.Date
				
						writeDate(this.date_started,dos);
					
					// String
				
						writeString(this.source_of_referrer_id,dos);
					
					// Boolean
				
						if(this.pregnant == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.pregnant);
		            	}
					
					// Boolean
				
						if(this.breastfeeding == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.breastfeeding);
		            	}
					
					// String
				
						writeString(this.status_at_registration_id,dos);
					
					// String
				
						writeString(this.enrollment_setting_id,dos);
					
					// Boolean
				
						if(this.send_message == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.send_message);
		            	}
					
					// Boolean
				
						if(this.archived == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.archived);
		            	}
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// Integer
				
						writeInteger(this.facility_id,dos);
					
					// String
				
						writeString(this.facility_name,dos);
					
					// String
				
						writeString(this.lga_name,dos);
					
					// Integer
				
						writeInteger(this.visit_id,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.ovc_number,dos);
					
					// java.util.Date
				
						writeDate(this.date_of_lpm,dos);
					
					// String
				
						writeString(this.pregnancy_status_id,dos);
					
					// String
				
						writeString(this.tb_status_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",unique_id="+unique_id);
		sb.append(",entry_point_id="+entry_point_id);
		sb.append(",target_group_id="+target_group_id);
		sb.append(",date_confirmed_hiv="+String.valueOf(date_confirmed_hiv));
		sb.append(",date_enrolled_pmtct="+String.valueOf(date_enrolled_pmtct));
		sb.append(",time_hiv_diagnosis="+String.valueOf(time_hiv_diagnosis));
		sb.append(",date_of_registration="+String.valueOf(date_of_registration));
		sb.append(",date_started="+String.valueOf(date_started));
		sb.append(",source_of_referrer_id="+source_of_referrer_id);
		sb.append(",pregnant="+String.valueOf(pregnant));
		sb.append(",breastfeeding="+String.valueOf(breastfeeding));
		sb.append(",status_at_registration_id="+status_at_registration_id);
		sb.append(",enrollment_setting_id="+enrollment_setting_id);
		sb.append(",send_message="+String.valueOf(send_message));
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",facility_name="+facility_name);
		sb.append(",lga_name="+lga_name);
		sb.append(",visit_id="+String.valueOf(visit_id));
		sb.append(",uuid="+uuid);
		sb.append(",ovc_number="+ovc_number);
		sb.append(",date_of_lpm="+String.valueOf(date_of_lpm));
		sb.append(",pregnancy_status_id="+pregnancy_status_id);
		sb.append(",tb_status_id="+tb_status_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String unique_id;

				public String getUnique_id () {
					return this.unique_id;
				}
				
			    public String entry_point_id;

				public String getEntry_point_id () {
					return this.entry_point_id;
				}
				
			    public String target_group_id;

				public String getTarget_group_id () {
					return this.target_group_id;
				}
				
			    public java.util.Date date_confirmed_hiv;

				public java.util.Date getDate_confirmed_hiv () {
					return this.date_confirmed_hiv;
				}
				
			    public java.util.Date date_enrolled_pmtct;

				public java.util.Date getDate_enrolled_pmtct () {
					return this.date_enrolled_pmtct;
				}
				
			    public java.util.Date time_hiv_diagnosis;

				public java.util.Date getTime_hiv_diagnosis () {
					return this.time_hiv_diagnosis;
				}
				
			    public java.util.Date date_of_registration;

				public java.util.Date getDate_of_registration () {
					return this.date_of_registration;
				}
				
			    public java.util.Date date_started;

				public java.util.Date getDate_started () {
					return this.date_started;
				}
				
			    public String source_of_referrer_id;

				public String getSource_of_referrer_id () {
					return this.source_of_referrer_id;
				}
				
			    public Boolean pregnant;

				public Boolean getPregnant () {
					return this.pregnant;
				}
				
			    public Boolean breastfeeding;

				public Boolean getBreastfeeding () {
					return this.breastfeeding;
				}
				
			    public String status_at_registration_id;

				public String getStatus_at_registration_id () {
					return this.status_at_registration_id;
				}
				
			    public String enrollment_setting_id;

				public String getEnrollment_setting_id () {
					return this.enrollment_setting_id;
				}
				
			    public Boolean send_message;

				public Boolean getSend_message () {
					return this.send_message;
				}
				
			    public Boolean archived;

				public Boolean getArchived () {
					return this.archived;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public Integer facility_id;

				public Integer getFacility_id () {
					return this.facility_id;
				}
				
			    public String facility_name;

				public String getFacility_name () {
					return this.facility_name;
				}
				
			    public String lga_name;

				public String getLga_name () {
					return this.lga_name;
				}
				
			    public Integer visit_id;

				public Integer getVisit_id () {
					return this.visit_id;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String ovc_number;

				public String getOvc_number () {
					return this.ovc_number;
				}
				
			    public java.util.Date date_of_lpm;

				public java.util.Date getDate_of_lpm () {
					return this.date_of_lpm;
				}
				
			    public String pregnancy_status_id;

				public String getPregnancy_status_id () {
					return this.pregnancy_status_id;
				}
				
			    public String tb_status_id;

				public String getTb_status_id () {
					return this.tb_status_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.id = this.id;
	            other.person_uuid = this.person_uuid;
	            other.unique_id = this.unique_id;
	            other.entry_point_id = this.entry_point_id;
	            other.target_group_id = this.target_group_id;
	            other.date_confirmed_hiv = this.date_confirmed_hiv;
	            other.date_enrolled_pmtct = this.date_enrolled_pmtct;
	            other.time_hiv_diagnosis = this.time_hiv_diagnosis;
	            other.date_of_registration = this.date_of_registration;
	            other.date_started = this.date_started;
	            other.source_of_referrer_id = this.source_of_referrer_id;
	            other.pregnant = this.pregnant;
	            other.breastfeeding = this.breastfeeding;
	            other.status_at_registration_id = this.status_at_registration_id;
	            other.enrollment_setting_id = this.enrollment_setting_id;
	            other.send_message = this.send_message;
	            other.archived = this.archived;
	            other.created_date = this.created_date;
	            other.created_by = this.created_by;
	            other.last_modified_date = this.last_modified_date;
	            other.last_modified_by = this.last_modified_by;
	            other.facility_id = this.facility_id;
	            other.facility_name = this.facility_name;
	            other.lga_name = this.lga_name;
	            other.visit_id = this.visit_id;
	            other.uuid = this.uuid;
	            other.ovc_number = this.ovc_number;
	            other.date_of_lpm = this.date_of_lpm;
	            other.pregnancy_status_id = this.pregnancy_status_id;
	            other.tb_status_id = this.tb_status_id;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.id = this.id;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.person_uuid = readString(dis);
					
					this.unique_id = readString(dis);
					
					this.entry_point_id = readString(dis);
					
					this.target_group_id = readString(dis);
					
					this.date_confirmed_hiv = readDate(dis);
					
					this.date_enrolled_pmtct = readDate(dis);
					
					this.time_hiv_diagnosis = readDate(dis);
					
					this.date_of_registration = readDate(dis);
					
					this.date_started = readDate(dis);
					
					this.source_of_referrer_id = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pregnant = null;
           				} else {
           			    	this.pregnant = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.breastfeeding = null;
           				} else {
           			    	this.breastfeeding = dis.readBoolean();
           				}
					
					this.status_at_registration_id = readString(dis);
					
					this.enrollment_setting_id = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.send_message = null;
           				} else {
           			    	this.send_message = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.archived = null;
           				} else {
           			    	this.archived = dis.readBoolean();
           				}
					
					this.created_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.last_modified_by = readString(dis);
					
						this.facility_id = readInteger(dis);
					
					this.facility_name = readString(dis);
					
					this.lga_name = readString(dis);
					
						this.visit_id = readInteger(dis);
					
					this.uuid = readString(dis);
					
					this.ovc_number = readString(dis);
					
					this.date_of_lpm = readDate(dis);
					
					this.pregnancy_status_id = readString(dis);
					
					this.tb_status_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.unique_id,dos);
					
					// String
				
						writeString(this.entry_point_id,dos);
					
					// String
				
						writeString(this.target_group_id,dos);
					
					// java.util.Date
				
						writeDate(this.date_confirmed_hiv,dos);
					
					// java.util.Date
				
						writeDate(this.date_enrolled_pmtct,dos);
					
					// java.util.Date
				
						writeDate(this.time_hiv_diagnosis,dos);
					
					// java.util.Date
				
						writeDate(this.date_of_registration,dos);
					
					// java.util.Date
				
						writeDate(this.date_started,dos);
					
					// String
				
						writeString(this.source_of_referrer_id,dos);
					
					// Boolean
				
						if(this.pregnant == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.pregnant);
		            	}
					
					// Boolean
				
						if(this.breastfeeding == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.breastfeeding);
		            	}
					
					// String
				
						writeString(this.status_at_registration_id,dos);
					
					// String
				
						writeString(this.enrollment_setting_id,dos);
					
					// Boolean
				
						if(this.send_message == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.send_message);
		            	}
					
					// Boolean
				
						if(this.archived == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.archived);
		            	}
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// Integer
				
						writeInteger(this.facility_id,dos);
					
					// String
				
						writeString(this.facility_name,dos);
					
					// String
				
						writeString(this.lga_name,dos);
					
					// Integer
				
						writeInteger(this.visit_id,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.ovc_number,dos);
					
					// java.util.Date
				
						writeDate(this.date_of_lpm,dos);
					
					// String
				
						writeString(this.pregnancy_status_id,dos);
					
					// String
				
						writeString(this.tb_status_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",unique_id="+unique_id);
		sb.append(",entry_point_id="+entry_point_id);
		sb.append(",target_group_id="+target_group_id);
		sb.append(",date_confirmed_hiv="+String.valueOf(date_confirmed_hiv));
		sb.append(",date_enrolled_pmtct="+String.valueOf(date_enrolled_pmtct));
		sb.append(",time_hiv_diagnosis="+String.valueOf(time_hiv_diagnosis));
		sb.append(",date_of_registration="+String.valueOf(date_of_registration));
		sb.append(",date_started="+String.valueOf(date_started));
		sb.append(",source_of_referrer_id="+source_of_referrer_id);
		sb.append(",pregnant="+String.valueOf(pregnant));
		sb.append(",breastfeeding="+String.valueOf(breastfeeding));
		sb.append(",status_at_registration_id="+status_at_registration_id);
		sb.append(",enrollment_setting_id="+enrollment_setting_id);
		sb.append(",send_message="+String.valueOf(send_message));
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",facility_name="+facility_name);
		sb.append(",lga_name="+lga_name);
		sb.append(",visit_id="+String.valueOf(visit_id));
		sb.append(",uuid="+uuid);
		sb.append(",ovc_number="+ovc_number);
		sb.append(",date_of_lpm="+String.valueOf(date_of_lpm));
		sb.append(",pregnancy_status_id="+pregnancy_status_id);
		sb.append(",tb_status_id="+tb_status_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtSortRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String unique_id;

				public String getUnique_id () {
					return this.unique_id;
				}
				
			    public String entry_point_id;

				public String getEntry_point_id () {
					return this.entry_point_id;
				}
				
			    public String target_group_id;

				public String getTarget_group_id () {
					return this.target_group_id;
				}
				
			    public java.util.Date date_confirmed_hiv;

				public java.util.Date getDate_confirmed_hiv () {
					return this.date_confirmed_hiv;
				}
				
			    public java.util.Date date_enrolled_pmtct;

				public java.util.Date getDate_enrolled_pmtct () {
					return this.date_enrolled_pmtct;
				}
				
			    public java.util.Date time_hiv_diagnosis;

				public java.util.Date getTime_hiv_diagnosis () {
					return this.time_hiv_diagnosis;
				}
				
			    public java.util.Date date_of_registration;

				public java.util.Date getDate_of_registration () {
					return this.date_of_registration;
				}
				
			    public java.util.Date date_started;

				public java.util.Date getDate_started () {
					return this.date_started;
				}
				
			    public String source_of_referrer_id;

				public String getSource_of_referrer_id () {
					return this.source_of_referrer_id;
				}
				
			    public Boolean pregnant;

				public Boolean getPregnant () {
					return this.pregnant;
				}
				
			    public Boolean breastfeeding;

				public Boolean getBreastfeeding () {
					return this.breastfeeding;
				}
				
			    public String status_at_registration_id;

				public String getStatus_at_registration_id () {
					return this.status_at_registration_id;
				}
				
			    public String enrollment_setting_id;

				public String getEnrollment_setting_id () {
					return this.enrollment_setting_id;
				}
				
			    public Boolean send_message;

				public Boolean getSend_message () {
					return this.send_message;
				}
				
			    public Boolean archived;

				public Boolean getArchived () {
					return this.archived;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public Integer facility_id;

				public Integer getFacility_id () {
					return this.facility_id;
				}
				
			    public String facility_name;

				public String getFacility_name () {
					return this.facility_name;
				}
				
			    public String lga_name;

				public String getLga_name () {
					return this.lga_name;
				}
				
			    public Integer visit_id;

				public Integer getVisit_id () {
					return this.visit_id;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String ovc_number;

				public String getOvc_number () {
					return this.ovc_number;
				}
				
			    public java.util.Date date_of_lpm;

				public java.util.Date getDate_of_lpm () {
					return this.date_of_lpm;
				}
				
			    public String pregnancy_status_id;

				public String getPregnancy_status_id () {
					return this.pregnancy_status_id;
				}
				
			    public String tb_status_id;

				public String getTb_status_id () {
					return this.tb_status_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final OnRowsEndStructtSortRow_1 other = (OnRowsEndStructtSortRow_1) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(OnRowsEndStructtSortRow_1 other) {

		other.id = this.id;
	            other.person_uuid = this.person_uuid;
	            other.unique_id = this.unique_id;
	            other.entry_point_id = this.entry_point_id;
	            other.target_group_id = this.target_group_id;
	            other.date_confirmed_hiv = this.date_confirmed_hiv;
	            other.date_enrolled_pmtct = this.date_enrolled_pmtct;
	            other.time_hiv_diagnosis = this.time_hiv_diagnosis;
	            other.date_of_registration = this.date_of_registration;
	            other.date_started = this.date_started;
	            other.source_of_referrer_id = this.source_of_referrer_id;
	            other.pregnant = this.pregnant;
	            other.breastfeeding = this.breastfeeding;
	            other.status_at_registration_id = this.status_at_registration_id;
	            other.enrollment_setting_id = this.enrollment_setting_id;
	            other.send_message = this.send_message;
	            other.archived = this.archived;
	            other.created_date = this.created_date;
	            other.created_by = this.created_by;
	            other.last_modified_date = this.last_modified_date;
	            other.last_modified_by = this.last_modified_by;
	            other.facility_id = this.facility_id;
	            other.facility_name = this.facility_name;
	            other.lga_name = this.lga_name;
	            other.visit_id = this.visit_id;
	            other.uuid = this.uuid;
	            other.ovc_number = this.ovc_number;
	            other.date_of_lpm = this.date_of_lpm;
	            other.pregnancy_status_id = this.pregnancy_status_id;
	            other.tb_status_id = this.tb_status_id;
	            
	}

	public void copyKeysDataTo(OnRowsEndStructtSortRow_1 other) {

		other.id = this.id;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.person_uuid = readString(dis);
					
					this.unique_id = readString(dis);
					
					this.entry_point_id = readString(dis);
					
					this.target_group_id = readString(dis);
					
					this.date_confirmed_hiv = readDate(dis);
					
					this.date_enrolled_pmtct = readDate(dis);
					
					this.time_hiv_diagnosis = readDate(dis);
					
					this.date_of_registration = readDate(dis);
					
					this.date_started = readDate(dis);
					
					this.source_of_referrer_id = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pregnant = null;
           				} else {
           			    	this.pregnant = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.breastfeeding = null;
           				} else {
           			    	this.breastfeeding = dis.readBoolean();
           				}
					
					this.status_at_registration_id = readString(dis);
					
					this.enrollment_setting_id = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.send_message = null;
           				} else {
           			    	this.send_message = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.archived = null;
           				} else {
           			    	this.archived = dis.readBoolean();
           				}
					
					this.created_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.last_modified_by = readString(dis);
					
						this.facility_id = readInteger(dis);
					
					this.facility_name = readString(dis);
					
					this.lga_name = readString(dis);
					
						this.visit_id = readInteger(dis);
					
					this.uuid = readString(dis);
					
					this.ovc_number = readString(dis);
					
					this.date_of_lpm = readDate(dis);
					
					this.pregnancy_status_id = readString(dis);
					
					this.tb_status_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.unique_id,dos);
					
					// String
				
						writeString(this.entry_point_id,dos);
					
					// String
				
						writeString(this.target_group_id,dos);
					
					// java.util.Date
				
						writeDate(this.date_confirmed_hiv,dos);
					
					// java.util.Date
				
						writeDate(this.date_enrolled_pmtct,dos);
					
					// java.util.Date
				
						writeDate(this.time_hiv_diagnosis,dos);
					
					// java.util.Date
				
						writeDate(this.date_of_registration,dos);
					
					// java.util.Date
				
						writeDate(this.date_started,dos);
					
					// String
				
						writeString(this.source_of_referrer_id,dos);
					
					// Boolean
				
						if(this.pregnant == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.pregnant);
		            	}
					
					// Boolean
				
						if(this.breastfeeding == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.breastfeeding);
		            	}
					
					// String
				
						writeString(this.status_at_registration_id,dos);
					
					// String
				
						writeString(this.enrollment_setting_id,dos);
					
					// Boolean
				
						if(this.send_message == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.send_message);
		            	}
					
					// Boolean
				
						if(this.archived == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.archived);
		            	}
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// Integer
				
						writeInteger(this.facility_id,dos);
					
					// String
				
						writeString(this.facility_name,dos);
					
					// String
				
						writeString(this.lga_name,dos);
					
					// Integer
				
						writeInteger(this.visit_id,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.ovc_number,dos);
					
					// java.util.Date
				
						writeDate(this.date_of_lpm,dos);
					
					// String
				
						writeString(this.pregnancy_status_id,dos);
					
					// String
				
						writeString(this.tb_status_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",unique_id="+unique_id);
		sb.append(",entry_point_id="+entry_point_id);
		sb.append(",target_group_id="+target_group_id);
		sb.append(",date_confirmed_hiv="+String.valueOf(date_confirmed_hiv));
		sb.append(",date_enrolled_pmtct="+String.valueOf(date_enrolled_pmtct));
		sb.append(",time_hiv_diagnosis="+String.valueOf(time_hiv_diagnosis));
		sb.append(",date_of_registration="+String.valueOf(date_of_registration));
		sb.append(",date_started="+String.valueOf(date_started));
		sb.append(",source_of_referrer_id="+source_of_referrer_id);
		sb.append(",pregnant="+String.valueOf(pregnant));
		sb.append(",breastfeeding="+String.valueOf(breastfeeding));
		sb.append(",status_at_registration_id="+status_at_registration_id);
		sb.append(",enrollment_setting_id="+enrollment_setting_id);
		sb.append(",send_message="+String.valueOf(send_message));
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",facility_name="+facility_name);
		sb.append(",lga_name="+lga_name);
		sb.append(",visit_id="+String.valueOf(visit_id));
		sb.append(",uuid="+uuid);
		sb.append(",ovc_number="+ovc_number);
		sb.append(",date_of_lpm="+String.valueOf(date_of_lpm));
		sb.append(",pregnancy_status_id="+pregnancy_status_id);
		sb.append(",tb_status_id="+tb_status_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtSortRow_1 other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfCreate_HIV_JSONStringStruct implements routines.system.IPersistableRow<copyOfCreate_HIV_JSONStringStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String unique_id;

				public String getUnique_id () {
					return this.unique_id;
				}
				
			    public String entry_point_id;

				public String getEntry_point_id () {
					return this.entry_point_id;
				}
				
			    public String target_group_id;

				public String getTarget_group_id () {
					return this.target_group_id;
				}
				
			    public java.util.Date date_confirmed_hiv;

				public java.util.Date getDate_confirmed_hiv () {
					return this.date_confirmed_hiv;
				}
				
			    public java.util.Date date_enrolled_pmtct;

				public java.util.Date getDate_enrolled_pmtct () {
					return this.date_enrolled_pmtct;
				}
				
			    public java.util.Date time_hiv_diagnosis;

				public java.util.Date getTime_hiv_diagnosis () {
					return this.time_hiv_diagnosis;
				}
				
			    public java.util.Date date_of_registration;

				public java.util.Date getDate_of_registration () {
					return this.date_of_registration;
				}
				
			    public java.util.Date date_started;

				public java.util.Date getDate_started () {
					return this.date_started;
				}
				
			    public String source_of_referrer_id;

				public String getSource_of_referrer_id () {
					return this.source_of_referrer_id;
				}
				
			    public Boolean pregnant;

				public Boolean getPregnant () {
					return this.pregnant;
				}
				
			    public Boolean breastfeeding;

				public Boolean getBreastfeeding () {
					return this.breastfeeding;
				}
				
			    public String status_at_registration_id;

				public String getStatus_at_registration_id () {
					return this.status_at_registration_id;
				}
				
			    public String enrollment_setting_id;

				public String getEnrollment_setting_id () {
					return this.enrollment_setting_id;
				}
				
			    public Boolean send_message;

				public Boolean getSend_message () {
					return this.send_message;
				}
				
			    public Boolean archived;

				public Boolean getArchived () {
					return this.archived;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public Integer facility_id;

				public Integer getFacility_id () {
					return this.facility_id;
				}
				
			    public String facility_name;

				public String getFacility_name () {
					return this.facility_name;
				}
				
			    public String lga_name;

				public String getLga_name () {
					return this.lga_name;
				}
				
			    public Integer visit_id;

				public Integer getVisit_id () {
					return this.visit_id;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String ovc_number;

				public String getOvc_number () {
					return this.ovc_number;
				}
				
			    public java.util.Date date_of_lpm;

				public java.util.Date getDate_of_lpm () {
					return this.date_of_lpm;
				}
				
			    public String pregnancy_status_id;

				public String getPregnancy_status_id () {
					return this.pregnancy_status_id;
				}
				
			    public String tb_status_id;

				public String getTb_status_id () {
					return this.tb_status_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final copyOfCreate_HIV_JSONStringStruct other = (copyOfCreate_HIV_JSONStringStruct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(copyOfCreate_HIV_JSONStringStruct other) {

		other.id = this.id;
	            other.person_uuid = this.person_uuid;
	            other.unique_id = this.unique_id;
	            other.entry_point_id = this.entry_point_id;
	            other.target_group_id = this.target_group_id;
	            other.date_confirmed_hiv = this.date_confirmed_hiv;
	            other.date_enrolled_pmtct = this.date_enrolled_pmtct;
	            other.time_hiv_diagnosis = this.time_hiv_diagnosis;
	            other.date_of_registration = this.date_of_registration;
	            other.date_started = this.date_started;
	            other.source_of_referrer_id = this.source_of_referrer_id;
	            other.pregnant = this.pregnant;
	            other.breastfeeding = this.breastfeeding;
	            other.status_at_registration_id = this.status_at_registration_id;
	            other.enrollment_setting_id = this.enrollment_setting_id;
	            other.send_message = this.send_message;
	            other.archived = this.archived;
	            other.created_date = this.created_date;
	            other.created_by = this.created_by;
	            other.last_modified_date = this.last_modified_date;
	            other.last_modified_by = this.last_modified_by;
	            other.facility_id = this.facility_id;
	            other.facility_name = this.facility_name;
	            other.lga_name = this.lga_name;
	            other.visit_id = this.visit_id;
	            other.uuid = this.uuid;
	            other.ovc_number = this.ovc_number;
	            other.date_of_lpm = this.date_of_lpm;
	            other.pregnancy_status_id = this.pregnancy_status_id;
	            other.tb_status_id = this.tb_status_id;
	            
	}

	public void copyKeysDataTo(copyOfCreate_HIV_JSONStringStruct other) {

		other.id = this.id;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.person_uuid = readString(dis);
					
					this.unique_id = readString(dis);
					
					this.entry_point_id = readString(dis);
					
					this.target_group_id = readString(dis);
					
					this.date_confirmed_hiv = readDate(dis);
					
					this.date_enrolled_pmtct = readDate(dis);
					
					this.time_hiv_diagnosis = readDate(dis);
					
					this.date_of_registration = readDate(dis);
					
					this.date_started = readDate(dis);
					
					this.source_of_referrer_id = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pregnant = null;
           				} else {
           			    	this.pregnant = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.breastfeeding = null;
           				} else {
           			    	this.breastfeeding = dis.readBoolean();
           				}
					
					this.status_at_registration_id = readString(dis);
					
					this.enrollment_setting_id = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.send_message = null;
           				} else {
           			    	this.send_message = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.archived = null;
           				} else {
           			    	this.archived = dis.readBoolean();
           				}
					
					this.created_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.last_modified_by = readString(dis);
					
						this.facility_id = readInteger(dis);
					
					this.facility_name = readString(dis);
					
					this.lga_name = readString(dis);
					
						this.visit_id = readInteger(dis);
					
					this.uuid = readString(dis);
					
					this.ovc_number = readString(dis);
					
					this.date_of_lpm = readDate(dis);
					
					this.pregnancy_status_id = readString(dis);
					
					this.tb_status_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.unique_id,dos);
					
					// String
				
						writeString(this.entry_point_id,dos);
					
					// String
				
						writeString(this.target_group_id,dos);
					
					// java.util.Date
				
						writeDate(this.date_confirmed_hiv,dos);
					
					// java.util.Date
				
						writeDate(this.date_enrolled_pmtct,dos);
					
					// java.util.Date
				
						writeDate(this.time_hiv_diagnosis,dos);
					
					// java.util.Date
				
						writeDate(this.date_of_registration,dos);
					
					// java.util.Date
				
						writeDate(this.date_started,dos);
					
					// String
				
						writeString(this.source_of_referrer_id,dos);
					
					// Boolean
				
						if(this.pregnant == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.pregnant);
		            	}
					
					// Boolean
				
						if(this.breastfeeding == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.breastfeeding);
		            	}
					
					// String
				
						writeString(this.status_at_registration_id,dos);
					
					// String
				
						writeString(this.enrollment_setting_id,dos);
					
					// Boolean
				
						if(this.send_message == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.send_message);
		            	}
					
					// Boolean
				
						if(this.archived == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.archived);
		            	}
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// Integer
				
						writeInteger(this.facility_id,dos);
					
					// String
				
						writeString(this.facility_name,dos);
					
					// String
				
						writeString(this.lga_name,dos);
					
					// Integer
				
						writeInteger(this.visit_id,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.ovc_number,dos);
					
					// java.util.Date
				
						writeDate(this.date_of_lpm,dos);
					
					// String
				
						writeString(this.pregnancy_status_id,dos);
					
					// String
				
						writeString(this.tb_status_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",unique_id="+unique_id);
		sb.append(",entry_point_id="+entry_point_id);
		sb.append(",target_group_id="+target_group_id);
		sb.append(",date_confirmed_hiv="+String.valueOf(date_confirmed_hiv));
		sb.append(",date_enrolled_pmtct="+String.valueOf(date_enrolled_pmtct));
		sb.append(",time_hiv_diagnosis="+String.valueOf(time_hiv_diagnosis));
		sb.append(",date_of_registration="+String.valueOf(date_of_registration));
		sb.append(",date_started="+String.valueOf(date_started));
		sb.append(",source_of_referrer_id="+source_of_referrer_id);
		sb.append(",pregnant="+String.valueOf(pregnant));
		sb.append(",breastfeeding="+String.valueOf(breastfeeding));
		sb.append(",status_at_registration_id="+status_at_registration_id);
		sb.append(",enrollment_setting_id="+enrollment_setting_id);
		sb.append(",send_message="+String.valueOf(send_message));
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",facility_name="+facility_name);
		sb.append(",lga_name="+lga_name);
		sb.append(",visit_id="+String.valueOf(visit_id));
		sb.append(",uuid="+uuid);
		sb.append(",ovc_number="+ovc_number);
		sb.append(",date_of_lpm="+String.valueOf(date_of_lpm));
		sb.append(",pregnancy_status_id="+pregnancy_status_id);
		sb.append(",tb_status_id="+tb_status_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfCreate_HIV_JSONStringStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String unique_id;

				public String getUnique_id () {
					return this.unique_id;
				}
				
			    public String entry_point;

				public String getEntry_point () {
					return this.entry_point;
				}
				
			    public String target_group;

				public String getTarget_group () {
					return this.target_group;
				}
				
			    public java.util.Date date_confirmed_hiv;

				public java.util.Date getDate_confirmed_hiv () {
					return this.date_confirmed_hiv;
				}
				
			    public java.util.Date date_enrolled_pmtct;

				public java.util.Date getDate_enrolled_pmtct () {
					return this.date_enrolled_pmtct;
				}
				
			    public java.util.Date time_hiv_diagnosis;

				public java.util.Date getTime_hiv_diagnosis () {
					return this.time_hiv_diagnosis;
				}
				
			    public java.util.Date date_registration;

				public java.util.Date getDate_registration () {
					return this.date_registration;
				}
				
			    public java.util.Date date_started;

				public java.util.Date getDate_started () {
					return this.date_started;
				}
				
			    public String source_referral;

				public String getSource_referral () {
					return this.source_referral;
				}
				
			    public Boolean pregnant;

				public Boolean getPregnant () {
					return this.pregnant;
				}
				
			    public Boolean breastfeeding;

				public Boolean getBreastfeeding () {
					return this.breastfeeding;
				}
				
			    public String status_at_registration;

				public String getStatus_at_registration () {
					return this.status_at_registration;
				}
				
			    public String enrollment_setting;

				public String getEnrollment_setting () {
					return this.enrollment_setting;
				}
				
			    public Boolean send_message;

				public Boolean getSend_message () {
					return this.send_message;
				}
				
			    public Boolean archived;

				public Boolean getArchived () {
					return this.archived;
				}
				
			    public java.util.Date last_modified;

				public java.util.Date getLast_modified () {
					return this.last_modified;
				}
				
			    public Integer facility_id;

				public Integer getFacility_id () {
					return this.facility_id;
				}
				
			    public String facility_name;

				public String getFacility_name () {
					return this.facility_name;
				}
				
			    public String lga_name;

				public String getLga_name () {
					return this.lga_name;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				
			    public String tb_status;

				public String getTb_status () {
					return this.tb_status;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.uuid = readString(dis);
					
					this.unique_id = readString(dis);
					
					this.entry_point = readString(dis);
					
					this.target_group = readString(dis);
					
					this.date_confirmed_hiv = readDate(dis);
					
					this.date_enrolled_pmtct = readDate(dis);
					
					this.time_hiv_diagnosis = readDate(dis);
					
					this.date_registration = readDate(dis);
					
					this.date_started = readDate(dis);
					
					this.source_referral = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pregnant = null;
           				} else {
           			    	this.pregnant = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.breastfeeding = null;
           				} else {
           			    	this.breastfeeding = dis.readBoolean();
           				}
					
					this.status_at_registration = readString(dis);
					
					this.enrollment_setting = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.send_message = null;
           				} else {
           			    	this.send_message = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.archived = null;
           				} else {
           			    	this.archived = dis.readBoolean();
           				}
					
					this.last_modified = readDate(dis);
					
						this.facility_id = readInteger(dis);
					
					this.facility_name = readString(dis);
					
					this.lga_name = readString(dis);
					
					this.datim_id = readString(dis);
					
					this.tb_status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.unique_id,dos);
					
					// String
				
						writeString(this.entry_point,dos);
					
					// String
				
						writeString(this.target_group,dos);
					
					// java.util.Date
				
						writeDate(this.date_confirmed_hiv,dos);
					
					// java.util.Date
				
						writeDate(this.date_enrolled_pmtct,dos);
					
					// java.util.Date
				
						writeDate(this.time_hiv_diagnosis,dos);
					
					// java.util.Date
				
						writeDate(this.date_registration,dos);
					
					// java.util.Date
				
						writeDate(this.date_started,dos);
					
					// String
				
						writeString(this.source_referral,dos);
					
					// Boolean
				
						if(this.pregnant == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.pregnant);
		            	}
					
					// Boolean
				
						if(this.breastfeeding == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.breastfeeding);
		            	}
					
					// String
				
						writeString(this.status_at_registration,dos);
					
					// String
				
						writeString(this.enrollment_setting,dos);
					
					// Boolean
				
						if(this.send_message == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.send_message);
		            	}
					
					// Boolean
				
						if(this.archived == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.archived);
		            	}
					
					// java.util.Date
				
						writeDate(this.last_modified,dos);
					
					// Integer
				
						writeInteger(this.facility_id,dos);
					
					// String
				
						writeString(this.facility_name,dos);
					
					// String
				
						writeString(this.lga_name,dos);
					
					// String
				
						writeString(this.datim_id,dos);
					
					// String
				
						writeString(this.tb_status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",uuid="+uuid);
		sb.append(",unique_id="+unique_id);
		sb.append(",entry_point="+entry_point);
		sb.append(",target_group="+target_group);
		sb.append(",date_confirmed_hiv="+String.valueOf(date_confirmed_hiv));
		sb.append(",date_enrolled_pmtct="+String.valueOf(date_enrolled_pmtct));
		sb.append(",time_hiv_diagnosis="+String.valueOf(time_hiv_diagnosis));
		sb.append(",date_registration="+String.valueOf(date_registration));
		sb.append(",date_started="+String.valueOf(date_started));
		sb.append(",source_referral="+source_referral);
		sb.append(",pregnant="+String.valueOf(pregnant));
		sb.append(",breastfeeding="+String.valueOf(breastfeeding));
		sb.append(",status_at_registration="+status_at_registration);
		sb.append(",enrollment_setting="+enrollment_setting);
		sb.append(",send_message="+String.valueOf(send_message));
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",last_modified="+String.valueOf(last_modified));
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",facility_name="+facility_name);
		sb.append(",lga_name="+lga_name);
		sb.append(",datim_id="+datim_id);
		sb.append(",tb_status="+tb_status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_16Struct implements routines.system.IPersistableRow<after_tDBInput_16Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String unique_id;

				public String getUnique_id () {
					return this.unique_id;
				}
				
			    public String entry_point;

				public String getEntry_point () {
					return this.entry_point;
				}
				
			    public String target_group;

				public String getTarget_group () {
					return this.target_group;
				}
				
			    public java.util.Date date_confirmed_hiv;

				public java.util.Date getDate_confirmed_hiv () {
					return this.date_confirmed_hiv;
				}
				
			    public java.util.Date date_enrolled_pmtct;

				public java.util.Date getDate_enrolled_pmtct () {
					return this.date_enrolled_pmtct;
				}
				
			    public java.util.Date time_hiv_diagnosis;

				public java.util.Date getTime_hiv_diagnosis () {
					return this.time_hiv_diagnosis;
				}
				
			    public java.util.Date date_registration;

				public java.util.Date getDate_registration () {
					return this.date_registration;
				}
				
			    public java.util.Date date_started;

				public java.util.Date getDate_started () {
					return this.date_started;
				}
				
			    public String source_referral;

				public String getSource_referral () {
					return this.source_referral;
				}
				
			    public Boolean pregnant;

				public Boolean getPregnant () {
					return this.pregnant;
				}
				
			    public Boolean breastfeeding;

				public Boolean getBreastfeeding () {
					return this.breastfeeding;
				}
				
			    public String status_at_registration;

				public String getStatus_at_registration () {
					return this.status_at_registration;
				}
				
			    public String enrollment_setting;

				public String getEnrollment_setting () {
					return this.enrollment_setting;
				}
				
			    public Boolean send_message;

				public Boolean getSend_message () {
					return this.send_message;
				}
				
			    public Boolean archived;

				public Boolean getArchived () {
					return this.archived;
				}
				
			    public java.util.Date last_modified;

				public java.util.Date getLast_modified () {
					return this.last_modified;
				}
				
			    public Integer facility_id;

				public Integer getFacility_id () {
					return this.facility_id;
				}
				
			    public String facility_name;

				public String getFacility_name () {
					return this.facility_name;
				}
				
			    public String lga_name;

				public String getLga_name () {
					return this.lga_name;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				
			    public String tb_status;

				public String getTb_status () {
					return this.tb_status;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
					this.uuid = readString(dis);
					
					this.unique_id = readString(dis);
					
					this.entry_point = readString(dis);
					
					this.target_group = readString(dis);
					
					this.date_confirmed_hiv = readDate(dis);
					
					this.date_enrolled_pmtct = readDate(dis);
					
					this.time_hiv_diagnosis = readDate(dis);
					
					this.date_registration = readDate(dis);
					
					this.date_started = readDate(dis);
					
					this.source_referral = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pregnant = null;
           				} else {
           			    	this.pregnant = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.breastfeeding = null;
           				} else {
           			    	this.breastfeeding = dis.readBoolean();
           				}
					
					this.status_at_registration = readString(dis);
					
					this.enrollment_setting = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.send_message = null;
           				} else {
           			    	this.send_message = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.archived = null;
           				} else {
           			    	this.archived = dis.readBoolean();
           				}
					
					this.last_modified = readDate(dis);
					
						this.facility_id = readInteger(dis);
					
					this.facility_name = readString(dis);
					
					this.lga_name = readString(dis);
					
					this.datim_id = readString(dis);
					
					this.tb_status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.unique_id,dos);
					
					// String
				
						writeString(this.entry_point,dos);
					
					// String
				
						writeString(this.target_group,dos);
					
					// java.util.Date
				
						writeDate(this.date_confirmed_hiv,dos);
					
					// java.util.Date
				
						writeDate(this.date_enrolled_pmtct,dos);
					
					// java.util.Date
				
						writeDate(this.time_hiv_diagnosis,dos);
					
					// java.util.Date
				
						writeDate(this.date_registration,dos);
					
					// java.util.Date
				
						writeDate(this.date_started,dos);
					
					// String
				
						writeString(this.source_referral,dos);
					
					// Boolean
				
						if(this.pregnant == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.pregnant);
		            	}
					
					// Boolean
				
						if(this.breastfeeding == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.breastfeeding);
		            	}
					
					// String
				
						writeString(this.status_at_registration,dos);
					
					// String
				
						writeString(this.enrollment_setting,dos);
					
					// Boolean
				
						if(this.send_message == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.send_message);
		            	}
					
					// Boolean
				
						if(this.archived == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.archived);
		            	}
					
					// java.util.Date
				
						writeDate(this.last_modified,dos);
					
					// Integer
				
						writeInteger(this.facility_id,dos);
					
					// String
				
						writeString(this.facility_name,dos);
					
					// String
				
						writeString(this.lga_name,dos);
					
					// String
				
						writeString(this.datim_id,dos);
					
					// String
				
						writeString(this.tb_status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",uuid="+uuid);
		sb.append(",unique_id="+unique_id);
		sb.append(",entry_point="+entry_point);
		sb.append(",target_group="+target_group);
		sb.append(",date_confirmed_hiv="+String.valueOf(date_confirmed_hiv));
		sb.append(",date_enrolled_pmtct="+String.valueOf(date_enrolled_pmtct));
		sb.append(",time_hiv_diagnosis="+String.valueOf(time_hiv_diagnosis));
		sb.append(",date_registration="+String.valueOf(date_registration));
		sb.append(",date_started="+String.valueOf(date_started));
		sb.append(",source_referral="+source_referral);
		sb.append(",pregnant="+String.valueOf(pregnant));
		sb.append(",breastfeeding="+String.valueOf(breastfeeding));
		sb.append(",status_at_registration="+status_at_registration);
		sb.append(",enrollment_setting="+enrollment_setting);
		sb.append(",send_message="+String.valueOf(send_message));
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",last_modified="+String.valueOf(last_modified));
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",facility_name="+facility_name);
		sb.append(",lga_name="+lga_name);
		sb.append(",datim_id="+datim_id);
		sb.append(",tb_status="+tb_status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_15Process(globalMap);

		row2Struct row2 = new row2Struct();
copyOfCreate_HIV_JSONStringStruct copyOfCreate_HIV_JSONString = new copyOfCreate_HIV_JSONStringStruct();
row3Struct row3 = new row3Struct();
row4Struct row4 = new row4Struct();
row5Struct row5 = new row5Struct();





	
	/**
	 * [tSortRow_1_SortOut begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_1_SortOut", false);
		start_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfCreate_HIV_JSONString");
					}
				
		int tos_count_tSortRow_1_SortOut = 0;
		


class ComparablecopyOfCreate_HIV_JSONStringStruct extends copyOfCreate_HIV_JSONStringStruct implements Comparable<ComparablecopyOfCreate_HIV_JSONStringStruct> {
	
	public int compareTo(ComparablecopyOfCreate_HIV_JSONStringStruct other) {

		if(this.id == null && other.id != null){
			return -1;
						
		}else if(this.id != null && other.id == null){
			return 1;
						
		}else if(this.id != null && other.id != null){
			if(!this.id.equals(other.id)){
				return this.id.compareTo(other.id);
			}
		}
		return 0;
	}
}

java.util.List<ComparablecopyOfCreate_HIV_JSONStringStruct> list_tSortRow_1_SortOut = new java.util.ArrayList<ComparablecopyOfCreate_HIV_JSONStringStruct>();


 



/**
 * [tSortRow_1_SortOut begin ] stop
 */



	
	/**
	 * [tMap_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_10", false);
		start_Hash.put("tMap_10", System.currentTimeMillis());
		
	
	currentComponent="tMap_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_10 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<facilityStruct> tHash_Lookup_facility = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<facilityStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<facilityStruct>) 
					globalMap.get( "tHash_Lookup_facility" ))
					;					
					
	

facilityStruct facilityHashKey = new facilityStruct();
facilityStruct facilityDefault = new facilityStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_10__Struct  {
}
Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfCreate_HIV_JSONStringStruct copyOfCreate_HIV_JSONString_tmp = new copyOfCreate_HIV_JSONStringStruct();
// ###############################

        
        



        









 



/**
 * [tMap_10 begin ] stop
 */



	
	/**
	 * [tDBInput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_16", false);
		start_Hash.put("tDBInput_16", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_16";

	
		int tos_count_tDBInput_16 = 0;
		
	
    
	
		    int nb_line_tDBInput_16 = 0;
		    java.sql.Connection conn_tDBInput_16 = null;
				String driverClass_tDBInput_16 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_16 = java.lang.Class.forName(driverClass_tDBInput_16);
				String dbUser_tDBInput_16 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_16 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_16 = decryptedPassword_tDBInput_16;
				
				String url_tDBInput_16 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_16 = java.sql.DriverManager.getConnection(url_tDBInput_16,dbUser_tDBInput_16,dbPwd_tDBInput_16);
		        
				conn_tDBInput_16.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_16 = conn_tDBInput_16.createStatement();

		    String dbquery_tDBInput_16 = "SELECT DISTINCT * FROM public.dblink\n('lamis',\n'SELECT DISTINCT ps.id,ps.uuid,ps.unique_id,ps.entry_point,ps.target_g"
+"roup,\n	ps.date_confirmed_hiv,ps.date_enrolled_pmtct,ps.date_confirmed_hiv as time_hiv_diagnosis,\n	ps.date_registration"
+",ps.date_started,ps.source_referral,ps.pregnant,ps.breastfeeding,\n	ps.status_at_registration,ps.enrollment_setting,ps.s"
+"end_message,ps.archived,ps.last_modified,\n	ps.facility_id,fc.name AS facility_name,lg.name AS lga_name,nf.datim_id AS d"
+"atim_id,\n	ps.tb_status\nFROM public.patient ps\nINNER JOIN facility fc\n  ON ps.facility_id=fc.id\nINNER JOIN lga lg\n "
+" ON fc.lga_id=lg.id\nINNER JOIN ndr_facility nf\n  ON nf.id=ps.facility_id'\n) \nAS DATA(id INTEGER,uuid VARCHAR,unique_"
+"id VARCHAR,entry_point VARCHAR,\n	target_group VARCHAR,date_confirmed_hiv DATE,date_enrolled_pmtct DATE,\n	time_hiv_diag"
+"nosis DATE,date_registration DATE,date_started DATE,\n	source_referral VARCHAR,pregnant BOOLEAN,breastfeeding BOOLEAN,\n"
+"	status_at_registration VARCHAR,enrollment_setting VARCHAR,\n	send_message BOOLEAN,archived BOOLEAN,last_modified TIMEST"
+"AMP,\n	facility_id INTEGER,facility_name VARCHAR,lga_name VARCHAR,\n	datim_id VARCHAR,tb_status VARCHAR)\nWHERE EXISTS("
+"\n    SELECT f.id,f.name,oid.code\n    FROM base_organisation_unit f\n    JOIN base_organisation_unit_identifier oid\n   "
+" ON oid.organisation_unit_id = f.id\n    WHERE f.organisation_unit_level_id =4\n    AND oid.code=datim_id\n)\nORDER BY i"
+"d ASC";
			

            	globalMap.put("tDBInput_16_QUERY",dbquery_tDBInput_16);
		    java.sql.ResultSet rs_tDBInput_16 = null;

		    try {
		    	rs_tDBInput_16 = stmt_tDBInput_16.executeQuery(dbquery_tDBInput_16);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_16 = rs_tDBInput_16.getMetaData();
		    	int colQtyInRs_tDBInput_16 = rsmd_tDBInput_16.getColumnCount();

		    String tmpContent_tDBInput_16 = null;
		    
		    
		    while (rs_tDBInput_16.next()) {
		        nb_line_tDBInput_16++;
		        
							if(colQtyInRs_tDBInput_16 < 1) {
								row2.id = null;
							} else {
		                          
            row2.id = rs_tDBInput_16.getInt(1);
            if(rs_tDBInput_16.wasNull()){
                    row2.id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_16 < 2) {
								row2.uuid = null;
							} else {
	                         		
        	row2.uuid = routines.system.JDBCUtil.getString(rs_tDBInput_16, 2, false);
		                    }
							if(colQtyInRs_tDBInput_16 < 3) {
								row2.unique_id = null;
							} else {
	                         		
        	row2.unique_id = routines.system.JDBCUtil.getString(rs_tDBInput_16, 3, false);
		                    }
							if(colQtyInRs_tDBInput_16 < 4) {
								row2.entry_point = null;
							} else {
	                         		
        	row2.entry_point = routines.system.JDBCUtil.getString(rs_tDBInput_16, 4, false);
		                    }
							if(colQtyInRs_tDBInput_16 < 5) {
								row2.target_group = null;
							} else {
	                         		
        	row2.target_group = routines.system.JDBCUtil.getString(rs_tDBInput_16, 5, false);
		                    }
							if(colQtyInRs_tDBInput_16 < 6) {
								row2.date_confirmed_hiv = null;
							} else {
										
			row2.date_confirmed_hiv = routines.system.JDBCUtil.getDate(rs_tDBInput_16, 6);
		                    }
							if(colQtyInRs_tDBInput_16 < 7) {
								row2.date_enrolled_pmtct = null;
							} else {
										
			row2.date_enrolled_pmtct = routines.system.JDBCUtil.getDate(rs_tDBInput_16, 7);
		                    }
							if(colQtyInRs_tDBInput_16 < 8) {
								row2.time_hiv_diagnosis = null;
							} else {
										
			row2.time_hiv_diagnosis = routines.system.JDBCUtil.getDate(rs_tDBInput_16, 8);
		                    }
							if(colQtyInRs_tDBInput_16 < 9) {
								row2.date_registration = null;
							} else {
										
			row2.date_registration = routines.system.JDBCUtil.getDate(rs_tDBInput_16, 9);
		                    }
							if(colQtyInRs_tDBInput_16 < 10) {
								row2.date_started = null;
							} else {
										
			row2.date_started = routines.system.JDBCUtil.getDate(rs_tDBInput_16, 10);
		                    }
							if(colQtyInRs_tDBInput_16 < 11) {
								row2.source_referral = null;
							} else {
	                         		
        	row2.source_referral = routines.system.JDBCUtil.getString(rs_tDBInput_16, 11, false);
		                    }
							if(colQtyInRs_tDBInput_16 < 12) {
								row2.pregnant = null;
							} else {
	                         		
            row2.pregnant = rs_tDBInput_16.getBoolean(12);
            if(rs_tDBInput_16.wasNull()){
                    row2.pregnant = null;
            }
		                    }
							if(colQtyInRs_tDBInput_16 < 13) {
								row2.breastfeeding = null;
							} else {
	                         		
            row2.breastfeeding = rs_tDBInput_16.getBoolean(13);
            if(rs_tDBInput_16.wasNull()){
                    row2.breastfeeding = null;
            }
		                    }
							if(colQtyInRs_tDBInput_16 < 14) {
								row2.status_at_registration = null;
							} else {
	                         		
        	row2.status_at_registration = routines.system.JDBCUtil.getString(rs_tDBInput_16, 14, false);
		                    }
							if(colQtyInRs_tDBInput_16 < 15) {
								row2.enrollment_setting = null;
							} else {
	                         		
        	row2.enrollment_setting = routines.system.JDBCUtil.getString(rs_tDBInput_16, 15, false);
		                    }
							if(colQtyInRs_tDBInput_16 < 16) {
								row2.send_message = null;
							} else {
	                         		
            row2.send_message = rs_tDBInput_16.getBoolean(16);
            if(rs_tDBInput_16.wasNull()){
                    row2.send_message = null;
            }
		                    }
							if(colQtyInRs_tDBInput_16 < 17) {
								row2.archived = null;
							} else {
	                         		
            row2.archived = rs_tDBInput_16.getBoolean(17);
            if(rs_tDBInput_16.wasNull()){
                    row2.archived = null;
            }
		                    }
							if(colQtyInRs_tDBInput_16 < 18) {
								row2.last_modified = null;
							} else {
										
			row2.last_modified = routines.system.JDBCUtil.getDate(rs_tDBInput_16, 18);
		                    }
							if(colQtyInRs_tDBInput_16 < 19) {
								row2.facility_id = null;
							} else {
		                          
            row2.facility_id = rs_tDBInput_16.getInt(19);
            if(rs_tDBInput_16.wasNull()){
                    row2.facility_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_16 < 20) {
								row2.facility_name = null;
							} else {
	                         		
        	row2.facility_name = routines.system.JDBCUtil.getString(rs_tDBInput_16, 20, false);
		                    }
							if(colQtyInRs_tDBInput_16 < 21) {
								row2.lga_name = null;
							} else {
	                         		
        	row2.lga_name = routines.system.JDBCUtil.getString(rs_tDBInput_16, 21, false);
		                    }
							if(colQtyInRs_tDBInput_16 < 22) {
								row2.datim_id = null;
							} else {
	                         		
        	row2.datim_id = routines.system.JDBCUtil.getString(rs_tDBInput_16, 22, false);
		                    }
							if(colQtyInRs_tDBInput_16 < 23) {
								row2.tb_status = null;
							} else {
	                         		
        	row2.tb_status = routines.system.JDBCUtil.getString(rs_tDBInput_16, 23, false);
		                    }
					


 



/**
 * [tDBInput_16 begin ] stop
 */
	
	/**
	 * [tDBInput_16 main ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

 


	tos_count_tDBInput_16++;

/**
 * [tDBInput_16 main ] stop
 */
	
	/**
	 * [tDBInput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

 



/**
 * [tDBInput_16 process_data_begin ] stop
 */

	
	/**
	 * [tMap_10 main ] start
	 */

	

	
	
	currentComponent="tMap_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_10 = false;
		  boolean mainRowRejected_tMap_10 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "facility" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopfacility = false;
       		  	    	
       		  	    	
 							facilityStruct facilityObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_10) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_10 = false;
								
                        		    		    facilityHashKey.datim_code = row2.datim_id ;
                        		    		

								
		                        	facilityHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_facility.lookup( facilityHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_facility != null && tHash_Lookup_facility.getCount(facilityHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'facility' and it contains more one result from keys :  facility.datim_code = '" + facilityHashKey.datim_code + "'");
								} // G 071
							

							facilityStruct facility = null;
                    		  	 
							   
                    		  	 
	       		  	    	facilityStruct fromLookup_facility = null;
							facility = facilityDefault;
										 
							
								 
							
							
								if (tHash_Lookup_facility !=null && tHash_Lookup_facility.hasNext()) { // G 099
								
							
								
								fromLookup_facility = tHash_Lookup_facility.next();

							
							
								} // G 099
							
							

							if(fromLookup_facility != null) {
								facility = fromLookup_facility;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
        // ###############################
        // # Output tables

copyOfCreate_HIV_JSONString = null;


// # Output table : 'copyOfCreate_HIV_JSONString'
copyOfCreate_HIV_JSONString_tmp.id = row2.id ;
copyOfCreate_HIV_JSONString_tmp.person_uuid = row2.uuid ;
copyOfCreate_HIV_JSONString_tmp.unique_id = row2.unique_id ;
copyOfCreate_HIV_JSONString_tmp.entry_point_id = row2.entry_point ;
copyOfCreate_HIV_JSONString_tmp.target_group_id = row2.target_group ;
copyOfCreate_HIV_JSONString_tmp.date_confirmed_hiv = row2.date_confirmed_hiv ;
copyOfCreate_HIV_JSONString_tmp.date_enrolled_pmtct = row2.date_enrolled_pmtct ;
copyOfCreate_HIV_JSONString_tmp.time_hiv_diagnosis = row2.time_hiv_diagnosis ;
copyOfCreate_HIV_JSONString_tmp.date_of_registration = row2.date_registration ;
copyOfCreate_HIV_JSONString_tmp.date_started = row2.date_started ;
copyOfCreate_HIV_JSONString_tmp.source_of_referrer_id = row2.source_referral ;
copyOfCreate_HIV_JSONString_tmp.pregnant = row2.pregnant ;
copyOfCreate_HIV_JSONString_tmp.breastfeeding = row2.breastfeeding ;
copyOfCreate_HIV_JSONString_tmp.status_at_registration_id = row2.status_at_registration ;
copyOfCreate_HIV_JSONString_tmp.enrollment_setting_id = row2.enrollment_setting ;
copyOfCreate_HIV_JSONString_tmp.send_message = row2.send_message ;
copyOfCreate_HIV_JSONString_tmp.archived = row2.archived ;
copyOfCreate_HIV_JSONString_tmp.created_date = row2.last_modified ;
copyOfCreate_HIV_JSONString_tmp.created_by = "ETL";
copyOfCreate_HIV_JSONString_tmp.last_modified_date = row2.last_modified ;
copyOfCreate_HIV_JSONString_tmp.last_modified_by = "ETL";
copyOfCreate_HIV_JSONString_tmp.facility_id = facility.id ;
copyOfCreate_HIV_JSONString_tmp.facility_name = facility.name ;
copyOfCreate_HIV_JSONString_tmp.lga_name = facility.orgunit_name ;
copyOfCreate_HIV_JSONString_tmp.visit_id = null;
copyOfCreate_HIV_JSONString_tmp.uuid = (java.util.UUID.randomUUID()).toString();
copyOfCreate_HIV_JSONString_tmp.ovc_number = null;
copyOfCreate_HIV_JSONString_tmp.date_of_lpm = null;
copyOfCreate_HIV_JSONString_tmp.pregnancy_status_id = PreganancyStatus.preganancyStatus(row2.pregnant) ;
copyOfCreate_HIV_JSONString_tmp.tb_status_id = row2.tb_status ;
copyOfCreate_HIV_JSONString = copyOfCreate_HIV_JSONString_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_10 = false;










 


	tos_count_tMap_10++;

/**
 * [tMap_10 main ] stop
 */
	
	/**
	 * [tMap_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_begin ] stop
 */
// Start of branch "copyOfCreate_HIV_JSONString"
if(copyOfCreate_HIV_JSONString != null) { 



	
	/**
	 * [tSortRow_1_SortOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfCreate_HIV_JSONString");
					}
					



	ComparablecopyOfCreate_HIV_JSONStringStruct arrayRowtSortRow_1_SortOut = new ComparablecopyOfCreate_HIV_JSONStringStruct();

	arrayRowtSortRow_1_SortOut.id = copyOfCreate_HIV_JSONString.id;
	arrayRowtSortRow_1_SortOut.person_uuid = copyOfCreate_HIV_JSONString.person_uuid;
	arrayRowtSortRow_1_SortOut.unique_id = copyOfCreate_HIV_JSONString.unique_id;
	arrayRowtSortRow_1_SortOut.entry_point_id = copyOfCreate_HIV_JSONString.entry_point_id;
	arrayRowtSortRow_1_SortOut.target_group_id = copyOfCreate_HIV_JSONString.target_group_id;
	arrayRowtSortRow_1_SortOut.date_confirmed_hiv = copyOfCreate_HIV_JSONString.date_confirmed_hiv;
	arrayRowtSortRow_1_SortOut.date_enrolled_pmtct = copyOfCreate_HIV_JSONString.date_enrolled_pmtct;
	arrayRowtSortRow_1_SortOut.time_hiv_diagnosis = copyOfCreate_HIV_JSONString.time_hiv_diagnosis;
	arrayRowtSortRow_1_SortOut.date_of_registration = copyOfCreate_HIV_JSONString.date_of_registration;
	arrayRowtSortRow_1_SortOut.date_started = copyOfCreate_HIV_JSONString.date_started;
	arrayRowtSortRow_1_SortOut.source_of_referrer_id = copyOfCreate_HIV_JSONString.source_of_referrer_id;
	arrayRowtSortRow_1_SortOut.pregnant = copyOfCreate_HIV_JSONString.pregnant;
	arrayRowtSortRow_1_SortOut.breastfeeding = copyOfCreate_HIV_JSONString.breastfeeding;
	arrayRowtSortRow_1_SortOut.status_at_registration_id = copyOfCreate_HIV_JSONString.status_at_registration_id;
	arrayRowtSortRow_1_SortOut.enrollment_setting_id = copyOfCreate_HIV_JSONString.enrollment_setting_id;
	arrayRowtSortRow_1_SortOut.send_message = copyOfCreate_HIV_JSONString.send_message;
	arrayRowtSortRow_1_SortOut.archived = copyOfCreate_HIV_JSONString.archived;
	arrayRowtSortRow_1_SortOut.created_date = copyOfCreate_HIV_JSONString.created_date;
	arrayRowtSortRow_1_SortOut.created_by = copyOfCreate_HIV_JSONString.created_by;
	arrayRowtSortRow_1_SortOut.last_modified_date = copyOfCreate_HIV_JSONString.last_modified_date;
	arrayRowtSortRow_1_SortOut.last_modified_by = copyOfCreate_HIV_JSONString.last_modified_by;
	arrayRowtSortRow_1_SortOut.facility_id = copyOfCreate_HIV_JSONString.facility_id;
	arrayRowtSortRow_1_SortOut.facility_name = copyOfCreate_HIV_JSONString.facility_name;
	arrayRowtSortRow_1_SortOut.lga_name = copyOfCreate_HIV_JSONString.lga_name;
	arrayRowtSortRow_1_SortOut.visit_id = copyOfCreate_HIV_JSONString.visit_id;
	arrayRowtSortRow_1_SortOut.uuid = copyOfCreate_HIV_JSONString.uuid;
	arrayRowtSortRow_1_SortOut.ovc_number = copyOfCreate_HIV_JSONString.ovc_number;
	arrayRowtSortRow_1_SortOut.date_of_lpm = copyOfCreate_HIV_JSONString.date_of_lpm;
	arrayRowtSortRow_1_SortOut.pregnancy_status_id = copyOfCreate_HIV_JSONString.pregnancy_status_id;
	arrayRowtSortRow_1_SortOut.tb_status_id = copyOfCreate_HIV_JSONString.tb_status_id;	
	list_tSortRow_1_SortOut.add(arrayRowtSortRow_1_SortOut);

 


	tos_count_tSortRow_1_SortOut++;

/**
 * [tSortRow_1_SortOut main ] stop
 */
	
	/**
	 * [tSortRow_1_SortOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

 



/**
 * [tSortRow_1_SortOut process_data_begin ] stop
 */
	
	/**
	 * [tSortRow_1_SortOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

 



/**
 * [tSortRow_1_SortOut process_data_end ] stop
 */

} // End of branch "copyOfCreate_HIV_JSONString"




	
	/**
	 * [tMap_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

 



/**
 * [tDBInput_16 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_16 end ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

	}
}finally{
	if (rs_tDBInput_16 != null) {
		rs_tDBInput_16.close();
	}
	if (stmt_tDBInput_16 != null) {
		stmt_tDBInput_16.close();
	}
	if(conn_tDBInput_16 != null && !conn_tDBInput_16.isClosed()) {
		
			conn_tDBInput_16.commit();
			
		
			conn_tDBInput_16.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_16_NB_LINE",nb_line_tDBInput_16);
 

ok_Hash.put("tDBInput_16", true);
end_Hash.put("tDBInput_16", System.currentTimeMillis());

   			if (globalMap.get("tDBInput_16_NB_LINE") != null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				tJava_1Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}



/**
 * [tDBInput_16 end ] stop
 */

	
	/**
	 * [tMap_10 end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_facility != null) {
						tHash_Lookup_facility.endGet();
					}
					globalMap.remove( "tHash_Lookup_facility" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_10", true);
end_Hash.put("tMap_10", System.currentTimeMillis());




/**
 * [tMap_10 end ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

copyOfCreate_HIV_JSONStringStruct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut.toArray(new ComparablecopyOfCreate_HIV_JSONStringStruct[0]);

java.util.Arrays.sort(array_tSortRow_1_SortOut);

globalMap.put("tSortRow_1",array_tSortRow_1_SortOut);


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfCreate_HIV_JSONString");
			  	}
			  	
 

ok_Hash.put("tSortRow_1_SortOut", true);
end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());




/**
 * [tSortRow_1_SortOut end ] stop
 */



	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = context.LAMISPlus_Schema;
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("etl_hiv_enrollment_stage");
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("etl_hiv_enrollment_stage");
}

        int updateKeyCount_tDBOutput_3 = 2;
        if(updateKeyCount_tDBOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_3 = "jdbc:postgresql://"+context.LAMISPlus_Server+":"+context.LAMISPlus_Port+"/"+context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
    dbUser_tDBOutput_3 = context.LAMISPlus_Login;

	final String decryptedPassword_tDBOutput_3 = context.LAMISPlus_Password; 

    String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;

    conn_tDBOutput_3 = java.sql.DriverManager.getConnection(url_tDBOutput_3,dbUser_tDBOutput_3,dbPwd_tDBOutput_3);
	
	resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
        conn_tDBOutput_3.setAutoCommit(false);
        int commitEvery_tDBOutput_3 = 10000;
        int commitCounter_tDBOutput_3 = 0;



int count_tDBOutput_3=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_3 = conn_tDBOutput_3.getMetaData();
                                boolean whetherExist_tDBOutput_3 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_3 = dbMetaData_tDBOutput_3.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_3 = "public";
                                    if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_3 = conn_tDBOutput_3.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_3 = stmtSchema_tDBOutput_3.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_3.next()){
                                                defaultSchema_tDBOutput_3 = rsSchema_tDBOutput_3.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_3.next()) {
                                        String table_tDBOutput_3 = rsTable_tDBOutput_3.getString("TABLE_NAME");
                                        String schema_tDBOutput_3 = rsTable_tDBOutput_3.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_3.equals(("etl_hiv_enrollment_stage"))
                                            && (schema_tDBOutput_3.equals(dbschema_tDBOutput_3) || ((dbschema_tDBOutput_3 ==null || dbschema_tDBOutput_3.trim().length() ==0) && defaultSchema_tDBOutput_3.equals(schema_tDBOutput_3)))) {
                                            whetherExist_tDBOutput_3 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_3) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
                                        stmtCreate_tDBOutput_3.execute("CREATE TABLE \"" + tableName_tDBOutput_3 + "\"(\"id\" INT4 ,\"person_uuid\" VARCHAR(50)  ,\"unique_id\" VARCHAR(230)  ,\"entry_point_id\" VARCHAR(230)  ,\"target_group_id\" VARCHAR(230)  ,\"date_confirmed_hiv\" DATE ,\"date_enrolled_pmtct\" DATE ,\"time_hiv_diagnosis\" TIMESTAMP(230)  ,\"date_of_registration\" DATE ,\"date_started\" DATE ,\"source_of_referrer_id\" VARCHAR(230)  ,\"pregnant\" BOOL ,\"breastfeeding\" BOOL ,\"status_at_registration_id\" VARCHAR(230)  ,\"enrollment_setting_id\" VARCHAR(230)  ,\"send_message\" BOOL ,\"archived\" BOOL ,\"created_date\" TIMESTAMP ,\"created_by\" VARCHAR ,\"last_modified_date\" TIMESTAMP(29)  ,\"last_modified_by\" VARCHAR ,\"facility_id\" INT4 ,\"facility_name\" VARCHAR(230)  ,\"lga_name\" VARCHAR(230)  ,\"visit_id\" INT4 ,\"uuid\" VARCHAR(50)  ,\"ovc_number\" VARCHAR(230)  ,\"date_of_lpm\" TIMESTAMP ,\"pregnancy_status_id\" VARCHAR ,\"tb_status_id\" VARCHAR ,primary key(\"id\"))");
                                    }
                                }
	    String update_tDBOutput_3 = "UPDATE \"" + tableName_tDBOutput_3 + "\" SET \"unique_id\" = ?,\"entry_point_id\" = ?,\"target_group_id\" = ?,\"date_confirmed_hiv\" = ?,\"date_enrolled_pmtct\" = ?,\"time_hiv_diagnosis\" = ?,\"date_of_registration\" = ?,\"date_started\" = ?,\"source_of_referrer_id\" = ?,\"pregnant\" = ?,\"breastfeeding\" = ?,\"status_at_registration_id\" = ?,\"enrollment_setting_id\" = ?,\"send_message\" = ?,\"archived\" = ?,\"created_date\" = ?,\"created_by\" = ?,\"last_modified_date\" = ?,\"last_modified_by\" = ?,\"facility_id\" = ?,\"facility_name\" = ?,\"lga_name\" = ?,\"visit_id\" = ?,\"uuid\" = ?,\"ovc_number\" = ?,\"date_of_lpm\" = ?,\"pregnancy_status_id\" = ?,\"tb_status_id\" = ? WHERE \"id\" = ? AND \"person_uuid\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(update_tDBOutput_3);
	    resourceMap.put("pstmtUpdate_tDBOutput_3", pstmtUpdate_tDBOutput_3);
	    String insert_tDBOutput_3 = "INSERT INTO \"" + tableName_tDBOutput_3 + "\" (\"id\",\"person_uuid\",\"unique_id\",\"entry_point_id\",\"target_group_id\",\"date_confirmed_hiv\",\"date_enrolled_pmtct\",\"time_hiv_diagnosis\",\"date_of_registration\",\"date_started\",\"source_of_referrer_id\",\"pregnant\",\"breastfeeding\",\"status_at_registration_id\",\"enrollment_setting_id\",\"send_message\",\"archived\",\"created_date\",\"created_by\",\"last_modified_date\",\"last_modified_by\",\"facility_id\",\"facility_name\",\"lga_name\",\"visit_id\",\"uuid\",\"ovc_number\",\"date_of_lpm\",\"pregnancy_status_id\",\"tb_status_id\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
	    resourceMap.put("pstmtInsert_tDBOutput_3", pstmtInsert_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */




	
	/**
	 * [tDBOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_4", false);
		start_Hash.put("tDBOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tDBOutput_4 = 0;
		





String dbschema_tDBOutput_4 = null;
	dbschema_tDBOutput_4 = context.LAMISPlus_Schema;
	

String tableName_tDBOutput_4 = null;
if(dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
	tableName_tDBOutput_4 = ("etl_hiv_enrollment_duplicates");
} else {
	tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "\".\"" + ("etl_hiv_enrollment_duplicates");
}

        int updateKeyCount_tDBOutput_4 = 1;
        if(updateKeyCount_tDBOutput_4 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_4 = 0;
int nb_line_update_tDBOutput_4 = 0;
int nb_line_inserted_tDBOutput_4 = 0;
int nb_line_deleted_tDBOutput_4 = 0;
int nb_line_rejected_tDBOutput_4 = 0;

int deletedCount_tDBOutput_4=0;
int updatedCount_tDBOutput_4=0;
int insertedCount_tDBOutput_4=0;
int rejectedCount_tDBOutput_4=0;

boolean whetherReject_tDBOutput_4 = false;

java.sql.Connection conn_tDBOutput_4 = null;
String dbUser_tDBOutput_4 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_4 = "jdbc:postgresql://"+context.LAMISPlus_Server+":"+context.LAMISPlus_Port+"/"+context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
    dbUser_tDBOutput_4 = context.LAMISPlus_Login;

	final String decryptedPassword_tDBOutput_4 = context.LAMISPlus_Password; 

    String dbPwd_tDBOutput_4 = decryptedPassword_tDBOutput_4;

    conn_tDBOutput_4 = java.sql.DriverManager.getConnection(url_tDBOutput_4,dbUser_tDBOutput_4,dbPwd_tDBOutput_4);
	
	resourceMap.put("conn_tDBOutput_4", conn_tDBOutput_4);
        conn_tDBOutput_4.setAutoCommit(false);
        int commitEvery_tDBOutput_4 = 10000;
        int commitCounter_tDBOutput_4 = 0;



int count_tDBOutput_4=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_4 = conn_tDBOutput_4.getMetaData();
                                boolean whetherExist_tDBOutput_4 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_4 = dbMetaData_tDBOutput_4.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_4 = "public";
                                    if(dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_4 = conn_tDBOutput_4.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_4 = stmtSchema_tDBOutput_4.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_4.next()){
                                                defaultSchema_tDBOutput_4 = rsSchema_tDBOutput_4.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_4.next()) {
                                        String table_tDBOutput_4 = rsTable_tDBOutput_4.getString("TABLE_NAME");
                                        String schema_tDBOutput_4 = rsTable_tDBOutput_4.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_4.equals(("etl_hiv_enrollment_duplicates"))
                                            && (schema_tDBOutput_4.equals(dbschema_tDBOutput_4) || ((dbschema_tDBOutput_4 ==null || dbschema_tDBOutput_4.trim().length() ==0) && defaultSchema_tDBOutput_4.equals(schema_tDBOutput_4)))) {
                                            whetherExist_tDBOutput_4 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_4) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
                                        stmtCreate_tDBOutput_4.execute("CREATE TABLE \"" + tableName_tDBOutput_4 + "\"(\"id\" INT4 ,\"person_uuid\" VARCHAR(50)  ,\"unique_id\" VARCHAR(230)  ,\"entry_point_id\" VARCHAR(230)  ,\"target_group_id\" VARCHAR(230)  ,\"date_confirmed_hiv\" DATE ,\"date_enrolled_pmtct\" DATE ,\"time_hiv_diagnosis\" TIMESTAMP(230)  ,\"date_of_registration\" DATE ,\"date_started\" DATE ,\"source_of_referrer_id\" VARCHAR(230)  ,\"pregnant\" BOOL ,\"breastfeeding\" BOOL ,\"status_at_registration_id\" VARCHAR(230)  ,\"enrollment_setting_id\" VARCHAR(230)  ,\"send_message\" BOOL ,\"archived\" BOOL ,\"created_date\" TIMESTAMP ,\"created_by\" VARCHAR ,\"last_modified_date\" TIMESTAMP(29)  ,\"last_modified_by\" VARCHAR ,\"facility_id\" INT4 ,\"facility_name\" VARCHAR(230)  ,\"lga_name\" VARCHAR(230)  ,\"visit_id\" INT4 ,\"uuid\" VARCHAR(50)  ,\"ovc_number\" VARCHAR(230)  ,\"date_of_lpm\" TIMESTAMP ,\"pregnancy_status_id\" VARCHAR ,\"tb_status_id\" VARCHAR ,primary key(\"id\"))");
                                    }
                                }
	    java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_4 + "\" WHERE \"id\" = ?");
	    resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);
	    String insert_tDBOutput_4 = "INSERT INTO \"" + tableName_tDBOutput_4 + "\" (\"id\",\"person_uuid\",\"unique_id\",\"entry_point_id\",\"target_group_id\",\"date_confirmed_hiv\",\"date_enrolled_pmtct\",\"time_hiv_diagnosis\",\"date_of_registration\",\"date_started\",\"source_of_referrer_id\",\"pregnant\",\"breastfeeding\",\"status_at_registration_id\",\"enrollment_setting_id\",\"send_message\",\"archived\",\"created_date\",\"created_by\",\"last_modified_date\",\"last_modified_by\",\"facility_id\",\"facility_name\",\"lga_name\",\"visit_id\",\"uuid\",\"ovc_number\",\"date_of_lpm\",\"pregnancy_status_id\",\"tb_status_id\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
	    resourceMap.put("pstmtInsert_tDBOutput_4", pstmtInsert_tDBOutput_4);
	    String update_tDBOutput_4 = "UPDATE \"" + tableName_tDBOutput_4 + "\" SET \"id\" = ?,\"person_uuid\" = ?,\"unique_id\" = ?,\"entry_point_id\" = ?,\"target_group_id\" = ?,\"date_confirmed_hiv\" = ?,\"date_enrolled_pmtct\" = ?,\"time_hiv_diagnosis\" = ?,\"date_of_registration\" = ?,\"date_started\" = ?,\"source_of_referrer_id\" = ?,\"pregnant\" = ?,\"breastfeeding\" = ?,\"status_at_registration_id\" = ?,\"enrollment_setting_id\" = ?,\"send_message\" = ?,\"archived\" = ?,\"created_date\" = ?,\"created_by\" = ?,\"last_modified_date\" = ?,\"last_modified_by\" = ?,\"facility_id\" = ?,\"facility_name\" = ?,\"lga_name\" = ?,\"visit_id\" = ?,\"uuid\" = ?,\"ovc_number\" = ?,\"date_of_lpm\" = ?,\"pregnancy_status_id\" = ?,\"tb_status_id\" = ? WHERE \"id\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(update_tDBOutput_4);
	    resourceMap.put("pstmtUpdate_tDBOutput_4", pstmtUpdate_tDBOutput_4);
	    

 



/**
 * [tDBOutput_4 begin ] stop
 */



	
	/**
	 * [tUniqRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_2", false);
		start_Hash.put("tUniqRow_2", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tUniqRow_2 = 0;
		

	
		class KeyStruct_tUniqRow_2 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					Integer id;
					String person_uuid;
					String uuid;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
								
								result = prime * result + ((this.person_uuid == null) ? 0 : this.person_uuid.hashCode());
								
								result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;
				
									if (this.id == null) {
										if (other.id != null) 
											return false;
								
									} else if (!this.id.equals(other.id))
								 
										return false;
								
									if (this.person_uuid == null) {
										if (other.person_uuid != null) 
											return false;
								
									} else if (!this.person_uuid.equals(other.person_uuid))
								 
										return false;
								
									if (this.uuid == null) {
										if (other.uuid != null) 
											return false;
								
									} else if (!this.uuid.equals(other.uuid))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_2 = 0;
int nb_duplicates_tUniqRow_2 = 0;
KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>(); 

 



/**
 * [tUniqRow_2 begin ] stop
 */



	
	/**
	 * [tSortRow_1_SortIn begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_1_SortIn", false);
		start_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	
		int tos_count_tSortRow_1_SortIn = 0;
		


copyOfCreate_HIV_JSONStringStruct[] array_tSortRow_1_SortIn = (copyOfCreate_HIV_JSONStringStruct[]) globalMap.remove("tSortRow_1");

int nb_line_tSortRow_1_SortIn = 0;

copyOfCreate_HIV_JSONStringStruct current_tSortRow_1_SortIn = null;

for(int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++){
	current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
	row3.id = current_tSortRow_1_SortIn.id;
	row3.person_uuid = current_tSortRow_1_SortIn.person_uuid;
	row3.unique_id = current_tSortRow_1_SortIn.unique_id;
	row3.entry_point_id = current_tSortRow_1_SortIn.entry_point_id;
	row3.target_group_id = current_tSortRow_1_SortIn.target_group_id;
	row3.date_confirmed_hiv = current_tSortRow_1_SortIn.date_confirmed_hiv;
	row3.date_enrolled_pmtct = current_tSortRow_1_SortIn.date_enrolled_pmtct;
	row3.time_hiv_diagnosis = current_tSortRow_1_SortIn.time_hiv_diagnosis;
	row3.date_of_registration = current_tSortRow_1_SortIn.date_of_registration;
	row3.date_started = current_tSortRow_1_SortIn.date_started;
	row3.source_of_referrer_id = current_tSortRow_1_SortIn.source_of_referrer_id;
	row3.pregnant = current_tSortRow_1_SortIn.pregnant;
	row3.breastfeeding = current_tSortRow_1_SortIn.breastfeeding;
	row3.status_at_registration_id = current_tSortRow_1_SortIn.status_at_registration_id;
	row3.enrollment_setting_id = current_tSortRow_1_SortIn.enrollment_setting_id;
	row3.send_message = current_tSortRow_1_SortIn.send_message;
	row3.archived = current_tSortRow_1_SortIn.archived;
	row3.created_date = current_tSortRow_1_SortIn.created_date;
	row3.created_by = current_tSortRow_1_SortIn.created_by;
	row3.last_modified_date = current_tSortRow_1_SortIn.last_modified_date;
	row3.last_modified_by = current_tSortRow_1_SortIn.last_modified_by;
	row3.facility_id = current_tSortRow_1_SortIn.facility_id;
	row3.facility_name = current_tSortRow_1_SortIn.facility_name;
	row3.lga_name = current_tSortRow_1_SortIn.lga_name;
	row3.visit_id = current_tSortRow_1_SortIn.visit_id;
	row3.uuid = current_tSortRow_1_SortIn.uuid;
	row3.ovc_number = current_tSortRow_1_SortIn.ovc_number;
	row3.date_of_lpm = current_tSortRow_1_SortIn.date_of_lpm;
	row3.pregnancy_status_id = current_tSortRow_1_SortIn.pregnancy_status_id;
	row3.tb_status_id = current_tSortRow_1_SortIn.tb_status_id;
	// increase number of line sorted
	nb_line_tSortRow_1_SortIn++;

 



/**
 * [tSortRow_1_SortIn begin ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 


	tos_count_tSortRow_1_SortIn++;

/**
 * [tSortRow_1_SortIn main ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 



/**
 * [tSortRow_1_SortIn process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					
row5 = null;			row4 = null;			
finder_tUniqRow_2.id = row3.id;
if(row3.person_uuid == null){
	finder_tUniqRow_2.person_uuid = null;
}else{
	finder_tUniqRow_2.person_uuid = row3.person_uuid.toLowerCase();
}
if(row3.uuid == null){
	finder_tUniqRow_2.uuid = null;
}else{
	finder_tUniqRow_2.uuid = row3.uuid.toLowerCase();
}	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
new_tUniqRow_2.id = row3.id;
if(row3.person_uuid == null){
	new_tUniqRow_2.person_uuid = null;
}else{
	new_tUniqRow_2.person_uuid = row3.person_uuid.toLowerCase();
}
if(row3.uuid == null){
	new_tUniqRow_2.uuid = null;
}else{
	new_tUniqRow_2.uuid = row3.uuid.toLowerCase();
}
		
		keystUniqRow_2.add(new_tUniqRow_2);if(row4 == null){ 
	
	row4 = new row4Struct();
}row4.id = row3.id;			row4.person_uuid = row3.person_uuid;			row4.unique_id = row3.unique_id;			row4.entry_point_id = row3.entry_point_id;			row4.target_group_id = row3.target_group_id;			row4.date_confirmed_hiv = row3.date_confirmed_hiv;			row4.date_enrolled_pmtct = row3.date_enrolled_pmtct;			row4.time_hiv_diagnosis = row3.time_hiv_diagnosis;			row4.date_of_registration = row3.date_of_registration;			row4.date_started = row3.date_started;			row4.source_of_referrer_id = row3.source_of_referrer_id;			row4.pregnant = row3.pregnant;			row4.breastfeeding = row3.breastfeeding;			row4.status_at_registration_id = row3.status_at_registration_id;			row4.enrollment_setting_id = row3.enrollment_setting_id;			row4.send_message = row3.send_message;			row4.archived = row3.archived;			row4.created_date = row3.created_date;			row4.created_by = row3.created_by;			row4.last_modified_date = row3.last_modified_date;			row4.last_modified_by = row3.last_modified_by;			row4.facility_id = row3.facility_id;			row4.facility_name = row3.facility_name;			row4.lga_name = row3.lga_name;			row4.visit_id = row3.visit_id;			row4.uuid = row3.uuid;			row4.ovc_number = row3.ovc_number;			row4.date_of_lpm = row3.date_of_lpm;			row4.pregnancy_status_id = row3.pregnancy_status_id;			row4.tb_status_id = row3.tb_status_id;					
		nb_uniques_tUniqRow_2++;
	} else {
if(row5 == null){ 
	
	row5 = new row5Struct();
}				row5.id = row3.id;			row5.person_uuid = row3.person_uuid;			row5.unique_id = row3.unique_id;			row5.entry_point_id = row3.entry_point_id;			row5.target_group_id = row3.target_group_id;			row5.date_confirmed_hiv = row3.date_confirmed_hiv;			row5.date_enrolled_pmtct = row3.date_enrolled_pmtct;			row5.time_hiv_diagnosis = row3.time_hiv_diagnosis;			row5.date_of_registration = row3.date_of_registration;			row5.date_started = row3.date_started;			row5.source_of_referrer_id = row3.source_of_referrer_id;			row5.pregnant = row3.pregnant;			row5.breastfeeding = row3.breastfeeding;			row5.status_at_registration_id = row3.status_at_registration_id;			row5.enrollment_setting_id = row3.enrollment_setting_id;			row5.send_message = row3.send_message;			row5.archived = row3.archived;			row5.created_date = row3.created_date;			row5.created_by = row3.created_by;			row5.last_modified_date = row3.last_modified_date;			row5.last_modified_by = row3.last_modified_by;			row5.facility_id = row3.facility_id;			row5.facility_name = row3.facility_name;			row5.lga_name = row3.lga_name;			row5.visit_id = row3.visit_id;			row5.uuid = row3.uuid;			row5.ovc_number = row3.ovc_number;			row5.date_of_lpm = row3.date_of_lpm;			row5.pregnancy_status_id = row3.pregnancy_status_id;			row5.tb_status_id = row3.tb_status_id;			
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
	
	/**
	 * [tUniqRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					



        whetherReject_tDBOutput_3 = false;
            int updateFlag_tDBOutput_3=0;
                    if(row4.unique_id == null) {
pstmtUpdate_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(1, row4.unique_id);
}

                    if(row4.entry_point_id == null) {
pstmtUpdate_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(2, row4.entry_point_id);
}

                    if(row4.target_group_id == null) {
pstmtUpdate_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(3, row4.target_group_id);
}

                    if(row4.date_confirmed_hiv != null) {
pstmtUpdate_tDBOutput_3.setTimestamp(4, new java.sql.Timestamp(row4.date_confirmed_hiv.getTime()));
} else {
pstmtUpdate_tDBOutput_3.setNull(4, java.sql.Types.TIMESTAMP);
}

                    if(row4.date_enrolled_pmtct != null) {
pstmtUpdate_tDBOutput_3.setTimestamp(5, new java.sql.Timestamp(row4.date_enrolled_pmtct.getTime()));
} else {
pstmtUpdate_tDBOutput_3.setNull(5, java.sql.Types.TIMESTAMP);
}

                    if(row4.time_hiv_diagnosis != null) {
pstmtUpdate_tDBOutput_3.setTimestamp(6, new java.sql.Timestamp(row4.time_hiv_diagnosis.getTime()));
} else {
pstmtUpdate_tDBOutput_3.setNull(6, java.sql.Types.TIMESTAMP);
}

                    if(row4.date_of_registration != null) {
pstmtUpdate_tDBOutput_3.setTimestamp(7, new java.sql.Timestamp(row4.date_of_registration.getTime()));
} else {
pstmtUpdate_tDBOutput_3.setNull(7, java.sql.Types.TIMESTAMP);
}

                    if(row4.date_started != null) {
pstmtUpdate_tDBOutput_3.setTimestamp(8, new java.sql.Timestamp(row4.date_started.getTime()));
} else {
pstmtUpdate_tDBOutput_3.setNull(8, java.sql.Types.TIMESTAMP);
}

                    if(row4.source_of_referrer_id == null) {
pstmtUpdate_tDBOutput_3.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(9, row4.source_of_referrer_id);
}

                    if(row4.pregnant == null) {
pstmtUpdate_tDBOutput_3.setNull(10, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tDBOutput_3.setBoolean(10, row4.pregnant);
}

                    if(row4.breastfeeding == null) {
pstmtUpdate_tDBOutput_3.setNull(11, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tDBOutput_3.setBoolean(11, row4.breastfeeding);
}

                    if(row4.status_at_registration_id == null) {
pstmtUpdate_tDBOutput_3.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(12, row4.status_at_registration_id);
}

                    if(row4.enrollment_setting_id == null) {
pstmtUpdate_tDBOutput_3.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(13, row4.enrollment_setting_id);
}

                    if(row4.send_message == null) {
pstmtUpdate_tDBOutput_3.setNull(14, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tDBOutput_3.setBoolean(14, row4.send_message);
}

                    if(row4.archived == null) {
pstmtUpdate_tDBOutput_3.setNull(15, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tDBOutput_3.setBoolean(15, row4.archived);
}

                    if(row4.created_date != null) {
pstmtUpdate_tDBOutput_3.setTimestamp(16, new java.sql.Timestamp(row4.created_date.getTime()));
} else {
pstmtUpdate_tDBOutput_3.setNull(16, java.sql.Types.TIMESTAMP);
}

                    if(row4.created_by == null) {
pstmtUpdate_tDBOutput_3.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(17, row4.created_by);
}

                    if(row4.last_modified_date != null) {
pstmtUpdate_tDBOutput_3.setTimestamp(18, new java.sql.Timestamp(row4.last_modified_date.getTime()));
} else {
pstmtUpdate_tDBOutput_3.setNull(18, java.sql.Types.TIMESTAMP);
}

                    if(row4.last_modified_by == null) {
pstmtUpdate_tDBOutput_3.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(19, row4.last_modified_by);
}

                    if(row4.facility_id == null) {
pstmtUpdate_tDBOutput_3.setNull(20, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_3.setInt(20, row4.facility_id);
}

                    if(row4.facility_name == null) {
pstmtUpdate_tDBOutput_3.setNull(21, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(21, row4.facility_name);
}

                    if(row4.lga_name == null) {
pstmtUpdate_tDBOutput_3.setNull(22, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(22, row4.lga_name);
}

                    if(row4.visit_id == null) {
pstmtUpdate_tDBOutput_3.setNull(23, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_3.setInt(23, row4.visit_id);
}

                    if(row4.uuid == null) {
pstmtUpdate_tDBOutput_3.setNull(24, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(24, row4.uuid);
}

                    if(row4.ovc_number == null) {
pstmtUpdate_tDBOutput_3.setNull(25, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(25, row4.ovc_number);
}

                    if(row4.date_of_lpm != null) {
pstmtUpdate_tDBOutput_3.setTimestamp(26, new java.sql.Timestamp(row4.date_of_lpm.getTime()));
} else {
pstmtUpdate_tDBOutput_3.setNull(26, java.sql.Types.TIMESTAMP);
}

                    if(row4.pregnancy_status_id == null) {
pstmtUpdate_tDBOutput_3.setNull(27, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(27, row4.pregnancy_status_id);
}

                    if(row4.tb_status_id == null) {
pstmtUpdate_tDBOutput_3.setNull(28, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(28, row4.tb_status_id);
}


                    if(row4.id == null) {
pstmtUpdate_tDBOutput_3.setNull(29 + count_tDBOutput_3, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_3.setInt(29 + count_tDBOutput_3, row4.id);
}


                    if(row4.person_uuid == null) {
pstmtUpdate_tDBOutput_3.setNull(30 + count_tDBOutput_3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(30 + count_tDBOutput_3, row4.person_uuid);
}


            try {
				
                updateFlag_tDBOutput_3=pstmtUpdate_tDBOutput_3.executeUpdate();
                updatedCount_tDBOutput_3 = updatedCount_tDBOutput_3+updateFlag_tDBOutput_3;
				
            if(updateFlag_tDBOutput_3 == 0) {
            	
                        if(row4.id == null) {
pstmtInsert_tDBOutput_3.setNull(1, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_3.setInt(1, row4.id);
}

                        if(row4.person_uuid == null) {
pstmtInsert_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(2, row4.person_uuid);
}

                        if(row4.unique_id == null) {
pstmtInsert_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(3, row4.unique_id);
}

                        if(row4.entry_point_id == null) {
pstmtInsert_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(4, row4.entry_point_id);
}

                        if(row4.target_group_id == null) {
pstmtInsert_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(5, row4.target_group_id);
}

                        if(row4.date_confirmed_hiv != null) {
pstmtInsert_tDBOutput_3.setTimestamp(6, new java.sql.Timestamp(row4.date_confirmed_hiv.getTime()));
} else {
pstmtInsert_tDBOutput_3.setNull(6, java.sql.Types.TIMESTAMP);
}

                        if(row4.date_enrolled_pmtct != null) {
pstmtInsert_tDBOutput_3.setTimestamp(7, new java.sql.Timestamp(row4.date_enrolled_pmtct.getTime()));
} else {
pstmtInsert_tDBOutput_3.setNull(7, java.sql.Types.TIMESTAMP);
}

                        if(row4.time_hiv_diagnosis != null) {
pstmtInsert_tDBOutput_3.setTimestamp(8, new java.sql.Timestamp(row4.time_hiv_diagnosis.getTime()));
} else {
pstmtInsert_tDBOutput_3.setNull(8, java.sql.Types.TIMESTAMP);
}

                        if(row4.date_of_registration != null) {
pstmtInsert_tDBOutput_3.setTimestamp(9, new java.sql.Timestamp(row4.date_of_registration.getTime()));
} else {
pstmtInsert_tDBOutput_3.setNull(9, java.sql.Types.TIMESTAMP);
}

                        if(row4.date_started != null) {
pstmtInsert_tDBOutput_3.setTimestamp(10, new java.sql.Timestamp(row4.date_started.getTime()));
} else {
pstmtInsert_tDBOutput_3.setNull(10, java.sql.Types.TIMESTAMP);
}

                        if(row4.source_of_referrer_id == null) {
pstmtInsert_tDBOutput_3.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(11, row4.source_of_referrer_id);
}

                        if(row4.pregnant == null) {
pstmtInsert_tDBOutput_3.setNull(12, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_3.setBoolean(12, row4.pregnant);
}

                        if(row4.breastfeeding == null) {
pstmtInsert_tDBOutput_3.setNull(13, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_3.setBoolean(13, row4.breastfeeding);
}

                        if(row4.status_at_registration_id == null) {
pstmtInsert_tDBOutput_3.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(14, row4.status_at_registration_id);
}

                        if(row4.enrollment_setting_id == null) {
pstmtInsert_tDBOutput_3.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(15, row4.enrollment_setting_id);
}

                        if(row4.send_message == null) {
pstmtInsert_tDBOutput_3.setNull(16, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_3.setBoolean(16, row4.send_message);
}

                        if(row4.archived == null) {
pstmtInsert_tDBOutput_3.setNull(17, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_3.setBoolean(17, row4.archived);
}

                        if(row4.created_date != null) {
pstmtInsert_tDBOutput_3.setTimestamp(18, new java.sql.Timestamp(row4.created_date.getTime()));
} else {
pstmtInsert_tDBOutput_3.setNull(18, java.sql.Types.TIMESTAMP);
}

                        if(row4.created_by == null) {
pstmtInsert_tDBOutput_3.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(19, row4.created_by);
}

                        if(row4.last_modified_date != null) {
pstmtInsert_tDBOutput_3.setTimestamp(20, new java.sql.Timestamp(row4.last_modified_date.getTime()));
} else {
pstmtInsert_tDBOutput_3.setNull(20, java.sql.Types.TIMESTAMP);
}

                        if(row4.last_modified_by == null) {
pstmtInsert_tDBOutput_3.setNull(21, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(21, row4.last_modified_by);
}

                        if(row4.facility_id == null) {
pstmtInsert_tDBOutput_3.setNull(22, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_3.setInt(22, row4.facility_id);
}

                        if(row4.facility_name == null) {
pstmtInsert_tDBOutput_3.setNull(23, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(23, row4.facility_name);
}

                        if(row4.lga_name == null) {
pstmtInsert_tDBOutput_3.setNull(24, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(24, row4.lga_name);
}

                        if(row4.visit_id == null) {
pstmtInsert_tDBOutput_3.setNull(25, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_3.setInt(25, row4.visit_id);
}

                        if(row4.uuid == null) {
pstmtInsert_tDBOutput_3.setNull(26, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(26, row4.uuid);
}

                        if(row4.ovc_number == null) {
pstmtInsert_tDBOutput_3.setNull(27, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(27, row4.ovc_number);
}

                        if(row4.date_of_lpm != null) {
pstmtInsert_tDBOutput_3.setTimestamp(28, new java.sql.Timestamp(row4.date_of_lpm.getTime()));
} else {
pstmtInsert_tDBOutput_3.setNull(28, java.sql.Types.TIMESTAMP);
}

                        if(row4.pregnancy_status_id == null) {
pstmtInsert_tDBOutput_3.setNull(29, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(29, row4.pregnancy_status_id);
}

                        if(row4.tb_status_id == null) {
pstmtInsert_tDBOutput_3.setNull(30, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(30, row4.tb_status_id);
}

					
                    insertedCount_tDBOutput_3 = insertedCount_tDBOutput_3 + pstmtInsert_tDBOutput_3.executeUpdate();
                    nb_line_tDBOutput_3++;
					
    	            }else{
    					nb_line_tDBOutput_3++;
    					
     					
    				}
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_3 = true;
                        nb_line_tDBOutput_3++;
                            System.err.print(e.getMessage());
                }
            if(!whetherReject_tDBOutput_3) {
            }
    		    commitCounter_tDBOutput_3++;
                if(commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {
                	conn_tDBOutput_3.commit();
                	
                	commitCounter_tDBOutput_3=0;
                }

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "row4"




// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					



        whetherReject_tDBOutput_4 = false;
                    if(row5.id == null) {
pstmt_tDBOutput_4.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_4.setInt(1, row5.id);
}

            int checkCount_tDBOutput_4 = -1;
            try (java.sql.ResultSet rs_tDBOutput_4 = pstmt_tDBOutput_4.executeQuery()) {
                while(rs_tDBOutput_4.next()) {
                    checkCount_tDBOutput_4 = rs_tDBOutput_4.getInt(1);
                }
            }
            if(checkCount_tDBOutput_4 > 0) {
                        if(row5.id == null) {
pstmtUpdate_tDBOutput_4.setNull(1, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_4.setInt(1, row5.id);
}

                        if(row5.person_uuid == null) {
pstmtUpdate_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(2, row5.person_uuid);
}

                        if(row5.unique_id == null) {
pstmtUpdate_tDBOutput_4.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(3, row5.unique_id);
}

                        if(row5.entry_point_id == null) {
pstmtUpdate_tDBOutput_4.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(4, row5.entry_point_id);
}

                        if(row5.target_group_id == null) {
pstmtUpdate_tDBOutput_4.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(5, row5.target_group_id);
}

                        if(row5.date_confirmed_hiv != null) {
pstmtUpdate_tDBOutput_4.setTimestamp(6, new java.sql.Timestamp(row5.date_confirmed_hiv.getTime()));
} else {
pstmtUpdate_tDBOutput_4.setNull(6, java.sql.Types.TIMESTAMP);
}

                        if(row5.date_enrolled_pmtct != null) {
pstmtUpdate_tDBOutput_4.setTimestamp(7, new java.sql.Timestamp(row5.date_enrolled_pmtct.getTime()));
} else {
pstmtUpdate_tDBOutput_4.setNull(7, java.sql.Types.TIMESTAMP);
}

                        if(row5.time_hiv_diagnosis != null) {
pstmtUpdate_tDBOutput_4.setTimestamp(8, new java.sql.Timestamp(row5.time_hiv_diagnosis.getTime()));
} else {
pstmtUpdate_tDBOutput_4.setNull(8, java.sql.Types.TIMESTAMP);
}

                        if(row5.date_of_registration != null) {
pstmtUpdate_tDBOutput_4.setTimestamp(9, new java.sql.Timestamp(row5.date_of_registration.getTime()));
} else {
pstmtUpdate_tDBOutput_4.setNull(9, java.sql.Types.TIMESTAMP);
}

                        if(row5.date_started != null) {
pstmtUpdate_tDBOutput_4.setTimestamp(10, new java.sql.Timestamp(row5.date_started.getTime()));
} else {
pstmtUpdate_tDBOutput_4.setNull(10, java.sql.Types.TIMESTAMP);
}

                        if(row5.source_of_referrer_id == null) {
pstmtUpdate_tDBOutput_4.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(11, row5.source_of_referrer_id);
}

                        if(row5.pregnant == null) {
pstmtUpdate_tDBOutput_4.setNull(12, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tDBOutput_4.setBoolean(12, row5.pregnant);
}

                        if(row5.breastfeeding == null) {
pstmtUpdate_tDBOutput_4.setNull(13, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tDBOutput_4.setBoolean(13, row5.breastfeeding);
}

                        if(row5.status_at_registration_id == null) {
pstmtUpdate_tDBOutput_4.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(14, row5.status_at_registration_id);
}

                        if(row5.enrollment_setting_id == null) {
pstmtUpdate_tDBOutput_4.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(15, row5.enrollment_setting_id);
}

                        if(row5.send_message == null) {
pstmtUpdate_tDBOutput_4.setNull(16, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tDBOutput_4.setBoolean(16, row5.send_message);
}

                        if(row5.archived == null) {
pstmtUpdate_tDBOutput_4.setNull(17, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tDBOutput_4.setBoolean(17, row5.archived);
}

                        if(row5.created_date != null) {
pstmtUpdate_tDBOutput_4.setTimestamp(18, new java.sql.Timestamp(row5.created_date.getTime()));
} else {
pstmtUpdate_tDBOutput_4.setNull(18, java.sql.Types.TIMESTAMP);
}

                        if(row5.created_by == null) {
pstmtUpdate_tDBOutput_4.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(19, row5.created_by);
}

                        if(row5.last_modified_date != null) {
pstmtUpdate_tDBOutput_4.setTimestamp(20, new java.sql.Timestamp(row5.last_modified_date.getTime()));
} else {
pstmtUpdate_tDBOutput_4.setNull(20, java.sql.Types.TIMESTAMP);
}

                        if(row5.last_modified_by == null) {
pstmtUpdate_tDBOutput_4.setNull(21, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(21, row5.last_modified_by);
}

                        if(row5.facility_id == null) {
pstmtUpdate_tDBOutput_4.setNull(22, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_4.setInt(22, row5.facility_id);
}

                        if(row5.facility_name == null) {
pstmtUpdate_tDBOutput_4.setNull(23, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(23, row5.facility_name);
}

                        if(row5.lga_name == null) {
pstmtUpdate_tDBOutput_4.setNull(24, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(24, row5.lga_name);
}

                        if(row5.visit_id == null) {
pstmtUpdate_tDBOutput_4.setNull(25, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_4.setInt(25, row5.visit_id);
}

                        if(row5.uuid == null) {
pstmtUpdate_tDBOutput_4.setNull(26, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(26, row5.uuid);
}

                        if(row5.ovc_number == null) {
pstmtUpdate_tDBOutput_4.setNull(27, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(27, row5.ovc_number);
}

                        if(row5.date_of_lpm != null) {
pstmtUpdate_tDBOutput_4.setTimestamp(28, new java.sql.Timestamp(row5.date_of_lpm.getTime()));
} else {
pstmtUpdate_tDBOutput_4.setNull(28, java.sql.Types.TIMESTAMP);
}

                        if(row5.pregnancy_status_id == null) {
pstmtUpdate_tDBOutput_4.setNull(29, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(29, row5.pregnancy_status_id);
}

                        if(row5.tb_status_id == null) {
pstmtUpdate_tDBOutput_4.setNull(30, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_4.setString(30, row5.tb_status_id);
}

                        if(row5.id == null) {
pstmtUpdate_tDBOutput_4.setNull(31 + count_tDBOutput_4, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_4.setInt(31 + count_tDBOutput_4, row5.id);
}

                try {
					
                    updatedCount_tDBOutput_4 = updatedCount_tDBOutput_4 + pstmtUpdate_tDBOutput_4.executeUpdate();
                    nb_line_tDBOutput_4++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_4 = true;
                        nb_line_tDBOutput_4++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(row5.id == null) {
pstmtInsert_tDBOutput_4.setNull(1, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_4.setInt(1, row5.id);
}

                        if(row5.person_uuid == null) {
pstmtInsert_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(2, row5.person_uuid);
}

                        if(row5.unique_id == null) {
pstmtInsert_tDBOutput_4.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(3, row5.unique_id);
}

                        if(row5.entry_point_id == null) {
pstmtInsert_tDBOutput_4.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(4, row5.entry_point_id);
}

                        if(row5.target_group_id == null) {
pstmtInsert_tDBOutput_4.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(5, row5.target_group_id);
}

                        if(row5.date_confirmed_hiv != null) {
pstmtInsert_tDBOutput_4.setTimestamp(6, new java.sql.Timestamp(row5.date_confirmed_hiv.getTime()));
} else {
pstmtInsert_tDBOutput_4.setNull(6, java.sql.Types.TIMESTAMP);
}

                        if(row5.date_enrolled_pmtct != null) {
pstmtInsert_tDBOutput_4.setTimestamp(7, new java.sql.Timestamp(row5.date_enrolled_pmtct.getTime()));
} else {
pstmtInsert_tDBOutput_4.setNull(7, java.sql.Types.TIMESTAMP);
}

                        if(row5.time_hiv_diagnosis != null) {
pstmtInsert_tDBOutput_4.setTimestamp(8, new java.sql.Timestamp(row5.time_hiv_diagnosis.getTime()));
} else {
pstmtInsert_tDBOutput_4.setNull(8, java.sql.Types.TIMESTAMP);
}

                        if(row5.date_of_registration != null) {
pstmtInsert_tDBOutput_4.setTimestamp(9, new java.sql.Timestamp(row5.date_of_registration.getTime()));
} else {
pstmtInsert_tDBOutput_4.setNull(9, java.sql.Types.TIMESTAMP);
}

                        if(row5.date_started != null) {
pstmtInsert_tDBOutput_4.setTimestamp(10, new java.sql.Timestamp(row5.date_started.getTime()));
} else {
pstmtInsert_tDBOutput_4.setNull(10, java.sql.Types.TIMESTAMP);
}

                        if(row5.source_of_referrer_id == null) {
pstmtInsert_tDBOutput_4.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(11, row5.source_of_referrer_id);
}

                        if(row5.pregnant == null) {
pstmtInsert_tDBOutput_4.setNull(12, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_4.setBoolean(12, row5.pregnant);
}

                        if(row5.breastfeeding == null) {
pstmtInsert_tDBOutput_4.setNull(13, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_4.setBoolean(13, row5.breastfeeding);
}

                        if(row5.status_at_registration_id == null) {
pstmtInsert_tDBOutput_4.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(14, row5.status_at_registration_id);
}

                        if(row5.enrollment_setting_id == null) {
pstmtInsert_tDBOutput_4.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(15, row5.enrollment_setting_id);
}

                        if(row5.send_message == null) {
pstmtInsert_tDBOutput_4.setNull(16, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_4.setBoolean(16, row5.send_message);
}

                        if(row5.archived == null) {
pstmtInsert_tDBOutput_4.setNull(17, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_4.setBoolean(17, row5.archived);
}

                        if(row5.created_date != null) {
pstmtInsert_tDBOutput_4.setTimestamp(18, new java.sql.Timestamp(row5.created_date.getTime()));
} else {
pstmtInsert_tDBOutput_4.setNull(18, java.sql.Types.TIMESTAMP);
}

                        if(row5.created_by == null) {
pstmtInsert_tDBOutput_4.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(19, row5.created_by);
}

                        if(row5.last_modified_date != null) {
pstmtInsert_tDBOutput_4.setTimestamp(20, new java.sql.Timestamp(row5.last_modified_date.getTime()));
} else {
pstmtInsert_tDBOutput_4.setNull(20, java.sql.Types.TIMESTAMP);
}

                        if(row5.last_modified_by == null) {
pstmtInsert_tDBOutput_4.setNull(21, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(21, row5.last_modified_by);
}

                        if(row5.facility_id == null) {
pstmtInsert_tDBOutput_4.setNull(22, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_4.setInt(22, row5.facility_id);
}

                        if(row5.facility_name == null) {
pstmtInsert_tDBOutput_4.setNull(23, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(23, row5.facility_name);
}

                        if(row5.lga_name == null) {
pstmtInsert_tDBOutput_4.setNull(24, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(24, row5.lga_name);
}

                        if(row5.visit_id == null) {
pstmtInsert_tDBOutput_4.setNull(25, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_4.setInt(25, row5.visit_id);
}

                        if(row5.uuid == null) {
pstmtInsert_tDBOutput_4.setNull(26, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(26, row5.uuid);
}

                        if(row5.ovc_number == null) {
pstmtInsert_tDBOutput_4.setNull(27, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(27, row5.ovc_number);
}

                        if(row5.date_of_lpm != null) {
pstmtInsert_tDBOutput_4.setTimestamp(28, new java.sql.Timestamp(row5.date_of_lpm.getTime()));
} else {
pstmtInsert_tDBOutput_4.setNull(28, java.sql.Types.TIMESTAMP);
}

                        if(row5.pregnancy_status_id == null) {
pstmtInsert_tDBOutput_4.setNull(29, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(29, row5.pregnancy_status_id);
}

                        if(row5.tb_status_id == null) {
pstmtInsert_tDBOutput_4.setNull(30, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(30, row5.tb_status_id);
}

                try {
					
                    insertedCount_tDBOutput_4 = insertedCount_tDBOutput_4 + pstmtInsert_tDBOutput_4.executeUpdate();
                    nb_line_tDBOutput_4++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_4 = true;
                        nb_line_tDBOutput_4++;
                            System.err.print(e.getMessage());
                }
            }
    		    commitCounter_tDBOutput_4++;
                if(commitEvery_tDBOutput_4 <= commitCounter_tDBOutput_4) {
                	conn_tDBOutput_4.commit();
                	
                	commitCounter_tDBOutput_4=0;
                }

 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tUniqRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_end ] stop
 */



	
	/**
	 * [tSortRow_1_SortIn process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 



/**
 * [tSortRow_1_SortIn process_data_end ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	


}

globalMap.put("tSortRow_1_SortIn_NB_LINE",nb_line_tSortRow_1_SortIn);

 

ok_Hash.put("tSortRow_1_SortIn", true);
end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());




/**
 * [tSortRow_1_SortIn end ] stop
 */

	
	/**
	 * [tUniqRow_2 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

globalMap.put("tUniqRow_2_NB_UNIQUES",nb_uniques_tUniqRow_2);
globalMap.put("tUniqRow_2_NB_DUPLICATES",nb_duplicates_tUniqRow_2);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tUniqRow_2", true);
end_Hash.put("tUniqRow_2", System.currentTimeMillis());




/**
 * [tUniqRow_2 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



        if(pstmtUpdate_tDBOutput_3 != null){
            pstmtUpdate_tDBOutput_3.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_3");
        }
        if(pstmtInsert_tDBOutput_3 != null){
            pstmtInsert_tDBOutput_3.close();
            resourceMap.remove("pstmtInsert_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);
			
			conn_tDBOutput_3.commit();
			
		
    	conn_tDBOutput_3 .close();
    	
    	resourceMap.put("finish_tDBOutput_3", true);
    	

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());

   			if (globalMap.get("tDBOutput_3_NB_LINE") != null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If3", 0, "true");
					}
				tJava_4Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "false");
					}   	 
   				}



/**
 * [tDBOutput_3 end ] stop
 */




	
	/**
	 * [tDBOutput_4 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



        if(pstmtUpdate_tDBOutput_4 != null){
            pstmtUpdate_tDBOutput_4.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_4");
        }
        if(pstmtInsert_tDBOutput_4 != null){
            pstmtInsert_tDBOutput_4.close();
            resourceMap.remove("pstmtInsert_tDBOutput_4");
        }
        if(pstmt_tDBOutput_4 != null) {
            pstmt_tDBOutput_4.close();
            resourceMap.remove("pstmt_tDBOutput_4");
        }
    resourceMap.put("statementClosed_tDBOutput_4", true);
			
			conn_tDBOutput_4.commit();
			
		
    	conn_tDBOutput_4 .close();
    	
    	resourceMap.put("finish_tDBOutput_4", true);
    	

	nb_line_deleted_tDBOutput_4=nb_line_deleted_tDBOutput_4+ deletedCount_tDBOutput_4;
	nb_line_update_tDBOutput_4=nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
	nb_line_inserted_tDBOutput_4=nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
	nb_line_rejected_tDBOutput_4=nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;
	
        globalMap.put("tDBOutput_4_NB_LINE",nb_line_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_UPDATED",nb_line_update_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_DELETED",nb_line_deleted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tDBOutput_4", true);
end_Hash.put("tDBOutput_4", System.currentTimeMillis());




/**
 * [tDBOutput_4 end ] stop
 */















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_16:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tSortRow_1_SortIn"
							globalMap.remove("tSortRow_1");
						
					     			//free memory for "tMap_10"
					     			globalMap.remove("tHash_Lookup_facility"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_16 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

 



/**
 * [tDBInput_16 finally ] stop
 */

	
	/**
	 * [tMap_10 finally ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 finally ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

 



/**
 * [tSortRow_1_SortOut finally ] stop
 */

	
	/**
	 * [tSortRow_1_SortIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 



/**
 * [tSortRow_1_SortIn finally ] stop
 */

	
	/**
	 * [tUniqRow_2 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_3 = null;
                if ((pstmtUpdateToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_3")) != null) {
                    pstmtUpdateToClose_tDBOutput_3.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_3 = null;
                if ((pstmtInsertToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_3")) != null) {
                    pstmtInsertToClose_tDBOutput_3.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_3") == null){
            java.sql.Connection ctn_tDBOutput_3 = null;
            if((ctn_tDBOutput_3 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_3")) != null){
                try {
                    ctn_tDBOutput_3.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_3) {
                    String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :" + sqlEx_tDBOutput_3.getMessage();
                    System.err.println(errorMessage_tDBOutput_3);
                }
            }
        }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */




	
	/**
	 * [tDBOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_4 = null;
                if ((pstmtUpdateToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_4")) != null) {
                    pstmtUpdateToClose_tDBOutput_4.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_4 = null;
                if ((pstmtInsertToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_4")) != null) {
                    pstmtInsertToClose_tDBOutput_4.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
                if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_4")) != null) {
                    pstmtToClose_tDBOutput_4.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_4") == null){
            java.sql.Connection ctn_tDBOutput_4 = null;
            if((ctn_tDBOutput_4 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_4")) != null){
                try {
                    ctn_tDBOutput_4.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_4) {
                    String errorMessage_tDBOutput_4 = "failed to close the connection in tDBOutput_4 :" + sqlEx_tDBOutput_4.getMessage();
                    System.err.println(errorMessage_tDBOutput_4);
                }
            }
        }
    }
 



/**
 * [tDBOutput_4 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_16_SUBPROCESS_STATE", 1);
	}
	

public void tJava_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_4", false);
		start_Hash.put("tJava_4", System.currentTimeMillis());
		
	
	currentComponent="tJava_4";

	
		int tos_count_tJava_4 = 0;
		


int totalMigrated = globalMap.get("tDBOutput_3_NB_LINE_UPDATED") != null ? (Integer)globalMap.get("tDBOutput_3_NB_LINE_UPDATED") : 0;

System.out.println("Total etl_hiv_enrollment_stage already migrated "+totalMigrated);
System.out.println();

System.out.println("Total new etl_hiv_enrollment_stage records migrated - "+globalMap.get("tDBOutput_3_NB_LINE_INSERTED"));
System.out.println("****************************************************************");
System.out.println();
 



/**
 * [tJava_4 begin ] stop
 */
	
	/**
	 * [tJava_4 main ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 


	tos_count_tJava_4++;

/**
 * [tJava_4 main ] stop
 */
	
	/**
	 * [tJava_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 process_data_begin ] stop
 */
	
	/**
	 * [tJava_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 process_data_end ] stop
 */
	
	/**
	 * [tJava_4 end ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 

ok_Hash.put("tJava_4", true);
end_Hash.put("tJava_4", System.currentTimeMillis());




/**
 * [tJava_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_4 finally ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}
	


public static class Unique_enrollmentsStruct implements routines.system.IPersistableRow<Unique_enrollmentsStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String unique_id;

				public String getUnique_id () {
					return this.unique_id;
				}
				
			    public Long entry_point_id;

				public Long getEntry_point_id () {
					return this.entry_point_id;
				}
				
			    public Long target_group_id;

				public Long getTarget_group_id () {
					return this.target_group_id;
				}
				
			    public java.util.Date date_confirmed_hiv;

				public java.util.Date getDate_confirmed_hiv () {
					return this.date_confirmed_hiv;
				}
				
			    public java.util.Date date_enrolled_pmtct;

				public java.util.Date getDate_enrolled_pmtct () {
					return this.date_enrolled_pmtct;
				}
				
			    public Long source_of_referrer_id;

				public Long getSource_of_referrer_id () {
					return this.source_of_referrer_id;
				}
				
			    public java.util.Date time_hiv_diagnosis;

				public java.util.Date getTime_hiv_diagnosis () {
					return this.time_hiv_diagnosis;
				}
				
			    public Boolean pregnant;

				public Boolean getPregnant () {
					return this.pregnant;
				}
				
			    public Boolean breastfeeding;

				public Boolean getBreastfeeding () {
					return this.breastfeeding;
				}
				
			    public java.util.Date date_of_registration;

				public java.util.Date getDate_of_registration () {
					return this.date_of_registration;
				}
				
			    public Long status_at_registration_id;

				public Long getStatus_at_registration_id () {
					return this.status_at_registration_id;
				}
				
			    public Long enrollment_setting_id;

				public Long getEnrollment_setting_id () {
					return this.enrollment_setting_id;
				}
				
			    public java.util.Date date_started;

				public java.util.Date getDate_started () {
					return this.date_started;
				}
				
			    public Boolean send_message;

				public Boolean getSend_message () {
					return this.send_message;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public Integer facility_id;

				public Integer getFacility_id () {
					return this.facility_id;
				}
				
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public String facility_name;

				public String getFacility_name () {
					return this.facility_name;
				}
				
			    public String ovc_number;

				public String getOvc_number () {
					return this.ovc_number;
				}
				
			    public java.util.Date date_of_lpm;

				public java.util.Date getDate_of_lpm () {
					return this.date_of_lpm;
				}
				
			    public Long pregnancy_status_id;

				public Long getPregnancy_status_id () {
					return this.pregnancy_status_id;
				}
				
			    public Long tb_status_id;

				public Long getTb_status_id () {
					return this.tb_status_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Unique_enrollmentsStruct other = (Unique_enrollmentsStruct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(Unique_enrollmentsStruct other) {

		other.id = this.id;
	            other.created_date = this.created_date;
	            other.created_by = this.created_by;
	            other.last_modified_date = this.last_modified_date;
	            other.last_modified_by = this.last_modified_by;
	            other.unique_id = this.unique_id;
	            other.entry_point_id = this.entry_point_id;
	            other.target_group_id = this.target_group_id;
	            other.date_confirmed_hiv = this.date_confirmed_hiv;
	            other.date_enrolled_pmtct = this.date_enrolled_pmtct;
	            other.source_of_referrer_id = this.source_of_referrer_id;
	            other.time_hiv_diagnosis = this.time_hiv_diagnosis;
	            other.pregnant = this.pregnant;
	            other.breastfeeding = this.breastfeeding;
	            other.date_of_registration = this.date_of_registration;
	            other.status_at_registration_id = this.status_at_registration_id;
	            other.enrollment_setting_id = this.enrollment_setting_id;
	            other.date_started = this.date_started;
	            other.send_message = this.send_message;
	            other.person_uuid = this.person_uuid;
	            other.facility_id = this.facility_id;
	            other.visit_id = this.visit_id;
	            other.uuid = this.uuid;
	            other.archived = this.archived;
	            other.facility_name = this.facility_name;
	            other.ovc_number = this.ovc_number;
	            other.date_of_lpm = this.date_of_lpm;
	            other.pregnancy_status_id = this.pregnancy_status_id;
	            other.tb_status_id = this.tb_status_id;
	            
	}

	public void copyKeysDataTo(Unique_enrollmentsStruct other) {

		other.id = this.id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.created_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.last_modified_by = readString(dis);
					
					this.unique_id = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.entry_point_id = null;
           				} else {
           			    	this.entry_point_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.target_group_id = null;
           				} else {
           			    	this.target_group_id = dis.readLong();
           				}
					
					this.date_confirmed_hiv = readDate(dis);
					
					this.date_enrolled_pmtct = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.source_of_referrer_id = null;
           				} else {
           			    	this.source_of_referrer_id = dis.readLong();
           				}
					
					this.time_hiv_diagnosis = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pregnant = null;
           				} else {
           			    	this.pregnant = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.breastfeeding = null;
           				} else {
           			    	this.breastfeeding = dis.readBoolean();
           				}
					
					this.date_of_registration = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.status_at_registration_id = null;
           				} else {
           			    	this.status_at_registration_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.enrollment_setting_id = null;
           				} else {
           			    	this.enrollment_setting_id = dis.readLong();
           				}
					
					this.date_started = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.send_message = null;
           				} else {
           			    	this.send_message = dis.readBoolean();
           				}
					
					this.person_uuid = readString(dis);
					
						this.facility_id = readInteger(dis);
					
					this.visit_id = readString(dis);
					
					this.uuid = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.facility_name = readString(dis);
					
					this.ovc_number = readString(dis);
					
					this.date_of_lpm = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pregnancy_status_id = null;
           				} else {
           			    	this.pregnancy_status_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tb_status_id = null;
           				} else {
           			    	this.tb_status_id = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.unique_id,dos);
					
					// Long
				
						if(this.entry_point_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.entry_point_id);
		            	}
					
					// Long
				
						if(this.target_group_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.target_group_id);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_confirmed_hiv,dos);
					
					// java.util.Date
				
						writeDate(this.date_enrolled_pmtct,dos);
					
					// Long
				
						if(this.source_of_referrer_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.source_of_referrer_id);
		            	}
					
					// java.util.Date
				
						writeDate(this.time_hiv_diagnosis,dos);
					
					// Boolean
				
						if(this.pregnant == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.pregnant);
		            	}
					
					// Boolean
				
						if(this.breastfeeding == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.breastfeeding);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_of_registration,dos);
					
					// Long
				
						if(this.status_at_registration_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.status_at_registration_id);
		            	}
					
					// Long
				
						if(this.enrollment_setting_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.enrollment_setting_id);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_started,dos);
					
					// Boolean
				
						if(this.send_message == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.send_message);
		            	}
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// Integer
				
						writeInteger(this.facility_id,dos);
					
					// String
				
						writeString(this.visit_id,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// String
				
						writeString(this.facility_name,dos);
					
					// String
				
						writeString(this.ovc_number,dos);
					
					// java.util.Date
				
						writeDate(this.date_of_lpm,dos);
					
					// Long
				
						if(this.pregnancy_status_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.pregnancy_status_id);
		            	}
					
					// Long
				
						if(this.tb_status_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.tb_status_id);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",unique_id="+unique_id);
		sb.append(",entry_point_id="+String.valueOf(entry_point_id));
		sb.append(",target_group_id="+String.valueOf(target_group_id));
		sb.append(",date_confirmed_hiv="+String.valueOf(date_confirmed_hiv));
		sb.append(",date_enrolled_pmtct="+String.valueOf(date_enrolled_pmtct));
		sb.append(",source_of_referrer_id="+String.valueOf(source_of_referrer_id));
		sb.append(",time_hiv_diagnosis="+String.valueOf(time_hiv_diagnosis));
		sb.append(",pregnant="+String.valueOf(pregnant));
		sb.append(",breastfeeding="+String.valueOf(breastfeeding));
		sb.append(",date_of_registration="+String.valueOf(date_of_registration));
		sb.append(",status_at_registration_id="+String.valueOf(status_at_registration_id));
		sb.append(",enrollment_setting_id="+String.valueOf(enrollment_setting_id));
		sb.append(",date_started="+String.valueOf(date_started));
		sb.append(",send_message="+String.valueOf(send_message));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",visit_id="+visit_id);
		sb.append(",uuid="+uuid);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",facility_name="+facility_name);
		sb.append(",ovc_number="+ovc_number);
		sb.append(",date_of_lpm="+String.valueOf(date_of_lpm));
		sb.append(",pregnancy_status_id="+String.valueOf(pregnancy_status_id));
		sb.append(",tb_status_id="+String.valueOf(tb_status_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Unique_enrollmentsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Duplicate_enrollmentsStruct implements routines.system.IPersistableRow<Duplicate_enrollmentsStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String unique_id;

				public String getUnique_id () {
					return this.unique_id;
				}
				
			    public Long entry_point_id;

				public Long getEntry_point_id () {
					return this.entry_point_id;
				}
				
			    public Long target_group_id;

				public Long getTarget_group_id () {
					return this.target_group_id;
				}
				
			    public java.util.Date date_confirmed_hiv;

				public java.util.Date getDate_confirmed_hiv () {
					return this.date_confirmed_hiv;
				}
				
			    public java.util.Date date_enrolled_pmtct;

				public java.util.Date getDate_enrolled_pmtct () {
					return this.date_enrolled_pmtct;
				}
				
			    public Long source_of_referrer_id;

				public Long getSource_of_referrer_id () {
					return this.source_of_referrer_id;
				}
				
			    public java.util.Date time_hiv_diagnosis;

				public java.util.Date getTime_hiv_diagnosis () {
					return this.time_hiv_diagnosis;
				}
				
			    public Boolean pregnant;

				public Boolean getPregnant () {
					return this.pregnant;
				}
				
			    public Boolean breastfeeding;

				public Boolean getBreastfeeding () {
					return this.breastfeeding;
				}
				
			    public java.util.Date date_of_registration;

				public java.util.Date getDate_of_registration () {
					return this.date_of_registration;
				}
				
			    public Long status_at_registration_id;

				public Long getStatus_at_registration_id () {
					return this.status_at_registration_id;
				}
				
			    public Long enrollment_setting_id;

				public Long getEnrollment_setting_id () {
					return this.enrollment_setting_id;
				}
				
			    public java.util.Date date_started;

				public java.util.Date getDate_started () {
					return this.date_started;
				}
				
			    public Boolean send_message;

				public Boolean getSend_message () {
					return this.send_message;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public Integer facility_id;

				public Integer getFacility_id () {
					return this.facility_id;
				}
				
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public String facility_name;

				public String getFacility_name () {
					return this.facility_name;
				}
				
			    public String ovc_number;

				public String getOvc_number () {
					return this.ovc_number;
				}
				
			    public java.util.Date date_of_lpm;

				public java.util.Date getDate_of_lpm () {
					return this.date_of_lpm;
				}
				
			    public Long pregnancy_status_id;

				public Long getPregnancy_status_id () {
					return this.pregnancy_status_id;
				}
				
			    public Long tb_status_id;

				public Long getTb_status_id () {
					return this.tb_status_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Duplicate_enrollmentsStruct other = (Duplicate_enrollmentsStruct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(Duplicate_enrollmentsStruct other) {

		other.id = this.id;
	            other.created_date = this.created_date;
	            other.created_by = this.created_by;
	            other.last_modified_date = this.last_modified_date;
	            other.last_modified_by = this.last_modified_by;
	            other.unique_id = this.unique_id;
	            other.entry_point_id = this.entry_point_id;
	            other.target_group_id = this.target_group_id;
	            other.date_confirmed_hiv = this.date_confirmed_hiv;
	            other.date_enrolled_pmtct = this.date_enrolled_pmtct;
	            other.source_of_referrer_id = this.source_of_referrer_id;
	            other.time_hiv_diagnosis = this.time_hiv_diagnosis;
	            other.pregnant = this.pregnant;
	            other.breastfeeding = this.breastfeeding;
	            other.date_of_registration = this.date_of_registration;
	            other.status_at_registration_id = this.status_at_registration_id;
	            other.enrollment_setting_id = this.enrollment_setting_id;
	            other.date_started = this.date_started;
	            other.send_message = this.send_message;
	            other.person_uuid = this.person_uuid;
	            other.facility_id = this.facility_id;
	            other.visit_id = this.visit_id;
	            other.uuid = this.uuid;
	            other.archived = this.archived;
	            other.facility_name = this.facility_name;
	            other.ovc_number = this.ovc_number;
	            other.date_of_lpm = this.date_of_lpm;
	            other.pregnancy_status_id = this.pregnancy_status_id;
	            other.tb_status_id = this.tb_status_id;
	            
	}

	public void copyKeysDataTo(Duplicate_enrollmentsStruct other) {

		other.id = this.id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.created_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.last_modified_by = readString(dis);
					
					this.unique_id = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.entry_point_id = null;
           				} else {
           			    	this.entry_point_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.target_group_id = null;
           				} else {
           			    	this.target_group_id = dis.readLong();
           				}
					
					this.date_confirmed_hiv = readDate(dis);
					
					this.date_enrolled_pmtct = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.source_of_referrer_id = null;
           				} else {
           			    	this.source_of_referrer_id = dis.readLong();
           				}
					
					this.time_hiv_diagnosis = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pregnant = null;
           				} else {
           			    	this.pregnant = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.breastfeeding = null;
           				} else {
           			    	this.breastfeeding = dis.readBoolean();
           				}
					
					this.date_of_registration = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.status_at_registration_id = null;
           				} else {
           			    	this.status_at_registration_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.enrollment_setting_id = null;
           				} else {
           			    	this.enrollment_setting_id = dis.readLong();
           				}
					
					this.date_started = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.send_message = null;
           				} else {
           			    	this.send_message = dis.readBoolean();
           				}
					
					this.person_uuid = readString(dis);
					
						this.facility_id = readInteger(dis);
					
					this.visit_id = readString(dis);
					
					this.uuid = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.facility_name = readString(dis);
					
					this.ovc_number = readString(dis);
					
					this.date_of_lpm = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pregnancy_status_id = null;
           				} else {
           			    	this.pregnancy_status_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tb_status_id = null;
           				} else {
           			    	this.tb_status_id = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.unique_id,dos);
					
					// Long
				
						if(this.entry_point_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.entry_point_id);
		            	}
					
					// Long
				
						if(this.target_group_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.target_group_id);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_confirmed_hiv,dos);
					
					// java.util.Date
				
						writeDate(this.date_enrolled_pmtct,dos);
					
					// Long
				
						if(this.source_of_referrer_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.source_of_referrer_id);
		            	}
					
					// java.util.Date
				
						writeDate(this.time_hiv_diagnosis,dos);
					
					// Boolean
				
						if(this.pregnant == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.pregnant);
		            	}
					
					// Boolean
				
						if(this.breastfeeding == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.breastfeeding);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_of_registration,dos);
					
					// Long
				
						if(this.status_at_registration_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.status_at_registration_id);
		            	}
					
					// Long
				
						if(this.enrollment_setting_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.enrollment_setting_id);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_started,dos);
					
					// Boolean
				
						if(this.send_message == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.send_message);
		            	}
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// Integer
				
						writeInteger(this.facility_id,dos);
					
					// String
				
						writeString(this.visit_id,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// String
				
						writeString(this.facility_name,dos);
					
					// String
				
						writeString(this.ovc_number,dos);
					
					// java.util.Date
				
						writeDate(this.date_of_lpm,dos);
					
					// Long
				
						if(this.pregnancy_status_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.pregnancy_status_id);
		            	}
					
					// Long
				
						if(this.tb_status_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.tb_status_id);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",unique_id="+unique_id);
		sb.append(",entry_point_id="+String.valueOf(entry_point_id));
		sb.append(",target_group_id="+String.valueOf(target_group_id));
		sb.append(",date_confirmed_hiv="+String.valueOf(date_confirmed_hiv));
		sb.append(",date_enrolled_pmtct="+String.valueOf(date_enrolled_pmtct));
		sb.append(",source_of_referrer_id="+String.valueOf(source_of_referrer_id));
		sb.append(",time_hiv_diagnosis="+String.valueOf(time_hiv_diagnosis));
		sb.append(",pregnant="+String.valueOf(pregnant));
		sb.append(",breastfeeding="+String.valueOf(breastfeeding));
		sb.append(",date_of_registration="+String.valueOf(date_of_registration));
		sb.append(",status_at_registration_id="+String.valueOf(status_at_registration_id));
		sb.append(",enrollment_setting_id="+String.valueOf(enrollment_setting_id));
		sb.append(",date_started="+String.valueOf(date_started));
		sb.append(",send_message="+String.valueOf(send_message));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",visit_id="+visit_id);
		sb.append(",uuid="+uuid);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",facility_name="+facility_name);
		sb.append(",ovc_number="+ovc_number);
		sb.append(",date_of_lpm="+String.valueOf(date_of_lpm));
		sb.append(",pregnancy_status_id="+String.valueOf(pregnancy_status_id));
		sb.append(",tb_status_id="+String.valueOf(tb_status_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Duplicate_enrollmentsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfexampleStruct implements routines.system.IPersistableRow<copyOfexampleStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String unique_id;

				public String getUnique_id () {
					return this.unique_id;
				}
				
			    public Long entry_point_id;

				public Long getEntry_point_id () {
					return this.entry_point_id;
				}
				
			    public Long target_group_id;

				public Long getTarget_group_id () {
					return this.target_group_id;
				}
				
			    public java.util.Date date_confirmed_hiv;

				public java.util.Date getDate_confirmed_hiv () {
					return this.date_confirmed_hiv;
				}
				
			    public java.util.Date date_enrolled_pmtct;

				public java.util.Date getDate_enrolled_pmtct () {
					return this.date_enrolled_pmtct;
				}
				
			    public Long source_of_referrer_id;

				public Long getSource_of_referrer_id () {
					return this.source_of_referrer_id;
				}
				
			    public java.util.Date time_hiv_diagnosis;

				public java.util.Date getTime_hiv_diagnosis () {
					return this.time_hiv_diagnosis;
				}
				
			    public Boolean pregnant;

				public Boolean getPregnant () {
					return this.pregnant;
				}
				
			    public Boolean breastfeeding;

				public Boolean getBreastfeeding () {
					return this.breastfeeding;
				}
				
			    public java.util.Date date_of_registration;

				public java.util.Date getDate_of_registration () {
					return this.date_of_registration;
				}
				
			    public Long status_at_registration_id;

				public Long getStatus_at_registration_id () {
					return this.status_at_registration_id;
				}
				
			    public Long enrollment_setting_id;

				public Long getEnrollment_setting_id () {
					return this.enrollment_setting_id;
				}
				
			    public java.util.Date date_started;

				public java.util.Date getDate_started () {
					return this.date_started;
				}
				
			    public Boolean send_message;

				public Boolean getSend_message () {
					return this.send_message;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public Integer facility_id;

				public Integer getFacility_id () {
					return this.facility_id;
				}
				
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public String facility_name;

				public String getFacility_name () {
					return this.facility_name;
				}
				
			    public String ovc_number;

				public String getOvc_number () {
					return this.ovc_number;
				}
				
			    public java.util.Date date_of_lpm;

				public java.util.Date getDate_of_lpm () {
					return this.date_of_lpm;
				}
				
			    public Long pregnancy_status_id;

				public Long getPregnancy_status_id () {
					return this.pregnancy_status_id;
				}
				
			    public Long tb_status_id;

				public Long getTb_status_id () {
					return this.tb_status_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final copyOfexampleStruct other = (copyOfexampleStruct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(copyOfexampleStruct other) {

		other.id = this.id;
	            other.created_date = this.created_date;
	            other.created_by = this.created_by;
	            other.last_modified_date = this.last_modified_date;
	            other.last_modified_by = this.last_modified_by;
	            other.unique_id = this.unique_id;
	            other.entry_point_id = this.entry_point_id;
	            other.target_group_id = this.target_group_id;
	            other.date_confirmed_hiv = this.date_confirmed_hiv;
	            other.date_enrolled_pmtct = this.date_enrolled_pmtct;
	            other.source_of_referrer_id = this.source_of_referrer_id;
	            other.time_hiv_diagnosis = this.time_hiv_diagnosis;
	            other.pregnant = this.pregnant;
	            other.breastfeeding = this.breastfeeding;
	            other.date_of_registration = this.date_of_registration;
	            other.status_at_registration_id = this.status_at_registration_id;
	            other.enrollment_setting_id = this.enrollment_setting_id;
	            other.date_started = this.date_started;
	            other.send_message = this.send_message;
	            other.person_uuid = this.person_uuid;
	            other.facility_id = this.facility_id;
	            other.visit_id = this.visit_id;
	            other.uuid = this.uuid;
	            other.archived = this.archived;
	            other.facility_name = this.facility_name;
	            other.ovc_number = this.ovc_number;
	            other.date_of_lpm = this.date_of_lpm;
	            other.pregnancy_status_id = this.pregnancy_status_id;
	            other.tb_status_id = this.tb_status_id;
	            
	}

	public void copyKeysDataTo(copyOfexampleStruct other) {

		other.id = this.id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.created_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.last_modified_by = readString(dis);
					
					this.unique_id = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.entry_point_id = null;
           				} else {
           			    	this.entry_point_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.target_group_id = null;
           				} else {
           			    	this.target_group_id = dis.readLong();
           				}
					
					this.date_confirmed_hiv = readDate(dis);
					
					this.date_enrolled_pmtct = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.source_of_referrer_id = null;
           				} else {
           			    	this.source_of_referrer_id = dis.readLong();
           				}
					
					this.time_hiv_diagnosis = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pregnant = null;
           				} else {
           			    	this.pregnant = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.breastfeeding = null;
           				} else {
           			    	this.breastfeeding = dis.readBoolean();
           				}
					
					this.date_of_registration = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.status_at_registration_id = null;
           				} else {
           			    	this.status_at_registration_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.enrollment_setting_id = null;
           				} else {
           			    	this.enrollment_setting_id = dis.readLong();
           				}
					
					this.date_started = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.send_message = null;
           				} else {
           			    	this.send_message = dis.readBoolean();
           				}
					
					this.person_uuid = readString(dis);
					
						this.facility_id = readInteger(dis);
					
					this.visit_id = readString(dis);
					
					this.uuid = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.facility_name = readString(dis);
					
					this.ovc_number = readString(dis);
					
					this.date_of_lpm = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pregnancy_status_id = null;
           				} else {
           			    	this.pregnancy_status_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tb_status_id = null;
           				} else {
           			    	this.tb_status_id = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.unique_id,dos);
					
					// Long
				
						if(this.entry_point_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.entry_point_id);
		            	}
					
					// Long
				
						if(this.target_group_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.target_group_id);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_confirmed_hiv,dos);
					
					// java.util.Date
				
						writeDate(this.date_enrolled_pmtct,dos);
					
					// Long
				
						if(this.source_of_referrer_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.source_of_referrer_id);
		            	}
					
					// java.util.Date
				
						writeDate(this.time_hiv_diagnosis,dos);
					
					// Boolean
				
						if(this.pregnant == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.pregnant);
		            	}
					
					// Boolean
				
						if(this.breastfeeding == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.breastfeeding);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_of_registration,dos);
					
					// Long
				
						if(this.status_at_registration_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.status_at_registration_id);
		            	}
					
					// Long
				
						if(this.enrollment_setting_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.enrollment_setting_id);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_started,dos);
					
					// Boolean
				
						if(this.send_message == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.send_message);
		            	}
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// Integer
				
						writeInteger(this.facility_id,dos);
					
					// String
				
						writeString(this.visit_id,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// String
				
						writeString(this.facility_name,dos);
					
					// String
				
						writeString(this.ovc_number,dos);
					
					// java.util.Date
				
						writeDate(this.date_of_lpm,dos);
					
					// Long
				
						if(this.pregnancy_status_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.pregnancy_status_id);
		            	}
					
					// Long
				
						if(this.tb_status_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.tb_status_id);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",unique_id="+unique_id);
		sb.append(",entry_point_id="+String.valueOf(entry_point_id));
		sb.append(",target_group_id="+String.valueOf(target_group_id));
		sb.append(",date_confirmed_hiv="+String.valueOf(date_confirmed_hiv));
		sb.append(",date_enrolled_pmtct="+String.valueOf(date_enrolled_pmtct));
		sb.append(",source_of_referrer_id="+String.valueOf(source_of_referrer_id));
		sb.append(",time_hiv_diagnosis="+String.valueOf(time_hiv_diagnosis));
		sb.append(",pregnant="+String.valueOf(pregnant));
		sb.append(",breastfeeding="+String.valueOf(breastfeeding));
		sb.append(",date_of_registration="+String.valueOf(date_of_registration));
		sb.append(",status_at_registration_id="+String.valueOf(status_at_registration_id));
		sb.append(",enrollment_setting_id="+String.valueOf(enrollment_setting_id));
		sb.append(",date_started="+String.valueOf(date_started));
		sb.append(",send_message="+String.valueOf(send_message));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",visit_id="+visit_id);
		sb.append(",uuid="+uuid);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",facility_name="+facility_name);
		sb.append(",ovc_number="+ovc_number);
		sb.append(",date_of_lpm="+String.valueOf(date_of_lpm));
		sb.append(",pregnancy_status_id="+String.valueOf(pregnancy_status_id));
		sb.append(",tb_status_id="+String.valueOf(tb_status_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfexampleStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class map_to_clinicsStruct implements routines.system.IPersistableRow<map_to_clinicsStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String unique_id;

				public String getUnique_id () {
					return this.unique_id;
				}
				
			    public Long entry_point_id;

				public Long getEntry_point_id () {
					return this.entry_point_id;
				}
				
			    public Long target_group_id;

				public Long getTarget_group_id () {
					return this.target_group_id;
				}
				
			    public java.util.Date date_confirmed_hiv;

				public java.util.Date getDate_confirmed_hiv () {
					return this.date_confirmed_hiv;
				}
				
			    public java.util.Date date_enrolled_pmtct;

				public java.util.Date getDate_enrolled_pmtct () {
					return this.date_enrolled_pmtct;
				}
				
			    public Long source_of_referrer_id;

				public Long getSource_of_referrer_id () {
					return this.source_of_referrer_id;
				}
				
			    public java.util.Date time_hiv_diagnosis;

				public java.util.Date getTime_hiv_diagnosis () {
					return this.time_hiv_diagnosis;
				}
				
			    public Boolean pregnant;

				public Boolean getPregnant () {
					return this.pregnant;
				}
				
			    public Boolean breastfeeding;

				public Boolean getBreastfeeding () {
					return this.breastfeeding;
				}
				
			    public java.util.Date date_of_registration;

				public java.util.Date getDate_of_registration () {
					return this.date_of_registration;
				}
				
			    public Long status_at_registration_id;

				public Long getStatus_at_registration_id () {
					return this.status_at_registration_id;
				}
				
			    public Long enrollment_setting_id;

				public Long getEnrollment_setting_id () {
					return this.enrollment_setting_id;
				}
				
			    public java.util.Date date_started;

				public java.util.Date getDate_started () {
					return this.date_started;
				}
				
			    public Boolean send_message;

				public Boolean getSend_message () {
					return this.send_message;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public Integer facility_id;

				public Integer getFacility_id () {
					return this.facility_id;
				}
				
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public String facility_name;

				public String getFacility_name () {
					return this.facility_name;
				}
				
			    public String ovc_number;

				public String getOvc_number () {
					return this.ovc_number;
				}
				
			    public java.util.Date date_of_lpm;

				public java.util.Date getDate_of_lpm () {
					return this.date_of_lpm;
				}
				
			    public Long pregnancy_status_id;

				public Long getPregnancy_status_id () {
					return this.pregnancy_status_id;
				}
				
			    public Long tb_status_id;

				public Long getTb_status_id () {
					return this.tb_status_id;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.created_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.last_modified_by = readString(dis);
					
					this.unique_id = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.entry_point_id = null;
           				} else {
           			    	this.entry_point_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.target_group_id = null;
           				} else {
           			    	this.target_group_id = dis.readLong();
           				}
					
					this.date_confirmed_hiv = readDate(dis);
					
					this.date_enrolled_pmtct = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.source_of_referrer_id = null;
           				} else {
           			    	this.source_of_referrer_id = dis.readLong();
           				}
					
					this.time_hiv_diagnosis = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pregnant = null;
           				} else {
           			    	this.pregnant = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.breastfeeding = null;
           				} else {
           			    	this.breastfeeding = dis.readBoolean();
           				}
					
					this.date_of_registration = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.status_at_registration_id = null;
           				} else {
           			    	this.status_at_registration_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.enrollment_setting_id = null;
           				} else {
           			    	this.enrollment_setting_id = dis.readLong();
           				}
					
					this.date_started = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.send_message = null;
           				} else {
           			    	this.send_message = dis.readBoolean();
           				}
					
					this.person_uuid = readString(dis);
					
						this.facility_id = readInteger(dis);
					
					this.visit_id = readString(dis);
					
					this.uuid = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.facility_name = readString(dis);
					
					this.ovc_number = readString(dis);
					
					this.date_of_lpm = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pregnancy_status_id = null;
           				} else {
           			    	this.pregnancy_status_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.tb_status_id = null;
           				} else {
           			    	this.tb_status_id = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.unique_id,dos);
					
					// Long
				
						if(this.entry_point_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.entry_point_id);
		            	}
					
					// Long
				
						if(this.target_group_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.target_group_id);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_confirmed_hiv,dos);
					
					// java.util.Date
				
						writeDate(this.date_enrolled_pmtct,dos);
					
					// Long
				
						if(this.source_of_referrer_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.source_of_referrer_id);
		            	}
					
					// java.util.Date
				
						writeDate(this.time_hiv_diagnosis,dos);
					
					// Boolean
				
						if(this.pregnant == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.pregnant);
		            	}
					
					// Boolean
				
						if(this.breastfeeding == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.breastfeeding);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_of_registration,dos);
					
					// Long
				
						if(this.status_at_registration_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.status_at_registration_id);
		            	}
					
					// Long
				
						if(this.enrollment_setting_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.enrollment_setting_id);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_started,dos);
					
					// Boolean
				
						if(this.send_message == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.send_message);
		            	}
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// Integer
				
						writeInteger(this.facility_id,dos);
					
					// String
				
						writeString(this.visit_id,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// String
				
						writeString(this.facility_name,dos);
					
					// String
				
						writeString(this.ovc_number,dos);
					
					// java.util.Date
				
						writeDate(this.date_of_lpm,dos);
					
					// Long
				
						if(this.pregnancy_status_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.pregnancy_status_id);
		            	}
					
					// Long
				
						if(this.tb_status_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.tb_status_id);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",unique_id="+unique_id);
		sb.append(",entry_point_id="+String.valueOf(entry_point_id));
		sb.append(",target_group_id="+String.valueOf(target_group_id));
		sb.append(",date_confirmed_hiv="+String.valueOf(date_confirmed_hiv));
		sb.append(",date_enrolled_pmtct="+String.valueOf(date_enrolled_pmtct));
		sb.append(",source_of_referrer_id="+String.valueOf(source_of_referrer_id));
		sb.append(",time_hiv_diagnosis="+String.valueOf(time_hiv_diagnosis));
		sb.append(",pregnant="+String.valueOf(pregnant));
		sb.append(",breastfeeding="+String.valueOf(breastfeeding));
		sb.append(",date_of_registration="+String.valueOf(date_of_registration));
		sb.append(",status_at_registration_id="+String.valueOf(status_at_registration_id));
		sb.append(",enrollment_setting_id="+String.valueOf(enrollment_setting_id));
		sb.append(",date_started="+String.valueOf(date_started));
		sb.append(",send_message="+String.valueOf(send_message));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",visit_id="+visit_id);
		sb.append(",uuid="+uuid);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",facility_name="+facility_name);
		sb.append(",ovc_number="+ovc_number);
		sb.append(",date_of_lpm="+String.valueOf(date_of_lpm));
		sb.append(",pregnancy_status_id="+String.valueOf(pregnancy_status_id));
		sb.append(",tb_status_id="+String.valueOf(tb_status_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(map_to_clinicsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Entry_pointStruct implements routines.system.IPersistableRow<Entry_pointStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];

	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public Long entry_point_id;

				public Long getEntry_point_id () {
					return this.entry_point_id;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String unique_id;

				public String getUnique_id () {
					return this.unique_id;
				}
				
			    public java.util.Date date_confirmed_hiv;

				public java.util.Date getDate_confirmed_hiv () {
					return this.date_confirmed_hiv;
				}
				
			    public java.util.Date date_enrolled_pmtct;

				public java.util.Date getDate_enrolled_pmtct () {
					return this.date_enrolled_pmtct;
				}
				
			    public java.util.Date time_hiv_diagnosis;

				public java.util.Date getTime_hiv_diagnosis () {
					return this.time_hiv_diagnosis;
				}
				
			    public Boolean pregnant;

				public Boolean getPregnant () {
					return this.pregnant;
				}
				
			    public Boolean breastfeeding;

				public Boolean getBreastfeeding () {
					return this.breastfeeding;
				}
				
			    public java.util.Date date_of_registration;

				public java.util.Date getDate_of_registration () {
					return this.date_of_registration;
				}
				
			    public java.util.Date date_started;

				public java.util.Date getDate_started () {
					return this.date_started;
				}
				
			    public Boolean send_message;

				public Boolean getSend_message () {
					return this.send_message;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public Integer facility_id;

				public Integer getFacility_id () {
					return this.facility_id;
				}
				
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public String facility_name;

				public String getFacility_name () {
					return this.facility_name;
				}
				
			    public String ovc_number;

				public String getOvc_number () {
					return this.ovc_number;
				}
				
			    public java.util.Date date_of_lpm;

				public java.util.Date getDate_of_lpm () {
					return this.date_of_lpm;
				}
				
			    public String tb_status_id;

				public String getTb_status_id () {
					return this.tb_status_id;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.entry_point_id = null;
           				} else {
           			    	this.entry_point_id = dis.readLong();
           				}
					
					this.created_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.last_modified_by = readString(dis);
					
					this.unique_id = readString(dis);
					
					this.date_confirmed_hiv = readDate(dis);
					
					this.date_enrolled_pmtct = readDate(dis);
					
					this.time_hiv_diagnosis = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pregnant = null;
           				} else {
           			    	this.pregnant = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.breastfeeding = null;
           				} else {
           			    	this.breastfeeding = dis.readBoolean();
           				}
					
					this.date_of_registration = readDate(dis);
					
					this.date_started = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.send_message = null;
           				} else {
           			    	this.send_message = dis.readBoolean();
           				}
					
					this.person_uuid = readString(dis);
					
						this.facility_id = readInteger(dis);
					
					this.visit_id = readString(dis);
					
					this.uuid = readString(dis);
					
						this.archived = readInteger(dis);
					
					this.facility_name = readString(dis);
					
					this.ovc_number = readString(dis);
					
					this.date_of_lpm = readDate(dis);
					
					this.tb_status_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
					// Long
				
						if(this.entry_point_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.entry_point_id);
		            	}
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.unique_id,dos);
					
					// java.util.Date
				
						writeDate(this.date_confirmed_hiv,dos);
					
					// java.util.Date
				
						writeDate(this.date_enrolled_pmtct,dos);
					
					// java.util.Date
				
						writeDate(this.time_hiv_diagnosis,dos);
					
					// Boolean
				
						if(this.pregnant == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.pregnant);
		            	}
					
					// Boolean
				
						if(this.breastfeeding == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.breastfeeding);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_of_registration,dos);
					
					// java.util.Date
				
						writeDate(this.date_started,dos);
					
					// Boolean
				
						if(this.send_message == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.send_message);
		            	}
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// Integer
				
						writeInteger(this.facility_id,dos);
					
					// String
				
						writeString(this.visit_id,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// String
				
						writeString(this.facility_name,dos);
					
					// String
				
						writeString(this.ovc_number,dos);
					
					// java.util.Date
				
						writeDate(this.date_of_lpm,dos);
					
					// String
				
						writeString(this.tb_status_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",entry_point_id="+String.valueOf(entry_point_id));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",unique_id="+unique_id);
		sb.append(",date_confirmed_hiv="+String.valueOf(date_confirmed_hiv));
		sb.append(",date_enrolled_pmtct="+String.valueOf(date_enrolled_pmtct));
		sb.append(",time_hiv_diagnosis="+String.valueOf(time_hiv_diagnosis));
		sb.append(",pregnant="+String.valueOf(pregnant));
		sb.append(",breastfeeding="+String.valueOf(breastfeeding));
		sb.append(",date_of_registration="+String.valueOf(date_of_registration));
		sb.append(",date_started="+String.valueOf(date_started));
		sb.append(",send_message="+String.valueOf(send_message));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",visit_id="+visit_id);
		sb.append(",uuid="+uuid);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",facility_name="+facility_name);
		sb.append(",ovc_number="+ovc_number);
		sb.append(",date_of_lpm="+String.valueOf(date_of_lpm));
		sb.append(",tb_status_id="+tb_status_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Entry_pointStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class entry_points_patientStruct implements routines.system.IPersistableRow<entry_points_patientStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];

	
			    public Integer patient_id;

				public Integer getPatient_id () {
					return this.patient_id;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String unique_id;

				public String getUnique_id () {
					return this.unique_id;
				}
				
			    public String entry_point_id;

				public String getEntry_point_id () {
					return this.entry_point_id;
				}
				
			    public java.util.Date date_confirmed_hiv;

				public java.util.Date getDate_confirmed_hiv () {
					return this.date_confirmed_hiv;
				}
				
			    public java.util.Date date_enrolled_pmtct;

				public java.util.Date getDate_enrolled_pmtct () {
					return this.date_enrolled_pmtct;
				}
				
			    public java.util.Date time_hiv_diagnosis;

				public java.util.Date getTime_hiv_diagnosis () {
					return this.time_hiv_diagnosis;
				}
				
			    public Boolean pregnant;

				public Boolean getPregnant () {
					return this.pregnant;
				}
				
			    public Boolean breastfeeding;

				public Boolean getBreastfeeding () {
					return this.breastfeeding;
				}
				
			    public java.util.Date date_of_registration;

				public java.util.Date getDate_of_registration () {
					return this.date_of_registration;
				}
				
			    public java.util.Date date_started;

				public java.util.Date getDate_started () {
					return this.date_started;
				}
				
			    public Boolean send_message;

				public Boolean getSend_message () {
					return this.send_message;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public Integer facility_id;

				public Integer getFacility_id () {
					return this.facility_id;
				}
				
			    public long pv_id;

				public long getPv_id () {
					return this.pv_id;
				}
				
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				
			    public Boolean archived;

				public Boolean getArchived () {
					return this.archived;
				}
				
			    public String facility_name;

				public String getFacility_name () {
					return this.facility_name;
				}
				
			    public String ovc_number;

				public String getOvc_number () {
					return this.ovc_number;
				}
				
			    public java.util.Date date_of_lpm;

				public java.util.Date getDate_of_lpm () {
					return this.date_of_lpm;
				}
				
			    public String tb_status_id;

				public String getTb_status_id () {
					return this.tb_status_id;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
						this.patient_id = readInteger(dis);
					
					this.uuid = readString(dis);
					
					this.created_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.last_modified_by = readString(dis);
					
					this.unique_id = readString(dis);
					
					this.entry_point_id = readString(dis);
					
					this.date_confirmed_hiv = readDate(dis);
					
					this.date_enrolled_pmtct = readDate(dis);
					
					this.time_hiv_diagnosis = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pregnant = null;
           				} else {
           			    	this.pregnant = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.breastfeeding = null;
           				} else {
           			    	this.breastfeeding = dis.readBoolean();
           				}
					
					this.date_of_registration = readDate(dis);
					
					this.date_started = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.send_message = null;
           				} else {
           			    	this.send_message = dis.readBoolean();
           				}
					
					this.person_uuid = readString(dis);
					
						this.facility_id = readInteger(dis);
					
			        this.pv_id = dis.readLong();
					
					this.visit_id = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.archived = null;
           				} else {
           			    	this.archived = dis.readBoolean();
           				}
					
					this.facility_name = readString(dis);
					
					this.ovc_number = readString(dis);
					
					this.date_of_lpm = readDate(dis);
					
					this.tb_status_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.patient_id,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.unique_id,dos);
					
					// String
				
						writeString(this.entry_point_id,dos);
					
					// java.util.Date
				
						writeDate(this.date_confirmed_hiv,dos);
					
					// java.util.Date
				
						writeDate(this.date_enrolled_pmtct,dos);
					
					// java.util.Date
				
						writeDate(this.time_hiv_diagnosis,dos);
					
					// Boolean
				
						if(this.pregnant == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.pregnant);
		            	}
					
					// Boolean
				
						if(this.breastfeeding == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.breastfeeding);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_of_registration,dos);
					
					// java.util.Date
				
						writeDate(this.date_started,dos);
					
					// Boolean
				
						if(this.send_message == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.send_message);
		            	}
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// Integer
				
						writeInteger(this.facility_id,dos);
					
					// long
				
		            	dos.writeLong(this.pv_id);
					
					// String
				
						writeString(this.visit_id,dos);
					
					// Boolean
				
						if(this.archived == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.archived);
		            	}
					
					// String
				
						writeString(this.facility_name,dos);
					
					// String
				
						writeString(this.ovc_number,dos);
					
					// java.util.Date
				
						writeDate(this.date_of_lpm,dos);
					
					// String
				
						writeString(this.tb_status_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_id="+String.valueOf(patient_id));
		sb.append(",uuid="+uuid);
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",unique_id="+unique_id);
		sb.append(",entry_point_id="+entry_point_id);
		sb.append(",date_confirmed_hiv="+String.valueOf(date_confirmed_hiv));
		sb.append(",date_enrolled_pmtct="+String.valueOf(date_enrolled_pmtct));
		sb.append(",time_hiv_diagnosis="+String.valueOf(time_hiv_diagnosis));
		sb.append(",pregnant="+String.valueOf(pregnant));
		sb.append(",breastfeeding="+String.valueOf(breastfeeding));
		sb.append(",date_of_registration="+String.valueOf(date_of_registration));
		sb.append(",date_started="+String.valueOf(date_started));
		sb.append(",send_message="+String.valueOf(send_message));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",pv_id="+String.valueOf(pv_id));
		sb.append(",visit_id="+visit_id);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",facility_name="+facility_name);
		sb.append(",ovc_number="+ovc_number);
		sb.append(",date_of_lpm="+String.valueOf(date_of_lpm));
		sb.append(",tb_status_id="+tb_status_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(entry_points_patientStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_2Struct implements routines.system.IPersistableRow<after_tDBInput_2Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];

	
			    public Integer patient_id;

				public Integer getPatient_id () {
					return this.patient_id;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public java.util.Date last_modified_date;

				public java.util.Date getLast_modified_date () {
					return this.last_modified_date;
				}
				
			    public String last_modified_by;

				public String getLast_modified_by () {
					return this.last_modified_by;
				}
				
			    public String unique_id;

				public String getUnique_id () {
					return this.unique_id;
				}
				
			    public String entry_point_id;

				public String getEntry_point_id () {
					return this.entry_point_id;
				}
				
			    public java.util.Date date_confirmed_hiv;

				public java.util.Date getDate_confirmed_hiv () {
					return this.date_confirmed_hiv;
				}
				
			    public java.util.Date date_enrolled_pmtct;

				public java.util.Date getDate_enrolled_pmtct () {
					return this.date_enrolled_pmtct;
				}
				
			    public java.util.Date time_hiv_diagnosis;

				public java.util.Date getTime_hiv_diagnosis () {
					return this.time_hiv_diagnosis;
				}
				
			    public Boolean pregnant;

				public Boolean getPregnant () {
					return this.pregnant;
				}
				
			    public Boolean breastfeeding;

				public Boolean getBreastfeeding () {
					return this.breastfeeding;
				}
				
			    public java.util.Date date_of_registration;

				public java.util.Date getDate_of_registration () {
					return this.date_of_registration;
				}
				
			    public java.util.Date date_started;

				public java.util.Date getDate_started () {
					return this.date_started;
				}
				
			    public Boolean send_message;

				public Boolean getSend_message () {
					return this.send_message;
				}
				
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public Integer facility_id;

				public Integer getFacility_id () {
					return this.facility_id;
				}
				
			    public long pv_id;

				public long getPv_id () {
					return this.pv_id;
				}
				
			    public String visit_id;

				public String getVisit_id () {
					return this.visit_id;
				}
				
			    public Boolean archived;

				public Boolean getArchived () {
					return this.archived;
				}
				
			    public String facility_name;

				public String getFacility_name () {
					return this.facility_name;
				}
				
			    public String ovc_number;

				public String getOvc_number () {
					return this.ovc_number;
				}
				
			    public java.util.Date date_of_lpm;

				public java.util.Date getDate_of_lpm () {
					return this.date_of_lpm;
				}
				
			    public String tb_status_id;

				public String getTb_status_id () {
					return this.tb_status_id;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
						this.patient_id = readInteger(dis);
					
					this.uuid = readString(dis);
					
					this.created_date = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.last_modified_date = readDate(dis);
					
					this.last_modified_by = readString(dis);
					
					this.unique_id = readString(dis);
					
					this.entry_point_id = readString(dis);
					
					this.date_confirmed_hiv = readDate(dis);
					
					this.date_enrolled_pmtct = readDate(dis);
					
					this.time_hiv_diagnosis = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pregnant = null;
           				} else {
           			    	this.pregnant = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.breastfeeding = null;
           				} else {
           			    	this.breastfeeding = dis.readBoolean();
           				}
					
					this.date_of_registration = readDate(dis);
					
					this.date_started = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.send_message = null;
           				} else {
           			    	this.send_message = dis.readBoolean();
           				}
					
					this.person_uuid = readString(dis);
					
						this.facility_id = readInteger(dis);
					
			        this.pv_id = dis.readLong();
					
					this.visit_id = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.archived = null;
           				} else {
           			    	this.archived = dis.readBoolean();
           				}
					
					this.facility_name = readString(dis);
					
					this.ovc_number = readString(dis);
					
					this.date_of_lpm = readDate(dis);
					
					this.tb_status_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.patient_id,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// java.util.Date
				
						writeDate(this.last_modified_date,dos);
					
					// String
				
						writeString(this.last_modified_by,dos);
					
					// String
				
						writeString(this.unique_id,dos);
					
					// String
				
						writeString(this.entry_point_id,dos);
					
					// java.util.Date
				
						writeDate(this.date_confirmed_hiv,dos);
					
					// java.util.Date
				
						writeDate(this.date_enrolled_pmtct,dos);
					
					// java.util.Date
				
						writeDate(this.time_hiv_diagnosis,dos);
					
					// Boolean
				
						if(this.pregnant == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.pregnant);
		            	}
					
					// Boolean
				
						if(this.breastfeeding == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.breastfeeding);
		            	}
					
					// java.util.Date
				
						writeDate(this.date_of_registration,dos);
					
					// java.util.Date
				
						writeDate(this.date_started,dos);
					
					// Boolean
				
						if(this.send_message == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.send_message);
		            	}
					
					// String
				
						writeString(this.person_uuid,dos);
					
					// Integer
				
						writeInteger(this.facility_id,dos);
					
					// long
				
		            	dos.writeLong(this.pv_id);
					
					// String
				
						writeString(this.visit_id,dos);
					
					// Boolean
				
						if(this.archived == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.archived);
		            	}
					
					// String
				
						writeString(this.facility_name,dos);
					
					// String
				
						writeString(this.ovc_number,dos);
					
					// java.util.Date
				
						writeDate(this.date_of_lpm,dos);
					
					// String
				
						writeString(this.tb_status_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("patient_id="+String.valueOf(patient_id));
		sb.append(",uuid="+uuid);
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",created_by="+created_by);
		sb.append(",last_modified_date="+String.valueOf(last_modified_date));
		sb.append(",last_modified_by="+last_modified_by);
		sb.append(",unique_id="+unique_id);
		sb.append(",entry_point_id="+entry_point_id);
		sb.append(",date_confirmed_hiv="+String.valueOf(date_confirmed_hiv));
		sb.append(",date_enrolled_pmtct="+String.valueOf(date_enrolled_pmtct));
		sb.append(",time_hiv_diagnosis="+String.valueOf(time_hiv_diagnosis));
		sb.append(",pregnant="+String.valueOf(pregnant));
		sb.append(",breastfeeding="+String.valueOf(breastfeeding));
		sb.append(",date_of_registration="+String.valueOf(date_of_registration));
		sb.append(",date_started="+String.valueOf(date_started));
		sb.append(",send_message="+String.valueOf(send_message));
		sb.append(",person_uuid="+person_uuid);
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",pv_id="+String.valueOf(pv_id));
		sb.append(",visit_id="+visit_id);
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",facility_name="+facility_name);
		sb.append(",ovc_number="+ovc_number);
		sb.append(",date_of_lpm="+String.valueOf(date_of_lpm));
		sb.append(",tb_status_id="+tb_status_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_1Process(globalMap);
		tDBInput_4Process(globalMap);
		tDBInput_8Process(globalMap);
		tDBInput_10Process(globalMap);
		tDBInput_12Process(globalMap);
		tDBInput_14Process(globalMap);
		tDBInput_6Process(globalMap);

		entry_points_patientStruct entry_points_patient = new entry_points_patientStruct();
Entry_pointStruct Entry_point = new Entry_pointStruct();
map_to_clinicsStruct map_to_clinics = new map_to_clinicsStruct();
copyOfexampleStruct copyOfexample = new copyOfexampleStruct();
Unique_enrollmentsStruct Unique_enrollments = new Unique_enrollmentsStruct();
Duplicate_enrollmentsStruct Duplicate_enrollments = new Duplicate_enrollmentsStruct();








	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Unique_enrollments");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = context.LAMISPlus_Schema;
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("hiv_enrollment");
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("hiv_enrollment");
}

        int updateKeyCount_tDBOutput_1 = 1;
        if(updateKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_1 = "jdbc:postgresql://"+context.LAMISPlus_Server+":"+context.LAMISPlus_Port+"/"+context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
    dbUser_tDBOutput_1 = context.LAMISPlus_Login;

	final String decryptedPassword_tDBOutput_1 = context.LAMISPlus_Password; 

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;



int count_tDBOutput_1=0;
	    String update_tDBOutput_1 = "UPDATE \"" + tableName_tDBOutput_1 + "\" SET \"id\" = ?,\"created_date\" = ?,\"created_by\" = ?,\"last_modified_date\" = ?,\"last_modified_by\" = ?,\"unique_id\" = ?,\"entry_point_id\" = ?,\"target_group_id\" = ?,\"date_confirmed_hiv\" = ?,\"date_enrolled_pmtct\" = ?,\"source_of_referrer_id\" = ?,\"time_hiv_diagnosis\" = ?,\"pregnant\" = ?,\"breastfeeding\" = ?,\"date_of_registration\" = ?,\"status_at_registration_id\" = ?,\"enrollment_setting_id\" = ?,\"date_started\" = ?,\"send_message\" = ?,\"person_uuid\" = ?,\"facility_id\" = ?,\"visit_id\" = ?,\"uuid\" = ?,\"archived\" = ?,\"facility_name\" = ?,\"ovc_number\" = ?,\"date_of_lpm\" = ?,\"pregnancy_status_id\" = ?,\"tb_status_id\" = ? WHERE \"uuid\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
	    resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);
	    String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1 + "\" (\"id\",\"created_date\",\"created_by\",\"last_modified_date\",\"last_modified_by\",\"unique_id\",\"entry_point_id\",\"target_group_id\",\"date_confirmed_hiv\",\"date_enrolled_pmtct\",\"source_of_referrer_id\",\"time_hiv_diagnosis\",\"pregnant\",\"breastfeeding\",\"date_of_registration\",\"status_at_registration_id\",\"enrollment_setting_id\",\"date_started\",\"send_message\",\"person_uuid\",\"facility_id\",\"visit_id\",\"uuid\",\"archived\",\"facility_name\",\"ovc_number\",\"date_of_lpm\",\"pregnancy_status_id\",\"tb_status_id\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */




	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Duplicate_enrollments");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = context.LAMISPlus_Schema;
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("patient_hivenrol_duplicates");
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("patient_hivenrol_duplicates");
}

        int updateKeyCount_tDBOutput_2 = 1;
        if(updateKeyCount_tDBOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_2 = "jdbc:postgresql://"+context.LAMISPlus_Server+":"+context.LAMISPlus_Port+"/"+context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
    dbUser_tDBOutput_2 = context.LAMISPlus_Login;

	final String decryptedPassword_tDBOutput_2 = context.LAMISPlus_Password; 

    String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;

    conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2,dbUser_tDBOutput_2,dbPwd_tDBOutput_2);
	
	resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
        conn_tDBOutput_2.setAutoCommit(false);
        int commitEvery_tDBOutput_2 = 10000;
        int commitCounter_tDBOutput_2 = 0;



int count_tDBOutput_2=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_2 = conn_tDBOutput_2.getMetaData();
                                boolean whetherExist_tDBOutput_2 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_2 = dbMetaData_tDBOutput_2.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_2 = "public";
                                    if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_2 = conn_tDBOutput_2.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_2 = stmtSchema_tDBOutput_2.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_2.next()){
                                                defaultSchema_tDBOutput_2 = rsSchema_tDBOutput_2.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_2.next()) {
                                        String table_tDBOutput_2 = rsTable_tDBOutput_2.getString("TABLE_NAME");
                                        String schema_tDBOutput_2 = rsTable_tDBOutput_2.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_2.equals(("patient_hivenrol_duplicates"))
                                            && (schema_tDBOutput_2.equals(dbschema_tDBOutput_2) || ((dbschema_tDBOutput_2 ==null || dbschema_tDBOutput_2.trim().length() ==0) && defaultSchema_tDBOutput_2.equals(schema_tDBOutput_2)))) {
                                            whetherExist_tDBOutput_2 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_2) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                                        stmtCreate_tDBOutput_2.execute("CREATE TABLE \"" + tableName_tDBOutput_2 + "\"(\"id\" INT4  not null ,\"created_date\" TIMESTAMP(29)  ,\"created_by\" VARCHAR(230)  ,\"last_modified_date\" TIMESTAMP(29)  ,\"last_modified_by\" VARCHAR(230)  ,\"unique_id\" VARCHAR(230)  ,\"entry_point_id\" BIGSERIAL ,\"target_group_id\" BIGSERIAL ,\"date_confirmed_hiv\" DATE ,\"date_enrolled_pmtct\" DATE ,\"source_of_referrer_id\" BIGSERIAL ,\"time_hiv_diagnosis\" TIMESTAMP(13)  ,\"pregnant\" BOOL ,\"breastfeeding\" BOOL ,\"date_of_registration\" DATE ,\"status_at_registration_id\" BIGSERIAL ,\"enrollment_setting_id\" BIGSERIAL ,\"date_started\" DATE ,\"send_message\" BOOL ,\"person_uuid\" VARCHAR(50)  ,\"facility_id\" INT4 ,\"visit_id\" VARCHAR(19)  ,\"uuid\" VARCHAR(50)  ,\"archived\" INT4 ,\"facility_name\" VARCHAR(230)  ,\"ovc_number\" VARCHAR(230)  ,\"date_of_lpm\" TIMESTAMP(29)  ,\"pregnancy_status_id\" INT8 ,\"tb_status_id\" BIGSERIAL ,primary key(\"id\"))");
                                    }
                                }
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_2 + "\" WHERE \"id\" = ?");
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2 + "\" (\"id\",\"created_date\",\"created_by\",\"last_modified_date\",\"last_modified_by\",\"unique_id\",\"entry_point_id\",\"target_group_id\",\"date_confirmed_hiv\",\"date_enrolled_pmtct\",\"source_of_referrer_id\",\"time_hiv_diagnosis\",\"pregnant\",\"breastfeeding\",\"date_of_registration\",\"status_at_registration_id\",\"enrollment_setting_id\",\"date_started\",\"send_message\",\"person_uuid\",\"facility_id\",\"visit_id\",\"uuid\",\"archived\",\"facility_name\",\"ovc_number\",\"date_of_lpm\",\"pregnancy_status_id\",\"tb_status_id\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmtInsert_tDBOutput_2", pstmtInsert_tDBOutput_2);
	    String update_tDBOutput_2 = "UPDATE \"" + tableName_tDBOutput_2 + "\" SET \"id\" = ?,\"created_date\" = ?,\"created_by\" = ?,\"last_modified_date\" = ?,\"last_modified_by\" = ?,\"unique_id\" = ?,\"entry_point_id\" = ?,\"target_group_id\" = ?,\"date_confirmed_hiv\" = ?,\"date_enrolled_pmtct\" = ?,\"source_of_referrer_id\" = ?,\"time_hiv_diagnosis\" = ?,\"pregnant\" = ?,\"breastfeeding\" = ?,\"date_of_registration\" = ?,\"status_at_registration_id\" = ?,\"enrollment_setting_id\" = ?,\"date_started\" = ?,\"send_message\" = ?,\"person_uuid\" = ?,\"facility_id\" = ?,\"visit_id\" = ?,\"uuid\" = ?,\"archived\" = ?,\"facility_name\" = ?,\"ovc_number\" = ?,\"date_of_lpm\" = ?,\"pregnancy_status_id\" = ?,\"tb_status_id\" = ? WHERE \"id\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(update_tDBOutput_2);
	    resourceMap.put("pstmtUpdate_tDBOutput_2", pstmtUpdate_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfexample");
					}
				
		int tos_count_tUniqRow_1 = 0;
		

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String uuid;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this.uuid == null) {
										if (other.uuid != null) 
											return false;
								
									} else if (!this.uuid.equals(other.uuid))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"map_to_clinics");
					}
				
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfexampleStruct copyOfexample_tmp = new copyOfexampleStruct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Entry_point");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Enrollment_settingsStruct> tHash_Lookup_Enrollment_settings = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Enrollment_settingsStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Enrollment_settingsStruct>) 
					globalMap.get( "tHash_Lookup_Enrollment_settings" ))
					;					
					
	

Enrollment_settingsStruct Enrollment_settingsHashKey = new Enrollment_settingsStruct();
Enrollment_settingsStruct Enrollment_settingsDefault = new Enrollment_settingsStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Hiv_statusStruct> tHash_Lookup_Hiv_status = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Hiv_statusStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Hiv_statusStruct>) 
					globalMap.get( "tHash_Lookup_Hiv_status" ))
					;					
					
	

Hiv_statusStruct Hiv_statusHashKey = new Hiv_statusStruct();
Hiv_statusStruct Hiv_statusDefault = new Hiv_statusStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Source_referralStruct> tHash_Lookup_Source_referral = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Source_referralStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Source_referralStruct>) 
					globalMap.get( "tHash_Lookup_Source_referral" ))
					;					
					
	

Source_referralStruct Source_referralHashKey = new Source_referralStruct();
Source_referralStruct Source_referralDefault = new Source_referralStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<TBstatusStruct> tHash_Lookup_TBstatus = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<TBstatusStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<TBstatusStruct>) 
					globalMap.get( "tHash_Lookup_TBstatus" ))
					;					
					
	

TBstatusStruct TBstatusHashKey = new TBstatusStruct();
TBstatusStruct TBstatusDefault = new TBstatusStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Target_groupStruct> tHash_Lookup_Target_group = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Target_groupStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Target_groupStruct>) 
					globalMap.get( "tHash_Lookup_Target_group" ))
					;					
					
	

Target_groupStruct Target_groupHashKey = new Target_groupStruct();
Target_groupStruct Target_groupDefault = new Target_groupStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<load_pregancy_dataStruct> tHash_Lookup_load_pregancy_data = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<load_pregancy_dataStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<load_pregancy_dataStruct>) 
					globalMap.get( "tHash_Lookup_load_pregancy_data" ))
					;					
					
	

load_pregancy_dataStruct load_pregancy_dataHashKey = new load_pregancy_dataStruct();
load_pregancy_dataStruct load_pregancy_dataDefault = new load_pregancy_dataStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
map_to_clinicsStruct map_to_clinics_tmp = new map_to_clinicsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"entry_points_patient");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<entry_points_codesetStruct> tHash_Lookup_entry_points_codeset = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<entry_points_codesetStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<entry_points_codesetStruct>) 
					globalMap.get( "tHash_Lookup_entry_points_codeset" ))
					;					
					
	

entry_points_codesetStruct entry_points_codesetHashKey = new entry_points_codesetStruct();
entry_points_codesetStruct entry_points_codesetDefault = new entry_points_codesetStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
Entry_pointStruct Entry_point_tmp = new Entry_pointStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_2 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
				String url_tDBInput_2 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
				conn_tDBInput_2.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT DISTINCT ps.id as patient_id,ps.uuid as uuid,ps.created_date,ps.created_by,ps.last_modified_date,ps.last_modifie"
+"d_by,\n	ps.unique_id,ps.entry_point_id,ps.date_confirmed_hiv,ps.date_enrolled_pmtct,\n	ps.time_hiv_diagnosis,ps.pregnant"
+",ps.breastfeeding,ps.date_of_registration,\n	ps.date_started,ps.send_message,ps.person_uuid,ps.facility_id,pv.id as pv_i"
+"d, pv.uuid as visit_id,ps.archived,ps.facility_name,ps.ovc_number,\n	ps.date_of_lpm,tb_status_id\n	\nFROM etl_hiv_enroll"
+"ment_stage ps\nINNER JOIN patient_visit pv  \n	ON pv.person_uuid=ps.person_uuid\n	AND  ps.date_of_registration=pv.visit_"
+"start_date\nORDER BY pv_id ASC";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								entry_points_patient.patient_id = null;
							} else {
		                          
            entry_points_patient.patient_id = rs_tDBInput_2.getInt(1);
            if(rs_tDBInput_2.wasNull()){
                    entry_points_patient.patient_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								entry_points_patient.uuid = null;
							} else {
	                         		
        	entry_points_patient.uuid = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								entry_points_patient.created_date = null;
							} else {
										
			entry_points_patient.created_date = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 3);
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								entry_points_patient.created_by = null;
							} else {
	                         		
        	entry_points_patient.created_by = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								entry_points_patient.last_modified_date = null;
							} else {
										
			entry_points_patient.last_modified_date = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 5);
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								entry_points_patient.last_modified_by = null;
							} else {
	                         		
        	entry_points_patient.last_modified_by = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								entry_points_patient.unique_id = null;
							} else {
	                         		
        	entry_points_patient.unique_id = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								entry_points_patient.entry_point_id = null;
							} else {
	                         		
        	entry_points_patient.entry_point_id = routines.system.JDBCUtil.getString(rs_tDBInput_2, 8, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								entry_points_patient.date_confirmed_hiv = null;
							} else {
										
			entry_points_patient.date_confirmed_hiv = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 9);
		                    }
							if(colQtyInRs_tDBInput_2 < 10) {
								entry_points_patient.date_enrolled_pmtct = null;
							} else {
										
			entry_points_patient.date_enrolled_pmtct = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 10);
		                    }
							if(colQtyInRs_tDBInput_2 < 11) {
								entry_points_patient.time_hiv_diagnosis = null;
							} else {
										
			entry_points_patient.time_hiv_diagnosis = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 11);
		                    }
							if(colQtyInRs_tDBInput_2 < 12) {
								entry_points_patient.pregnant = null;
							} else {
	                         		
            entry_points_patient.pregnant = rs_tDBInput_2.getBoolean(12);
            if(rs_tDBInput_2.wasNull()){
                    entry_points_patient.pregnant = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 13) {
								entry_points_patient.breastfeeding = null;
							} else {
	                         		
            entry_points_patient.breastfeeding = rs_tDBInput_2.getBoolean(13);
            if(rs_tDBInput_2.wasNull()){
                    entry_points_patient.breastfeeding = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 14) {
								entry_points_patient.date_of_registration = null;
							} else {
										
			entry_points_patient.date_of_registration = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 14);
		                    }
							if(colQtyInRs_tDBInput_2 < 15) {
								entry_points_patient.date_started = null;
							} else {
										
			entry_points_patient.date_started = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 15);
		                    }
							if(colQtyInRs_tDBInput_2 < 16) {
								entry_points_patient.send_message = null;
							} else {
	                         		
            entry_points_patient.send_message = rs_tDBInput_2.getBoolean(16);
            if(rs_tDBInput_2.wasNull()){
                    entry_points_patient.send_message = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 17) {
								entry_points_patient.person_uuid = null;
							} else {
	                         		
        	entry_points_patient.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_2, 17, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 18) {
								entry_points_patient.facility_id = null;
							} else {
		                          
            entry_points_patient.facility_id = rs_tDBInput_2.getInt(18);
            if(rs_tDBInput_2.wasNull()){
                    entry_points_patient.facility_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 19) {
								entry_points_patient.pv_id = 0;
							} else {
		                          
            entry_points_patient.pv_id = rs_tDBInput_2.getLong(19);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 20) {
								entry_points_patient.visit_id = null;
							} else {
	                         		
        	entry_points_patient.visit_id = routines.system.JDBCUtil.getString(rs_tDBInput_2, 20, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 21) {
								entry_points_patient.archived = null;
							} else {
	                         		
            entry_points_patient.archived = rs_tDBInput_2.getBoolean(21);
            if(rs_tDBInput_2.wasNull()){
                    entry_points_patient.archived = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 22) {
								entry_points_patient.facility_name = null;
							} else {
	                         		
        	entry_points_patient.facility_name = routines.system.JDBCUtil.getString(rs_tDBInput_2, 22, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 23) {
								entry_points_patient.ovc_number = null;
							} else {
	                         		
        	entry_points_patient.ovc_number = routines.system.JDBCUtil.getString(rs_tDBInput_2, 23, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 24) {
								entry_points_patient.date_of_lpm = null;
							} else {
										
			entry_points_patient.date_of_lpm = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 24);
		                    }
							if(colQtyInRs_tDBInput_2 < 25) {
								entry_points_patient.tb_status_id = null;
							} else {
	                         		
        	entry_points_patient.tb_status_id = routines.system.JDBCUtil.getString(rs_tDBInput_2, 25, false);
		                    }
					


 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"entry_points_patient");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "entry_points_codeset" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopentry_points_codeset = false;
       		  	    	
       		  	    	
 							entry_points_codesetStruct entry_points_codesetObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    entry_points_codesetHashKey.display = entry_points_patient.entry_point_id ;
                        		    		

								
		                        	entry_points_codesetHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_entry_points_codeset.lookup( entry_points_codesetHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_entry_points_codeset != null && tHash_Lookup_entry_points_codeset.getCount(entry_points_codesetHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'entry_points_codeset' and it contains more one result from keys :  entry_points_codeset.display = '" + entry_points_codesetHashKey.display + "'");
								} // G 071
							

							entry_points_codesetStruct entry_points_codeset = null;
                    		  	 
							   
                    		  	 
	       		  	    	entry_points_codesetStruct fromLookup_entry_points_codeset = null;
							entry_points_codeset = entry_points_codesetDefault;
										 
							
								 
							
							
								if (tHash_Lookup_entry_points_codeset !=null && tHash_Lookup_entry_points_codeset.hasNext()) { // G 099
								
							
								
								fromLookup_entry_points_codeset = tHash_Lookup_entry_points_codeset.next();

							
							
								} // G 099
							
							

							if(fromLookup_entry_points_codeset != null) {
								entry_points_codeset = fromLookup_entry_points_codeset;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

Entry_point = null;


// # Output table : 'Entry_point'
Entry_point_tmp.id = entry_points_patient.patient_id ;
Entry_point_tmp.entry_point_id = entry_points_codeset.id ;
Entry_point_tmp.created_date = entry_points_patient.created_date ;
Entry_point_tmp.created_by = entry_points_patient.created_by ;
Entry_point_tmp.last_modified_date = entry_points_patient.last_modified_date ;
Entry_point_tmp.last_modified_by = entry_points_patient.last_modified_by ;
Entry_point_tmp.unique_id = entry_points_patient.unique_id ;
Entry_point_tmp.date_confirmed_hiv = (entry_points_patient.date_confirmed_hiv==null)?null:entry_points_patient.date_confirmed_hiv ;
Entry_point_tmp.date_enrolled_pmtct = (entry_points_patient.date_enrolled_pmtct==null)?null:entry_points_patient.date_enrolled_pmtct ;
Entry_point_tmp.time_hiv_diagnosis = (entry_points_patient.time_hiv_diagnosis==null)?null:entry_points_patient.time_hiv_diagnosis ;
Entry_point_tmp.pregnant = entry_points_patient.pregnant ;
Entry_point_tmp.breastfeeding = entry_points_patient.breastfeeding ;
Entry_point_tmp.date_of_registration = (entry_points_patient.date_of_registration==null)?null:entry_points_patient.date_of_registration ;
Entry_point_tmp.date_started = (entry_points_patient.date_started==null)?null:entry_points_patient.date_started ;
Entry_point_tmp.send_message = entry_points_patient.send_message ;
Entry_point_tmp.person_uuid = entry_points_patient.person_uuid ;
Entry_point_tmp.facility_id = entry_points_patient.facility_id ;
Entry_point_tmp.visit_id = entry_points_patient.visit_id ;
Entry_point_tmp.uuid = entry_points_patient.uuid ;
Entry_point_tmp.archived = entry_points_patient.archived?1:0 ;
Entry_point_tmp.facility_name = entry_points_patient.facility_name ;
Entry_point_tmp.ovc_number = entry_points_patient.ovc_number ;
Entry_point_tmp.date_of_lpm = (entry_points_patient.date_of_lpm==null)?null:entry_points_patient.date_of_lpm ;
Entry_point_tmp.tb_status_id = entry_points_patient.tb_status_id ;
Entry_point = Entry_point_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "Entry_point"
if(Entry_point != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Entry_point");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "Enrollment_settings" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopEnrollment_settings = false;
       		  	    	
       		  	    	
 							Enrollment_settingsStruct Enrollment_settingsObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    Enrollment_settingsHashKey.person_uuid = Entry_point.person_uuid ;
                        		    		

								
		                        	Enrollment_settingsHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_Enrollment_settings.lookup( Enrollment_settingsHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_Enrollment_settings != null && tHash_Lookup_Enrollment_settings.getCount(Enrollment_settingsHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'Enrollment_settings' and it contains more one result from keys :  Enrollment_settings.person_uuid = '" + Enrollment_settingsHashKey.person_uuid + "'");
								} // G 071
							

							Enrollment_settingsStruct Enrollment_settings = null;
                    		  	 
							   
                    		  	 
	       		  	    	Enrollment_settingsStruct fromLookup_Enrollment_settings = null;
							Enrollment_settings = Enrollment_settingsDefault;
										 
							
								 
							
							
								if (tHash_Lookup_Enrollment_settings !=null && tHash_Lookup_Enrollment_settings.hasNext()) { // G 099
								
							
								
								fromLookup_Enrollment_settings = tHash_Lookup_Enrollment_settings.next();

							
							
								} // G 099
							
							

							if(fromLookup_Enrollment_settings != null) {
								Enrollment_settings = fromLookup_Enrollment_settings;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "Hiv_status" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopHiv_status = false;
       		  	    	
       		  	    	
 							Hiv_statusStruct Hiv_statusObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    Hiv_statusHashKey.person_uuid = Entry_point.person_uuid ;
                        		    		

								
		                        	Hiv_statusHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_Hiv_status.lookup( Hiv_statusHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_Hiv_status != null && tHash_Lookup_Hiv_status.getCount(Hiv_statusHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'Hiv_status' and it contains more one result from keys :  Hiv_status.person_uuid = '" + Hiv_statusHashKey.person_uuid + "'");
								} // G 071
							

							Hiv_statusStruct Hiv_status = null;
                    		  	 
							   
                    		  	 
	       		  	    	Hiv_statusStruct fromLookup_Hiv_status = null;
							Hiv_status = Hiv_statusDefault;
										 
							
								 
							
							
								if (tHash_Lookup_Hiv_status !=null && tHash_Lookup_Hiv_status.hasNext()) { // G 099
								
							
								
								fromLookup_Hiv_status = tHash_Lookup_Hiv_status.next();

							
							
								} // G 099
							
							

							if(fromLookup_Hiv_status != null) {
								Hiv_status = fromLookup_Hiv_status;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "Source_referral" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopSource_referral = false;
       		  	    	
       		  	    	
 							Source_referralStruct Source_referralObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    Source_referralHashKey.person_uuid = Entry_point.person_uuid ;
                        		    		

								
		                        	Source_referralHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_Source_referral.lookup( Source_referralHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_Source_referral != null && tHash_Lookup_Source_referral.getCount(Source_referralHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'Source_referral' and it contains more one result from keys :  Source_referral.person_uuid = '" + Source_referralHashKey.person_uuid + "'");
								} // G 071
							

							Source_referralStruct Source_referral = null;
                    		  	 
							   
                    		  	 
	       		  	    	Source_referralStruct fromLookup_Source_referral = null;
							Source_referral = Source_referralDefault;
										 
							
								 
							
							
								if (tHash_Lookup_Source_referral !=null && tHash_Lookup_Source_referral.hasNext()) { // G 099
								
							
								
								fromLookup_Source_referral = tHash_Lookup_Source_referral.next();

							
							
								} // G 099
							
							

							if(fromLookup_Source_referral != null) {
								Source_referral = fromLookup_Source_referral;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "TBstatus" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopTBstatus = false;
       		  	    	
       		  	    	
 							TBstatusStruct TBstatusObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    TBstatusHashKey.person_uuid = Entry_point.person_uuid ;
                        		    		

								
		                        	TBstatusHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_TBstatus.lookup( TBstatusHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_TBstatus != null && tHash_Lookup_TBstatus.getCount(TBstatusHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'TBstatus' and it contains more one result from keys :  TBstatus.person_uuid = '" + TBstatusHashKey.person_uuid + "'");
								} // G 071
							

							TBstatusStruct TBstatus = null;
                    		  	 
							   
                    		  	 
	       		  	    	TBstatusStruct fromLookup_TBstatus = null;
							TBstatus = TBstatusDefault;
										 
							
								 
							
							
								if (tHash_Lookup_TBstatus !=null && tHash_Lookup_TBstatus.hasNext()) { // G 099
								
							
								
								fromLookup_TBstatus = tHash_Lookup_TBstatus.next();

							
							
								} // G 099
							
							

							if(fromLookup_TBstatus != null) {
								TBstatus = fromLookup_TBstatus;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "Target_group" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopTarget_group = false;
       		  	    	
       		  	    	
 							Target_groupStruct Target_groupObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    Target_groupHashKey.person_uuid = Entry_point.person_uuid ;
                        		    		

								
		                        	Target_groupHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_Target_group.lookup( Target_groupHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_Target_group != null && tHash_Lookup_Target_group.getCount(Target_groupHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'Target_group' and it contains more one result from keys :  Target_group.person_uuid = '" + Target_groupHashKey.person_uuid + "'");
								} // G 071
							

							Target_groupStruct Target_group = null;
                    		  	 
							   
                    		  	 
	       		  	    	Target_groupStruct fromLookup_Target_group = null;
							Target_group = Target_groupDefault;
										 
							
								 
							
							
								if (tHash_Lookup_Target_group !=null && tHash_Lookup_Target_group.hasNext()) { // G 099
								
							
								
								fromLookup_Target_group = tHash_Lookup_Target_group.next();

							
							
								} // G 099
							
							

							if(fromLookup_Target_group != null) {
								Target_group = fromLookup_Target_group;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "load_pregancy_data" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopload_pregancy_data = false;
       		  	    	
       		  	    	
 							load_pregancy_dataStruct load_pregancy_dataObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    load_pregancy_dataHashKey.person_uuid = Entry_point.person_uuid ;
                        		    		

								
		                        	load_pregancy_dataHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_load_pregancy_data.lookup( load_pregancy_dataHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_load_pregancy_data != null && tHash_Lookup_load_pregancy_data.getCount(load_pregancy_dataHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'load_pregancy_data' and it contains more one result from keys :  load_pregancy_data.person_uuid = '" + load_pregancy_dataHashKey.person_uuid + "'");
								} // G 071
							

							load_pregancy_dataStruct load_pregancy_data = null;
                    		  	 
							   
                    		  	 
	       		  	    	load_pregancy_dataStruct fromLookup_load_pregancy_data = null;
							load_pregancy_data = load_pregancy_dataDefault;
										 
							
								 
							
							
								if (tHash_Lookup_load_pregancy_data !=null && tHash_Lookup_load_pregancy_data.hasNext()) { // G 099
								
							
								
								fromLookup_load_pregancy_data = tHash_Lookup_load_pregancy_data.next();

							
							
								} // G 099
							
							

							if(fromLookup_load_pregancy_data != null) {
								load_pregancy_data = fromLookup_load_pregancy_data;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

map_to_clinics = null;


// # Output table : 'map_to_clinics'
map_to_clinics_tmp.id = Entry_point.id ;
map_to_clinics_tmp.created_date = Entry_point.created_date ;
map_to_clinics_tmp.created_by = Entry_point.created_by ;
map_to_clinics_tmp.last_modified_date = Entry_point.last_modified_date ;
map_to_clinics_tmp.last_modified_by = Entry_point.last_modified_by ;
map_to_clinics_tmp.unique_id = Entry_point.unique_id ;
map_to_clinics_tmp.entry_point_id = (Entry_point.entry_point_id==0L)?null:Entry_point.entry_point_id ;
map_to_clinics_tmp.target_group_id = (Target_group.target_group_id==0L)?null:Target_group.target_group_id ;
map_to_clinics_tmp.date_confirmed_hiv = Entry_point.date_confirmed_hiv ;
map_to_clinics_tmp.date_enrolled_pmtct = Entry_point.date_enrolled_pmtct ;
map_to_clinics_tmp.source_of_referrer_id = (Source_referral.source_of_referrer_id==0L)?null:Source_referral.source_of_referrer_id ;
map_to_clinics_tmp.time_hiv_diagnosis = Entry_point.time_hiv_diagnosis ;
map_to_clinics_tmp.pregnant = Entry_point.pregnant ;
map_to_clinics_tmp.breastfeeding = Entry_point.breastfeeding ;
map_to_clinics_tmp.date_of_registration = Entry_point.date_of_registration ;
map_to_clinics_tmp.status_at_registration_id = (Hiv_status.status_at_registration_id==0L)?null:Hiv_status.status_at_registration_id ;
map_to_clinics_tmp.enrollment_setting_id = (Enrollment_settings.enrollment_setting_id==0L)?null:Enrollment_settings.enrollment_setting_id ;
map_to_clinics_tmp.date_started = Entry_point.date_started ;
map_to_clinics_tmp.send_message = Entry_point.send_message ;
map_to_clinics_tmp.person_uuid = Entry_point.person_uuid ;
map_to_clinics_tmp.facility_id = (Entry_point.facility_id==0L)?null:Entry_point.facility_id ;
map_to_clinics_tmp.visit_id = Entry_point.visit_id ;
map_to_clinics_tmp.uuid = Entry_point.uuid ;
map_to_clinics_tmp.archived = Entry_point.archived ;
map_to_clinics_tmp.facility_name = Entry_point.facility_name ;
map_to_clinics_tmp.ovc_number = Entry_point.ovc_number ;
map_to_clinics_tmp.date_of_lpm = Entry_point.date_of_lpm ;
map_to_clinics_tmp.pregnancy_status_id = (load_pregancy_data.pregnancy_status_id==0L)?null:load_pregancy_data.pregnancy_status_id ;
map_to_clinics_tmp.tb_status_id = (TBstatus.tb_status_id==0L)?null:TBstatus.tb_status_id ;
map_to_clinics = map_to_clinics_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "map_to_clinics"
if(map_to_clinics != null) { 



	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"map_to_clinics");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_9 = false;
		  boolean mainRowRejected_tMap_9 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

copyOfexample = null;


// # Output table : 'copyOfexample'
copyOfexample_tmp.id = Numeric.sequence("id",1,1);
copyOfexample_tmp.created_date = map_to_clinics.created_date ;
copyOfexample_tmp.created_by = map_to_clinics.created_by ;
copyOfexample_tmp.last_modified_date = map_to_clinics.last_modified_date ;
copyOfexample_tmp.last_modified_by = map_to_clinics.last_modified_by ;
copyOfexample_tmp.unique_id = map_to_clinics.unique_id ;
copyOfexample_tmp.entry_point_id = map_to_clinics.entry_point_id ;
copyOfexample_tmp.target_group_id = map_to_clinics.target_group_id ;
copyOfexample_tmp.date_confirmed_hiv = map_to_clinics.date_confirmed_hiv ;
copyOfexample_tmp.date_enrolled_pmtct = map_to_clinics.date_enrolled_pmtct ;
copyOfexample_tmp.source_of_referrer_id = map_to_clinics.source_of_referrer_id ;
copyOfexample_tmp.time_hiv_diagnosis = map_to_clinics.time_hiv_diagnosis ;
copyOfexample_tmp.pregnant = map_to_clinics.pregnant ;
copyOfexample_tmp.breastfeeding = map_to_clinics.breastfeeding ;
copyOfexample_tmp.date_of_registration = map_to_clinics.date_of_registration ;
copyOfexample_tmp.status_at_registration_id = map_to_clinics.status_at_registration_id ;
copyOfexample_tmp.enrollment_setting_id = map_to_clinics.enrollment_setting_id ;
copyOfexample_tmp.date_started = map_to_clinics.date_started ;
copyOfexample_tmp.send_message = map_to_clinics.send_message ;
copyOfexample_tmp.person_uuid = map_to_clinics.person_uuid ;
copyOfexample_tmp.facility_id = map_to_clinics.facility_id ;
copyOfexample_tmp.visit_id = map_to_clinics.visit_id ;
copyOfexample_tmp.uuid = map_to_clinics.uuid ;
copyOfexample_tmp.archived = map_to_clinics.archived ;
copyOfexample_tmp.facility_name = map_to_clinics.facility_name ;
copyOfexample_tmp.ovc_number = map_to_clinics.ovc_number ;
copyOfexample_tmp.date_of_lpm = map_to_clinics.date_of_lpm ;
copyOfexample_tmp.pregnancy_status_id = map_to_clinics.pregnancy_status_id ;
copyOfexample_tmp.tb_status_id = map_to_clinics.tb_status_id ;
copyOfexample = copyOfexample_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "copyOfexample"
if(copyOfexample != null) { 



	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfexample");
					}
					
Duplicate_enrollments = null;			Unique_enrollments = null;			
if(copyOfexample.uuid == null){
	finder_tUniqRow_1.uuid = null;
}else{
	finder_tUniqRow_1.uuid = copyOfexample.uuid.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(copyOfexample.uuid == null){
	new_tUniqRow_1.uuid = null;
}else{
	new_tUniqRow_1.uuid = copyOfexample.uuid.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(Unique_enrollments == null){ 
	
	Unique_enrollments = new Unique_enrollmentsStruct();
}Unique_enrollments.id = copyOfexample.id;			Unique_enrollments.created_date = copyOfexample.created_date;			Unique_enrollments.created_by = copyOfexample.created_by;			Unique_enrollments.last_modified_date = copyOfexample.last_modified_date;			Unique_enrollments.last_modified_by = copyOfexample.last_modified_by;			Unique_enrollments.unique_id = copyOfexample.unique_id;			Unique_enrollments.entry_point_id = copyOfexample.entry_point_id;			Unique_enrollments.target_group_id = copyOfexample.target_group_id;			Unique_enrollments.date_confirmed_hiv = copyOfexample.date_confirmed_hiv;			Unique_enrollments.date_enrolled_pmtct = copyOfexample.date_enrolled_pmtct;			Unique_enrollments.source_of_referrer_id = copyOfexample.source_of_referrer_id;			Unique_enrollments.time_hiv_diagnosis = copyOfexample.time_hiv_diagnosis;			Unique_enrollments.pregnant = copyOfexample.pregnant;			Unique_enrollments.breastfeeding = copyOfexample.breastfeeding;			Unique_enrollments.date_of_registration = copyOfexample.date_of_registration;			Unique_enrollments.status_at_registration_id = copyOfexample.status_at_registration_id;			Unique_enrollments.enrollment_setting_id = copyOfexample.enrollment_setting_id;			Unique_enrollments.date_started = copyOfexample.date_started;			Unique_enrollments.send_message = copyOfexample.send_message;			Unique_enrollments.person_uuid = copyOfexample.person_uuid;			Unique_enrollments.facility_id = copyOfexample.facility_id;			Unique_enrollments.visit_id = copyOfexample.visit_id;			Unique_enrollments.uuid = copyOfexample.uuid;			Unique_enrollments.archived = copyOfexample.archived;			Unique_enrollments.facility_name = copyOfexample.facility_name;			Unique_enrollments.ovc_number = copyOfexample.ovc_number;			Unique_enrollments.date_of_lpm = copyOfexample.date_of_lpm;			Unique_enrollments.pregnancy_status_id = copyOfexample.pregnancy_status_id;			Unique_enrollments.tb_status_id = copyOfexample.tb_status_id;					
		nb_uniques_tUniqRow_1++;
	} else {
if(Duplicate_enrollments == null){ 
	
	Duplicate_enrollments = new Duplicate_enrollmentsStruct();
}				Duplicate_enrollments.id = copyOfexample.id;			Duplicate_enrollments.created_date = copyOfexample.created_date;			Duplicate_enrollments.created_by = copyOfexample.created_by;			Duplicate_enrollments.last_modified_date = copyOfexample.last_modified_date;			Duplicate_enrollments.last_modified_by = copyOfexample.last_modified_by;			Duplicate_enrollments.unique_id = copyOfexample.unique_id;			Duplicate_enrollments.entry_point_id = copyOfexample.entry_point_id;			Duplicate_enrollments.target_group_id = copyOfexample.target_group_id;			Duplicate_enrollments.date_confirmed_hiv = copyOfexample.date_confirmed_hiv;			Duplicate_enrollments.date_enrolled_pmtct = copyOfexample.date_enrolled_pmtct;			Duplicate_enrollments.source_of_referrer_id = copyOfexample.source_of_referrer_id;			Duplicate_enrollments.time_hiv_diagnosis = copyOfexample.time_hiv_diagnosis;			Duplicate_enrollments.pregnant = copyOfexample.pregnant;			Duplicate_enrollments.breastfeeding = copyOfexample.breastfeeding;			Duplicate_enrollments.date_of_registration = copyOfexample.date_of_registration;			Duplicate_enrollments.status_at_registration_id = copyOfexample.status_at_registration_id;			Duplicate_enrollments.enrollment_setting_id = copyOfexample.enrollment_setting_id;			Duplicate_enrollments.date_started = copyOfexample.date_started;			Duplicate_enrollments.send_message = copyOfexample.send_message;			Duplicate_enrollments.person_uuid = copyOfexample.person_uuid;			Duplicate_enrollments.facility_id = copyOfexample.facility_id;			Duplicate_enrollments.visit_id = copyOfexample.visit_id;			Duplicate_enrollments.uuid = copyOfexample.uuid;			Duplicate_enrollments.archived = copyOfexample.archived;			Duplicate_enrollments.facility_name = copyOfexample.facility_name;			Duplicate_enrollments.ovc_number = copyOfexample.ovc_number;			Duplicate_enrollments.date_of_lpm = copyOfexample.date_of_lpm;			Duplicate_enrollments.pregnancy_status_id = copyOfexample.pregnancy_status_id;			Duplicate_enrollments.tb_status_id = copyOfexample.tb_status_id;			
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "Unique_enrollments"
if(Unique_enrollments != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Unique_enrollments");
					}
					



        whetherReject_tDBOutput_1 = false;
            int updateFlag_tDBOutput_1=0;
                    pstmtUpdate_tDBOutput_1.setInt(1, Unique_enrollments.id);

                    if(Unique_enrollments.created_date != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(2, new java.sql.Timestamp(Unique_enrollments.created_date.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(Unique_enrollments.created_by == null) {
pstmtUpdate_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(3, Unique_enrollments.created_by);
}

                    if(Unique_enrollments.last_modified_date != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(4, new java.sql.Timestamp(Unique_enrollments.last_modified_date.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(4, java.sql.Types.TIMESTAMP);
}

                    if(Unique_enrollments.last_modified_by == null) {
pstmtUpdate_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(5, Unique_enrollments.last_modified_by);
}

                    if(Unique_enrollments.unique_id == null) {
pstmtUpdate_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(6, Unique_enrollments.unique_id);
}

                    if(Unique_enrollments.entry_point_id == null) {
pstmtUpdate_tDBOutput_1.setNull(7, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setLong(7, Unique_enrollments.entry_point_id);
}

                    if(Unique_enrollments.target_group_id == null) {
pstmtUpdate_tDBOutput_1.setNull(8, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setLong(8, Unique_enrollments.target_group_id);
}

                    if(Unique_enrollments.date_confirmed_hiv != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(9, new java.sql.Timestamp(Unique_enrollments.date_confirmed_hiv.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(9, java.sql.Types.TIMESTAMP);
}

                    if(Unique_enrollments.date_enrolled_pmtct != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(10, new java.sql.Timestamp(Unique_enrollments.date_enrolled_pmtct.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(10, java.sql.Types.TIMESTAMP);
}

                    if(Unique_enrollments.source_of_referrer_id == null) {
pstmtUpdate_tDBOutput_1.setNull(11, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setLong(11, Unique_enrollments.source_of_referrer_id);
}

                    if(Unique_enrollments.time_hiv_diagnosis != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(12, new java.sql.Timestamp(Unique_enrollments.time_hiv_diagnosis.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(12, java.sql.Types.TIMESTAMP);
}

                    if(Unique_enrollments.pregnant == null) {
pstmtUpdate_tDBOutput_1.setNull(13, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tDBOutput_1.setBoolean(13, Unique_enrollments.pregnant);
}

                    if(Unique_enrollments.breastfeeding == null) {
pstmtUpdate_tDBOutput_1.setNull(14, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tDBOutput_1.setBoolean(14, Unique_enrollments.breastfeeding);
}

                    if(Unique_enrollments.date_of_registration != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(15, new java.sql.Timestamp(Unique_enrollments.date_of_registration.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(15, java.sql.Types.TIMESTAMP);
}

                    if(Unique_enrollments.status_at_registration_id == null) {
pstmtUpdate_tDBOutput_1.setNull(16, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setLong(16, Unique_enrollments.status_at_registration_id);
}

                    if(Unique_enrollments.enrollment_setting_id == null) {
pstmtUpdate_tDBOutput_1.setNull(17, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setLong(17, Unique_enrollments.enrollment_setting_id);
}

                    if(Unique_enrollments.date_started != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(18, new java.sql.Timestamp(Unique_enrollments.date_started.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(18, java.sql.Types.TIMESTAMP);
}

                    if(Unique_enrollments.send_message == null) {
pstmtUpdate_tDBOutput_1.setNull(19, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tDBOutput_1.setBoolean(19, Unique_enrollments.send_message);
}

                    if(Unique_enrollments.person_uuid == null) {
pstmtUpdate_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(20, Unique_enrollments.person_uuid);
}

                    if(Unique_enrollments.facility_id == null) {
pstmtUpdate_tDBOutput_1.setNull(21, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(21, Unique_enrollments.facility_id);
}

                    if(Unique_enrollments.visit_id == null) {
pstmtUpdate_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(22, Unique_enrollments.visit_id);
}

                    if(Unique_enrollments.uuid == null) {
pstmtUpdate_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(23, Unique_enrollments.uuid);
}

                    if(Unique_enrollments.archived == null) {
pstmtUpdate_tDBOutput_1.setNull(24, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(24, Unique_enrollments.archived);
}

                    if(Unique_enrollments.facility_name == null) {
pstmtUpdate_tDBOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(25, Unique_enrollments.facility_name);
}

                    if(Unique_enrollments.ovc_number == null) {
pstmtUpdate_tDBOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(26, Unique_enrollments.ovc_number);
}

                    if(Unique_enrollments.date_of_lpm != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(27, new java.sql.Timestamp(Unique_enrollments.date_of_lpm.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(27, java.sql.Types.TIMESTAMP);
}

                    if(Unique_enrollments.pregnancy_status_id == null) {
pstmtUpdate_tDBOutput_1.setNull(28, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setLong(28, Unique_enrollments.pregnancy_status_id);
}

                    if(Unique_enrollments.tb_status_id == null) {
pstmtUpdate_tDBOutput_1.setNull(29, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setLong(29, Unique_enrollments.tb_status_id);
}


                    if(Unique_enrollments.uuid == null) {
pstmtUpdate_tDBOutput_1.setNull(30 + count_tDBOutput_1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(30 + count_tDBOutput_1, Unique_enrollments.uuid);
}


            try {
				
                updateFlag_tDBOutput_1=pstmtUpdate_tDBOutput_1.executeUpdate();
                updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1+updateFlag_tDBOutput_1;
				
            if(updateFlag_tDBOutput_1 == 0) {
            	
                        pstmtInsert_tDBOutput_1.setInt(1, Unique_enrollments.id);

                        if(Unique_enrollments.created_date != null) {
pstmtInsert_tDBOutput_1.setTimestamp(2, new java.sql.Timestamp(Unique_enrollments.created_date.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.TIMESTAMP);
}

                        if(Unique_enrollments.created_by == null) {
pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(3, Unique_enrollments.created_by);
}

                        if(Unique_enrollments.last_modified_date != null) {
pstmtInsert_tDBOutput_1.setTimestamp(4, new java.sql.Timestamp(Unique_enrollments.last_modified_date.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.TIMESTAMP);
}

                        if(Unique_enrollments.last_modified_by == null) {
pstmtInsert_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(5, Unique_enrollments.last_modified_by);
}

                        if(Unique_enrollments.unique_id == null) {
pstmtInsert_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(6, Unique_enrollments.unique_id);
}

                        if(Unique_enrollments.entry_point_id == null) {
pstmtInsert_tDBOutput_1.setNull(7, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setLong(7, Unique_enrollments.entry_point_id);
}

                        if(Unique_enrollments.target_group_id == null) {
pstmtInsert_tDBOutput_1.setNull(8, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setLong(8, Unique_enrollments.target_group_id);
}

                        if(Unique_enrollments.date_confirmed_hiv != null) {
pstmtInsert_tDBOutput_1.setTimestamp(9, new java.sql.Timestamp(Unique_enrollments.date_confirmed_hiv.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(9, java.sql.Types.TIMESTAMP);
}

                        if(Unique_enrollments.date_enrolled_pmtct != null) {
pstmtInsert_tDBOutput_1.setTimestamp(10, new java.sql.Timestamp(Unique_enrollments.date_enrolled_pmtct.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(10, java.sql.Types.TIMESTAMP);
}

                        if(Unique_enrollments.source_of_referrer_id == null) {
pstmtInsert_tDBOutput_1.setNull(11, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setLong(11, Unique_enrollments.source_of_referrer_id);
}

                        if(Unique_enrollments.time_hiv_diagnosis != null) {
pstmtInsert_tDBOutput_1.setTimestamp(12, new java.sql.Timestamp(Unique_enrollments.time_hiv_diagnosis.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(12, java.sql.Types.TIMESTAMP);
}

                        if(Unique_enrollments.pregnant == null) {
pstmtInsert_tDBOutput_1.setNull(13, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_1.setBoolean(13, Unique_enrollments.pregnant);
}

                        if(Unique_enrollments.breastfeeding == null) {
pstmtInsert_tDBOutput_1.setNull(14, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_1.setBoolean(14, Unique_enrollments.breastfeeding);
}

                        if(Unique_enrollments.date_of_registration != null) {
pstmtInsert_tDBOutput_1.setTimestamp(15, new java.sql.Timestamp(Unique_enrollments.date_of_registration.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(15, java.sql.Types.TIMESTAMP);
}

                        if(Unique_enrollments.status_at_registration_id == null) {
pstmtInsert_tDBOutput_1.setNull(16, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setLong(16, Unique_enrollments.status_at_registration_id);
}

                        if(Unique_enrollments.enrollment_setting_id == null) {
pstmtInsert_tDBOutput_1.setNull(17, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setLong(17, Unique_enrollments.enrollment_setting_id);
}

                        if(Unique_enrollments.date_started != null) {
pstmtInsert_tDBOutput_1.setTimestamp(18, new java.sql.Timestamp(Unique_enrollments.date_started.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(18, java.sql.Types.TIMESTAMP);
}

                        if(Unique_enrollments.send_message == null) {
pstmtInsert_tDBOutput_1.setNull(19, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_1.setBoolean(19, Unique_enrollments.send_message);
}

                        if(Unique_enrollments.person_uuid == null) {
pstmtInsert_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(20, Unique_enrollments.person_uuid);
}

                        if(Unique_enrollments.facility_id == null) {
pstmtInsert_tDBOutput_1.setNull(21, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(21, Unique_enrollments.facility_id);
}

                        if(Unique_enrollments.visit_id == null) {
pstmtInsert_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(22, Unique_enrollments.visit_id);
}

                        if(Unique_enrollments.uuid == null) {
pstmtInsert_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(23, Unique_enrollments.uuid);
}

                        if(Unique_enrollments.archived == null) {
pstmtInsert_tDBOutput_1.setNull(24, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(24, Unique_enrollments.archived);
}

                        if(Unique_enrollments.facility_name == null) {
pstmtInsert_tDBOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(25, Unique_enrollments.facility_name);
}

                        if(Unique_enrollments.ovc_number == null) {
pstmtInsert_tDBOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(26, Unique_enrollments.ovc_number);
}

                        if(Unique_enrollments.date_of_lpm != null) {
pstmtInsert_tDBOutput_1.setTimestamp(27, new java.sql.Timestamp(Unique_enrollments.date_of_lpm.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(27, java.sql.Types.TIMESTAMP);
}

                        if(Unique_enrollments.pregnancy_status_id == null) {
pstmtInsert_tDBOutput_1.setNull(28, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setLong(28, Unique_enrollments.pregnancy_status_id);
}

                        if(Unique_enrollments.tb_status_id == null) {
pstmtInsert_tDBOutput_1.setNull(29, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setLong(29, Unique_enrollments.tb_status_id);
}

					
                    insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1 + pstmtInsert_tDBOutput_1.executeUpdate();
                    nb_line_tDBOutput_1++;
					
    	            }else{
    					nb_line_tDBOutput_1++;
    					
     					
    				}
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_1 = true;
                        nb_line_tDBOutput_1++;
                            System.err.print(e.getMessage());
                }
            if(!whetherReject_tDBOutput_1) {
            }
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                	conn_tDBOutput_1.commit();
                	
                	commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "Unique_enrollments"




// Start of branch "Duplicate_enrollments"
if(Duplicate_enrollments != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Duplicate_enrollments");
					}
					



        whetherReject_tDBOutput_2 = false;
                    pstmt_tDBOutput_2.setInt(1, Duplicate_enrollments.id);

            int checkCount_tDBOutput_2 = -1;
            try (java.sql.ResultSet rs_tDBOutput_2 = pstmt_tDBOutput_2.executeQuery()) {
                while(rs_tDBOutput_2.next()) {
                    checkCount_tDBOutput_2 = rs_tDBOutput_2.getInt(1);
                }
            }
            if(checkCount_tDBOutput_2 > 0) {
                        pstmtUpdate_tDBOutput_2.setInt(1, Duplicate_enrollments.id);

                        if(Duplicate_enrollments.created_date != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(2, new java.sql.Timestamp(Duplicate_enrollments.created_date.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(2, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_enrollments.created_by == null) {
pstmtUpdate_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(3, Duplicate_enrollments.created_by);
}

                        if(Duplicate_enrollments.last_modified_date != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(4, new java.sql.Timestamp(Duplicate_enrollments.last_modified_date.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(4, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_enrollments.last_modified_by == null) {
pstmtUpdate_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(5, Duplicate_enrollments.last_modified_by);
}

                        if(Duplicate_enrollments.unique_id == null) {
pstmtUpdate_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(6, Duplicate_enrollments.unique_id);
}

                        if(Duplicate_enrollments.entry_point_id == null) {
pstmtUpdate_tDBOutput_2.setNull(7, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setLong(7, Duplicate_enrollments.entry_point_id);
}

                        if(Duplicate_enrollments.target_group_id == null) {
pstmtUpdate_tDBOutput_2.setNull(8, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setLong(8, Duplicate_enrollments.target_group_id);
}

                        if(Duplicate_enrollments.date_confirmed_hiv != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(9, new java.sql.Timestamp(Duplicate_enrollments.date_confirmed_hiv.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(9, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_enrollments.date_enrolled_pmtct != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(10, new java.sql.Timestamp(Duplicate_enrollments.date_enrolled_pmtct.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(10, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_enrollments.source_of_referrer_id == null) {
pstmtUpdate_tDBOutput_2.setNull(11, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setLong(11, Duplicate_enrollments.source_of_referrer_id);
}

                        if(Duplicate_enrollments.time_hiv_diagnosis != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(12, new java.sql.Timestamp(Duplicate_enrollments.time_hiv_diagnosis.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(12, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_enrollments.pregnant == null) {
pstmtUpdate_tDBOutput_2.setNull(13, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tDBOutput_2.setBoolean(13, Duplicate_enrollments.pregnant);
}

                        if(Duplicate_enrollments.breastfeeding == null) {
pstmtUpdate_tDBOutput_2.setNull(14, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tDBOutput_2.setBoolean(14, Duplicate_enrollments.breastfeeding);
}

                        if(Duplicate_enrollments.date_of_registration != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(15, new java.sql.Timestamp(Duplicate_enrollments.date_of_registration.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(15, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_enrollments.status_at_registration_id == null) {
pstmtUpdate_tDBOutput_2.setNull(16, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setLong(16, Duplicate_enrollments.status_at_registration_id);
}

                        if(Duplicate_enrollments.enrollment_setting_id == null) {
pstmtUpdate_tDBOutput_2.setNull(17, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setLong(17, Duplicate_enrollments.enrollment_setting_id);
}

                        if(Duplicate_enrollments.date_started != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(18, new java.sql.Timestamp(Duplicate_enrollments.date_started.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(18, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_enrollments.send_message == null) {
pstmtUpdate_tDBOutput_2.setNull(19, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tDBOutput_2.setBoolean(19, Duplicate_enrollments.send_message);
}

                        if(Duplicate_enrollments.person_uuid == null) {
pstmtUpdate_tDBOutput_2.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(20, Duplicate_enrollments.person_uuid);
}

                        if(Duplicate_enrollments.facility_id == null) {
pstmtUpdate_tDBOutput_2.setNull(21, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setInt(21, Duplicate_enrollments.facility_id);
}

                        if(Duplicate_enrollments.visit_id == null) {
pstmtUpdate_tDBOutput_2.setNull(22, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(22, Duplicate_enrollments.visit_id);
}

                        if(Duplicate_enrollments.uuid == null) {
pstmtUpdate_tDBOutput_2.setNull(23, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(23, Duplicate_enrollments.uuid);
}

                        if(Duplicate_enrollments.archived == null) {
pstmtUpdate_tDBOutput_2.setNull(24, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setInt(24, Duplicate_enrollments.archived);
}

                        if(Duplicate_enrollments.facility_name == null) {
pstmtUpdate_tDBOutput_2.setNull(25, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(25, Duplicate_enrollments.facility_name);
}

                        if(Duplicate_enrollments.ovc_number == null) {
pstmtUpdate_tDBOutput_2.setNull(26, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(26, Duplicate_enrollments.ovc_number);
}

                        if(Duplicate_enrollments.date_of_lpm != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(27, new java.sql.Timestamp(Duplicate_enrollments.date_of_lpm.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(27, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_enrollments.pregnancy_status_id == null) {
pstmtUpdate_tDBOutput_2.setNull(28, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setLong(28, Duplicate_enrollments.pregnancy_status_id);
}

                        if(Duplicate_enrollments.tb_status_id == null) {
pstmtUpdate_tDBOutput_2.setNull(29, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setLong(29, Duplicate_enrollments.tb_status_id);
}

                        pstmtUpdate_tDBOutput_2.setInt(30 + count_tDBOutput_2, Duplicate_enrollments.id);

                try {
					
                    updatedCount_tDBOutput_2 = updatedCount_tDBOutput_2 + pstmtUpdate_tDBOutput_2.executeUpdate();
                    nb_line_tDBOutput_2++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_2 = true;
                        nb_line_tDBOutput_2++;
                            System.err.print(e.getMessage());
                }
            } else {
                        pstmtInsert_tDBOutput_2.setInt(1, Duplicate_enrollments.id);

                        if(Duplicate_enrollments.created_date != null) {
pstmtInsert_tDBOutput_2.setTimestamp(2, new java.sql.Timestamp(Duplicate_enrollments.created_date.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(2, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_enrollments.created_by == null) {
pstmtInsert_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(3, Duplicate_enrollments.created_by);
}

                        if(Duplicate_enrollments.last_modified_date != null) {
pstmtInsert_tDBOutput_2.setTimestamp(4, new java.sql.Timestamp(Duplicate_enrollments.last_modified_date.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(4, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_enrollments.last_modified_by == null) {
pstmtInsert_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(5, Duplicate_enrollments.last_modified_by);
}

                        if(Duplicate_enrollments.unique_id == null) {
pstmtInsert_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(6, Duplicate_enrollments.unique_id);
}

                        if(Duplicate_enrollments.entry_point_id == null) {
pstmtInsert_tDBOutput_2.setNull(7, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setLong(7, Duplicate_enrollments.entry_point_id);
}

                        if(Duplicate_enrollments.target_group_id == null) {
pstmtInsert_tDBOutput_2.setNull(8, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setLong(8, Duplicate_enrollments.target_group_id);
}

                        if(Duplicate_enrollments.date_confirmed_hiv != null) {
pstmtInsert_tDBOutput_2.setTimestamp(9, new java.sql.Timestamp(Duplicate_enrollments.date_confirmed_hiv.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(9, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_enrollments.date_enrolled_pmtct != null) {
pstmtInsert_tDBOutput_2.setTimestamp(10, new java.sql.Timestamp(Duplicate_enrollments.date_enrolled_pmtct.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(10, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_enrollments.source_of_referrer_id == null) {
pstmtInsert_tDBOutput_2.setNull(11, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setLong(11, Duplicate_enrollments.source_of_referrer_id);
}

                        if(Duplicate_enrollments.time_hiv_diagnosis != null) {
pstmtInsert_tDBOutput_2.setTimestamp(12, new java.sql.Timestamp(Duplicate_enrollments.time_hiv_diagnosis.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(12, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_enrollments.pregnant == null) {
pstmtInsert_tDBOutput_2.setNull(13, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_2.setBoolean(13, Duplicate_enrollments.pregnant);
}

                        if(Duplicate_enrollments.breastfeeding == null) {
pstmtInsert_tDBOutput_2.setNull(14, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_2.setBoolean(14, Duplicate_enrollments.breastfeeding);
}

                        if(Duplicate_enrollments.date_of_registration != null) {
pstmtInsert_tDBOutput_2.setTimestamp(15, new java.sql.Timestamp(Duplicate_enrollments.date_of_registration.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(15, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_enrollments.status_at_registration_id == null) {
pstmtInsert_tDBOutput_2.setNull(16, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setLong(16, Duplicate_enrollments.status_at_registration_id);
}

                        if(Duplicate_enrollments.enrollment_setting_id == null) {
pstmtInsert_tDBOutput_2.setNull(17, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setLong(17, Duplicate_enrollments.enrollment_setting_id);
}

                        if(Duplicate_enrollments.date_started != null) {
pstmtInsert_tDBOutput_2.setTimestamp(18, new java.sql.Timestamp(Duplicate_enrollments.date_started.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(18, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_enrollments.send_message == null) {
pstmtInsert_tDBOutput_2.setNull(19, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_2.setBoolean(19, Duplicate_enrollments.send_message);
}

                        if(Duplicate_enrollments.person_uuid == null) {
pstmtInsert_tDBOutput_2.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(20, Duplicate_enrollments.person_uuid);
}

                        if(Duplicate_enrollments.facility_id == null) {
pstmtInsert_tDBOutput_2.setNull(21, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setInt(21, Duplicate_enrollments.facility_id);
}

                        if(Duplicate_enrollments.visit_id == null) {
pstmtInsert_tDBOutput_2.setNull(22, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(22, Duplicate_enrollments.visit_id);
}

                        if(Duplicate_enrollments.uuid == null) {
pstmtInsert_tDBOutput_2.setNull(23, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(23, Duplicate_enrollments.uuid);
}

                        if(Duplicate_enrollments.archived == null) {
pstmtInsert_tDBOutput_2.setNull(24, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setInt(24, Duplicate_enrollments.archived);
}

                        if(Duplicate_enrollments.facility_name == null) {
pstmtInsert_tDBOutput_2.setNull(25, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(25, Duplicate_enrollments.facility_name);
}

                        if(Duplicate_enrollments.ovc_number == null) {
pstmtInsert_tDBOutput_2.setNull(26, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(26, Duplicate_enrollments.ovc_number);
}

                        if(Duplicate_enrollments.date_of_lpm != null) {
pstmtInsert_tDBOutput_2.setTimestamp(27, new java.sql.Timestamp(Duplicate_enrollments.date_of_lpm.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(27, java.sql.Types.TIMESTAMP);
}

                        if(Duplicate_enrollments.pregnancy_status_id == null) {
pstmtInsert_tDBOutput_2.setNull(28, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setLong(28, Duplicate_enrollments.pregnancy_status_id);
}

                        if(Duplicate_enrollments.tb_status_id == null) {
pstmtInsert_tDBOutput_2.setNull(29, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setLong(29, Duplicate_enrollments.tb_status_id);
}

                try {
					
                    insertedCount_tDBOutput_2 = insertedCount_tDBOutput_2 + pstmtInsert_tDBOutput_2.executeUpdate();
                    nb_line_tDBOutput_2++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_2 = true;
                        nb_line_tDBOutput_2++;
                            System.err.print(e.getMessage());
                }
            }
    		    commitCounter_tDBOutput_2++;
                if(commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
                	conn_tDBOutput_2.commit();
                	
                	commitCounter_tDBOutput_2=0;
                }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "Duplicate_enrollments"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */

} // End of branch "copyOfexample"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_end ] stop
 */

} // End of branch "map_to_clinics"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "Entry_point"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
	if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
		
			conn_tDBInput_2.commit();
			
		
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());

   			if (globalMap.get("tDBInput_2_NB_LINE") != null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				tJava_2Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}



/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_entry_points_codeset != null) {
						tHash_Lookup_entry_points_codeset.endGet();
					}
					globalMap.remove( "tHash_Lookup_entry_points_codeset" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"entry_points_patient");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_Enrollment_settings != null) {
						tHash_Lookup_Enrollment_settings.endGet();
					}
					globalMap.remove( "tHash_Lookup_Enrollment_settings" );

					
					
				
					if(tHash_Lookup_Hiv_status != null) {
						tHash_Lookup_Hiv_status.endGet();
					}
					globalMap.remove( "tHash_Lookup_Hiv_status" );

					
					
				
					if(tHash_Lookup_Source_referral != null) {
						tHash_Lookup_Source_referral.endGet();
					}
					globalMap.remove( "tHash_Lookup_Source_referral" );

					
					
				
					if(tHash_Lookup_TBstatus != null) {
						tHash_Lookup_TBstatus.endGet();
					}
					globalMap.remove( "tHash_Lookup_TBstatus" );

					
					
				
					if(tHash_Lookup_Target_group != null) {
						tHash_Lookup_Target_group.endGet();
					}
					globalMap.remove( "tHash_Lookup_Target_group" );

					
					
				
					if(tHash_Lookup_load_pregancy_data != null) {
						tHash_Lookup_load_pregancy_data.endGet();
					}
					globalMap.remove( "tHash_Lookup_load_pregancy_data" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Entry_point");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"map_to_clinics");
			  	}
			  	
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfexample");
			  	}
			  	
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



        if(pstmtUpdate_tDBOutput_1 != null){
            pstmtUpdate_tDBOutput_1.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_1");
        }
        if(pstmtInsert_tDBOutput_1 != null){
            pstmtInsert_tDBOutput_1.close();
            resourceMap.remove("pstmtInsert_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
			
			conn_tDBOutput_1.commit();
			
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Unique_enrollments");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJava_3Process(globalMap);



/**
 * [tDBOutput_1 end ] stop
 */




	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



        if(pstmtUpdate_tDBOutput_2 != null){
            pstmtUpdate_tDBOutput_2.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_2");
        }
        if(pstmtInsert_tDBOutput_2 != null){
            pstmtInsert_tDBOutput_2.close();
            resourceMap.remove("pstmtInsert_tDBOutput_2");
        }
        if(pstmt_tDBOutput_2 != null) {
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);
			
			conn_tDBOutput_2.commit();
			
		
    	conn_tDBOutput_2 .close();
    	
    	resourceMap.put("finish_tDBOutput_2", true);
    	

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Duplicate_enrollments");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_Enrollment_settings"); 
				     			
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_Hiv_status"); 
				     			
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_Source_referral"); 
				     			
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_TBstatus"); 
				     			
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_Target_group"); 
				     			
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_load_pregancy_data"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_entry_points_codeset"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
                if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_1")) != null) {
                    pstmtUpdateToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
                if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_1")) != null) {
                    pstmtInsertToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */




	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_2 = null;
                if ((pstmtUpdateToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_2")) != null) {
                    pstmtUpdateToClose_tDBOutput_2.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_2 = null;
                if ((pstmtInsertToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_2")) != null) {
                    pstmtInsertToClose_tDBOutput_2.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_2") == null){
            java.sql.Connection ctn_tDBOutput_2 = null;
            if((ctn_tDBOutput_2 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_2")) != null){
                try {
                    ctn_tDBOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_2) {
                    String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :" + sqlEx_tDBOutput_2.getMessage();
                    System.err.println(errorMessage_tDBOutput_2);
                }
            }
        }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	

public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";

	
		int tos_count_tJava_3 = 0;
		


int totalMigrated = globalMap.get("tDBOutput_1_NB_LINE_UPDATED") != null ? (Integer)globalMap.get("tDBOutput_1_NB_LINE_UPDATED") : 0;

System.out.println("Total hiv_enrollment already migrated "+totalMigrated);
System.out.println();
System.out.println("Total new records migrated - "+globalMap.get("tDBOutput_1_NB_LINE_INSERTED"));
if(globalMap.get("tDBOutput_1_ERROR_MESSAGE") != null){
System.out.println("Migration Error - "+globalMap.get("tDBOutput_1_ERROR_MESSAGE"));
}
System.out.println("Total erroneous records not migrated - "+globalMap.get("tFileOutputDelimited_1_NB_LINE"));
   System.out.println();
java.time.LocalDateTime endTime = java.time.LocalDateTime.now();
System.out.println("End time - "+ endTime);
java.time.LocalDateTime statTime = (java.time.LocalDateTime)globalMap.get("startTime");

java.time.Duration duration = java.time.Duration.between(statTime, endTime);
System.out.println("Duration - "+ duration);
System.out.println("*************HIV_ENROLLMENT MIGRATION REPORT END*****************");
System.out.println("****************************************************************");
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());




/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	

public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";

	
		int tos_count_tJava_2 = 0;
		


System.out.println("Total Unique Patients enrolled fetched from hiv_enrollment_stage - "+globalMap.get("tDBInput_2_NB_LINE"));
System.out.println();
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


System.out.println("*****************************************************************");
System.out.println("***********HIV_ENROLLMENT MIGRATION REPORT START*****************");
java.time.LocalDateTime startTime = java.time.LocalDateTime.now();
globalMap.put("startTime", startTime);
System.out.println("Start time - "+ startTime);
System.out.println("Total Patients enrolled fetched from LAMIS3 patient - "+globalMap.get("tDBInput_16_NB_LINE"));
System.out.println("");
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class facilityStruct implements routines.system.IPersistableComparableLookupRow<facilityStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String orgunit_name;

				public String getOrgunit_name () {
					return this.orgunit_name;
				}
				
			    public String datim_code;

				public String getDatim_code () {
					return this.datim_code;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.datim_code == null) ? 0 : this.datim_code.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final facilityStruct other = (facilityStruct) obj;
		
						if (this.datim_code == null) {
							if (other.datim_code != null)
								return false;
						
						} else if (!this.datim_code.equals(other.datim_code))
						
							return false;
					

		return true;
    }

	public void copyDataTo(facilityStruct other) {

		other.id = this.id;
	            other.name = this.name;
	            other.orgunit_name = this.orgunit_name;
	            other.datim_code = this.datim_code;
	            
	}

	public void copyKeysDataTo(facilityStruct other) {

		other.datim_code = this.datim_code;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
					this.datim_code = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.datim_code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readInt();
					
						this.name = readString(dis,ois);
					
						this.orgunit_name = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.id);
					
						writeString(this.name, dos, oos);
					
						writeString(this.orgunit_name, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",orgunit_name="+orgunit_name);
		sb.append(",datim_code="+datim_code);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(facilityStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.datim_code, other.datim_code);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		facilityStruct facility = new facilityStruct();




	
	/**
	 * [tAdvancedHash_facility begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_facility", false);
		start_Hash.put("tAdvancedHash_facility", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_facility";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"facility");
					}
				
		int tos_count_tAdvancedHash_facility = 0;
		

			   		// connection name:facility
			   		// source node:tDBInput_15 - inputs:(after_tDBInput_16) outputs:(facility,facility) | target node:tAdvancedHash_facility - inputs:(facility) outputs:()
			   		// linked node: tMap_10 - inputs:(row2,facility) outputs:(copyOfCreate_HIV_JSONString)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_facility = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<facilityStruct> tHash_Lookup_facility =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<facilityStruct>getLookup(matchingModeEnum_facility);
	   						   
		   	   	   globalMap.put("tHash_Lookup_facility", tHash_Lookup_facility);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_facility begin ] stop
 */



	
	/**
	 * [tDBInput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_15", false);
		start_Hash.put("tDBInput_15", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_15";

	
		int tos_count_tDBInput_15 = 0;
		
	
    
	
		    int nb_line_tDBInput_15 = 0;
		    java.sql.Connection conn_tDBInput_15 = null;
				String driverClass_tDBInput_15 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_15 = java.lang.Class.forName(driverClass_tDBInput_15);
				String dbUser_tDBInput_15 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_15 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_15 = decryptedPassword_tDBInput_15;
				
				String url_tDBInput_15 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_15 = java.sql.DriverManager.getConnection(url_tDBInput_15,dbUser_tDBInput_15,dbPwd_tDBInput_15);
		        
				conn_tDBInput_15.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_15 = conn_tDBInput_15.createStatement();

		    String dbquery_tDBInput_15 = "SELECT iden.organisation_unit_id as id, ef.facility_name, ef.lga_name, ef.datim_id FROM etl_facility ef \nINNER JOIN ba"
+"se_organisation_unit_identifier iden ON iden.code = ef.datim_id";
			

            	globalMap.put("tDBInput_15_QUERY",dbquery_tDBInput_15);
		    java.sql.ResultSet rs_tDBInput_15 = null;

		    try {
		    	rs_tDBInput_15 = stmt_tDBInput_15.executeQuery(dbquery_tDBInput_15);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_15 = rs_tDBInput_15.getMetaData();
		    	int colQtyInRs_tDBInput_15 = rsmd_tDBInput_15.getColumnCount();

		    String tmpContent_tDBInput_15 = null;
		    
		    
		    while (rs_tDBInput_15.next()) {
		        nb_line_tDBInput_15++;
		        
							if(colQtyInRs_tDBInput_15 < 1) {
								facility.id = 0;
							} else {
		                          
            facility.id = rs_tDBInput_15.getInt(1);
            if(rs_tDBInput_15.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_15 < 2) {
								facility.name = null;
							} else {
	                         		
        	facility.name = routines.system.JDBCUtil.getString(rs_tDBInput_15, 2, false);
		                    }
							if(colQtyInRs_tDBInput_15 < 3) {
								facility.orgunit_name = null;
							} else {
	                         		
        	facility.orgunit_name = routines.system.JDBCUtil.getString(rs_tDBInput_15, 3, false);
		                    }
							if(colQtyInRs_tDBInput_15 < 4) {
								facility.datim_code = null;
							} else {
	                         		
        	facility.datim_code = routines.system.JDBCUtil.getString(rs_tDBInput_15, 4, false);
		                    }
					


 



/**
 * [tDBInput_15 begin ] stop
 */
	
	/**
	 * [tDBInput_15 main ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

 


	tos_count_tDBInput_15++;

/**
 * [tDBInput_15 main ] stop
 */
	
	/**
	 * [tDBInput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

 



/**
 * [tDBInput_15 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_facility main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facility";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"facility");
					}
					


			   
			   

					facilityStruct facility_HashRow = new facilityStruct();
		   	   	   
				
				facility_HashRow.id = facility.id;
				
				facility_HashRow.name = facility.name;
				
				facility_HashRow.orgunit_name = facility.orgunit_name;
				
				facility_HashRow.datim_code = facility.datim_code;
				
			tHash_Lookup_facility.put(facility_HashRow);
			
            




 


	tos_count_tAdvancedHash_facility++;

/**
 * [tAdvancedHash_facility main ] stop
 */
	
	/**
	 * [tAdvancedHash_facility process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facility";

	

 



/**
 * [tAdvancedHash_facility process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_facility process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facility";

	

 



/**
 * [tAdvancedHash_facility process_data_end ] stop
 */



	
	/**
	 * [tDBInput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

 



/**
 * [tDBInput_15 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_15 end ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

	}
}finally{
	if (rs_tDBInput_15 != null) {
		rs_tDBInput_15.close();
	}
	if (stmt_tDBInput_15 != null) {
		stmt_tDBInput_15.close();
	}
	if(conn_tDBInput_15 != null && !conn_tDBInput_15.isClosed()) {
		
			conn_tDBInput_15.commit();
			
		
			conn_tDBInput_15.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_15_NB_LINE",nb_line_tDBInput_15);
 

ok_Hash.put("tDBInput_15", true);
end_Hash.put("tDBInput_15", System.currentTimeMillis());




/**
 * [tDBInput_15 end ] stop
 */

	
	/**
	 * [tAdvancedHash_facility end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facility";

	

tHash_Lookup_facility.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"facility");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_facility", true);
end_Hash.put("tAdvancedHash_facility", System.currentTimeMillis());




/**
 * [tAdvancedHash_facility end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_15 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_15";

	

 



/**
 * [tDBInput_15 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_facility finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_facility";

	

 



/**
 * [tAdvancedHash_facility finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_15_SUBPROCESS_STATE", 1);
	}
	


public static class entry_points_codesetStruct implements routines.system.IPersistableComparableLookupRow<entry_points_codesetStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public String codeset_group;

				public String getCodeset_group () {
					return this.codeset_group;
				}
				
			    public String display;

				public String getDisplay () {
					return this.display;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.display == null) ? 0 : this.display.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final entry_points_codesetStruct other = (entry_points_codesetStruct) obj;
		
						if (this.display == null) {
							if (other.display != null)
								return false;
						
						} else if (!this.display.equals(other.display))
						
							return false;
					

		return true;
    }

	public void copyDataTo(entry_points_codesetStruct other) {

		other.id = this.id;
	            other.codeset_group = this.codeset_group;
	            other.display = this.display;
	            
	}

	public void copyKeysDataTo(entry_points_codesetStruct other) {

		other.display = this.display;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
					this.display = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.display,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readLong();
					
						this.codeset_group = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeLong(this.id);
					
						writeString(this.codeset_group, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",codeset_group="+codeset_group);
		sb.append(",display="+display);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(entry_points_codesetStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.display, other.display);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		entry_points_codesetStruct entry_points_codeset = new entry_points_codesetStruct();




	
	/**
	 * [tAdvancedHash_entry_points_codeset begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_entry_points_codeset", false);
		start_Hash.put("tAdvancedHash_entry_points_codeset", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_entry_points_codeset";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"entry_points_codeset");
					}
				
		int tos_count_tAdvancedHash_entry_points_codeset = 0;
		

			   		// connection name:entry_points_codeset
			   		// source node:tDBInput_1 - inputs:(after_tDBInput_2) outputs:(entry_points_codeset,entry_points_codeset) | target node:tAdvancedHash_entry_points_codeset - inputs:(entry_points_codeset) outputs:()
			   		// linked node: tMap_1 - inputs:(entry_points_patient,entry_points_codeset) outputs:(Entry_point)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_entry_points_codeset = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<entry_points_codesetStruct> tHash_Lookup_entry_points_codeset =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<entry_points_codesetStruct>getLookup(matchingModeEnum_entry_points_codeset);
	   						   
		   	   	   globalMap.put("tHash_Lookup_entry_points_codeset", tHash_Lookup_entry_points_codeset);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_entry_points_codeset begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_1 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
				String url_tDBInput_1 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
				conn_tDBInput_1.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT DISTINCT c.id,codeset_group,display  FROM public.base_application_codeset c\nINNER JOIN etl_hiv_enrollment_stage"
+" h  \n  ON c.display = h.entry_point_id";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								entry_points_codeset.id = 0;
							} else {
		                          
            entry_points_codeset.id = rs_tDBInput_1.getLong(1);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								entry_points_codeset.codeset_group = null;
							} else {
	                         		
        	entry_points_codeset.codeset_group = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								entry_points_codeset.display = null;
							} else {
	                         		
        	entry_points_codeset.display = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_entry_points_codeset main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_entry_points_codeset";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"entry_points_codeset");
					}
					


			   
			   

					entry_points_codesetStruct entry_points_codeset_HashRow = new entry_points_codesetStruct();
		   	   	   
				
				entry_points_codeset_HashRow.id = entry_points_codeset.id;
				
				entry_points_codeset_HashRow.codeset_group = entry_points_codeset.codeset_group;
				
				entry_points_codeset_HashRow.display = entry_points_codeset.display;
				
			tHash_Lookup_entry_points_codeset.put(entry_points_codeset_HashRow);
			
            




 


	tos_count_tAdvancedHash_entry_points_codeset++;

/**
 * [tAdvancedHash_entry_points_codeset main ] stop
 */
	
	/**
	 * [tAdvancedHash_entry_points_codeset process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_entry_points_codeset";

	

 



/**
 * [tAdvancedHash_entry_points_codeset process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_entry_points_codeset process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_entry_points_codeset";

	

 



/**
 * [tAdvancedHash_entry_points_codeset process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
	if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
		
			conn_tDBInput_1.commit();
			
		
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_entry_points_codeset end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_entry_points_codeset";

	

tHash_Lookup_entry_points_codeset.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"entry_points_codeset");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_entry_points_codeset", true);
end_Hash.put("tAdvancedHash_entry_points_codeset", System.currentTimeMillis());




/**
 * [tAdvancedHash_entry_points_codeset end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_entry_points_codeset finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_entry_points_codeset";

	

 



/**
 * [tAdvancedHash_entry_points_codeset finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class enrollment_codesetStruct implements routines.system.IPersistableComparableLookupRow<enrollment_codesetStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public String codeset_group;

				public String getCodeset_group () {
					return this.codeset_group;
				}
				
			    public String display;

				public String getDisplay () {
					return this.display;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.display == null) ? 0 : this.display.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final enrollment_codesetStruct other = (enrollment_codesetStruct) obj;
		
						if (this.display == null) {
							if (other.display != null)
								return false;
						
						} else if (!this.display.equals(other.display))
						
							return false;
					

		return true;
    }

	public void copyDataTo(enrollment_codesetStruct other) {

		other.id = this.id;
	            other.codeset_group = this.codeset_group;
	            other.display = this.display;
	            
	}

	public void copyKeysDataTo(enrollment_codesetStruct other) {

		other.display = this.display;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
					this.display = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.display,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.id = dis.readLong();
					
						this.codeset_group = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeLong(this.id);
					
						writeString(this.codeset_group, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",codeset_group="+codeset_group);
		sb.append(",display="+display);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(enrollment_codesetStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.display, other.display);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		enrollment_codesetStruct enrollment_codeset = new enrollment_codesetStruct();




	
	/**
	 * [tAdvancedHash_enrollment_codeset begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_enrollment_codeset", false);
		start_Hash.put("tAdvancedHash_enrollment_codeset", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_enrollment_codeset";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"enrollment_codeset");
					}
				
		int tos_count_tAdvancedHash_enrollment_codeset = 0;
		

			   		// connection name:enrollment_codeset
			   		// source node:tDBInput_3 - inputs:(after_tDBInput_4) outputs:(enrollment_codeset,enrollment_codeset) | target node:tAdvancedHash_enrollment_codeset - inputs:(enrollment_codeset) outputs:()
			   		// linked node: tMap_2 - inputs:(enrollment_codeset,enrollment_setting) outputs:(Enrollment_settings,Enrollment_settings)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_enrollment_codeset = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<enrollment_codesetStruct> tHash_Lookup_enrollment_codeset =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<enrollment_codesetStruct>getLookup(matchingModeEnum_enrollment_codeset);
	   						   
		   	   	   globalMap.put("tHash_Lookup_enrollment_codeset", tHash_Lookup_enrollment_codeset);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_enrollment_codeset begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_3 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				
				String url_tDBInput_3 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
				conn_tDBInput_3.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT DISTINCT c.id,codeset_group,display FROM public.base_application_codeset c\nINNER JOIN etl_hiv_enrollment_stage "
+"h\n  ON c.display = h.enrollment_setting_id";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								enrollment_codeset.id = 0;
							} else {
		                          
            enrollment_codeset.id = rs_tDBInput_3.getLong(1);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								enrollment_codeset.codeset_group = null;
							} else {
	                         		
        	enrollment_codeset.codeset_group = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								enrollment_codeset.display = null;
							} else {
	                         		
        	enrollment_codeset.display = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
		                    }
					


 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_enrollment_codeset main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_enrollment_codeset";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"enrollment_codeset");
					}
					


			   
			   

					enrollment_codesetStruct enrollment_codeset_HashRow = new enrollment_codesetStruct();
		   	   	   
				
				enrollment_codeset_HashRow.id = enrollment_codeset.id;
				
				enrollment_codeset_HashRow.codeset_group = enrollment_codeset.codeset_group;
				
				enrollment_codeset_HashRow.display = enrollment_codeset.display;
				
			tHash_Lookup_enrollment_codeset.put(enrollment_codeset_HashRow);
			
            




 


	tos_count_tAdvancedHash_enrollment_codeset++;

/**
 * [tAdvancedHash_enrollment_codeset main ] stop
 */
	
	/**
	 * [tAdvancedHash_enrollment_codeset process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_enrollment_codeset";

	

 



/**
 * [tAdvancedHash_enrollment_codeset process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_enrollment_codeset process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_enrollment_codeset";

	

 



/**
 * [tAdvancedHash_enrollment_codeset process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
	if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
		
			conn_tDBInput_3.commit();
			
		
			conn_tDBInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_enrollment_codeset end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_enrollment_codeset";

	

tHash_Lookup_enrollment_codeset.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"enrollment_codeset");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_enrollment_codeset", true);
end_Hash.put("tAdvancedHash_enrollment_codeset", System.currentTimeMillis());




/**
 * [tAdvancedHash_enrollment_codeset end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_enrollment_codeset finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_enrollment_codeset";

	

 



/**
 * [tAdvancedHash_enrollment_codeset finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class hiv_registration_statusStruct implements routines.system.IPersistableComparableLookupRow<hiv_registration_statusStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long codeset_id;

				public long getCodeset_id () {
					return this.codeset_id;
				}
				
			    public String codeset_group;

				public String getCodeset_group () {
					return this.codeset_group;
				}
				
			    public String codeset_display;

				public String getCodeset_display () {
					return this.codeset_display;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.codeset_display == null) ? 0 : this.codeset_display.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final hiv_registration_statusStruct other = (hiv_registration_statusStruct) obj;
		
						if (this.codeset_display == null) {
							if (other.codeset_display != null)
								return false;
						
						} else if (!this.codeset_display.equals(other.codeset_display))
						
							return false;
					

		return true;
    }

	public void copyDataTo(hiv_registration_statusStruct other) {

		other.codeset_id = this.codeset_id;
	            other.codeset_group = this.codeset_group;
	            other.codeset_display = this.codeset_display;
	            
	}

	public void copyKeysDataTo(hiv_registration_statusStruct other) {

		other.codeset_display = this.codeset_display;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
					this.codeset_display = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.codeset_display,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.codeset_id = dis.readLong();
					
						this.codeset_group = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeLong(this.codeset_id);
					
						writeString(this.codeset_group, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("codeset_id="+String.valueOf(codeset_id));
		sb.append(",codeset_group="+codeset_group);
		sb.append(",codeset_display="+codeset_display);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(hiv_registration_statusStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.codeset_display, other.codeset_display);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		hiv_registration_statusStruct hiv_registration_status = new hiv_registration_statusStruct();




	
	/**
	 * [tAdvancedHash_hiv_registration_status begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_hiv_registration_status", false);
		start_Hash.put("tAdvancedHash_hiv_registration_status", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_hiv_registration_status";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"hiv_registration_status");
					}
				
		int tos_count_tAdvancedHash_hiv_registration_status = 0;
		

			   		// connection name:hiv_registration_status
			   		// source node:tDBInput_7 - inputs:(after_tDBInput_8) outputs:(hiv_registration_status,hiv_registration_status) | target node:tAdvancedHash_hiv_registration_status - inputs:(hiv_registration_status) outputs:()
			   		// linked node: tMap_5 - inputs:(hiv_registration_status,hiv_status_patient) outputs:(Hiv_status,Hiv_status)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_hiv_registration_status = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<hiv_registration_statusStruct> tHash_Lookup_hiv_registration_status =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<hiv_registration_statusStruct>getLookup(matchingModeEnum_hiv_registration_status);
	   						   
		   	   	   globalMap.put("tHash_Lookup_hiv_registration_status", tHash_Lookup_hiv_registration_status);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_hiv_registration_status begin ] stop
 */



	
	/**
	 * [tDBInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_7", false);
		start_Hash.put("tDBInput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_7";

	
		int tos_count_tDBInput_7 = 0;
		
	
    
	
		    int nb_line_tDBInput_7 = 0;
		    java.sql.Connection conn_tDBInput_7 = null;
				String driverClass_tDBInput_7 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_7 = java.lang.Class.forName(driverClass_tDBInput_7);
				String dbUser_tDBInput_7 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_7 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_7 = decryptedPassword_tDBInput_7;
				
				String url_tDBInput_7 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_7 = java.sql.DriverManager.getConnection(url_tDBInput_7,dbUser_tDBInput_7,dbPwd_tDBInput_7);
		        
				conn_tDBInput_7.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

		    String dbquery_tDBInput_7 = "SELECT DISTINCT c.id as codeset_id,codeset_group,lower(right(c.display,7)) as codeset_display,\nreplace(lower(right(h.s"
+"tatus_at_registration_id,7)),'_',' ') as status_at_registration\nFROM public.base_application_codeset c\nINNER JOIN etl_"
+"hiv_enrollment_stage h  \n  ON lower(right(c.display,7)) ilike lower(right(h.status_at_registration_id,7)) \n  AND lower"
+"(right(display,7)) ilike '%non art%'\n  OR  lower(right(display,7)) ilike '%sfer in'\nWHERE codeset_group = 'HIV_STATUS'"
+";";
			

            	globalMap.put("tDBInput_7_QUERY",dbquery_tDBInput_7);
		    java.sql.ResultSet rs_tDBInput_7 = null;

		    try {
		    	rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
		    	int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

		    String tmpContent_tDBInput_7 = null;
		    
		    
		    while (rs_tDBInput_7.next()) {
		        nb_line_tDBInput_7++;
		        
							if(colQtyInRs_tDBInput_7 < 1) {
								hiv_registration_status.codeset_id = 0;
							} else {
		                          
            hiv_registration_status.codeset_id = rs_tDBInput_7.getLong(1);
            if(rs_tDBInput_7.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 2) {
								hiv_registration_status.codeset_group = null;
							} else {
	                         		
        	hiv_registration_status.codeset_group = routines.system.JDBCUtil.getString(rs_tDBInput_7, 2, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 3) {
								hiv_registration_status.codeset_display = null;
							} else {
	                         		
        	hiv_registration_status.codeset_display = routines.system.JDBCUtil.getString(rs_tDBInput_7, 3, false);
		                    }
					


 



/**
 * [tDBInput_7 begin ] stop
 */
	
	/**
	 * [tDBInput_7 main ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 


	tos_count_tDBInput_7++;

/**
 * [tDBInput_7 main ] stop
 */
	
	/**
	 * [tDBInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_hiv_registration_status main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_hiv_registration_status";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"hiv_registration_status");
					}
					


			   
			   

					hiv_registration_statusStruct hiv_registration_status_HashRow = new hiv_registration_statusStruct();
		   	   	   
				
				hiv_registration_status_HashRow.codeset_id = hiv_registration_status.codeset_id;
				
				hiv_registration_status_HashRow.codeset_group = hiv_registration_status.codeset_group;
				
				hiv_registration_status_HashRow.codeset_display = hiv_registration_status.codeset_display;
				
			tHash_Lookup_hiv_registration_status.put(hiv_registration_status_HashRow);
			
            




 


	tos_count_tAdvancedHash_hiv_registration_status++;

/**
 * [tAdvancedHash_hiv_registration_status main ] stop
 */
	
	/**
	 * [tAdvancedHash_hiv_registration_status process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_hiv_registration_status";

	

 



/**
 * [tAdvancedHash_hiv_registration_status process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_hiv_registration_status process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_hiv_registration_status";

	

 



/**
 * [tAdvancedHash_hiv_registration_status process_data_end ] stop
 */



	
	/**
	 * [tDBInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_7 end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

	}
}finally{
	if (rs_tDBInput_7 != null) {
		rs_tDBInput_7.close();
	}
	if (stmt_tDBInput_7 != null) {
		stmt_tDBInput_7.close();
	}
	if(conn_tDBInput_7 != null && !conn_tDBInput_7.isClosed()) {
		
			conn_tDBInput_7.commit();
			
		
			conn_tDBInput_7.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_7_NB_LINE",nb_line_tDBInput_7);
 

ok_Hash.put("tDBInput_7", true);
end_Hash.put("tDBInput_7", System.currentTimeMillis());




/**
 * [tDBInput_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_hiv_registration_status end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_hiv_registration_status";

	

tHash_Lookup_hiv_registration_status.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"hiv_registration_status");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_hiv_registration_status", true);
end_Hash.put("tAdvancedHash_hiv_registration_status", System.currentTimeMillis());




/**
 * [tAdvancedHash_hiv_registration_status end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_hiv_registration_status finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_hiv_registration_status";

	

 



/**
 * [tAdvancedHash_hiv_registration_status finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class source_referal_codesetStruct implements routines.system.IPersistableComparableLookupRow<source_referal_codesetStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long codeset_id;

				public long getCodeset_id () {
					return this.codeset_id;
				}
				
			    public String codeset_group;

				public String getCodeset_group () {
					return this.codeset_group;
				}
				
			    public String codeset_display;

				public String getCodeset_display () {
					return this.codeset_display;
				}
				
			    public String source_of_referrer_id;

				public String getSource_of_referrer_id () {
					return this.source_of_referrer_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.codeset_display == null) ? 0 : this.codeset_display.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final source_referal_codesetStruct other = (source_referal_codesetStruct) obj;
		
						if (this.codeset_display == null) {
							if (other.codeset_display != null)
								return false;
						
						} else if (!this.codeset_display.equals(other.codeset_display))
						
							return false;
					

		return true;
    }

	public void copyDataTo(source_referal_codesetStruct other) {

		other.codeset_id = this.codeset_id;
	            other.codeset_group = this.codeset_group;
	            other.codeset_display = this.codeset_display;
	            other.source_of_referrer_id = this.source_of_referrer_id;
	            
	}

	public void copyKeysDataTo(source_referal_codesetStruct other) {

		other.codeset_display = this.codeset_display;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
					this.codeset_display = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.codeset_display,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.codeset_id = dis.readLong();
					
						this.codeset_group = readString(dis,ois);
					
						this.source_of_referrer_id = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeLong(this.codeset_id);
					
						writeString(this.codeset_group, dos, oos);
					
						writeString(this.source_of_referrer_id, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("codeset_id="+String.valueOf(codeset_id));
		sb.append(",codeset_group="+codeset_group);
		sb.append(",codeset_display="+codeset_display);
		sb.append(",source_of_referrer_id="+source_of_referrer_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(source_referal_codesetStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.codeset_display, other.codeset_display);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		source_referal_codesetStruct source_referal_codeset = new source_referal_codesetStruct();




	
	/**
	 * [tAdvancedHash_source_referal_codeset begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_source_referal_codeset", false);
		start_Hash.put("tAdvancedHash_source_referal_codeset", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_source_referal_codeset";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"source_referal_codeset");
					}
				
		int tos_count_tAdvancedHash_source_referal_codeset = 0;
		

			   		// connection name:source_referal_codeset
			   		// source node:tDBInput_9 - inputs:(after_tDBInput_10) outputs:(source_referal_codeset,source_referal_codeset) | target node:tAdvancedHash_source_referal_codeset - inputs:(source_referal_codeset) outputs:()
			   		// linked node: tMap_6 - inputs:(source_referal_codeset,source_referal_patients) outputs:(Source_referral,Source_referral)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_source_referal_codeset = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<source_referal_codesetStruct> tHash_Lookup_source_referal_codeset =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<source_referal_codesetStruct>getLookup(matchingModeEnum_source_referal_codeset);
	   						   
		   	   	   globalMap.put("tHash_Lookup_source_referal_codeset", tHash_Lookup_source_referal_codeset);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_source_referal_codeset begin ] stop
 */



	
	/**
	 * [tDBInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_9", false);
		start_Hash.put("tDBInput_9", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_9";

	
		int tos_count_tDBInput_9 = 0;
		
	
    
	
		    int nb_line_tDBInput_9 = 0;
		    java.sql.Connection conn_tDBInput_9 = null;
				String driverClass_tDBInput_9 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_9 = java.lang.Class.forName(driverClass_tDBInput_9);
				String dbUser_tDBInput_9 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_9 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_9 = decryptedPassword_tDBInput_9;
				
				String url_tDBInput_9 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_9 = java.sql.DriverManager.getConnection(url_tDBInput_9,dbUser_tDBInput_9,dbPwd_tDBInput_9);
		        
				conn_tDBInput_9.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9.createStatement();

		    String dbquery_tDBInput_9 = "SELECT DISTINCT c.id as codeset_id,codeset_group,lower(left(c.display,4)) as codeset_display,\nlower(left(h.source_of_r"
+"eferrer_id,4)) as source_of_referrer_id\nFROM public.base_application_codeset c\nINNER JOIN etl_hiv_enrollment_stage h  "
+"\n  ON lower(left(c.display,4))= lower(left(h.source_of_referrer_id,4)) \nWHERE c.codeset_group='SOURCE_REFERRAL';";
			

            	globalMap.put("tDBInput_9_QUERY",dbquery_tDBInput_9);
		    java.sql.ResultSet rs_tDBInput_9 = null;

		    try {
		    	rs_tDBInput_9 = stmt_tDBInput_9.executeQuery(dbquery_tDBInput_9);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9.getMetaData();
		    	int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9.getColumnCount();

		    String tmpContent_tDBInput_9 = null;
		    
		    
		    while (rs_tDBInput_9.next()) {
		        nb_line_tDBInput_9++;
		        
							if(colQtyInRs_tDBInput_9 < 1) {
								source_referal_codeset.codeset_id = 0;
							} else {
		                          
            source_referal_codeset.codeset_id = rs_tDBInput_9.getLong(1);
            if(rs_tDBInput_9.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_9 < 2) {
								source_referal_codeset.codeset_group = null;
							} else {
	                         		
        	source_referal_codeset.codeset_group = routines.system.JDBCUtil.getString(rs_tDBInput_9, 2, false);
		                    }
							if(colQtyInRs_tDBInput_9 < 3) {
								source_referal_codeset.codeset_display = null;
							} else {
	                         		
        	source_referal_codeset.codeset_display = routines.system.JDBCUtil.getString(rs_tDBInput_9, 3, false);
		                    }
							if(colQtyInRs_tDBInput_9 < 4) {
								source_referal_codeset.source_of_referrer_id = null;
							} else {
	                         		
        	source_referal_codeset.source_of_referrer_id = routines.system.JDBCUtil.getString(rs_tDBInput_9, 4, false);
		                    }
					


 



/**
 * [tDBInput_9 begin ] stop
 */
	
	/**
	 * [tDBInput_9 main ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 


	tos_count_tDBInput_9++;

/**
 * [tDBInput_9 main ] stop
 */
	
	/**
	 * [tDBInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_source_referal_codeset main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_source_referal_codeset";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"source_referal_codeset");
					}
					


			   
			   

					source_referal_codesetStruct source_referal_codeset_HashRow = new source_referal_codesetStruct();
		   	   	   
				
				source_referal_codeset_HashRow.codeset_id = source_referal_codeset.codeset_id;
				
				source_referal_codeset_HashRow.codeset_group = source_referal_codeset.codeset_group;
				
				source_referal_codeset_HashRow.codeset_display = source_referal_codeset.codeset_display;
				
				source_referal_codeset_HashRow.source_of_referrer_id = source_referal_codeset.source_of_referrer_id;
				
			tHash_Lookup_source_referal_codeset.put(source_referal_codeset_HashRow);
			
            




 


	tos_count_tAdvancedHash_source_referal_codeset++;

/**
 * [tAdvancedHash_source_referal_codeset main ] stop
 */
	
	/**
	 * [tAdvancedHash_source_referal_codeset process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_source_referal_codeset";

	

 



/**
 * [tAdvancedHash_source_referal_codeset process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_source_referal_codeset process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_source_referal_codeset";

	

 



/**
 * [tAdvancedHash_source_referal_codeset process_data_end ] stop
 */



	
	/**
	 * [tDBInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_9 end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

	}
}finally{
	if (rs_tDBInput_9 != null) {
		rs_tDBInput_9.close();
	}
	if (stmt_tDBInput_9 != null) {
		stmt_tDBInput_9.close();
	}
	if(conn_tDBInput_9 != null && !conn_tDBInput_9.isClosed()) {
		
			conn_tDBInput_9.commit();
			
		
			conn_tDBInput_9.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_9_NB_LINE",nb_line_tDBInput_9);
 

ok_Hash.put("tDBInput_9", true);
end_Hash.put("tDBInput_9", System.currentTimeMillis());




/**
 * [tDBInput_9 end ] stop
 */

	
	/**
	 * [tAdvancedHash_source_referal_codeset end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_source_referal_codeset";

	

tHash_Lookup_source_referal_codeset.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"source_referal_codeset");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_source_referal_codeset", true);
end_Hash.put("tAdvancedHash_source_referal_codeset", System.currentTimeMillis());




/**
 * [tAdvancedHash_source_referal_codeset end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_9 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_source_referal_codeset finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_source_referal_codeset";

	

 



/**
 * [tAdvancedHash_source_referal_codeset finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class TB_statusStruct implements routines.system.IPersistableComparableLookupRow<TB_statusStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long codeset_id;

				public long getCodeset_id () {
					return this.codeset_id;
				}
				
			    public String codeset_group;

				public String getCodeset_group () {
					return this.codeset_group;
				}
				
			    public String codeset_display;

				public String getCodeset_display () {
					return this.codeset_display;
				}
				
			    public String tb_status_id;

				public String getTb_status_id () {
					return this.tb_status_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.codeset_display == null) ? 0 : this.codeset_display.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final TB_statusStruct other = (TB_statusStruct) obj;
		
						if (this.codeset_display == null) {
							if (other.codeset_display != null)
								return false;
						
						} else if (!this.codeset_display.equals(other.codeset_display))
						
							return false;
					

		return true;
    }

	public void copyDataTo(TB_statusStruct other) {

		other.codeset_id = this.codeset_id;
	            other.codeset_group = this.codeset_group;
	            other.codeset_display = this.codeset_display;
	            other.tb_status_id = this.tb_status_id;
	            
	}

	public void copyKeysDataTo(TB_statusStruct other) {

		other.codeset_display = this.codeset_display;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
					this.codeset_display = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.codeset_display,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.codeset_id = dis.readLong();
					
						this.codeset_group = readString(dis,ois);
					
						this.tb_status_id = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeLong(this.codeset_id);
					
						writeString(this.codeset_group, dos, oos);
					
						writeString(this.tb_status_id, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("codeset_id="+String.valueOf(codeset_id));
		sb.append(",codeset_group="+codeset_group);
		sb.append(",codeset_display="+codeset_display);
		sb.append(",tb_status_id="+tb_status_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(TB_statusStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.codeset_display, other.codeset_display);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		TB_statusStruct TB_status = new TB_statusStruct();




	
	/**
	 * [tAdvancedHash_TB_status begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_TB_status", false);
		start_Hash.put("tAdvancedHash_TB_status", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_TB_status";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"TB_status");
					}
				
		int tos_count_tAdvancedHash_TB_status = 0;
		

			   		// connection name:TB_status
			   		// source node:tDBInput_11 - inputs:(after_tDBInput_12) outputs:(TB_status,TB_status) | target node:tAdvancedHash_TB_status - inputs:(TB_status) outputs:()
			   		// linked node: tMap_7 - inputs:(TB_status,TB_status_patient) outputs:(TBstatus,TBstatus)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_TB_status = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<TB_statusStruct> tHash_Lookup_TB_status =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<TB_statusStruct>getLookup(matchingModeEnum_TB_status);
	   						   
		   	   	   globalMap.put("tHash_Lookup_TB_status", tHash_Lookup_TB_status);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_TB_status begin ] stop
 */



	
	/**
	 * [tDBInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_11", false);
		start_Hash.put("tDBInput_11", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_11";

	
		int tos_count_tDBInput_11 = 0;
		
	
    
	
		    int nb_line_tDBInput_11 = 0;
		    java.sql.Connection conn_tDBInput_11 = null;
				String driverClass_tDBInput_11 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_11 = java.lang.Class.forName(driverClass_tDBInput_11);
				String dbUser_tDBInput_11 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_11 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_11 = decryptedPassword_tDBInput_11;
				
				String url_tDBInput_11 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_11 = java.sql.DriverManager.getConnection(url_tDBInput_11,dbUser_tDBInput_11,dbPwd_tDBInput_11);
		        
				conn_tDBInput_11.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_11 = conn_tDBInput_11.createStatement();

		    String dbquery_tDBInput_11 = "SELECT DISTINCT c.id as codeset_id,codeset_group,lower(left(c.display,4)) as codeset_display,\nlower(left(h.tb_status_i"
+"d,4)) as tb_status_id\nFROM public.base_application_codeset c\nINNER JOIN etl_hiv_enrollment_stage h  \n  ON lower(left("
+"c.display,4))= lower(left(h.tb_status_id,4)) \nWHERE c.codeset_group='TB_STATUS';";
			

            	globalMap.put("tDBInput_11_QUERY",dbquery_tDBInput_11);
		    java.sql.ResultSet rs_tDBInput_11 = null;

		    try {
		    	rs_tDBInput_11 = stmt_tDBInput_11.executeQuery(dbquery_tDBInput_11);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_11 = rs_tDBInput_11.getMetaData();
		    	int colQtyInRs_tDBInput_11 = rsmd_tDBInput_11.getColumnCount();

		    String tmpContent_tDBInput_11 = null;
		    
		    
		    while (rs_tDBInput_11.next()) {
		        nb_line_tDBInput_11++;
		        
							if(colQtyInRs_tDBInput_11 < 1) {
								TB_status.codeset_id = 0;
							} else {
		                          
            TB_status.codeset_id = rs_tDBInput_11.getLong(1);
            if(rs_tDBInput_11.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_11 < 2) {
								TB_status.codeset_group = null;
							} else {
	                         		
        	TB_status.codeset_group = routines.system.JDBCUtil.getString(rs_tDBInput_11, 2, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 3) {
								TB_status.codeset_display = null;
							} else {
	                         		
        	TB_status.codeset_display = routines.system.JDBCUtil.getString(rs_tDBInput_11, 3, false);
		                    }
							if(colQtyInRs_tDBInput_11 < 4) {
								TB_status.tb_status_id = null;
							} else {
	                         		
        	TB_status.tb_status_id = routines.system.JDBCUtil.getString(rs_tDBInput_11, 4, false);
		                    }
					


 



/**
 * [tDBInput_11 begin ] stop
 */
	
	/**
	 * [tDBInput_11 main ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 


	tos_count_tDBInput_11++;

/**
 * [tDBInput_11 main ] stop
 */
	
	/**
	 * [tDBInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_TB_status main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_TB_status";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"TB_status");
					}
					


			   
			   

					TB_statusStruct TB_status_HashRow = new TB_statusStruct();
		   	   	   
				
				TB_status_HashRow.codeset_id = TB_status.codeset_id;
				
				TB_status_HashRow.codeset_group = TB_status.codeset_group;
				
				TB_status_HashRow.codeset_display = TB_status.codeset_display;
				
				TB_status_HashRow.tb_status_id = TB_status.tb_status_id;
				
			tHash_Lookup_TB_status.put(TB_status_HashRow);
			
            




 


	tos_count_tAdvancedHash_TB_status++;

/**
 * [tAdvancedHash_TB_status main ] stop
 */
	
	/**
	 * [tAdvancedHash_TB_status process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_TB_status";

	

 



/**
 * [tAdvancedHash_TB_status process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_TB_status process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_TB_status";

	

 



/**
 * [tAdvancedHash_TB_status process_data_end ] stop
 */



	
	/**
	 * [tDBInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_11 end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

	}
}finally{
	if (rs_tDBInput_11 != null) {
		rs_tDBInput_11.close();
	}
	if (stmt_tDBInput_11 != null) {
		stmt_tDBInput_11.close();
	}
	if(conn_tDBInput_11 != null && !conn_tDBInput_11.isClosed()) {
		
			conn_tDBInput_11.commit();
			
		
			conn_tDBInput_11.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_11_NB_LINE",nb_line_tDBInput_11);
 

ok_Hash.put("tDBInput_11", true);
end_Hash.put("tDBInput_11", System.currentTimeMillis());




/**
 * [tDBInput_11 end ] stop
 */

	
	/**
	 * [tAdvancedHash_TB_status end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_TB_status";

	

tHash_Lookup_TB_status.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"TB_status");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_TB_status", true);
end_Hash.put("tAdvancedHash_TB_status", System.currentTimeMillis());




/**
 * [tAdvancedHash_TB_status end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_11 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_TB_status finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_TB_status";

	

 



/**
 * [tAdvancedHash_TB_status finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class target_groups_codesetStruct implements routines.system.IPersistableComparableLookupRow<target_groups_codesetStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long codeset_id;

				public long getCodeset_id () {
					return this.codeset_id;
				}
				
			    public String codeset_group;

				public String getCodeset_group () {
					return this.codeset_group;
				}
				
			    public String codeset_display;

				public String getCodeset_display () {
					return this.codeset_display;
				}
				
			    public String target_group_id;

				public String getTarget_group_id () {
					return this.target_group_id;
				}
				
			    public String target_group;

				public String getTarget_group () {
					return this.target_group;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.codeset_display == null) ? 0 : this.codeset_display.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final target_groups_codesetStruct other = (target_groups_codesetStruct) obj;
		
						if (this.codeset_display == null) {
							if (other.codeset_display != null)
								return false;
						
						} else if (!this.codeset_display.equals(other.codeset_display))
						
							return false;
					

		return true;
    }

	public void copyDataTo(target_groups_codesetStruct other) {

		other.codeset_id = this.codeset_id;
	            other.codeset_group = this.codeset_group;
	            other.codeset_display = this.codeset_display;
	            other.target_group_id = this.target_group_id;
	            other.target_group = this.target_group;
	            
	}

	public void copyKeysDataTo(target_groups_codesetStruct other) {

		other.codeset_display = this.codeset_display;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
					this.codeset_display = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.codeset_display,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.codeset_id = dis.readLong();
					
						this.codeset_group = readString(dis,ois);
					
						this.target_group_id = readString(dis,ois);
					
						this.target_group = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeLong(this.codeset_id);
					
						writeString(this.codeset_group, dos, oos);
					
						writeString(this.target_group_id, dos, oos);
					
						writeString(this.target_group, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("codeset_id="+String.valueOf(codeset_id));
		sb.append(",codeset_group="+codeset_group);
		sb.append(",codeset_display="+codeset_display);
		sb.append(",target_group_id="+target_group_id);
		sb.append(",target_group="+target_group);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(target_groups_codesetStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.codeset_display, other.codeset_display);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		target_groups_codesetStruct target_groups_codeset = new target_groups_codesetStruct();




	
	/**
	 * [tAdvancedHash_target_groups_codeset begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_target_groups_codeset", false);
		start_Hash.put("tAdvancedHash_target_groups_codeset", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_target_groups_codeset";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"target_groups_codeset");
					}
				
		int tos_count_tAdvancedHash_target_groups_codeset = 0;
		

			   		// connection name:target_groups_codeset
			   		// source node:tDBInput_13 - inputs:(after_tDBInput_14) outputs:(target_groups_codeset,target_groups_codeset) | target node:tAdvancedHash_target_groups_codeset - inputs:(target_groups_codeset) outputs:()
			   		// linked node: tMap_8 - inputs:(target_groups_codeset,target_groups_patients) outputs:(Target_group,Target_group)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_target_groups_codeset = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<target_groups_codesetStruct> tHash_Lookup_target_groups_codeset =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<target_groups_codesetStruct>getLookup(matchingModeEnum_target_groups_codeset);
	   						   
		   	   	   globalMap.put("tHash_Lookup_target_groups_codeset", tHash_Lookup_target_groups_codeset);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_target_groups_codeset begin ] stop
 */



	
	/**
	 * [tDBInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_13", false);
		start_Hash.put("tDBInput_13", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_13";

	
		int tos_count_tDBInput_13 = 0;
		
	
    
	
		    int nb_line_tDBInput_13 = 0;
		    java.sql.Connection conn_tDBInput_13 = null;
				String driverClass_tDBInput_13 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_13 = java.lang.Class.forName(driverClass_tDBInput_13);
				String dbUser_tDBInput_13 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_13 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_13 = decryptedPassword_tDBInput_13;
				
				String url_tDBInput_13 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_13 = java.sql.DriverManager.getConnection(url_tDBInput_13,dbUser_tDBInput_13,dbPwd_tDBInput_13);
		        
				conn_tDBInput_13.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_13 = conn_tDBInput_13.createStatement();

		    String dbquery_tDBInput_13 = "SELECT DISTINCT c.id as codeset_id,codeset_group,lower(left(c.display,4)) as codeset_display,\nlower(left(h.target_grou"
+"p_id,4)) as target_group_id,h.target_group_id as target_group\nFROM public.base_application_codeset c\nINNER JOIN etl_hi"
+"v_enrollment_stage h  \n  ON lower(left(c.display,4))= lower(left(h.target_group_id,4)) \nWHERE c.codeset_group='TARGET_"
+"GROUP';";
			

            	globalMap.put("tDBInput_13_QUERY",dbquery_tDBInput_13);
		    java.sql.ResultSet rs_tDBInput_13 = null;

		    try {
		    	rs_tDBInput_13 = stmt_tDBInput_13.executeQuery(dbquery_tDBInput_13);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_13 = rs_tDBInput_13.getMetaData();
		    	int colQtyInRs_tDBInput_13 = rsmd_tDBInput_13.getColumnCount();

		    String tmpContent_tDBInput_13 = null;
		    
		    
		    while (rs_tDBInput_13.next()) {
		        nb_line_tDBInput_13++;
		        
							if(colQtyInRs_tDBInput_13 < 1) {
								target_groups_codeset.codeset_id = 0;
							} else {
		                          
            target_groups_codeset.codeset_id = rs_tDBInput_13.getLong(1);
            if(rs_tDBInput_13.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_13 < 2) {
								target_groups_codeset.codeset_group = null;
							} else {
	                         		
        	target_groups_codeset.codeset_group = routines.system.JDBCUtil.getString(rs_tDBInput_13, 2, false);
		                    }
							if(colQtyInRs_tDBInput_13 < 3) {
								target_groups_codeset.codeset_display = null;
							} else {
	                         		
        	target_groups_codeset.codeset_display = routines.system.JDBCUtil.getString(rs_tDBInput_13, 3, false);
		                    }
							if(colQtyInRs_tDBInput_13 < 4) {
								target_groups_codeset.target_group_id = null;
							} else {
	                         		
        	target_groups_codeset.target_group_id = routines.system.JDBCUtil.getString(rs_tDBInput_13, 4, false);
		                    }
							if(colQtyInRs_tDBInput_13 < 5) {
								target_groups_codeset.target_group = null;
							} else {
	                         		
        	target_groups_codeset.target_group = routines.system.JDBCUtil.getString(rs_tDBInput_13, 5, false);
		                    }
					


 



/**
 * [tDBInput_13 begin ] stop
 */
	
	/**
	 * [tDBInput_13 main ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 


	tos_count_tDBInput_13++;

/**
 * [tDBInput_13 main ] stop
 */
	
	/**
	 * [tDBInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_target_groups_codeset main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_target_groups_codeset";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"target_groups_codeset");
					}
					


			   
			   

					target_groups_codesetStruct target_groups_codeset_HashRow = new target_groups_codesetStruct();
		   	   	   
				
				target_groups_codeset_HashRow.codeset_id = target_groups_codeset.codeset_id;
				
				target_groups_codeset_HashRow.codeset_group = target_groups_codeset.codeset_group;
				
				target_groups_codeset_HashRow.codeset_display = target_groups_codeset.codeset_display;
				
				target_groups_codeset_HashRow.target_group_id = target_groups_codeset.target_group_id;
				
				target_groups_codeset_HashRow.target_group = target_groups_codeset.target_group;
				
			tHash_Lookup_target_groups_codeset.put(target_groups_codeset_HashRow);
			
            




 


	tos_count_tAdvancedHash_target_groups_codeset++;

/**
 * [tAdvancedHash_target_groups_codeset main ] stop
 */
	
	/**
	 * [tAdvancedHash_target_groups_codeset process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_target_groups_codeset";

	

 



/**
 * [tAdvancedHash_target_groups_codeset process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_target_groups_codeset process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_target_groups_codeset";

	

 



/**
 * [tAdvancedHash_target_groups_codeset process_data_end ] stop
 */



	
	/**
	 * [tDBInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_13 end ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

	}
}finally{
	if (rs_tDBInput_13 != null) {
		rs_tDBInput_13.close();
	}
	if (stmt_tDBInput_13 != null) {
		stmt_tDBInput_13.close();
	}
	if(conn_tDBInput_13 != null && !conn_tDBInput_13.isClosed()) {
		
			conn_tDBInput_13.commit();
			
		
			conn_tDBInput_13.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_13_NB_LINE",nb_line_tDBInput_13);
 

ok_Hash.put("tDBInput_13", true);
end_Hash.put("tDBInput_13", System.currentTimeMillis());




/**
 * [tDBInput_13 end ] stop
 */

	
	/**
	 * [tAdvancedHash_target_groups_codeset end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_target_groups_codeset";

	

tHash_Lookup_target_groups_codeset.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"target_groups_codeset");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_target_groups_codeset", true);
end_Hash.put("tAdvancedHash_target_groups_codeset", System.currentTimeMillis());




/**
 * [tAdvancedHash_target_groups_codeset end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_13 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_target_groups_codeset finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_target_groups_codeset";

	

 



/**
 * [tAdvancedHash_target_groups_codeset finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_13_SUBPROCESS_STATE", 1);
	}
	


public static class fetch_pregnancy_codesetStruct implements routines.system.IPersistableComparableLookupRow<fetch_pregnancy_codesetStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long codeset_id;

				public long getCodeset_id () {
					return this.codeset_id;
				}
				
			    public String codeset_group;

				public String getCodeset_group () {
					return this.codeset_group;
				}
				
			    public String codeset_display;

				public String getCodeset_display () {
					return this.codeset_display;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.codeset_display == null) ? 0 : this.codeset_display.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final fetch_pregnancy_codesetStruct other = (fetch_pregnancy_codesetStruct) obj;
		
						if (this.codeset_display == null) {
							if (other.codeset_display != null)
								return false;
						
						} else if (!this.codeset_display.equals(other.codeset_display))
						
							return false;
					

		return true;
    }

	public void copyDataTo(fetch_pregnancy_codesetStruct other) {

		other.codeset_id = this.codeset_id;
	            other.codeset_group = this.codeset_group;
	            other.codeset_display = this.codeset_display;
	            
	}

	public void copyKeysDataTo(fetch_pregnancy_codesetStruct other) {

		other.codeset_display = this.codeset_display;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
					this.codeset_display = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.codeset_display,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.codeset_id = dis.readLong();
					
						this.codeset_group = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeLong(this.codeset_id);
					
						writeString(this.codeset_group, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("codeset_id="+String.valueOf(codeset_id));
		sb.append(",codeset_group="+codeset_group);
		sb.append(",codeset_display="+codeset_display);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(fetch_pregnancy_codesetStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.codeset_display, other.codeset_display);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		fetch_pregnancy_codesetStruct fetch_pregnancy_codeset = new fetch_pregnancy_codesetStruct();




	
	/**
	 * [tAdvancedHash_fetch_pregnancy_codeset begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_fetch_pregnancy_codeset", false);
		start_Hash.put("tAdvancedHash_fetch_pregnancy_codeset", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_fetch_pregnancy_codeset";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"fetch_pregnancy_codeset");
					}
				
		int tos_count_tAdvancedHash_fetch_pregnancy_codeset = 0;
		

			   		// connection name:fetch_pregnancy_codeset
			   		// source node:tDBInput_5 - inputs:(after_tDBInput_6) outputs:(fetch_pregnancy_codeset,fetch_pregnancy_codeset) | target node:tAdvancedHash_fetch_pregnancy_codeset - inputs:(fetch_pregnancy_codeset) outputs:()
			   		// linked node: tMap_3 - inputs:(fetch_pregnancy_codeset,fetch_pregnancy_data) outputs:(load_pregancy_data,load_pregancy_data)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_fetch_pregnancy_codeset = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<fetch_pregnancy_codesetStruct> tHash_Lookup_fetch_pregnancy_codeset =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<fetch_pregnancy_codesetStruct>getLookup(matchingModeEnum_fetch_pregnancy_codeset);
	   						   
		   	   	   globalMap.put("tHash_Lookup_fetch_pregnancy_codeset", tHash_Lookup_fetch_pregnancy_codeset);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_fetch_pregnancy_codeset begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
    
	
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_5 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;
				
				String url_tDBInput_5 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5,dbUser_tDBInput_5,dbPwd_tDBInput_5);
		        
				conn_tDBInput_5.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "SELECT DISTINCT c.id as codeset_id,codeset_group,lower(left(c.display,8)) as codeset_display,\nreplace(lower(left(h.pre"
+"gnancy_status_id,8)),'_',' ') as pregnancy_status_id\nFROM public.base_application_codeset c\nINNER JOIN etl_hiv_enrollm"
+"ent_stage h  \n  ON lower(left(c.display,8))= lower(left(h.pregnancy_status_id,8)) \nWHERE codeset_group ILIKE '%PREG%'";
			

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								fetch_pregnancy_codeset.codeset_id = 0;
							} else {
		                          
            fetch_pregnancy_codeset.codeset_id = rs_tDBInput_5.getLong(1);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								fetch_pregnancy_codeset.codeset_group = null;
							} else {
	                         		
        	fetch_pregnancy_codeset.codeset_group = routines.system.JDBCUtil.getString(rs_tDBInput_5, 2, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								fetch_pregnancy_codeset.codeset_display = null;
							} else {
	                         		
        	fetch_pregnancy_codeset.codeset_display = routines.system.JDBCUtil.getString(rs_tDBInput_5, 3, false);
		                    }
					


 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_fetch_pregnancy_codeset main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_fetch_pregnancy_codeset";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"fetch_pregnancy_codeset");
					}
					


			   
			   

					fetch_pregnancy_codesetStruct fetch_pregnancy_codeset_HashRow = new fetch_pregnancy_codesetStruct();
		   	   	   
				
				fetch_pregnancy_codeset_HashRow.codeset_id = fetch_pregnancy_codeset.codeset_id;
				
				fetch_pregnancy_codeset_HashRow.codeset_group = fetch_pregnancy_codeset.codeset_group;
				
				fetch_pregnancy_codeset_HashRow.codeset_display = fetch_pregnancy_codeset.codeset_display;
				
			tHash_Lookup_fetch_pregnancy_codeset.put(fetch_pregnancy_codeset_HashRow);
			
            




 


	tos_count_tAdvancedHash_fetch_pregnancy_codeset++;

/**
 * [tAdvancedHash_fetch_pregnancy_codeset main ] stop
 */
	
	/**
	 * [tAdvancedHash_fetch_pregnancy_codeset process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_fetch_pregnancy_codeset";

	

 



/**
 * [tAdvancedHash_fetch_pregnancy_codeset process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_fetch_pregnancy_codeset process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_fetch_pregnancy_codeset";

	

 



/**
 * [tAdvancedHash_fetch_pregnancy_codeset process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
	if(conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {
		
			conn_tDBInput_5.commit();
			
		
			conn_tDBInput_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);
 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_fetch_pregnancy_codeset end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_fetch_pregnancy_codeset";

	

tHash_Lookup_fetch_pregnancy_codeset.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"fetch_pregnancy_codeset");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_fetch_pregnancy_codeset", true);
end_Hash.put("tAdvancedHash_fetch_pregnancy_codeset", System.currentTimeMillis());




/**
 * [tAdvancedHash_fetch_pregnancy_codeset end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_fetch_pregnancy_codeset finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_fetch_pregnancy_codeset";

	

 



/**
 * [tAdvancedHash_fetch_pregnancy_codeset finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class Enrollment_settingsStruct implements routines.system.IPersistableComparableLookupRow<Enrollment_settingsStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public long enrollment_setting_id;

				public long getEnrollment_setting_id () {
					return this.enrollment_setting_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.person_uuid == null) ? 0 : this.person_uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Enrollment_settingsStruct other = (Enrollment_settingsStruct) obj;
		
						if (this.person_uuid == null) {
							if (other.person_uuid != null)
								return false;
						
						} else if (!this.person_uuid.equals(other.person_uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Enrollment_settingsStruct other) {

		other.person_uuid = this.person_uuid;
	            other.enrollment_setting_id = this.enrollment_setting_id;
	            
	}

	public void copyKeysDataTo(Enrollment_settingsStruct other) {

		other.person_uuid = this.person_uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.enrollment_setting_id = dis.readLong();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeLong(this.enrollment_setting_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",enrollment_setting_id="+String.valueOf(enrollment_setting_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Enrollment_settingsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.person_uuid, other.person_uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class enrollment_settingStruct implements routines.system.IPersistableRow<enrollment_settingStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];

	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String enrollment_setting_id;

				public String getEnrollment_setting_id () {
					return this.enrollment_setting_id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
					this.enrollment_setting_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.enrollment_setting_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",enrollment_setting_id="+enrollment_setting_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(enrollment_settingStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_4Struct implements routines.system.IPersistableRow<after_tDBInput_4Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];

	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String enrollment_setting_id;

				public String getEnrollment_setting_id () {
					return this.enrollment_setting_id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
					this.enrollment_setting_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.enrollment_setting_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",enrollment_setting_id="+enrollment_setting_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_3Process(globalMap);

		enrollment_settingStruct enrollment_setting = new enrollment_settingStruct();
Enrollment_settingsStruct Enrollment_settings = new Enrollment_settingsStruct();





	
	/**
	 * [tAdvancedHash_Enrollment_settings begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_Enrollment_settings", false);
		start_Hash.put("tAdvancedHash_Enrollment_settings", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_Enrollment_settings";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Enrollment_settings");
					}
				
		int tos_count_tAdvancedHash_Enrollment_settings = 0;
		

			   		// connection name:Enrollment_settings
			   		// source node:tMap_2 - inputs:(enrollment_codeset,enrollment_setting) outputs:(Enrollment_settings,Enrollment_settings) | target node:tAdvancedHash_Enrollment_settings - inputs:(Enrollment_settings) outputs:()
			   		// linked node: tMap_4 - inputs:(Entry_point,Enrollment_settings,Hiv_status,Source_referral,TBstatus,Target_group,load_pregancy_data) outputs:(map_to_clinics)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_Enrollment_settings = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Enrollment_settingsStruct> tHash_Lookup_Enrollment_settings =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<Enrollment_settingsStruct>getLookup(matchingModeEnum_Enrollment_settings);
	   						   
		   	   	   globalMap.put("tHash_Lookup_Enrollment_settings", tHash_Lookup_Enrollment_settings);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_Enrollment_settings begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"enrollment_setting");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<enrollment_codesetStruct> tHash_Lookup_enrollment_codeset = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<enrollment_codesetStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<enrollment_codesetStruct>) 
					globalMap.get( "tHash_Lookup_enrollment_codeset" ))
					;					
					
	

enrollment_codesetStruct enrollment_codesetHashKey = new enrollment_codesetStruct();
enrollment_codesetStruct enrollment_codesetDefault = new enrollment_codesetStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
Enrollment_settingsStruct Enrollment_settings_tmp = new Enrollment_settingsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_4 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
				
				String url_tDBInput_4 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4,dbUser_tDBInput_4,dbPwd_tDBInput_4);
		        
				conn_tDBInput_4.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT person_uuid,enrollment_setting_id \nFROM etl_hiv_enrollment_stage";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								enrollment_setting.person_uuid = null;
							} else {
	                         		
        	enrollment_setting.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_4, 1, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								enrollment_setting.enrollment_setting_id = null;
							} else {
	                         		
        	enrollment_setting.enrollment_setting_id = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
		                    }
					


 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"enrollment_setting");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "enrollment_codeset" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopenrollment_codeset = false;
       		  	    	
       		  	    	
 							enrollment_codesetStruct enrollment_codesetObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    enrollment_codesetHashKey.display = enrollment_setting.enrollment_setting_id ;
                        		    		

								
		                        	enrollment_codesetHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_enrollment_codeset.lookup( enrollment_codesetHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_enrollment_codeset != null && tHash_Lookup_enrollment_codeset.getCount(enrollment_codesetHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'enrollment_codeset' and it contains more one result from keys :  enrollment_codeset.display = '" + enrollment_codesetHashKey.display + "'");
								} // G 071
							

							enrollment_codesetStruct enrollment_codeset = null;
                    		  	 
							   
                    		  	 
	       		  	    	enrollment_codesetStruct fromLookup_enrollment_codeset = null;
							enrollment_codeset = enrollment_codesetDefault;
										 
							
								 
							
							
								if (tHash_Lookup_enrollment_codeset !=null && tHash_Lookup_enrollment_codeset.hasNext()) { // G 099
								
							
								
								fromLookup_enrollment_codeset = tHash_Lookup_enrollment_codeset.next();

							
							
								} // G 099
							
							

							if(fromLookup_enrollment_codeset != null) {
								enrollment_codeset = fromLookup_enrollment_codeset;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

Enrollment_settings = null;


// # Output table : 'Enrollment_settings'
Enrollment_settings_tmp.person_uuid = enrollment_setting.person_uuid ;
Enrollment_settings_tmp.enrollment_setting_id = enrollment_codeset.id ;
Enrollment_settings = Enrollment_settings_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "Enrollment_settings"
if(Enrollment_settings != null) { 



	
	/**
	 * [tAdvancedHash_Enrollment_settings main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Enrollment_settings";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Enrollment_settings");
					}
					


			   
			   

					Enrollment_settingsStruct Enrollment_settings_HashRow = new Enrollment_settingsStruct();
		   	   	   
				
				Enrollment_settings_HashRow.person_uuid = Enrollment_settings.person_uuid;
				
				Enrollment_settings_HashRow.enrollment_setting_id = Enrollment_settings.enrollment_setting_id;
				
			tHash_Lookup_Enrollment_settings.put(Enrollment_settings_HashRow);
			
            




 


	tos_count_tAdvancedHash_Enrollment_settings++;

/**
 * [tAdvancedHash_Enrollment_settings main ] stop
 */
	
	/**
	 * [tAdvancedHash_Enrollment_settings process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Enrollment_settings";

	

 



/**
 * [tAdvancedHash_Enrollment_settings process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_Enrollment_settings process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Enrollment_settings";

	

 



/**
 * [tAdvancedHash_Enrollment_settings process_data_end ] stop
 */

} // End of branch "Enrollment_settings"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
	if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
		
			conn_tDBInput_4.commit();
			
		
			conn_tDBInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);
 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_enrollment_codeset != null) {
						tHash_Lookup_enrollment_codeset.endGet();
					}
					globalMap.remove( "tHash_Lookup_enrollment_codeset" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"enrollment_setting");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_Enrollment_settings end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Enrollment_settings";

	

tHash_Lookup_Enrollment_settings.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Enrollment_settings");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_Enrollment_settings", true);
end_Hash.put("tAdvancedHash_Enrollment_settings", System.currentTimeMillis());




/**
 * [tAdvancedHash_Enrollment_settings end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_enrollment_codeset"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_Enrollment_settings finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Enrollment_settings";

	

 



/**
 * [tAdvancedHash_Enrollment_settings finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class Hiv_statusStruct implements routines.system.IPersistableComparableLookupRow<Hiv_statusStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public long status_at_registration_id;

				public long getStatus_at_registration_id () {
					return this.status_at_registration_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.person_uuid == null) ? 0 : this.person_uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Hiv_statusStruct other = (Hiv_statusStruct) obj;
		
						if (this.person_uuid == null) {
							if (other.person_uuid != null)
								return false;
						
						} else if (!this.person_uuid.equals(other.person_uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Hiv_statusStruct other) {

		other.person_uuid = this.person_uuid;
	            other.status_at_registration_id = this.status_at_registration_id;
	            
	}

	public void copyKeysDataTo(Hiv_statusStruct other) {

		other.person_uuid = this.person_uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.status_at_registration_id = dis.readLong();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeLong(this.status_at_registration_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",status_at_registration_id="+String.valueOf(status_at_registration_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Hiv_statusStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.person_uuid, other.person_uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class hiv_status_patientStruct implements routines.system.IPersistableRow<hiv_status_patientStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];

	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String status_at_registration;

				public String getStatus_at_registration () {
					return this.status_at_registration;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
					this.status_at_registration = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.status_at_registration,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",status_at_registration="+status_at_registration);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(hiv_status_patientStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_8Struct implements routines.system.IPersistableRow<after_tDBInput_8Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];

	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String status_at_registration;

				public String getStatus_at_registration () {
					return this.status_at_registration;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
					this.status_at_registration = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.status_at_registration,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",status_at_registration="+status_at_registration);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_7Process(globalMap);

		hiv_status_patientStruct hiv_status_patient = new hiv_status_patientStruct();
Hiv_statusStruct Hiv_status = new Hiv_statusStruct();





	
	/**
	 * [tAdvancedHash_Hiv_status begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_Hiv_status", false);
		start_Hash.put("tAdvancedHash_Hiv_status", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_Hiv_status";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Hiv_status");
					}
				
		int tos_count_tAdvancedHash_Hiv_status = 0;
		

			   		// connection name:Hiv_status
			   		// source node:tMap_5 - inputs:(hiv_registration_status,hiv_status_patient) outputs:(Hiv_status,Hiv_status) | target node:tAdvancedHash_Hiv_status - inputs:(Hiv_status) outputs:()
			   		// linked node: tMap_4 - inputs:(Entry_point,Enrollment_settings,Hiv_status,Source_referral,TBstatus,Target_group,load_pregancy_data) outputs:(map_to_clinics)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_Hiv_status = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Hiv_statusStruct> tHash_Lookup_Hiv_status =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<Hiv_statusStruct>getLookup(matchingModeEnum_Hiv_status);
	   						   
		   	   	   globalMap.put("tHash_Lookup_Hiv_status", tHash_Lookup_Hiv_status);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_Hiv_status begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"hiv_status_patient");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<hiv_registration_statusStruct> tHash_Lookup_hiv_registration_status = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<hiv_registration_statusStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<hiv_registration_statusStruct>) 
					globalMap.get( "tHash_Lookup_hiv_registration_status" ))
					;					
					
	

hiv_registration_statusStruct hiv_registration_statusHashKey = new hiv_registration_statusStruct();
hiv_registration_statusStruct hiv_registration_statusDefault = new hiv_registration_statusStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
Hiv_statusStruct Hiv_status_tmp = new Hiv_statusStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tDBInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_8", false);
		start_Hash.put("tDBInput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_8";

	
		int tos_count_tDBInput_8 = 0;
		
	
    
	
		    int nb_line_tDBInput_8 = 0;
		    java.sql.Connection conn_tDBInput_8 = null;
				String driverClass_tDBInput_8 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_8 = java.lang.Class.forName(driverClass_tDBInput_8);
				String dbUser_tDBInput_8 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_8 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_8 = decryptedPassword_tDBInput_8;
				
				String url_tDBInput_8 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_8 = java.sql.DriverManager.getConnection(url_tDBInput_8,dbUser_tDBInput_8,dbPwd_tDBInput_8);
		        
				conn_tDBInput_8.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8.createStatement();

		    String dbquery_tDBInput_8 = "SELECT person_uuid,replace(lower(right(h.status_at_registration_id,7)),'_',' ') as status_at_registration \nFROM etl_hi"
+"v_enrollment_stage h\nORDER BY id ASC";
			

            	globalMap.put("tDBInput_8_QUERY",dbquery_tDBInput_8);
		    java.sql.ResultSet rs_tDBInput_8 = null;

		    try {
		    	rs_tDBInput_8 = stmt_tDBInput_8.executeQuery(dbquery_tDBInput_8);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8.getMetaData();
		    	int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8.getColumnCount();

		    String tmpContent_tDBInput_8 = null;
		    
		    
		    while (rs_tDBInput_8.next()) {
		        nb_line_tDBInput_8++;
		        
							if(colQtyInRs_tDBInput_8 < 1) {
								hiv_status_patient.person_uuid = null;
							} else {
	                         		
        	hiv_status_patient.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_8, 1, false);
		                    }
							if(colQtyInRs_tDBInput_8 < 2) {
								hiv_status_patient.status_at_registration = null;
							} else {
	                         		
        	hiv_status_patient.status_at_registration = routines.system.JDBCUtil.getString(rs_tDBInput_8, 2, false);
		                    }
					


 



/**
 * [tDBInput_8 begin ] stop
 */
	
	/**
	 * [tDBInput_8 main ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 


	tos_count_tDBInput_8++;

/**
 * [tDBInput_8 main ] stop
 */
	
	/**
	 * [tDBInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"hiv_status_patient");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "hiv_registration_status" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoophiv_registration_status = false;
       		  	    	
       		  	    	
 							hiv_registration_statusStruct hiv_registration_statusObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    hiv_registration_statusHashKey.codeset_display = hiv_status_patient.status_at_registration ;
                        		    		

								
		                        	hiv_registration_statusHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_hiv_registration_status.lookup( hiv_registration_statusHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_hiv_registration_status != null && tHash_Lookup_hiv_registration_status.getCount(hiv_registration_statusHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'hiv_registration_status' and it contains more one result from keys :  hiv_registration_status.codeset_display = '" + hiv_registration_statusHashKey.codeset_display + "'");
								} // G 071
							

							hiv_registration_statusStruct hiv_registration_status = null;
                    		  	 
							   
                    		  	 
	       		  	    	hiv_registration_statusStruct fromLookup_hiv_registration_status = null;
							hiv_registration_status = hiv_registration_statusDefault;
										 
							
								 
							
							
								if (tHash_Lookup_hiv_registration_status !=null && tHash_Lookup_hiv_registration_status.hasNext()) { // G 099
								
							
								
								fromLookup_hiv_registration_status = tHash_Lookup_hiv_registration_status.next();

							
							
								} // G 099
							
							

							if(fromLookup_hiv_registration_status != null) {
								hiv_registration_status = fromLookup_hiv_registration_status;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

Hiv_status = null;


// # Output table : 'Hiv_status'
Hiv_status_tmp.person_uuid = hiv_status_patient.person_uuid ;
Hiv_status_tmp.status_at_registration_id = hiv_registration_status.codeset_id ;
Hiv_status = Hiv_status_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "Hiv_status"
if(Hiv_status != null) { 



	
	/**
	 * [tAdvancedHash_Hiv_status main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Hiv_status";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Hiv_status");
					}
					


			   
			   

					Hiv_statusStruct Hiv_status_HashRow = new Hiv_statusStruct();
		   	   	   
				
				Hiv_status_HashRow.person_uuid = Hiv_status.person_uuid;
				
				Hiv_status_HashRow.status_at_registration_id = Hiv_status.status_at_registration_id;
				
			tHash_Lookup_Hiv_status.put(Hiv_status_HashRow);
			
            




 


	tos_count_tAdvancedHash_Hiv_status++;

/**
 * [tAdvancedHash_Hiv_status main ] stop
 */
	
	/**
	 * [tAdvancedHash_Hiv_status process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Hiv_status";

	

 



/**
 * [tAdvancedHash_Hiv_status process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_Hiv_status process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Hiv_status";

	

 



/**
 * [tAdvancedHash_Hiv_status process_data_end ] stop
 */

} // End of branch "Hiv_status"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_8 end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

	}
}finally{
	if (rs_tDBInput_8 != null) {
		rs_tDBInput_8.close();
	}
	if (stmt_tDBInput_8 != null) {
		stmt_tDBInput_8.close();
	}
	if(conn_tDBInput_8 != null && !conn_tDBInput_8.isClosed()) {
		
			conn_tDBInput_8.commit();
			
		
			conn_tDBInput_8.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_8_NB_LINE",nb_line_tDBInput_8);
 

ok_Hash.put("tDBInput_8", true);
end_Hash.put("tDBInput_8", System.currentTimeMillis());




/**
 * [tDBInput_8 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_hiv_registration_status != null) {
						tHash_Lookup_hiv_registration_status.endGet();
					}
					globalMap.remove( "tHash_Lookup_hiv_registration_status" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"hiv_status_patient");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_Hiv_status end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Hiv_status";

	

tHash_Lookup_Hiv_status.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Hiv_status");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_Hiv_status", true);
end_Hash.put("tAdvancedHash_Hiv_status", System.currentTimeMillis());




/**
 * [tAdvancedHash_Hiv_status end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_hiv_registration_status"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_Hiv_status finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Hiv_status";

	

 



/**
 * [tAdvancedHash_Hiv_status finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class Source_referralStruct implements routines.system.IPersistableComparableLookupRow<Source_referralStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public long source_of_referrer_id;

				public long getSource_of_referrer_id () {
					return this.source_of_referrer_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.person_uuid == null) ? 0 : this.person_uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Source_referralStruct other = (Source_referralStruct) obj;
		
						if (this.person_uuid == null) {
							if (other.person_uuid != null)
								return false;
						
						} else if (!this.person_uuid.equals(other.person_uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Source_referralStruct other) {

		other.person_uuid = this.person_uuid;
	            other.source_of_referrer_id = this.source_of_referrer_id;
	            
	}

	public void copyKeysDataTo(Source_referralStruct other) {

		other.person_uuid = this.person_uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.source_of_referrer_id = dis.readLong();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeLong(this.source_of_referrer_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",source_of_referrer_id="+String.valueOf(source_of_referrer_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Source_referralStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.person_uuid, other.person_uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class source_referal_patientsStruct implements routines.system.IPersistableRow<source_referal_patientsStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];

	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String source_of_referrer_id;

				public String getSource_of_referrer_id () {
					return this.source_of_referrer_id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
					this.source_of_referrer_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.source_of_referrer_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",source_of_referrer_id="+source_of_referrer_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(source_referal_patientsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_10Struct implements routines.system.IPersistableRow<after_tDBInput_10Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];

	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String source_of_referrer_id;

				public String getSource_of_referrer_id () {
					return this.source_of_referrer_id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
					this.source_of_referrer_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.source_of_referrer_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",source_of_referrer_id="+source_of_referrer_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_9Process(globalMap);

		source_referal_patientsStruct source_referal_patients = new source_referal_patientsStruct();
Source_referralStruct Source_referral = new Source_referralStruct();





	
	/**
	 * [tAdvancedHash_Source_referral begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_Source_referral", false);
		start_Hash.put("tAdvancedHash_Source_referral", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_Source_referral";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Source_referral");
					}
				
		int tos_count_tAdvancedHash_Source_referral = 0;
		

			   		// connection name:Source_referral
			   		// source node:tMap_6 - inputs:(source_referal_codeset,source_referal_patients) outputs:(Source_referral,Source_referral) | target node:tAdvancedHash_Source_referral - inputs:(Source_referral) outputs:()
			   		// linked node: tMap_4 - inputs:(Entry_point,Enrollment_settings,Hiv_status,Source_referral,TBstatus,Target_group,load_pregancy_data) outputs:(map_to_clinics)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_Source_referral = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Source_referralStruct> tHash_Lookup_Source_referral =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<Source_referralStruct>getLookup(matchingModeEnum_Source_referral);
	   						   
		   	   	   globalMap.put("tHash_Lookup_Source_referral", tHash_Lookup_Source_referral);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_Source_referral begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"source_referal_patients");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<source_referal_codesetStruct> tHash_Lookup_source_referal_codeset = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<source_referal_codesetStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<source_referal_codesetStruct>) 
					globalMap.get( "tHash_Lookup_source_referal_codeset" ))
					;					
					
	

source_referal_codesetStruct source_referal_codesetHashKey = new source_referal_codesetStruct();
source_referal_codesetStruct source_referal_codesetDefault = new source_referal_codesetStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
Source_referralStruct Source_referral_tmp = new Source_referralStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tDBInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_10", false);
		start_Hash.put("tDBInput_10", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_10";

	
		int tos_count_tDBInput_10 = 0;
		
	
    
	
		    int nb_line_tDBInput_10 = 0;
		    java.sql.Connection conn_tDBInput_10 = null;
				String driverClass_tDBInput_10 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_10 = java.lang.Class.forName(driverClass_tDBInput_10);
				String dbUser_tDBInput_10 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_10 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_10 = decryptedPassword_tDBInput_10;
				
				String url_tDBInput_10 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_10 = java.sql.DriverManager.getConnection(url_tDBInput_10,dbUser_tDBInput_10,dbPwd_tDBInput_10);
		        
				conn_tDBInput_10.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_10 = conn_tDBInput_10.createStatement();

		    String dbquery_tDBInput_10 = "SELECT person_uuid,lower(left(h.source_of_referrer_id,4)) as source_of_referrer_id \nFROM etl_hiv_enrollment_stage h\nO"
+"RDER BY id ASC";
			

            	globalMap.put("tDBInput_10_QUERY",dbquery_tDBInput_10);
		    java.sql.ResultSet rs_tDBInput_10 = null;

		    try {
		    	rs_tDBInput_10 = stmt_tDBInput_10.executeQuery(dbquery_tDBInput_10);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_10 = rs_tDBInput_10.getMetaData();
		    	int colQtyInRs_tDBInput_10 = rsmd_tDBInput_10.getColumnCount();

		    String tmpContent_tDBInput_10 = null;
		    
		    
		    while (rs_tDBInput_10.next()) {
		        nb_line_tDBInput_10++;
		        
							if(colQtyInRs_tDBInput_10 < 1) {
								source_referal_patients.person_uuid = null;
							} else {
	                         		
        	source_referal_patients.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_10, 1, false);
		                    }
							if(colQtyInRs_tDBInput_10 < 2) {
								source_referal_patients.source_of_referrer_id = null;
							} else {
	                         		
        	source_referal_patients.source_of_referrer_id = routines.system.JDBCUtil.getString(rs_tDBInput_10, 2, false);
		                    }
					


 



/**
 * [tDBInput_10 begin ] stop
 */
	
	/**
	 * [tDBInput_10 main ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 


	tos_count_tDBInput_10++;

/**
 * [tDBInput_10 main ] stop
 */
	
	/**
	 * [tDBInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"source_referal_patients");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "source_referal_codeset" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopsource_referal_codeset = false;
       		  	    	
       		  	    	
 							source_referal_codesetStruct source_referal_codesetObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    source_referal_codesetHashKey.codeset_display = source_referal_patients.source_of_referrer_id ;
                        		    		

								
		                        	source_referal_codesetHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_source_referal_codeset.lookup( source_referal_codesetHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_source_referal_codeset != null && tHash_Lookup_source_referal_codeset.getCount(source_referal_codesetHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'source_referal_codeset' and it contains more one result from keys :  source_referal_codeset.codeset_display = '" + source_referal_codesetHashKey.codeset_display + "'");
								} // G 071
							

							source_referal_codesetStruct source_referal_codeset = null;
                    		  	 
							   
                    		  	 
	       		  	    	source_referal_codesetStruct fromLookup_source_referal_codeset = null;
							source_referal_codeset = source_referal_codesetDefault;
										 
							
								 
							
							
								if (tHash_Lookup_source_referal_codeset !=null && tHash_Lookup_source_referal_codeset.hasNext()) { // G 099
								
							
								
								fromLookup_source_referal_codeset = tHash_Lookup_source_referal_codeset.next();

							
							
								} // G 099
							
							

							if(fromLookup_source_referal_codeset != null) {
								source_referal_codeset = fromLookup_source_referal_codeset;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

Source_referral = null;


// # Output table : 'Source_referral'
Source_referral_tmp.person_uuid = source_referal_patients.person_uuid ;
Source_referral_tmp.source_of_referrer_id = source_referal_codeset.codeset_id ;
Source_referral = Source_referral_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "Source_referral"
if(Source_referral != null) { 



	
	/**
	 * [tAdvancedHash_Source_referral main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Source_referral";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Source_referral");
					}
					


			   
			   

					Source_referralStruct Source_referral_HashRow = new Source_referralStruct();
		   	   	   
				
				Source_referral_HashRow.person_uuid = Source_referral.person_uuid;
				
				Source_referral_HashRow.source_of_referrer_id = Source_referral.source_of_referrer_id;
				
			tHash_Lookup_Source_referral.put(Source_referral_HashRow);
			
            




 


	tos_count_tAdvancedHash_Source_referral++;

/**
 * [tAdvancedHash_Source_referral main ] stop
 */
	
	/**
	 * [tAdvancedHash_Source_referral process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Source_referral";

	

 



/**
 * [tAdvancedHash_Source_referral process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_Source_referral process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Source_referral";

	

 



/**
 * [tAdvancedHash_Source_referral process_data_end ] stop
 */

} // End of branch "Source_referral"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_10 end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

	}
}finally{
	if (rs_tDBInput_10 != null) {
		rs_tDBInput_10.close();
	}
	if (stmt_tDBInput_10 != null) {
		stmt_tDBInput_10.close();
	}
	if(conn_tDBInput_10 != null && !conn_tDBInput_10.isClosed()) {
		
			conn_tDBInput_10.commit();
			
		
			conn_tDBInput_10.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_10_NB_LINE",nb_line_tDBInput_10);
 

ok_Hash.put("tDBInput_10", true);
end_Hash.put("tDBInput_10", System.currentTimeMillis());




/**
 * [tDBInput_10 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_source_referal_codeset != null) {
						tHash_Lookup_source_referal_codeset.endGet();
					}
					globalMap.remove( "tHash_Lookup_source_referal_codeset" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"source_referal_patients");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_Source_referral end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Source_referral";

	

tHash_Lookup_Source_referral.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Source_referral");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_Source_referral", true);
end_Hash.put("tAdvancedHash_Source_referral", System.currentTimeMillis());




/**
 * [tAdvancedHash_Source_referral end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_source_referal_codeset"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_10 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_Source_referral finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Source_referral";

	

 



/**
 * [tAdvancedHash_Source_referral finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class TBstatusStruct implements routines.system.IPersistableComparableLookupRow<TBstatusStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public long tb_status_id;

				public long getTb_status_id () {
					return this.tb_status_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.person_uuid == null) ? 0 : this.person_uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final TBstatusStruct other = (TBstatusStruct) obj;
		
						if (this.person_uuid == null) {
							if (other.person_uuid != null)
								return false;
						
						} else if (!this.person_uuid.equals(other.person_uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(TBstatusStruct other) {

		other.person_uuid = this.person_uuid;
	            other.tb_status_id = this.tb_status_id;
	            
	}

	public void copyKeysDataTo(TBstatusStruct other) {

		other.person_uuid = this.person_uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.tb_status_id = dis.readLong();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeLong(this.tb_status_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",tb_status_id="+String.valueOf(tb_status_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(TBstatusStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.person_uuid, other.person_uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class TB_status_patientStruct implements routines.system.IPersistableRow<TB_status_patientStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];

	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String tb_status_id;

				public String getTb_status_id () {
					return this.tb_status_id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
					this.tb_status_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.tb_status_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",tb_status_id="+tb_status_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(TB_status_patientStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_12Struct implements routines.system.IPersistableRow<after_tDBInput_12Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];

	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String tb_status_id;

				public String getTb_status_id () {
					return this.tb_status_id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
					this.tb_status_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.tb_status_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",tb_status_id="+tb_status_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_11Process(globalMap);

		TB_status_patientStruct TB_status_patient = new TB_status_patientStruct();
TBstatusStruct TBstatus = new TBstatusStruct();





	
	/**
	 * [tAdvancedHash_TBstatus begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_TBstatus", false);
		start_Hash.put("tAdvancedHash_TBstatus", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_TBstatus";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"TBstatus");
					}
				
		int tos_count_tAdvancedHash_TBstatus = 0;
		

			   		// connection name:TBstatus
			   		// source node:tMap_7 - inputs:(TB_status,TB_status_patient) outputs:(TBstatus,TBstatus) | target node:tAdvancedHash_TBstatus - inputs:(TBstatus) outputs:()
			   		// linked node: tMap_4 - inputs:(Entry_point,Enrollment_settings,Hiv_status,Source_referral,TBstatus,Target_group,load_pregancy_data) outputs:(map_to_clinics)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_TBstatus = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<TBstatusStruct> tHash_Lookup_TBstatus =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<TBstatusStruct>getLookup(matchingModeEnum_TBstatus);
	   						   
		   	   	   globalMap.put("tHash_Lookup_TBstatus", tHash_Lookup_TBstatus);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_TBstatus begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"TB_status_patient");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<TB_statusStruct> tHash_Lookup_TB_status = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<TB_statusStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<TB_statusStruct>) 
					globalMap.get( "tHash_Lookup_TB_status" ))
					;					
					
	

TB_statusStruct TB_statusHashKey = new TB_statusStruct();
TB_statusStruct TB_statusDefault = new TB_statusStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
TBstatusStruct TBstatus_tmp = new TBstatusStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tDBInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_12", false);
		start_Hash.put("tDBInput_12", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_12";

	
		int tos_count_tDBInput_12 = 0;
		
	
    
	
		    int nb_line_tDBInput_12 = 0;
		    java.sql.Connection conn_tDBInput_12 = null;
				String driverClass_tDBInput_12 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_12 = java.lang.Class.forName(driverClass_tDBInput_12);
				String dbUser_tDBInput_12 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_12 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_12 = decryptedPassword_tDBInput_12;
				
				String url_tDBInput_12 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_12 = java.sql.DriverManager.getConnection(url_tDBInput_12,dbUser_tDBInput_12,dbPwd_tDBInput_12);
		        
				conn_tDBInput_12.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_12 = conn_tDBInput_12.createStatement();

		    String dbquery_tDBInput_12 = "SELECT person_uuid,lower(left(h.tb_status_id,4)) as tb_status_id \nFROM etl_hiv_enrollment_stage h\nORDER BY id ASC";
			

            	globalMap.put("tDBInput_12_QUERY",dbquery_tDBInput_12);
		    java.sql.ResultSet rs_tDBInput_12 = null;

		    try {
		    	rs_tDBInput_12 = stmt_tDBInput_12.executeQuery(dbquery_tDBInput_12);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_12 = rs_tDBInput_12.getMetaData();
		    	int colQtyInRs_tDBInput_12 = rsmd_tDBInput_12.getColumnCount();

		    String tmpContent_tDBInput_12 = null;
		    
		    
		    while (rs_tDBInput_12.next()) {
		        nb_line_tDBInput_12++;
		        
							if(colQtyInRs_tDBInput_12 < 1) {
								TB_status_patient.person_uuid = null;
							} else {
	                         		
        	TB_status_patient.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_12, 1, false);
		                    }
							if(colQtyInRs_tDBInput_12 < 2) {
								TB_status_patient.tb_status_id = null;
							} else {
	                         		
        	TB_status_patient.tb_status_id = routines.system.JDBCUtil.getString(rs_tDBInput_12, 2, false);
		                    }
					


 



/**
 * [tDBInput_12 begin ] stop
 */
	
	/**
	 * [tDBInput_12 main ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 


	tos_count_tDBInput_12++;

/**
 * [tDBInput_12 main ] stop
 */
	
	/**
	 * [tDBInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"TB_status_patient");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "TB_status" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopTB_status = false;
       		  	    	
       		  	    	
 							TB_statusStruct TB_statusObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_7 = false;
								
                        		    		    TB_statusHashKey.codeset_display = TB_status_patient.tb_status_id ;
                        		    		

								
		                        	TB_statusHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_TB_status.lookup( TB_statusHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_TB_status != null && tHash_Lookup_TB_status.getCount(TB_statusHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'TB_status' and it contains more one result from keys :  TB_status.codeset_display = '" + TB_statusHashKey.codeset_display + "'");
								} // G 071
							

							TB_statusStruct TB_status = null;
                    		  	 
							   
                    		  	 
	       		  	    	TB_statusStruct fromLookup_TB_status = null;
							TB_status = TB_statusDefault;
										 
							
								 
							
							
								if (tHash_Lookup_TB_status !=null && tHash_Lookup_TB_status.hasNext()) { // G 099
								
							
								
								fromLookup_TB_status = tHash_Lookup_TB_status.next();

							
							
								} // G 099
							
							

							if(fromLookup_TB_status != null) {
								TB_status = fromLookup_TB_status;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

TBstatus = null;


// # Output table : 'TBstatus'
TBstatus_tmp.person_uuid = TB_status_patient.person_uuid ;
TBstatus_tmp.tb_status_id = TB_status.codeset_id ;
TBstatus = TBstatus_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "TBstatus"
if(TBstatus != null) { 



	
	/**
	 * [tAdvancedHash_TBstatus main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_TBstatus";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"TBstatus");
					}
					


			   
			   

					TBstatusStruct TBstatus_HashRow = new TBstatusStruct();
		   	   	   
				
				TBstatus_HashRow.person_uuid = TBstatus.person_uuid;
				
				TBstatus_HashRow.tb_status_id = TBstatus.tb_status_id;
				
			tHash_Lookup_TBstatus.put(TBstatus_HashRow);
			
            




 


	tos_count_tAdvancedHash_TBstatus++;

/**
 * [tAdvancedHash_TBstatus main ] stop
 */
	
	/**
	 * [tAdvancedHash_TBstatus process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_TBstatus";

	

 



/**
 * [tAdvancedHash_TBstatus process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_TBstatus process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_TBstatus";

	

 



/**
 * [tAdvancedHash_TBstatus process_data_end ] stop
 */

} // End of branch "TBstatus"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_12 end ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

	}
}finally{
	if (rs_tDBInput_12 != null) {
		rs_tDBInput_12.close();
	}
	if (stmt_tDBInput_12 != null) {
		stmt_tDBInput_12.close();
	}
	if(conn_tDBInput_12 != null && !conn_tDBInput_12.isClosed()) {
		
			conn_tDBInput_12.commit();
			
		
			conn_tDBInput_12.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_12_NB_LINE",nb_line_tDBInput_12);
 

ok_Hash.put("tDBInput_12", true);
end_Hash.put("tDBInput_12", System.currentTimeMillis());




/**
 * [tDBInput_12 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_TB_status != null) {
						tHash_Lookup_TB_status.endGet();
					}
					globalMap.remove( "tHash_Lookup_TB_status" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"TB_status_patient");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_TBstatus end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_TBstatus";

	

tHash_Lookup_TBstatus.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"TBstatus");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_TBstatus", true);
end_Hash.put("tAdvancedHash_TBstatus", System.currentTimeMillis());




/**
 * [tAdvancedHash_TBstatus end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_7"
					     			globalMap.remove("tHash_Lookup_TB_status"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_12 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_TBstatus finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_TBstatus";

	

 



/**
 * [tAdvancedHash_TBstatus finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_12_SUBPROCESS_STATE", 1);
	}
	


public static class Target_groupStruct implements routines.system.IPersistableComparableLookupRow<Target_groupStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public long target_group_id;

				public long getTarget_group_id () {
					return this.target_group_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.person_uuid == null) ? 0 : this.person_uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Target_groupStruct other = (Target_groupStruct) obj;
		
						if (this.person_uuid == null) {
							if (other.person_uuid != null)
								return false;
						
						} else if (!this.person_uuid.equals(other.person_uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Target_groupStruct other) {

		other.person_uuid = this.person_uuid;
	            other.target_group_id = this.target_group_id;
	            
	}

	public void copyKeysDataTo(Target_groupStruct other) {

		other.person_uuid = this.person_uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.target_group_id = dis.readLong();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeLong(this.target_group_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",target_group_id="+String.valueOf(target_group_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Target_groupStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.person_uuid, other.person_uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class target_groups_patientsStruct implements routines.system.IPersistableRow<target_groups_patientsStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];

	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String target_group_id;

				public String getTarget_group_id () {
					return this.target_group_id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
					this.target_group_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.target_group_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",target_group_id="+target_group_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(target_groups_patientsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_14Struct implements routines.system.IPersistableRow<after_tDBInput_14Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];

	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String target_group_id;

				public String getTarget_group_id () {
					return this.target_group_id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
					this.target_group_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.target_group_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",target_group_id="+target_group_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_13Process(globalMap);

		target_groups_patientsStruct target_groups_patients = new target_groups_patientsStruct();
Target_groupStruct Target_group = new Target_groupStruct();





	
	/**
	 * [tAdvancedHash_Target_group begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_Target_group", false);
		start_Hash.put("tAdvancedHash_Target_group", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_Target_group";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Target_group");
					}
				
		int tos_count_tAdvancedHash_Target_group = 0;
		

			   		// connection name:Target_group
			   		// source node:tMap_8 - inputs:(target_groups_codeset,target_groups_patients) outputs:(Target_group,Target_group) | target node:tAdvancedHash_Target_group - inputs:(Target_group) outputs:()
			   		// linked node: tMap_4 - inputs:(Entry_point,Enrollment_settings,Hiv_status,Source_referral,TBstatus,Target_group,load_pregancy_data) outputs:(map_to_clinics)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_Target_group = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Target_groupStruct> tHash_Lookup_Target_group =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<Target_groupStruct>getLookup(matchingModeEnum_Target_group);
	   						   
		   	   	   globalMap.put("tHash_Lookup_Target_group", tHash_Lookup_Target_group);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_Target_group begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"target_groups_patients");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<target_groups_codesetStruct> tHash_Lookup_target_groups_codeset = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<target_groups_codesetStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<target_groups_codesetStruct>) 
					globalMap.get( "tHash_Lookup_target_groups_codeset" ))
					;					
					
	

target_groups_codesetStruct target_groups_codesetHashKey = new target_groups_codesetStruct();
target_groups_codesetStruct target_groups_codesetDefault = new target_groups_codesetStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
Target_groupStruct Target_group_tmp = new Target_groupStruct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tDBInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_14", false);
		start_Hash.put("tDBInput_14", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_14";

	
		int tos_count_tDBInput_14 = 0;
		
	
    
	
		    int nb_line_tDBInput_14 = 0;
		    java.sql.Connection conn_tDBInput_14 = null;
				String driverClass_tDBInput_14 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_14 = java.lang.Class.forName(driverClass_tDBInput_14);
				String dbUser_tDBInput_14 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_14 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_14 = decryptedPassword_tDBInput_14;
				
				String url_tDBInput_14 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_14 = java.sql.DriverManager.getConnection(url_tDBInput_14,dbUser_tDBInput_14,dbPwd_tDBInput_14);
		        
				conn_tDBInput_14.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_14 = conn_tDBInput_14.createStatement();

		    String dbquery_tDBInput_14 = "SELECT person_uuid,lower(left(h.target_group_id,4)) as target_group_id \nFROM etl_hiv_enrollment_stage h\nORDER BY id A"
+"SC";
			

            	globalMap.put("tDBInput_14_QUERY",dbquery_tDBInput_14);
		    java.sql.ResultSet rs_tDBInput_14 = null;

		    try {
		    	rs_tDBInput_14 = stmt_tDBInput_14.executeQuery(dbquery_tDBInput_14);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_14 = rs_tDBInput_14.getMetaData();
		    	int colQtyInRs_tDBInput_14 = rsmd_tDBInput_14.getColumnCount();

		    String tmpContent_tDBInput_14 = null;
		    
		    
		    while (rs_tDBInput_14.next()) {
		        nb_line_tDBInput_14++;
		        
							if(colQtyInRs_tDBInput_14 < 1) {
								target_groups_patients.person_uuid = null;
							} else {
	                         		
        	target_groups_patients.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_14, 1, false);
		                    }
							if(colQtyInRs_tDBInput_14 < 2) {
								target_groups_patients.target_group_id = null;
							} else {
	                         		
        	target_groups_patients.target_group_id = routines.system.JDBCUtil.getString(rs_tDBInput_14, 2, false);
		                    }
					


 



/**
 * [tDBInput_14 begin ] stop
 */
	
	/**
	 * [tDBInput_14 main ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 


	tos_count_tDBInput_14++;

/**
 * [tDBInput_14 main ] stop
 */
	
	/**
	 * [tDBInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"target_groups_patients");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "target_groups_codeset" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooptarget_groups_codeset = false;
       		  	    	
       		  	    	
 							target_groups_codesetStruct target_groups_codesetObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		    target_groups_codesetHashKey.codeset_display = target_groups_patients.target_group_id ;
                        		    		

								
		                        	target_groups_codesetHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_target_groups_codeset.lookup( target_groups_codesetHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_target_groups_codeset != null && tHash_Lookup_target_groups_codeset.getCount(target_groups_codesetHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'target_groups_codeset' and it contains more one result from keys :  target_groups_codeset.codeset_display = '" + target_groups_codesetHashKey.codeset_display + "'");
								} // G 071
							

							target_groups_codesetStruct target_groups_codeset = null;
                    		  	 
							   
                    		  	 
	       		  	    	target_groups_codesetStruct fromLookup_target_groups_codeset = null;
							target_groups_codeset = target_groups_codesetDefault;
										 
							
								 
							
							
								if (tHash_Lookup_target_groups_codeset !=null && tHash_Lookup_target_groups_codeset.hasNext()) { // G 099
								
							
								
								fromLookup_target_groups_codeset = tHash_Lookup_target_groups_codeset.next();

							
							
								} // G 099
							
							

							if(fromLookup_target_groups_codeset != null) {
								target_groups_codeset = fromLookup_target_groups_codeset;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

Target_group = null;


// # Output table : 'Target_group'
Target_group_tmp.person_uuid = target_groups_patients.person_uuid ;
Target_group_tmp.target_group_id = target_groups_codeset.codeset_id ;
Target_group = Target_group_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "Target_group"
if(Target_group != null) { 



	
	/**
	 * [tAdvancedHash_Target_group main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Target_group";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Target_group");
					}
					


			   
			   

					Target_groupStruct Target_group_HashRow = new Target_groupStruct();
		   	   	   
				
				Target_group_HashRow.person_uuid = Target_group.person_uuid;
				
				Target_group_HashRow.target_group_id = Target_group.target_group_id;
				
			tHash_Lookup_Target_group.put(Target_group_HashRow);
			
            




 


	tos_count_tAdvancedHash_Target_group++;

/**
 * [tAdvancedHash_Target_group main ] stop
 */
	
	/**
	 * [tAdvancedHash_Target_group process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Target_group";

	

 



/**
 * [tAdvancedHash_Target_group process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_Target_group process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Target_group";

	

 



/**
 * [tAdvancedHash_Target_group process_data_end ] stop
 */

} // End of branch "Target_group"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_14 end ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

	}
}finally{
	if (rs_tDBInput_14 != null) {
		rs_tDBInput_14.close();
	}
	if (stmt_tDBInput_14 != null) {
		stmt_tDBInput_14.close();
	}
	if(conn_tDBInput_14 != null && !conn_tDBInput_14.isClosed()) {
		
			conn_tDBInput_14.commit();
			
		
			conn_tDBInput_14.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_14_NB_LINE",nb_line_tDBInput_14);
 

ok_Hash.put("tDBInput_14", true);
end_Hash.put("tDBInput_14", System.currentTimeMillis());




/**
 * [tDBInput_14 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_target_groups_codeset != null) {
						tHash_Lookup_target_groups_codeset.endGet();
					}
					globalMap.remove( "tHash_Lookup_target_groups_codeset" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"target_groups_patients");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tAdvancedHash_Target_group end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Target_group";

	

tHash_Lookup_Target_group.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Target_group");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_Target_group", true);
end_Hash.put("tAdvancedHash_Target_group", System.currentTimeMillis());




/**
 * [tAdvancedHash_Target_group end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_8"
					     			globalMap.remove("tHash_Lookup_target_groups_codeset"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_14 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_Target_group finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Target_group";

	

 



/**
 * [tAdvancedHash_Target_group finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_14_SUBPROCESS_STATE", 1);
	}
	


public static class load_pregancy_dataStruct implements routines.system.IPersistableComparableLookupRow<load_pregancy_dataStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public long pregnancy_status_id;

				public long getPregnancy_status_id () {
					return this.pregnancy_status_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.person_uuid == null) ? 0 : this.person_uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final load_pregancy_dataStruct other = (load_pregancy_dataStruct) obj;
		
						if (this.person_uuid == null) {
							if (other.person_uuid != null)
								return false;
						
						} else if (!this.person_uuid.equals(other.person_uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(load_pregancy_dataStruct other) {

		other.person_uuid = this.person_uuid;
	            other.pregnancy_status_id = this.pregnancy_status_id;
	            
	}

	public void copyKeysDataTo(load_pregancy_dataStruct other) {

		other.person_uuid = this.person_uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.pregnancy_status_id = dis.readLong();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeLong(this.pregnancy_status_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",pregnancy_status_id="+String.valueOf(pregnancy_status_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(load_pregancy_dataStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.person_uuid, other.person_uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class fetch_pregnancy_dataStruct implements routines.system.IPersistableRow<fetch_pregnancy_dataStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];

	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String pregnancy_status_id;

				public String getPregnancy_status_id () {
					return this.pregnancy_status_id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
					this.pregnancy_status_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.pregnancy_status_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",pregnancy_status_id="+pregnancy_status_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(fetch_pregnancy_dataStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_6Struct implements routines.system.IPersistableRow<after_tDBInput_6Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[0];

	
			    public String person_uuid;

				public String getPerson_uuid () {
					return this.person_uuid;
				}
				
			    public String pregnancy_status_id;

				public String getPregnancy_status_id () {
					return this.pregnancy_status_id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HIV_Enrollment.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HIV_Enrollment = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HIV_Enrollment, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HIV_Enrollment) {

        	try {

        		int length = 0;
		
					this.person_uuid = readString(dis);
					
					this.pregnancy_status_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.person_uuid,dos);
					
					// String
				
						writeString(this.pregnancy_status_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_uuid="+person_uuid);
		sb.append(",pregnancy_status_id="+pregnancy_status_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_5Process(globalMap);

		fetch_pregnancy_dataStruct fetch_pregnancy_data = new fetch_pregnancy_dataStruct();
load_pregancy_dataStruct load_pregancy_data = new load_pregancy_dataStruct();





	
	/**
	 * [tAdvancedHash_load_pregancy_data begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_load_pregancy_data", false);
		start_Hash.put("tAdvancedHash_load_pregancy_data", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_load_pregancy_data";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"load_pregancy_data");
					}
				
		int tos_count_tAdvancedHash_load_pregancy_data = 0;
		

			   		// connection name:load_pregancy_data
			   		// source node:tMap_3 - inputs:(fetch_pregnancy_codeset,fetch_pregnancy_data) outputs:(load_pregancy_data,load_pregancy_data) | target node:tAdvancedHash_load_pregancy_data - inputs:(load_pregancy_data) outputs:()
			   		// linked node: tMap_4 - inputs:(Entry_point,Enrollment_settings,Hiv_status,Source_referral,TBstatus,Target_group,load_pregancy_data) outputs:(map_to_clinics)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_load_pregancy_data = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<load_pregancy_dataStruct> tHash_Lookup_load_pregancy_data =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<load_pregancy_dataStruct>getLookup(matchingModeEnum_load_pregancy_data);
	   						   
		   	   	   globalMap.put("tHash_Lookup_load_pregancy_data", tHash_Lookup_load_pregancy_data);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_load_pregancy_data begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"fetch_pregnancy_data");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<fetch_pregnancy_codesetStruct> tHash_Lookup_fetch_pregnancy_codeset = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<fetch_pregnancy_codesetStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<fetch_pregnancy_codesetStruct>) 
					globalMap.get( "tHash_Lookup_fetch_pregnancy_codeset" ))
					;					
					
	

fetch_pregnancy_codesetStruct fetch_pregnancy_codesetHashKey = new fetch_pregnancy_codesetStruct();
fetch_pregnancy_codesetStruct fetch_pregnancy_codesetDefault = new fetch_pregnancy_codesetStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
load_pregancy_dataStruct load_pregancy_data_tmp = new load_pregancy_dataStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tDBInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_6", false);
		start_Hash.put("tDBInput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_6";

	
		int tos_count_tDBInput_6 = 0;
		
	
    
	
		    int nb_line_tDBInput_6 = 0;
		    java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_6 = java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_6 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;
				
				String url_tDBInput_6 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_6 = java.sql.DriverManager.getConnection(url_tDBInput_6,dbUser_tDBInput_6,dbPwd_tDBInput_6);
		        
				conn_tDBInput_6.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

		    String dbquery_tDBInput_6 = "SELECT person_uuid,lower(left(h.pregnancy_status_id,8)) as pregnancy_status_id \nFROM etl_hiv_enrollment_stage h\nORDER"
+" BY id ASC";
			

            	globalMap.put("tDBInput_6_QUERY",dbquery_tDBInput_6);
		    java.sql.ResultSet rs_tDBInput_6 = null;

		    try {
		    	rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
		    	int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

		    String tmpContent_tDBInput_6 = null;
		    
		    
		    while (rs_tDBInput_6.next()) {
		        nb_line_tDBInput_6++;
		        
							if(colQtyInRs_tDBInput_6 < 1) {
								fetch_pregnancy_data.person_uuid = null;
							} else {
	                         		
        	fetch_pregnancy_data.person_uuid = routines.system.JDBCUtil.getString(rs_tDBInput_6, 1, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 2) {
								fetch_pregnancy_data.pregnancy_status_id = null;
							} else {
	                         		
        	fetch_pregnancy_data.pregnancy_status_id = routines.system.JDBCUtil.getString(rs_tDBInput_6, 2, false);
		                    }
					


 



/**
 * [tDBInput_6 begin ] stop
 */
	
	/**
	 * [tDBInput_6 main ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 


	tos_count_tDBInput_6++;

/**
 * [tDBInput_6 main ] stop
 */
	
	/**
	 * [tDBInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"fetch_pregnancy_data");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "fetch_pregnancy_codeset" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopfetch_pregnancy_codeset = false;
       		  	    	
       		  	    	
 							fetch_pregnancy_codesetStruct fetch_pregnancy_codesetObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    fetch_pregnancy_codesetHashKey.codeset_display = fetch_pregnancy_data.pregnancy_status_id ;
                        		    		

								
		                        	fetch_pregnancy_codesetHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_fetch_pregnancy_codeset.lookup( fetch_pregnancy_codesetHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_fetch_pregnancy_codeset != null && tHash_Lookup_fetch_pregnancy_codeset.getCount(fetch_pregnancy_codesetHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'fetch_pregnancy_codeset' and it contains more one result from keys :  fetch_pregnancy_codeset.codeset_display = '" + fetch_pregnancy_codesetHashKey.codeset_display + "'");
								} // G 071
							

							fetch_pregnancy_codesetStruct fetch_pregnancy_codeset = null;
                    		  	 
							   
                    		  	 
	       		  	    	fetch_pregnancy_codesetStruct fromLookup_fetch_pregnancy_codeset = null;
							fetch_pregnancy_codeset = fetch_pregnancy_codesetDefault;
										 
							
								 
							
							
								if (tHash_Lookup_fetch_pregnancy_codeset !=null && tHash_Lookup_fetch_pregnancy_codeset.hasNext()) { // G 099
								
							
								
								fromLookup_fetch_pregnancy_codeset = tHash_Lookup_fetch_pregnancy_codeset.next();

							
							
								} // G 099
							
							

							if(fromLookup_fetch_pregnancy_codeset != null) {
								fetch_pregnancy_codeset = fromLookup_fetch_pregnancy_codeset;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

load_pregancy_data = null;


// # Output table : 'load_pregancy_data'
load_pregancy_data_tmp.person_uuid = fetch_pregnancy_data.person_uuid ;
load_pregancy_data_tmp.pregnancy_status_id = fetch_pregnancy_codeset.codeset_id ;
load_pregancy_data = load_pregancy_data_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "load_pregancy_data"
if(load_pregancy_data != null) { 



	
	/**
	 * [tAdvancedHash_load_pregancy_data main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_load_pregancy_data";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"load_pregancy_data");
					}
					


			   
			   

					load_pregancy_dataStruct load_pregancy_data_HashRow = new load_pregancy_dataStruct();
		   	   	   
				
				load_pregancy_data_HashRow.person_uuid = load_pregancy_data.person_uuid;
				
				load_pregancy_data_HashRow.pregnancy_status_id = load_pregancy_data.pregnancy_status_id;
				
			tHash_Lookup_load_pregancy_data.put(load_pregancy_data_HashRow);
			
            




 


	tos_count_tAdvancedHash_load_pregancy_data++;

/**
 * [tAdvancedHash_load_pregancy_data main ] stop
 */
	
	/**
	 * [tAdvancedHash_load_pregancy_data process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_load_pregancy_data";

	

 



/**
 * [tAdvancedHash_load_pregancy_data process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_load_pregancy_data process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_load_pregancy_data";

	

 



/**
 * [tAdvancedHash_load_pregancy_data process_data_end ] stop
 */

} // End of branch "load_pregancy_data"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_6 end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

	}
}finally{
	if (rs_tDBInput_6 != null) {
		rs_tDBInput_6.close();
	}
	if (stmt_tDBInput_6 != null) {
		stmt_tDBInput_6.close();
	}
	if(conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {
		
			conn_tDBInput_6.commit();
			
		
			conn_tDBInput_6.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_6_NB_LINE",nb_line_tDBInput_6);
 

ok_Hash.put("tDBInput_6", true);
end_Hash.put("tDBInput_6", System.currentTimeMillis());




/**
 * [tDBInput_6 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_fetch_pregnancy_codeset != null) {
						tHash_Lookup_fetch_pregnancy_codeset.endGet();
					}
					globalMap.remove( "tHash_Lookup_fetch_pregnancy_codeset" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"fetch_pregnancy_data");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_load_pregancy_data end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_load_pregancy_data";

	

tHash_Lookup_load_pregancy_data.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"load_pregancy_data");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_load_pregancy_data", true);
end_Hash.put("tAdvancedHash_load_pregancy_data", System.currentTimeMillis());




/**
 * [tAdvancedHash_load_pregancy_data end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_fetch_pregnancy_codeset"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_load_pregancy_data finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_load_pregancy_data";

	

 



/**
 * [tAdvancedHash_load_pregancy_data finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Lamisplus";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final HIV_Enrollment HIV_EnrollmentClass = new HIV_Enrollment();

        int exitCode = HIV_EnrollmentClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = HIV_Enrollment.class.getClassLoader().getResourceAsStream("lamisplus_etl/hiv_enrollment_6_0/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = HIV_Enrollment.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("LAMISPlus_AdditionalParams", "id_String");
                            context.LAMISPlus_AdditionalParams=(String) context.getProperty("LAMISPlus_AdditionalParams");
                        context.setContextType("LAMISPlus_Database", "id_String");
                            context.LAMISPlus_Database=(String) context.getProperty("LAMISPlus_Database");
                        context.setContextType("LAMISPlus_Login", "id_String");
                            context.LAMISPlus_Login=(String) context.getProperty("LAMISPlus_Login");
                        context.setContextType("LAMISPlus_Server", "id_String");
                            context.LAMISPlus_Server=(String) context.getProperty("LAMISPlus_Server");
                        context.setContextType("LAMISPlus_Port", "id_String");
                            context.LAMISPlus_Port=(String) context.getProperty("LAMISPlus_Port");
                        context.setContextType("LAMISPlus_Password", "id_Password");
                            String pwd_LAMISPlus_Password_value = context.getProperty("LAMISPlus_Password");
                            context.LAMISPlus_Password = null;
                            if(pwd_LAMISPlus_Password_value!=null) {
                                if(context_param.containsKey("LAMISPlus_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.LAMISPlus_Password = pwd_LAMISPlus_Password_value;
                                } else if (!pwd_LAMISPlus_Password_value.isEmpty()) {
                                    try {
                                        context.LAMISPlus_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_LAMISPlus_Password_value);
                                        context.put("LAMISPlus_Password",context.LAMISPlus_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("LAMISPlus_Schema", "id_String");
                            context.LAMISPlus_Schema=(String) context.getProperty("LAMISPlus_Schema");
                        context.setContextType("LAMIS3_AdditionalParams", "id_String");
                            context.LAMIS3_AdditionalParams=(String) context.getProperty("LAMIS3_AdditionalParams");
                        context.setContextType("LAMIS3_Database", "id_String");
                            context.LAMIS3_Database=(String) context.getProperty("LAMIS3_Database");
                        context.setContextType("LAMIS3_Login", "id_String");
                            context.LAMIS3_Login=(String) context.getProperty("LAMIS3_Login");
                        context.setContextType("LAMIS3_Password", "id_Password");
                            String pwd_LAMIS3_Password_value = context.getProperty("LAMIS3_Password");
                            context.LAMIS3_Password = null;
                            if(pwd_LAMIS3_Password_value!=null) {
                                if(context_param.containsKey("LAMIS3_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.LAMIS3_Password = pwd_LAMIS3_Password_value;
                                } else if (!pwd_LAMIS3_Password_value.isEmpty()) {
                                    try {
                                        context.LAMIS3_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_LAMIS3_Password_value);
                                        context.put("LAMIS3_Password",context.LAMIS3_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("LAMIS3_Port", "id_String");
                            context.LAMIS3_Port=(String) context.getProperty("LAMIS3_Port");
                        context.setContextType("LAMIS3_Schema", "id_String");
                            context.LAMIS3_Schema=(String) context.getProperty("LAMIS3_Schema");
                        context.setContextType("LAMIS3_Server", "id_String");
                            context.LAMIS3_Server=(String) context.getProperty("LAMIS3_Server");
                        context.setContextType("Lamisplus2_sinkdb_connection_Database", "id_String");
                            context.Lamisplus2_sinkdb_connection_Database=(String) context.getProperty("Lamisplus2_sinkdb_connection_Database");
                        context.setContextType("Lamisplus2_sinkdb_connection_Login", "id_String");
                            context.Lamisplus2_sinkdb_connection_Login=(String) context.getProperty("Lamisplus2_sinkdb_connection_Login");
                        context.setContextType("Lamisplus2_sinkdb_connection_Password", "id_Password");
                            String pwd_Lamisplus2_sinkdb_connection_Password_value = context.getProperty("Lamisplus2_sinkdb_connection_Password");
                            context.Lamisplus2_sinkdb_connection_Password = null;
                            if(pwd_Lamisplus2_sinkdb_connection_Password_value!=null) {
                                if(context_param.containsKey("Lamisplus2_sinkdb_connection_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.Lamisplus2_sinkdb_connection_Password = pwd_Lamisplus2_sinkdb_connection_Password_value;
                                } else if (!pwd_Lamisplus2_sinkdb_connection_Password_value.isEmpty()) {
                                    try {
                                        context.Lamisplus2_sinkdb_connection_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_Lamisplus2_sinkdb_connection_Password_value);
                                        context.put("Lamisplus2_sinkdb_connection_Password",context.Lamisplus2_sinkdb_connection_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("Lamisplus2_sinkdb_connection_Port", "id_String");
                            context.Lamisplus2_sinkdb_connection_Port=(String) context.getProperty("Lamisplus2_sinkdb_connection_Port");
                        context.setContextType("Lamisplus2_sinkdb_connection_Schema", "id_String");
                            context.Lamisplus2_sinkdb_connection_Schema=(String) context.getProperty("Lamisplus2_sinkdb_connection_Schema");
                        context.setContextType("Lamisplus2_sinkdb_connection_Server", "id_String");
                            context.Lamisplus2_sinkdb_connection_Server=(String) context.getProperty("Lamisplus2_sinkdb_connection_Server");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("LAMISPlus_AdditionalParams")) {
                context.LAMISPlus_AdditionalParams = (String) parentContextMap.get("LAMISPlus_AdditionalParams");
            }if (parentContextMap.containsKey("LAMISPlus_Database")) {
                context.LAMISPlus_Database = (String) parentContextMap.get("LAMISPlus_Database");
            }if (parentContextMap.containsKey("LAMISPlus_Login")) {
                context.LAMISPlus_Login = (String) parentContextMap.get("LAMISPlus_Login");
            }if (parentContextMap.containsKey("LAMISPlus_Server")) {
                context.LAMISPlus_Server = (String) parentContextMap.get("LAMISPlus_Server");
            }if (parentContextMap.containsKey("LAMISPlus_Port")) {
                context.LAMISPlus_Port = (String) parentContextMap.get("LAMISPlus_Port");
            }if (parentContextMap.containsKey("LAMISPlus_Password")) {
                context.LAMISPlus_Password = (java.lang.String) parentContextMap.get("LAMISPlus_Password");
            }if (parentContextMap.containsKey("LAMISPlus_Schema")) {
                context.LAMISPlus_Schema = (String) parentContextMap.get("LAMISPlus_Schema");
            }if (parentContextMap.containsKey("LAMIS3_AdditionalParams")) {
                context.LAMIS3_AdditionalParams = (String) parentContextMap.get("LAMIS3_AdditionalParams");
            }if (parentContextMap.containsKey("LAMIS3_Database")) {
                context.LAMIS3_Database = (String) parentContextMap.get("LAMIS3_Database");
            }if (parentContextMap.containsKey("LAMIS3_Login")) {
                context.LAMIS3_Login = (String) parentContextMap.get("LAMIS3_Login");
            }if (parentContextMap.containsKey("LAMIS3_Password")) {
                context.LAMIS3_Password = (java.lang.String) parentContextMap.get("LAMIS3_Password");
            }if (parentContextMap.containsKey("LAMIS3_Port")) {
                context.LAMIS3_Port = (String) parentContextMap.get("LAMIS3_Port");
            }if (parentContextMap.containsKey("LAMIS3_Schema")) {
                context.LAMIS3_Schema = (String) parentContextMap.get("LAMIS3_Schema");
            }if (parentContextMap.containsKey("LAMIS3_Server")) {
                context.LAMIS3_Server = (String) parentContextMap.get("LAMIS3_Server");
            }if (parentContextMap.containsKey("Lamisplus2_sinkdb_connection_Database")) {
                context.Lamisplus2_sinkdb_connection_Database = (String) parentContextMap.get("Lamisplus2_sinkdb_connection_Database");
            }if (parentContextMap.containsKey("Lamisplus2_sinkdb_connection_Login")) {
                context.Lamisplus2_sinkdb_connection_Login = (String) parentContextMap.get("Lamisplus2_sinkdb_connection_Login");
            }if (parentContextMap.containsKey("Lamisplus2_sinkdb_connection_Password")) {
                context.Lamisplus2_sinkdb_connection_Password = (java.lang.String) parentContextMap.get("Lamisplus2_sinkdb_connection_Password");
            }if (parentContextMap.containsKey("Lamisplus2_sinkdb_connection_Port")) {
                context.Lamisplus2_sinkdb_connection_Port = (String) parentContextMap.get("Lamisplus2_sinkdb_connection_Port");
            }if (parentContextMap.containsKey("Lamisplus2_sinkdb_connection_Schema")) {
                context.Lamisplus2_sinkdb_connection_Schema = (String) parentContextMap.get("Lamisplus2_sinkdb_connection_Schema");
            }if (parentContextMap.containsKey("Lamisplus2_sinkdb_connection_Server")) {
                context.Lamisplus2_sinkdb_connection_Server = (String) parentContextMap.get("Lamisplus2_sinkdb_connection_Server");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("LAMISPlus_Password");
			parametersToEncrypt.add("LAMIS3_Password");
			parametersToEncrypt.add("Lamisplus2_sinkdb_connection_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_16Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_16) {
globalMap.put("tDBInput_16_SUBPROCESS_STATE", -1);

e_tDBInput_16.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : HIV_Enrollment");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     802388 characters generated by Talend Open Studio for Big Data 
 *     on the November 6, 2022 1:26:52 PM WAT
 ************************************************************************************************/