// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package lamisplus_etl.hts_6_0;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: HTS Purpose: ETL Tool for HTS migration<br>
 * Description: This ETL tool is used for migration of HTS data from LAMIS 3 to LAMISPlus hts table <br>
 * @author ilozuechukwuemeka@yahoo.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class HTS implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(LAMISPlus_Schema != null){
				
					this.setProperty("LAMISPlus_Schema", LAMISPlus_Schema.toString());
				
			}
			
			if(LAMISPlus_AdditionalParams != null){
				
					this.setProperty("LAMISPlus_AdditionalParams", LAMISPlus_AdditionalParams.toString());
				
			}
			
			if(LAMISPlus_Database != null){
				
					this.setProperty("LAMISPlus_Database", LAMISPlus_Database.toString());
				
			}
			
			if(LAMISPlus_Login != null){
				
					this.setProperty("LAMISPlus_Login", LAMISPlus_Login.toString());
				
			}
			
			if(LAMISPlus_Server != null){
				
					this.setProperty("LAMISPlus_Server", LAMISPlus_Server.toString());
				
			}
			
			if(LAMISPlus_Password != null){
				
					this.setProperty("LAMISPlus_Password", LAMISPlus_Password.toString());
				
			}
			
			if(LAMISPlus_Port != null){
				
					this.setProperty("LAMISPlus_Port", LAMISPlus_Port.toString());
				
			}
			
			if(LAMIS3_Login != null){
				
					this.setProperty("LAMIS3_Login", LAMIS3_Login.toString());
				
			}
			
			if(LAMIS3_Port != null){
				
					this.setProperty("LAMIS3_Port", LAMIS3_Port.toString());
				
			}
			
			if(LAMIS3_AdditionalParams != null){
				
					this.setProperty("LAMIS3_AdditionalParams", LAMIS3_AdditionalParams.toString());
				
			}
			
			if(LAMIS3_Database != null){
				
					this.setProperty("LAMIS3_Database", LAMIS3_Database.toString());
				
			}
			
			if(LAMIS3_Password != null){
				
					this.setProperty("LAMIS3_Password", LAMIS3_Password.toString());
				
			}
			
			if(LAMIS3_Server != null){
				
					this.setProperty("LAMIS3_Server", LAMIS3_Server.toString());
				
			}
			
			if(LAMIS3_Schema != null){
				
					this.setProperty("LAMIS3_Schema", LAMIS3_Schema.toString());
				
			}
			
		}

public String LAMISPlus_Schema;
public String getLAMISPlus_Schema(){
	return this.LAMISPlus_Schema;
}
public String LAMISPlus_AdditionalParams;
public String getLAMISPlus_AdditionalParams(){
	return this.LAMISPlus_AdditionalParams;
}
public String LAMISPlus_Database;
public String getLAMISPlus_Database(){
	return this.LAMISPlus_Database;
}
public String LAMISPlus_Login;
public String getLAMISPlus_Login(){
	return this.LAMISPlus_Login;
}
public String LAMISPlus_Server;
public String getLAMISPlus_Server(){
	return this.LAMISPlus_Server;
}
public java.lang.String LAMISPlus_Password;
public java.lang.String getLAMISPlus_Password(){
	return this.LAMISPlus_Password;
}
public String LAMISPlus_Port;
public String getLAMISPlus_Port(){
	return this.LAMISPlus_Port;
}
public String LAMIS3_Login;
public String getLAMIS3_Login(){
	return this.LAMIS3_Login;
}
public String LAMIS3_Port;
public String getLAMIS3_Port(){
	return this.LAMIS3_Port;
}
public String LAMIS3_AdditionalParams;
public String getLAMIS3_AdditionalParams(){
	return this.LAMIS3_AdditionalParams;
}
public String LAMIS3_Database;
public String getLAMIS3_Database(){
	return this.LAMIS3_Database;
}
public java.lang.String LAMIS3_Password;
public java.lang.String getLAMIS3_Password(){
	return this.LAMIS3_Password;
}
public String LAMIS3_Server;
public String getLAMIS3_Server(){
	return this.LAMIS3_Server;
}
public String LAMIS3_Schema;
public String getLAMIS3_Schema(){
	return this.LAMIS3_Schema;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "6.0";
	private final String jobName = "HTS";
	private final String projectName = "LAMISPLUS_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				HTS.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(HTS.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_Target_Group_Codeset_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_Testing_Setting_Codeset_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_referred_from_codeset_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class facility_extractionStruct implements routines.system.IPersistableRow<facility_extractionStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HTS = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HTS = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public String facility_name;

				public String getFacility_name () {
					return this.facility_name;
				}
				
			    public String lga_name;

				public String getLga_name () {
					return this.lga_name;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.datim_id == null) ? 0 : this.datim_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final facility_extractionStruct other = (facility_extractionStruct) obj;
		
						if (this.datim_id == null) {
							if (other.datim_id != null)
								return false;
						
						} else if (!this.datim_id.equals(other.datim_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(facility_extractionStruct other) {

		other.id = this.id;
	            other.facility_name = this.facility_name;
	            other.lga_name = this.lga_name;
	            other.datim_id = this.datim_id;
	            
	}

	public void copyKeysDataTo(facility_extractionStruct other) {

		other.datim_id = this.datim_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HTS.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HTS.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HTS = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HTS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HTS, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HTS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HTS) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
					this.facility_name = readString(dis);
					
					this.lga_name = readString(dis);
					
					this.datim_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
					// String
				
						writeString(this.facility_name,dos);
					
					// String
				
						writeString(this.lga_name,dos);
					
					// String
				
						writeString(this.datim_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",facility_name="+facility_name);
		sb.append(",lga_name="+lga_name);
		sb.append(",datim_id="+datim_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(facility_extractionStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.datim_id, other.datim_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		facility_extractionStruct facility_extraction = new facility_extractionStruct();




	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"facility_extraction");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = context.LAMISPlus_Schema;
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("etl_facility");
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("etl_facility");
}

        int updateKeyCount_tDBOutput_2 = 1;
        if(updateKeyCount_tDBOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_2 = "jdbc:postgresql://"+context.LAMISPlus_Server+":"+context.LAMISPlus_Port+"/"+context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
    dbUser_tDBOutput_2 = context.LAMISPlus_Login;

	final String decryptedPassword_tDBOutput_2 = context.LAMISPlus_Password; 

    String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;

    conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2,dbUser_tDBOutput_2,dbPwd_tDBOutput_2);
	
	resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
        conn_tDBOutput_2.setAutoCommit(false);
        int commitEvery_tDBOutput_2 = 10000;
        int commitCounter_tDBOutput_2 = 0;



int count_tDBOutput_2=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_2 = conn_tDBOutput_2.getMetaData();
                                boolean whetherExist_tDBOutput_2 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_2 = dbMetaData_tDBOutput_2.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_2 = "public";
                                    if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_2 = conn_tDBOutput_2.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_2 = stmtSchema_tDBOutput_2.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_2.next()){
                                                defaultSchema_tDBOutput_2 = rsSchema_tDBOutput_2.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_2.next()) {
                                        String table_tDBOutput_2 = rsTable_tDBOutput_2.getString("TABLE_NAME");
                                        String schema_tDBOutput_2 = rsTable_tDBOutput_2.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_2.equals(("etl_facility"))
                                            && (schema_tDBOutput_2.equals(dbschema_tDBOutput_2) || ((dbschema_tDBOutput_2 ==null || dbschema_tDBOutput_2.trim().length() ==0) && defaultSchema_tDBOutput_2.equals(schema_tDBOutput_2)))) {
                                            whetherExist_tDBOutput_2 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_2) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                                        stmtCreate_tDBOutput_2.execute("CREATE TABLE \"" + tableName_tDBOutput_2 + "\"(\"id\" BIGSERIAL  not null ,\"facility_name\" VARCHAR(100)   not null ,\"lga_name\" VARCHAR(45)   not null ,\"datim_id\" VARCHAR(32)   not null ,primary key(\"datim_id\"))");
                                    }
                                }
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_2 + "\" WHERE \"datim_id\" = ?");
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2 + "\" (\"id\",\"facility_name\",\"lga_name\",\"datim_id\") VALUES (?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmtInsert_tDBOutput_2", pstmtInsert_tDBOutput_2);
	    String update_tDBOutput_2 = "UPDATE \"" + tableName_tDBOutput_2 + "\" SET \"id\" = ?,\"facility_name\" = ?,\"lga_name\" = ? WHERE \"datim_id\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(update_tDBOutput_2);
	    resourceMap.put("pstmtUpdate_tDBOutput_2", pstmtUpdate_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tDBInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_7", false);
		start_Hash.put("tDBInput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_7";

	
		int tos_count_tDBInput_7 = 0;
		
	
    
	
		    int nb_line_tDBInput_7 = 0;
		    java.sql.Connection conn_tDBInput_7 = null;
				String driverClass_tDBInput_7 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_7 = java.lang.Class.forName(driverClass_tDBInput_7);
				String dbUser_tDBInput_7 = context.LAMIS3_Login;
				
				
	final String decryptedPassword_tDBInput_7 = context.LAMIS3_Password; 
				
				String dbPwd_tDBInput_7 = decryptedPassword_tDBInput_7;
				
				String url_tDBInput_7 = "jdbc:postgresql://" + context.LAMIS3_Server + ":" + context.LAMIS3_Port + "/" + context.LAMIS3_Database + "?" + context.LAMIS3_AdditionalParams;
				
				conn_tDBInput_7 = java.sql.DriverManager.getConnection(url_tDBInput_7,dbUser_tDBInput_7,dbPwd_tDBInput_7);
		        
				conn_tDBInput_7.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

		    String dbquery_tDBInput_7 = "SELECT DISTINCT \n	fc.id as id, \n	fc.name AS facility_name,\n	lg.name AS lga_name, \n	nf.datim_id AS datim_id\n FROM p"
+"ublic.patient ps\n INNER JOIN facility fc\n  ON ps.facility_id=fc.id\n INNER JOIN lga lg\n  ON fc.lga_id=lg.id\nINNER JO"
+"IN ndr_facility nf\n  ON nf.id=ps.facility_id";
			

            	globalMap.put("tDBInput_7_QUERY",dbquery_tDBInput_7);
		    java.sql.ResultSet rs_tDBInput_7 = null;

		    try {
		    	rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
		    	int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

		    String tmpContent_tDBInput_7 = null;
		    
		    
		    while (rs_tDBInput_7.next()) {
		        nb_line_tDBInput_7++;
		        
							if(colQtyInRs_tDBInput_7 < 1) {
								facility_extraction.id = 0;
							} else {
		                          
            facility_extraction.id = rs_tDBInput_7.getLong(1);
            if(rs_tDBInput_7.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 2) {
								facility_extraction.facility_name = null;
							} else {
	                         		
        	facility_extraction.facility_name = routines.system.JDBCUtil.getString(rs_tDBInput_7, 2, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 3) {
								facility_extraction.lga_name = null;
							} else {
	                         		
        	facility_extraction.lga_name = routines.system.JDBCUtil.getString(rs_tDBInput_7, 3, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 4) {
								facility_extraction.datim_id = null;
							} else {
	                         		
        	facility_extraction.datim_id = routines.system.JDBCUtil.getString(rs_tDBInput_7, 4, false);
		                    }
					


 



/**
 * [tDBInput_7 begin ] stop
 */
	
	/**
	 * [tDBInput_7 main ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 


	tos_count_tDBInput_7++;

/**
 * [tDBInput_7 main ] stop
 */
	
	/**
	 * [tDBInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"facility_extraction");
					}
					



        whetherReject_tDBOutput_2 = false;
                    if(facility_extraction.datim_id == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, facility_extraction.datim_id);
}

            int checkCount_tDBOutput_2 = -1;
            try (java.sql.ResultSet rs_tDBOutput_2 = pstmt_tDBOutput_2.executeQuery()) {
                while(rs_tDBOutput_2.next()) {
                    checkCount_tDBOutput_2 = rs_tDBOutput_2.getInt(1);
                }
            }
            if(checkCount_tDBOutput_2 > 0) {
                        pstmtUpdate_tDBOutput_2.setLong(1, facility_extraction.id);

                        if(facility_extraction.facility_name == null) {
pstmtUpdate_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(2, facility_extraction.facility_name);
}

                        if(facility_extraction.lga_name == null) {
pstmtUpdate_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(3, facility_extraction.lga_name);
}

                        if(facility_extraction.datim_id == null) {
pstmtUpdate_tDBOutput_2.setNull(4 + count_tDBOutput_2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(4 + count_tDBOutput_2, facility_extraction.datim_id);
}

                try {
					
                    updatedCount_tDBOutput_2 = updatedCount_tDBOutput_2 + pstmtUpdate_tDBOutput_2.executeUpdate();
                    nb_line_tDBOutput_2++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_2 = true;
                        nb_line_tDBOutput_2++;
                            System.err.print(e.getMessage());
                }
            } else {
                        pstmtInsert_tDBOutput_2.setLong(1, facility_extraction.id);

                        if(facility_extraction.facility_name == null) {
pstmtInsert_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(2, facility_extraction.facility_name);
}

                        if(facility_extraction.lga_name == null) {
pstmtInsert_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(3, facility_extraction.lga_name);
}

                        if(facility_extraction.datim_id == null) {
pstmtInsert_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(4, facility_extraction.datim_id);
}

                try {
					
                    insertedCount_tDBOutput_2 = insertedCount_tDBOutput_2 + pstmtInsert_tDBOutput_2.executeUpdate();
                    nb_line_tDBOutput_2++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_2 = true;
                        nb_line_tDBOutput_2++;
                            System.err.print(e.getMessage());
                }
            }
    		    commitCounter_tDBOutput_2++;
                if(commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
                	conn_tDBOutput_2.commit();
                	
                	commitCounter_tDBOutput_2=0;
                }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_7 end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

	}
}finally{
	if (rs_tDBInput_7 != null) {
		rs_tDBInput_7.close();
	}
	if (stmt_tDBInput_7 != null) {
		stmt_tDBInput_7.close();
	}
	if(conn_tDBInput_7 != null && !conn_tDBInput_7.isClosed()) {
		
			conn_tDBInput_7.commit();
			
		
			conn_tDBInput_7.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_7_NB_LINE",nb_line_tDBInput_7);
 

ok_Hash.put("tDBInput_7", true);
end_Hash.put("tDBInput_7", System.currentTimeMillis());

   			if (globalMap.get("tDBInput_7_NB_LINE") != null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				tJava_3Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}



/**
 * [tDBInput_7 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



        if(pstmtUpdate_tDBOutput_2 != null){
            pstmtUpdate_tDBOutput_2.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_2");
        }
        if(pstmtInsert_tDBOutput_2 != null){
            pstmtInsert_tDBOutput_2.close();
            resourceMap.remove("pstmtInsert_tDBOutput_2");
        }
        if(pstmt_tDBOutput_2 != null) {
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);
			
			conn_tDBOutput_2.commit();
			
		
    	conn_tDBOutput_2 .close();
    	
    	resourceMap.put("finish_tDBOutput_2", true);
    	

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"facility_extraction");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_2 = null;
                if ((pstmtUpdateToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_2")) != null) {
                    pstmtUpdateToClose_tDBOutput_2.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_2 = null;
                if ((pstmtInsertToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_2")) != null) {
                    pstmtInsertToClose_tDBOutput_2.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_2") == null){
            java.sql.Connection ctn_tDBOutput_2 = null;
            if((ctn_tDBOutput_2 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_2")) != null){
                try {
                    ctn_tDBOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_2) {
                    String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :" + sqlEx_tDBOutput_2.getMessage();
                    System.err.println(errorMessage_tDBOutput_2);
                }
            }
        }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}
	

public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";

	
		int tos_count_tJava_3 = 0;
		


System.out.println("*****************************************************************");
System.out.println("*****************HTS MIGRATION REPORT START**********************");
java.time.LocalDateTime startTime = java.time.LocalDateTime.now();
globalMap.put("startTime", startTime);
System.out.println("Start time - "+ startTime);

 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());




/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	


public static class hts_finalStruct implements routines.system.IPersistableRow<hts_finalStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HTS = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HTS = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public String test1;

				public String getTest1 () {
					return this.test1;
				}
				
			    public String confirmatory_test;

				public String getConfirmatory_test () {
					return this.confirmatory_test;
				}
				
			    public String tie_breaker_test;

				public String getTie_breaker_test () {
					return this.tie_breaker_test;
				}
				
			    public String client_code;

				public String getClient_code () {
					return this.client_code;
				}
				
			    public java.util.Date date_visit;

				public java.util.Date getDate_visit () {
					return this.date_visit;
				}
				
			    public int archived;

				public int getArchived () {
					return this.archived;
				}
				
			    public java.util.Date date_created;

				public java.util.Date getDate_created () {
					return this.date_created;
				}
				
			    public java.util.Date date_modified;

				public java.util.Date getDate_modified () {
					return this.date_modified;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String modified_by;

				public String getModified_by () {
					return this.modified_by;
				}
				
			    public String captured_by;

				public String getCaptured_by () {
					return this.captured_by;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Boolean previously_tested;

				public Boolean getPreviously_tested () {
					return this.previously_tested;
				}
				
			    public Boolean index_client;

				public Boolean getIndex_client () {
					return this.index_client;
				}
				
			    public Integer num_children;

				public Integer getNum_children () {
					return this.num_children;
				}
				
			    public Integer num_wives;

				public Integer getNum_wives () {
					return this.num_wives;
				}
				
			    public Boolean first_time_visit;

				public Boolean getFirst_time_visit () {
					return this.first_time_visit;
				}
				
			    public String index_client_code;

				public String getIndex_client_code () {
					return this.index_client_code;
				}
				
			    public String extra;

				public String getExtra () {
					return this.extra;
				}
				
			    public String post_test_counseling;

				public String getPost_test_counseling () {
					return this.post_test_counseling;
				}
				
			    public String knowledge_assessment;

				public String getKnowledge_assessment () {
					return this.knowledge_assessment;
				}
				
			    public String tb_screening;

				public String getTb_screening () {
					return this.tb_screening;
				}
				
			    public String sti_screening;

				public String getSti_screening () {
					return this.sti_screening;
				}
				
			    public String risk_assessment;

				public String getRisk_assessment () {
					return this.risk_assessment;
				}
				
			    public String target_group;

				public String getTarget_group () {
					return this.target_group;
				}
				
			    public String testing_setting;

				public String getTesting_setting () {
					return this.testing_setting;
				}
				
			    public Integer referred_from;

				public Integer getReferred_from () {
					return this.referred_from;
				}
				
			    public Integer type_counseling;

				public Integer getType_counseling () {
					return this.type_counseling;
				}
				
			    public Integer facility_id;

				public Integer getFacility_id () {
					return this.facility_id;
				}
				
			    public String recency;

				public String getRecency () {
					return this.recency;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final hts_finalStruct other = (hts_finalStruct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(hts_finalStruct other) {

		other.id = this.id;
	            other.test1 = this.test1;
	            other.confirmatory_test = this.confirmatory_test;
	            other.tie_breaker_test = this.tie_breaker_test;
	            other.client_code = this.client_code;
	            other.date_visit = this.date_visit;
	            other.archived = this.archived;
	            other.date_created = this.date_created;
	            other.date_modified = this.date_modified;
	            other.created_by = this.created_by;
	            other.modified_by = this.modified_by;
	            other.captured_by = this.captured_by;
	            other.uuid = this.uuid;
	            other.previously_tested = this.previously_tested;
	            other.index_client = this.index_client;
	            other.num_children = this.num_children;
	            other.num_wives = this.num_wives;
	            other.first_time_visit = this.first_time_visit;
	            other.index_client_code = this.index_client_code;
	            other.extra = this.extra;
	            other.post_test_counseling = this.post_test_counseling;
	            other.knowledge_assessment = this.knowledge_assessment;
	            other.tb_screening = this.tb_screening;
	            other.sti_screening = this.sti_screening;
	            other.risk_assessment = this.risk_assessment;
	            other.target_group = this.target_group;
	            other.testing_setting = this.testing_setting;
	            other.referred_from = this.referred_from;
	            other.type_counseling = this.type_counseling;
	            other.facility_id = this.facility_id;
	            other.recency = this.recency;
	            
	}

	public void copyKeysDataTo(hts_finalStruct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HTS.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HTS.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HTS = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HTS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HTS, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HTS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HTS) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
					this.test1 = readString(dis);
					
					this.confirmatory_test = readString(dis);
					
					this.tie_breaker_test = readString(dis);
					
					this.client_code = readString(dis);
					
					this.date_visit = readDate(dis);
					
			        this.archived = dis.readInt();
					
					this.date_created = readDate(dis);
					
					this.date_modified = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.modified_by = readString(dis);
					
					this.captured_by = readString(dis);
					
					this.uuid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.previously_tested = null;
           				} else {
           			    	this.previously_tested = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.index_client = null;
           				} else {
           			    	this.index_client = dis.readBoolean();
           				}
					
						this.num_children = readInteger(dis);
					
						this.num_wives = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.first_time_visit = null;
           				} else {
           			    	this.first_time_visit = dis.readBoolean();
           				}
					
					this.index_client_code = readString(dis);
					
					this.extra = readString(dis);
					
					this.post_test_counseling = readString(dis);
					
					this.knowledge_assessment = readString(dis);
					
					this.tb_screening = readString(dis);
					
					this.sti_screening = readString(dis);
					
					this.risk_assessment = readString(dis);
					
					this.target_group = readString(dis);
					
					this.testing_setting = readString(dis);
					
						this.referred_from = readInteger(dis);
					
						this.type_counseling = readInteger(dis);
					
						this.facility_id = readInteger(dis);
					
					this.recency = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
					// String
				
						writeString(this.test1,dos);
					
					// String
				
						writeString(this.confirmatory_test,dos);
					
					// String
				
						writeString(this.tie_breaker_test,dos);
					
					// String
				
						writeString(this.client_code,dos);
					
					// java.util.Date
				
						writeDate(this.date_visit,dos);
					
					// int
				
		            	dos.writeInt(this.archived);
					
					// java.util.Date
				
						writeDate(this.date_created,dos);
					
					// java.util.Date
				
						writeDate(this.date_modified,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.modified_by,dos);
					
					// String
				
						writeString(this.captured_by,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Boolean
				
						if(this.previously_tested == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.previously_tested);
		            	}
					
					// Boolean
				
						if(this.index_client == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.index_client);
		            	}
					
					// Integer
				
						writeInteger(this.num_children,dos);
					
					// Integer
				
						writeInteger(this.num_wives,dos);
					
					// Boolean
				
						if(this.first_time_visit == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.first_time_visit);
		            	}
					
					// String
				
						writeString(this.index_client_code,dos);
					
					// String
				
						writeString(this.extra,dos);
					
					// String
				
						writeString(this.post_test_counseling,dos);
					
					// String
				
						writeString(this.knowledge_assessment,dos);
					
					// String
				
						writeString(this.tb_screening,dos);
					
					// String
				
						writeString(this.sti_screening,dos);
					
					// String
				
						writeString(this.risk_assessment,dos);
					
					// String
				
						writeString(this.target_group,dos);
					
					// String
				
						writeString(this.testing_setting,dos);
					
					// Integer
				
						writeInteger(this.referred_from,dos);
					
					// Integer
				
						writeInteger(this.type_counseling,dos);
					
					// Integer
				
						writeInteger(this.facility_id,dos);
					
					// String
				
						writeString(this.recency,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",test1="+test1);
		sb.append(",confirmatory_test="+confirmatory_test);
		sb.append(",tie_breaker_test="+tie_breaker_test);
		sb.append(",client_code="+client_code);
		sb.append(",date_visit="+String.valueOf(date_visit));
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",date_created="+String.valueOf(date_created));
		sb.append(",date_modified="+String.valueOf(date_modified));
		sb.append(",created_by="+created_by);
		sb.append(",modified_by="+modified_by);
		sb.append(",captured_by="+captured_by);
		sb.append(",uuid="+uuid);
		sb.append(",previously_tested="+String.valueOf(previously_tested));
		sb.append(",index_client="+String.valueOf(index_client));
		sb.append(",num_children="+String.valueOf(num_children));
		sb.append(",num_wives="+String.valueOf(num_wives));
		sb.append(",first_time_visit="+String.valueOf(first_time_visit));
		sb.append(",index_client_code="+index_client_code);
		sb.append(",extra="+extra);
		sb.append(",post_test_counseling="+post_test_counseling);
		sb.append(",knowledge_assessment="+knowledge_assessment);
		sb.append(",tb_screening="+tb_screening);
		sb.append(",sti_screening="+sti_screening);
		sb.append(",risk_assessment="+risk_assessment);
		sb.append(",target_group="+target_group);
		sb.append(",testing_setting="+testing_setting);
		sb.append(",referred_from="+String.valueOf(referred_from));
		sb.append(",type_counseling="+String.valueOf(type_counseling));
		sb.append(",facility_id="+String.valueOf(facility_id));
		sb.append(",recency="+recency);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(hts_finalStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class hts_extract_before_finalStruct implements routines.system.IPersistableRow<hts_extract_before_finalStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HTS = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HTS = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String test1;

				public String getTest1 () {
					return this.test1;
				}
				
			    public String confirmatory_test;

				public String getConfirmatory_test () {
					return this.confirmatory_test;
				}
				
			    public String tie_breaker_test;

				public String getTie_breaker_test () {
					return this.tie_breaker_test;
				}
				
			    public String client_code;

				public String getClient_code () {
					return this.client_code;
				}
				
			    public java.util.Date date_visit;

				public java.util.Date getDate_visit () {
					return this.date_visit;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public java.util.Date date_created;

				public java.util.Date getDate_created () {
					return this.date_created;
				}
				
			    public java.util.Date date_modified;

				public java.util.Date getDate_modified () {
					return this.date_modified;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String modified_by;

				public String getModified_by () {
					return this.modified_by;
				}
				
			    public String captured_by;

				public String getCaptured_by () {
					return this.captured_by;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Boolean previously_tested;

				public Boolean getPreviously_tested () {
					return this.previously_tested;
				}
				
			    public Boolean index_testing;

				public Boolean getIndex_testing () {
					return this.index_testing;
				}
				
			    public Integer num_children;

				public Integer getNum_children () {
					return this.num_children;
				}
				
			    public Integer num_wives;

				public Integer getNum_wives () {
					return this.num_wives;
				}
				
			    public Boolean first_time_visit;

				public Boolean getFirst_time_visit () {
					return this.first_time_visit;
				}
				
			    public String index_client_code;

				public String getIndex_client_code () {
					return this.index_client_code;
				}
				
			    public String extra;

				public String getExtra () {
					return this.extra;
				}
				
			    public String post_test_counseling;

				public String getPost_test_counseling () {
					return this.post_test_counseling;
				}
				
			    public String knowledge_assessment;

				public String getKnowledge_assessment () {
					return this.knowledge_assessment;
				}
				
			    public String tb_screening;

				public String getTb_screening () {
					return this.tb_screening;
				}
				
			    public String sti_screening;

				public String getSti_screening () {
					return this.sti_screening;
				}
				
			    public String risk_assessment;

				public String getRisk_assessment () {
					return this.risk_assessment;
				}
				
			    public String target_group;

				public String getTarget_group () {
					return this.target_group;
				}
				
			    public String testing_setting;

				public String getTesting_setting () {
					return this.testing_setting;
				}
				
			    public Integer referred_from;

				public Integer getReferred_from () {
					return this.referred_from;
				}
				
			    public Integer type_counseling;

				public Integer getType_counseling () {
					return this.type_counseling;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				
			    public String recency;

				public String getRecency () {
					return this.recency;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HTS.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HTS.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HTS = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HTS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HTS, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HTS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HTS) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.test1 = readString(dis);
					
					this.confirmatory_test = readString(dis);
					
					this.tie_breaker_test = readString(dis);
					
					this.client_code = readString(dis);
					
					this.date_visit = readDate(dis);
					
						this.archived = readInteger(dis);
					
					this.date_created = readDate(dis);
					
					this.date_modified = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.modified_by = readString(dis);
					
					this.captured_by = readString(dis);
					
					this.uuid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.previously_tested = null;
           				} else {
           			    	this.previously_tested = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.index_testing = null;
           				} else {
           			    	this.index_testing = dis.readBoolean();
           				}
					
						this.num_children = readInteger(dis);
					
						this.num_wives = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.first_time_visit = null;
           				} else {
           			    	this.first_time_visit = dis.readBoolean();
           				}
					
					this.index_client_code = readString(dis);
					
					this.extra = readString(dis);
					
					this.post_test_counseling = readString(dis);
					
					this.knowledge_assessment = readString(dis);
					
					this.tb_screening = readString(dis);
					
					this.sti_screening = readString(dis);
					
					this.risk_assessment = readString(dis);
					
					this.target_group = readString(dis);
					
					this.testing_setting = readString(dis);
					
						this.referred_from = readInteger(dis);
					
						this.type_counseling = readInteger(dis);
					
					this.datim_id = readString(dis);
					
					this.recency = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.test1,dos);
					
					// String
				
						writeString(this.confirmatory_test,dos);
					
					// String
				
						writeString(this.tie_breaker_test,dos);
					
					// String
				
						writeString(this.client_code,dos);
					
					// java.util.Date
				
						writeDate(this.date_visit,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// java.util.Date
				
						writeDate(this.date_created,dos);
					
					// java.util.Date
				
						writeDate(this.date_modified,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.modified_by,dos);
					
					// String
				
						writeString(this.captured_by,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Boolean
				
						if(this.previously_tested == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.previously_tested);
		            	}
					
					// Boolean
				
						if(this.index_testing == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.index_testing);
		            	}
					
					// Integer
				
						writeInteger(this.num_children,dos);
					
					// Integer
				
						writeInteger(this.num_wives,dos);
					
					// Boolean
				
						if(this.first_time_visit == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.first_time_visit);
		            	}
					
					// String
				
						writeString(this.index_client_code,dos);
					
					// String
				
						writeString(this.extra,dos);
					
					// String
				
						writeString(this.post_test_counseling,dos);
					
					// String
				
						writeString(this.knowledge_assessment,dos);
					
					// String
				
						writeString(this.tb_screening,dos);
					
					// String
				
						writeString(this.sti_screening,dos);
					
					// String
				
						writeString(this.risk_assessment,dos);
					
					// String
				
						writeString(this.target_group,dos);
					
					// String
				
						writeString(this.testing_setting,dos);
					
					// Integer
				
						writeInteger(this.referred_from,dos);
					
					// Integer
				
						writeInteger(this.type_counseling,dos);
					
					// String
				
						writeString(this.datim_id,dos);
					
					// String
				
						writeString(this.recency,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",test1="+test1);
		sb.append(",confirmatory_test="+confirmatory_test);
		sb.append(",tie_breaker_test="+tie_breaker_test);
		sb.append(",client_code="+client_code);
		sb.append(",date_visit="+String.valueOf(date_visit));
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",date_created="+String.valueOf(date_created));
		sb.append(",date_modified="+String.valueOf(date_modified));
		sb.append(",created_by="+created_by);
		sb.append(",modified_by="+modified_by);
		sb.append(",captured_by="+captured_by);
		sb.append(",uuid="+uuid);
		sb.append(",previously_tested="+String.valueOf(previously_tested));
		sb.append(",index_testing="+String.valueOf(index_testing));
		sb.append(",num_children="+String.valueOf(num_children));
		sb.append(",num_wives="+String.valueOf(num_wives));
		sb.append(",first_time_visit="+String.valueOf(first_time_visit));
		sb.append(",index_client_code="+index_client_code);
		sb.append(",extra="+extra);
		sb.append(",post_test_counseling="+post_test_counseling);
		sb.append(",knowledge_assessment="+knowledge_assessment);
		sb.append(",tb_screening="+tb_screening);
		sb.append(",sti_screening="+sti_screening);
		sb.append(",risk_assessment="+risk_assessment);
		sb.append(",target_group="+target_group);
		sb.append(",testing_setting="+testing_setting);
		sb.append(",referred_from="+String.valueOf(referred_from));
		sb.append(",type_counseling="+String.valueOf(type_counseling));
		sb.append(",datim_id="+datim_id);
		sb.append(",recency="+recency);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(hts_extract_before_finalStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class hts_target_group_setting_mapStruct implements routines.system.IPersistableRow<hts_target_group_setting_mapStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HTS = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HTS = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String test1;

				public String getTest1 () {
					return this.test1;
				}
				
			    public String confirmatory_test;

				public String getConfirmatory_test () {
					return this.confirmatory_test;
				}
				
			    public String tie_breaker_test;

				public String getTie_breaker_test () {
					return this.tie_breaker_test;
				}
				
			    public String client_code;

				public String getClient_code () {
					return this.client_code;
				}
				
			    public java.util.Date date_visit;

				public java.util.Date getDate_visit () {
					return this.date_visit;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public java.util.Date date_created;

				public java.util.Date getDate_created () {
					return this.date_created;
				}
				
			    public java.util.Date date_modified;

				public java.util.Date getDate_modified () {
					return this.date_modified;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String modified_by;

				public String getModified_by () {
					return this.modified_by;
				}
				
			    public String captured_by;

				public String getCaptured_by () {
					return this.captured_by;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Boolean previously_tested;

				public Boolean getPreviously_tested () {
					return this.previously_tested;
				}
				
			    public Boolean index_testing;

				public Boolean getIndex_testing () {
					return this.index_testing;
				}
				
			    public Integer num_children;

				public Integer getNum_children () {
					return this.num_children;
				}
				
			    public Integer num_wives;

				public Integer getNum_wives () {
					return this.num_wives;
				}
				
			    public Boolean first_time_visit;

				public Boolean getFirst_time_visit () {
					return this.first_time_visit;
				}
				
			    public String index_client_code;

				public String getIndex_client_code () {
					return this.index_client_code;
				}
				
			    public String type_counseling;

				public String getType_counseling () {
					return this.type_counseling;
				}
				
			    public String referred_from;

				public String getReferred_from () {
					return this.referred_from;
				}
				
			    public String extra;

				public String getExtra () {
					return this.extra;
				}
				
			    public String post_test_counseling;

				public String getPost_test_counseling () {
					return this.post_test_counseling;
				}
				
			    public String knowledge_assessment;

				public String getKnowledge_assessment () {
					return this.knowledge_assessment;
				}
				
			    public String tb_screening;

				public String getTb_screening () {
					return this.tb_screening;
				}
				
			    public String sti_screening;

				public String getSti_screening () {
					return this.sti_screening;
				}
				
			    public String risk_assessment;

				public String getRisk_assessment () {
					return this.risk_assessment;
				}
				
			    public String target_group;

				public String getTarget_group () {
					return this.target_group;
				}
				
			    public String testing_setting;

				public String getTesting_setting () {
					return this.testing_setting;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				
			    public String recency;

				public String getRecency () {
					return this.recency;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HTS.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HTS.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HTS = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HTS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HTS, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HTS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HTS) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.test1 = readString(dis);
					
					this.confirmatory_test = readString(dis);
					
					this.tie_breaker_test = readString(dis);
					
					this.client_code = readString(dis);
					
					this.date_visit = readDate(dis);
					
						this.archived = readInteger(dis);
					
					this.date_created = readDate(dis);
					
					this.date_modified = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.modified_by = readString(dis);
					
					this.captured_by = readString(dis);
					
					this.uuid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.previously_tested = null;
           				} else {
           			    	this.previously_tested = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.index_testing = null;
           				} else {
           			    	this.index_testing = dis.readBoolean();
           				}
					
						this.num_children = readInteger(dis);
					
						this.num_wives = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.first_time_visit = null;
           				} else {
           			    	this.first_time_visit = dis.readBoolean();
           				}
					
					this.index_client_code = readString(dis);
					
					this.type_counseling = readString(dis);
					
					this.referred_from = readString(dis);
					
					this.extra = readString(dis);
					
					this.post_test_counseling = readString(dis);
					
					this.knowledge_assessment = readString(dis);
					
					this.tb_screening = readString(dis);
					
					this.sti_screening = readString(dis);
					
					this.risk_assessment = readString(dis);
					
					this.target_group = readString(dis);
					
					this.testing_setting = readString(dis);
					
					this.datim_id = readString(dis);
					
					this.recency = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.test1,dos);
					
					// String
				
						writeString(this.confirmatory_test,dos);
					
					// String
				
						writeString(this.tie_breaker_test,dos);
					
					// String
				
						writeString(this.client_code,dos);
					
					// java.util.Date
				
						writeDate(this.date_visit,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// java.util.Date
				
						writeDate(this.date_created,dos);
					
					// java.util.Date
				
						writeDate(this.date_modified,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.modified_by,dos);
					
					// String
				
						writeString(this.captured_by,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Boolean
				
						if(this.previously_tested == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.previously_tested);
		            	}
					
					// Boolean
				
						if(this.index_testing == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.index_testing);
		            	}
					
					// Integer
				
						writeInteger(this.num_children,dos);
					
					// Integer
				
						writeInteger(this.num_wives,dos);
					
					// Boolean
				
						if(this.first_time_visit == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.first_time_visit);
		            	}
					
					// String
				
						writeString(this.index_client_code,dos);
					
					// String
				
						writeString(this.type_counseling,dos);
					
					// String
				
						writeString(this.referred_from,dos);
					
					// String
				
						writeString(this.extra,dos);
					
					// String
				
						writeString(this.post_test_counseling,dos);
					
					// String
				
						writeString(this.knowledge_assessment,dos);
					
					// String
				
						writeString(this.tb_screening,dos);
					
					// String
				
						writeString(this.sti_screening,dos);
					
					// String
				
						writeString(this.risk_assessment,dos);
					
					// String
				
						writeString(this.target_group,dos);
					
					// String
				
						writeString(this.testing_setting,dos);
					
					// String
				
						writeString(this.datim_id,dos);
					
					// String
				
						writeString(this.recency,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",test1="+test1);
		sb.append(",confirmatory_test="+confirmatory_test);
		sb.append(",tie_breaker_test="+tie_breaker_test);
		sb.append(",client_code="+client_code);
		sb.append(",date_visit="+String.valueOf(date_visit));
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",date_created="+String.valueOf(date_created));
		sb.append(",date_modified="+String.valueOf(date_modified));
		sb.append(",created_by="+created_by);
		sb.append(",modified_by="+modified_by);
		sb.append(",captured_by="+captured_by);
		sb.append(",uuid="+uuid);
		sb.append(",previously_tested="+String.valueOf(previously_tested));
		sb.append(",index_testing="+String.valueOf(index_testing));
		sb.append(",num_children="+String.valueOf(num_children));
		sb.append(",num_wives="+String.valueOf(num_wives));
		sb.append(",first_time_visit="+String.valueOf(first_time_visit));
		sb.append(",index_client_code="+index_client_code);
		sb.append(",type_counseling="+type_counseling);
		sb.append(",referred_from="+referred_from);
		sb.append(",extra="+extra);
		sb.append(",post_test_counseling="+post_test_counseling);
		sb.append(",knowledge_assessment="+knowledge_assessment);
		sb.append(",tb_screening="+tb_screening);
		sb.append(",sti_screening="+sti_screening);
		sb.append(",risk_assessment="+risk_assessment);
		sb.append(",target_group="+target_group);
		sb.append(",testing_setting="+testing_setting);
		sb.append(",datim_id="+datim_id);
		sb.append(",recency="+recency);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(hts_target_group_setting_mapStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class hts_extractStruct implements routines.system.IPersistableRow<hts_extractStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HTS = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HTS = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String test1;

				public String getTest1 () {
					return this.test1;
				}
				
			    public String confirmatory_test;

				public String getConfirmatory_test () {
					return this.confirmatory_test;
				}
				
			    public String tie_breaker_test;

				public String getTie_breaker_test () {
					return this.tie_breaker_test;
				}
				
			    public java.util.Date date_visit;

				public java.util.Date getDate_visit () {
					return this.date_visit;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public java.util.Date date_created;

				public java.util.Date getDate_created () {
					return this.date_created;
				}
				
			    public java.util.Date date_modified;

				public java.util.Date getDate_modified () {
					return this.date_modified;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String modified_by;

				public String getModified_by () {
					return this.modified_by;
				}
				
			    public String captured_by;

				public String getCaptured_by () {
					return this.captured_by;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Boolean previously_tested;

				public Boolean getPreviously_tested () {
					return this.previously_tested;
				}
				
			    public Boolean index_testing;

				public Boolean getIndex_testing () {
					return this.index_testing;
				}
				
			    public Integer num_children;

				public Integer getNum_children () {
					return this.num_children;
				}
				
			    public Integer num_wives;

				public Integer getNum_wives () {
					return this.num_wives;
				}
				
			    public Boolean first_time_visit;

				public Boolean getFirst_time_visit () {
					return this.first_time_visit;
				}
				
			    public String client_code;

				public String getClient_code () {
					return this.client_code;
				}
				
			    public String index_client_code;

				public String getIndex_client_code () {
					return this.index_client_code;
				}
				
			    public String type_counseling;

				public String getType_counseling () {
					return this.type_counseling;
				}
				
			    public String referred_from;

				public String getReferred_from () {
					return this.referred_from;
				}
				
			    public String testing_setting;

				public String getTesting_setting () {
					return this.testing_setting;
				}
				
			    public String target_group;

				public String getTarget_group () {
					return this.target_group;
				}
				
			    public String extra;

				public String getExtra () {
					return this.extra;
				}
				
			    public String post_test_counseling;

				public String getPost_test_counseling () {
					return this.post_test_counseling;
				}
				
			    public String knowledge_assessment;

				public String getKnowledge_assessment () {
					return this.knowledge_assessment;
				}
				
			    public String tb_screening;

				public String getTb_screening () {
					return this.tb_screening;
				}
				
			    public String sti_screening;

				public String getSti_screening () {
					return this.sti_screening;
				}
				
			    public String risk_assessment;

				public String getRisk_assessment () {
					return this.risk_assessment;
				}
				
			    public String recency;

				public String getRecency () {
					return this.recency;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HTS.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HTS.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HTS = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HTS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HTS, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HTS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HTS) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.test1 = readString(dis);
					
					this.confirmatory_test = readString(dis);
					
					this.tie_breaker_test = readString(dis);
					
					this.date_visit = readDate(dis);
					
						this.archived = readInteger(dis);
					
					this.date_created = readDate(dis);
					
					this.date_modified = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.modified_by = readString(dis);
					
					this.captured_by = readString(dis);
					
					this.uuid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.previously_tested = null;
           				} else {
           			    	this.previously_tested = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.index_testing = null;
           				} else {
           			    	this.index_testing = dis.readBoolean();
           				}
					
						this.num_children = readInteger(dis);
					
						this.num_wives = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.first_time_visit = null;
           				} else {
           			    	this.first_time_visit = dis.readBoolean();
           				}
					
					this.client_code = readString(dis);
					
					this.index_client_code = readString(dis);
					
					this.type_counseling = readString(dis);
					
					this.referred_from = readString(dis);
					
					this.testing_setting = readString(dis);
					
					this.target_group = readString(dis);
					
					this.extra = readString(dis);
					
					this.post_test_counseling = readString(dis);
					
					this.knowledge_assessment = readString(dis);
					
					this.tb_screening = readString(dis);
					
					this.sti_screening = readString(dis);
					
					this.risk_assessment = readString(dis);
					
					this.recency = readString(dis);
					
					this.datim_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.test1,dos);
					
					// String
				
						writeString(this.confirmatory_test,dos);
					
					// String
				
						writeString(this.tie_breaker_test,dos);
					
					// java.util.Date
				
						writeDate(this.date_visit,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// java.util.Date
				
						writeDate(this.date_created,dos);
					
					// java.util.Date
				
						writeDate(this.date_modified,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.modified_by,dos);
					
					// String
				
						writeString(this.captured_by,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Boolean
				
						if(this.previously_tested == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.previously_tested);
		            	}
					
					// Boolean
				
						if(this.index_testing == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.index_testing);
		            	}
					
					// Integer
				
						writeInteger(this.num_children,dos);
					
					// Integer
				
						writeInteger(this.num_wives,dos);
					
					// Boolean
				
						if(this.first_time_visit == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.first_time_visit);
		            	}
					
					// String
				
						writeString(this.client_code,dos);
					
					// String
				
						writeString(this.index_client_code,dos);
					
					// String
				
						writeString(this.type_counseling,dos);
					
					// String
				
						writeString(this.referred_from,dos);
					
					// String
				
						writeString(this.testing_setting,dos);
					
					// String
				
						writeString(this.target_group,dos);
					
					// String
				
						writeString(this.extra,dos);
					
					// String
				
						writeString(this.post_test_counseling,dos);
					
					// String
				
						writeString(this.knowledge_assessment,dos);
					
					// String
				
						writeString(this.tb_screening,dos);
					
					// String
				
						writeString(this.sti_screening,dos);
					
					// String
				
						writeString(this.risk_assessment,dos);
					
					// String
				
						writeString(this.recency,dos);
					
					// String
				
						writeString(this.datim_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",test1="+test1);
		sb.append(",confirmatory_test="+confirmatory_test);
		sb.append(",tie_breaker_test="+tie_breaker_test);
		sb.append(",date_visit="+String.valueOf(date_visit));
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",date_created="+String.valueOf(date_created));
		sb.append(",date_modified="+String.valueOf(date_modified));
		sb.append(",created_by="+created_by);
		sb.append(",modified_by="+modified_by);
		sb.append(",captured_by="+captured_by);
		sb.append(",uuid="+uuid);
		sb.append(",previously_tested="+String.valueOf(previously_tested));
		sb.append(",index_testing="+String.valueOf(index_testing));
		sb.append(",num_children="+String.valueOf(num_children));
		sb.append(",num_wives="+String.valueOf(num_wives));
		sb.append(",first_time_visit="+String.valueOf(first_time_visit));
		sb.append(",client_code="+client_code);
		sb.append(",index_client_code="+index_client_code);
		sb.append(",type_counseling="+type_counseling);
		sb.append(",referred_from="+referred_from);
		sb.append(",testing_setting="+testing_setting);
		sb.append(",target_group="+target_group);
		sb.append(",extra="+extra);
		sb.append(",post_test_counseling="+post_test_counseling);
		sb.append(",knowledge_assessment="+knowledge_assessment);
		sb.append(",tb_screening="+tb_screening);
		sb.append(",sti_screening="+sti_screening);
		sb.append(",risk_assessment="+risk_assessment);
		sb.append(",recency="+recency);
		sb.append(",datim_id="+datim_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(hts_extractStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HTS = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HTS = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String test1;

				public String getTest1 () {
					return this.test1;
				}
				
			    public String confirmatory_test;

				public String getConfirmatory_test () {
					return this.confirmatory_test;
				}
				
			    public String tie_breaker_test;

				public String getTie_breaker_test () {
					return this.tie_breaker_test;
				}
				
			    public java.util.Date date_visit;

				public java.util.Date getDate_visit () {
					return this.date_visit;
				}
				
			    public Integer archived;

				public Integer getArchived () {
					return this.archived;
				}
				
			    public java.util.Date date_created;

				public java.util.Date getDate_created () {
					return this.date_created;
				}
				
			    public java.util.Date date_modified;

				public java.util.Date getDate_modified () {
					return this.date_modified;
				}
				
			    public String created_by;

				public String getCreated_by () {
					return this.created_by;
				}
				
			    public String modified_by;

				public String getModified_by () {
					return this.modified_by;
				}
				
			    public String captured_by;

				public String getCaptured_by () {
					return this.captured_by;
				}
				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public Boolean previously_tested;

				public Boolean getPreviously_tested () {
					return this.previously_tested;
				}
				
			    public Boolean index_testing;

				public Boolean getIndex_testing () {
					return this.index_testing;
				}
				
			    public Integer num_children;

				public Integer getNum_children () {
					return this.num_children;
				}
				
			    public Integer num_wives;

				public Integer getNum_wives () {
					return this.num_wives;
				}
				
			    public Boolean first_time_visit;

				public Boolean getFirst_time_visit () {
					return this.first_time_visit;
				}
				
			    public String client_code;

				public String getClient_code () {
					return this.client_code;
				}
				
			    public String index_client_code;

				public String getIndex_client_code () {
					return this.index_client_code;
				}
				
			    public String type_counseling;

				public String getType_counseling () {
					return this.type_counseling;
				}
				
			    public String referred_from;

				public String getReferred_from () {
					return this.referred_from;
				}
				
			    public String testing_setting;

				public String getTesting_setting () {
					return this.testing_setting;
				}
				
			    public String target_group;

				public String getTarget_group () {
					return this.target_group;
				}
				
			    public String extra;

				public String getExtra () {
					return this.extra;
				}
				
			    public String post_test_counseling;

				public String getPost_test_counseling () {
					return this.post_test_counseling;
				}
				
			    public String knowledge_assessment;

				public String getKnowledge_assessment () {
					return this.knowledge_assessment;
				}
				
			    public String tb_screening;

				public String getTb_screening () {
					return this.tb_screening;
				}
				
			    public String sti_screening;

				public String getSti_screening () {
					return this.sti_screening;
				}
				
			    public String risk_assessment;

				public String getRisk_assessment () {
					return this.risk_assessment;
				}
				
			    public String recency;

				public String getRecency () {
					return this.recency;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HTS.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HTS.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HTS = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HTS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HTS, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HTS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HTS) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.test1 = readString(dis);
					
					this.confirmatory_test = readString(dis);
					
					this.tie_breaker_test = readString(dis);
					
					this.date_visit = readDate(dis);
					
						this.archived = readInteger(dis);
					
					this.date_created = readDate(dis);
					
					this.date_modified = readDate(dis);
					
					this.created_by = readString(dis);
					
					this.modified_by = readString(dis);
					
					this.captured_by = readString(dis);
					
					this.uuid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.previously_tested = null;
           				} else {
           			    	this.previously_tested = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.index_testing = null;
           				} else {
           			    	this.index_testing = dis.readBoolean();
           				}
					
						this.num_children = readInteger(dis);
					
						this.num_wives = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.first_time_visit = null;
           				} else {
           			    	this.first_time_visit = dis.readBoolean();
           				}
					
					this.client_code = readString(dis);
					
					this.index_client_code = readString(dis);
					
					this.type_counseling = readString(dis);
					
					this.referred_from = readString(dis);
					
					this.testing_setting = readString(dis);
					
					this.target_group = readString(dis);
					
					this.extra = readString(dis);
					
					this.post_test_counseling = readString(dis);
					
					this.knowledge_assessment = readString(dis);
					
					this.tb_screening = readString(dis);
					
					this.sti_screening = readString(dis);
					
					this.risk_assessment = readString(dis);
					
					this.recency = readString(dis);
					
					this.datim_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.test1,dos);
					
					// String
				
						writeString(this.confirmatory_test,dos);
					
					// String
				
						writeString(this.tie_breaker_test,dos);
					
					// java.util.Date
				
						writeDate(this.date_visit,dos);
					
					// Integer
				
						writeInteger(this.archived,dos);
					
					// java.util.Date
				
						writeDate(this.date_created,dos);
					
					// java.util.Date
				
						writeDate(this.date_modified,dos);
					
					// String
				
						writeString(this.created_by,dos);
					
					// String
				
						writeString(this.modified_by,dos);
					
					// String
				
						writeString(this.captured_by,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Boolean
				
						if(this.previously_tested == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.previously_tested);
		            	}
					
					// Boolean
				
						if(this.index_testing == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.index_testing);
		            	}
					
					// Integer
				
						writeInteger(this.num_children,dos);
					
					// Integer
				
						writeInteger(this.num_wives,dos);
					
					// Boolean
				
						if(this.first_time_visit == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.first_time_visit);
		            	}
					
					// String
				
						writeString(this.client_code,dos);
					
					// String
				
						writeString(this.index_client_code,dos);
					
					// String
				
						writeString(this.type_counseling,dos);
					
					// String
				
						writeString(this.referred_from,dos);
					
					// String
				
						writeString(this.testing_setting,dos);
					
					// String
				
						writeString(this.target_group,dos);
					
					// String
				
						writeString(this.extra,dos);
					
					// String
				
						writeString(this.post_test_counseling,dos);
					
					// String
				
						writeString(this.knowledge_assessment,dos);
					
					// String
				
						writeString(this.tb_screening,dos);
					
					// String
				
						writeString(this.sti_screening,dos);
					
					// String
				
						writeString(this.risk_assessment,dos);
					
					// String
				
						writeString(this.recency,dos);
					
					// String
				
						writeString(this.datim_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",test1="+test1);
		sb.append(",confirmatory_test="+confirmatory_test);
		sb.append(",tie_breaker_test="+tie_breaker_test);
		sb.append(",date_visit="+String.valueOf(date_visit));
		sb.append(",archived="+String.valueOf(archived));
		sb.append(",date_created="+String.valueOf(date_created));
		sb.append(",date_modified="+String.valueOf(date_modified));
		sb.append(",created_by="+created_by);
		sb.append(",modified_by="+modified_by);
		sb.append(",captured_by="+captured_by);
		sb.append(",uuid="+uuid);
		sb.append(",previously_tested="+String.valueOf(previously_tested));
		sb.append(",index_testing="+String.valueOf(index_testing));
		sb.append(",num_children="+String.valueOf(num_children));
		sb.append(",num_wives="+String.valueOf(num_wives));
		sb.append(",first_time_visit="+String.valueOf(first_time_visit));
		sb.append(",client_code="+client_code);
		sb.append(",index_client_code="+index_client_code);
		sb.append(",type_counseling="+type_counseling);
		sb.append(",referred_from="+referred_from);
		sb.append(",testing_setting="+testing_setting);
		sb.append(",target_group="+target_group);
		sb.append(",extra="+extra);
		sb.append(",post_test_counseling="+post_test_counseling);
		sb.append(",knowledge_assessment="+knowledge_assessment);
		sb.append(",tb_screening="+tb_screening);
		sb.append(",sti_screening="+sti_screening);
		sb.append(",risk_assessment="+risk_assessment);
		sb.append(",recency="+recency);
		sb.append(",datim_id="+datim_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_2Process(globalMap);
		tDBInput_3Process(globalMap);
		tDBInput_4Process(globalMap);
		tDBInput_5Process(globalMap);
		tDBInput_6Process(globalMap);

		hts_extractStruct hts_extract = new hts_extractStruct();
hts_target_group_setting_mapStruct hts_target_group_setting_map = new hts_target_group_setting_mapStruct();
hts_extract_before_finalStruct hts_extract_before_final = new hts_extract_before_finalStruct();
hts_finalStruct hts_final = new hts_finalStruct();







	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"hts_final");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = context.LAMISPlus_Schema;
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("hts_client");
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("hts_client");
}

        int updateKeyCount_tDBOutput_1 = 1;
        if(updateKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_1 = "jdbc:postgresql://"+context.LAMISPlus_Server+":"+context.LAMISPlus_Port+"/"+context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
    dbUser_tDBOutput_1 = context.LAMISPlus_Login;

	final String decryptedPassword_tDBOutput_1 = context.LAMISPlus_Password; 

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;



int count_tDBOutput_1=0;
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_1 + "\" WHERE \"id\" = ?");
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1 + "\" (\"id\",\"" + "test1" + "\",\"" + "confirmatory_test" + "\",\"" + "tie_breaker_test" + "\",\"client_code\",\"date_visit\",\"archived\",\"date_created\",\"date_modified\",\"created_by\",\"modified_by\",\"captured_by\",\"uuid\",\"previously_tested\",\"index_client\",\"num_children\",\"num_wives\",\"first_time_visit\",\"index_client_code\",\"" + "extra" + "\",\"" + "post_test_counseling" + "\",\"" + "knowledge_assessment" + "\",\"" + "tb_screening" + "\",\"" + "sti_screening" + "\",\"" + "risk_assessment" + "\",\"target_group\",\"testing_setting\",\"referred_from\",\"type_counseling\",\"facility_id\",\"" + "recency" + "\") VALUES (?," + "?::json" + "," + "?::json" + "," + "?::json" + ",?,?,?,?,?,?,?,?,?,?,?,?,?,?,?," + "?::json" + "," + "?::json" + "," + "?::json" + "," + "?::json" + "," + "?::json" + "," + "?::json" + ",?,?,?,?,?," + "?::json" + ")";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
	    String update_tDBOutput_1 = "UPDATE \"" + tableName_tDBOutput_1 + "\" SET \"" + "test1" + "\" = " + "?::json" + ",\"" + "confirmatory_test" + "\" = " + "?::json" + ",\"" + "tie_breaker_test" + "\" = " + "?::json" + ",\"client_code\" = ?,\"date_visit\" = ?,\"archived\" = ?,\"date_created\" = ?,\"date_modified\" = ?,\"created_by\" = ?,\"modified_by\" = ?,\"captured_by\" = ?,\"uuid\" = ?,\"previously_tested\" = ?,\"index_client\" = ?,\"num_children\" = ?,\"num_wives\" = ?,\"first_time_visit\" = ?,\"index_client_code\" = ?,\"" + "extra" + "\" = " + "?::json" + ",\"" + "post_test_counseling" + "\" = " + "?::json" + ",\"" + "knowledge_assessment" + "\" = " + "?::json" + ",\"" + "tb_screening" + "\" = " + "?::json" + ",\"" + "sti_screening" + "\" = " + "?::json" + ",\"" + "risk_assessment" + "\" = " + "?::json" + ",\"target_group\" = ?,\"testing_setting\" = ?,\"referred_from\" = ?,\"type_counseling\" = ?,\"facility_id\" = ?,\"" + "recency" + "\" = " + "?::json" + " WHERE \"id\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
	    resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"hts_extract_before_final");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
					globalMap.get( "tHash_Lookup_row3" ))
					;					
					
	

row3Struct row3HashKey = new row3Struct();
row3Struct row3Default = new row3Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
hts_finalStruct hts_final_tmp = new hts_finalStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"hts_target_group_setting_map");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<referred_from_codesetStruct> tHash_Lookup_referred_from_codeset = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<referred_from_codesetStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<referred_from_codesetStruct>) 
					globalMap.get( "tHash_Lookup_referred_from_codeset" ))
					;					
					
	

referred_from_codesetStruct referred_from_codesetHashKey = new referred_from_codesetStruct();
referred_from_codesetStruct referred_from_codesetDefault = new referred_from_codesetStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) 
					globalMap.get( "tHash_Lookup_row1" ))
					;					
					
	

row1Struct row1HashKey = new row1Struct();
row1Struct row1Default = new row1Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
hts_extract_before_finalStruct hts_extract_before_final_tmp = new hts_extract_before_finalStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"hts_extract");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Target_Group_CodesetStruct> tHash_Lookup_Target_Group_Codeset = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Target_Group_CodesetStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Target_Group_CodesetStruct>) 
					globalMap.get( "tHash_Lookup_Target_Group_Codeset" ))
					;					
					
	

Target_Group_CodesetStruct Target_Group_CodesetHashKey = new Target_Group_CodesetStruct();
Target_Group_CodesetStruct Target_Group_CodesetDefault = new Target_Group_CodesetStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Testing_Setting_CodesetStruct> tHash_Lookup_Testing_Setting_Codeset = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Testing_Setting_CodesetStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Testing_Setting_CodesetStruct>) 
					globalMap.get( "tHash_Lookup_Testing_Setting_Codeset" ))
					;					
					
	

Testing_Setting_CodesetStruct Testing_Setting_CodesetHashKey = new Testing_Setting_CodesetStruct();
Testing_Setting_CodesetStruct Testing_Setting_CodesetDefault = new Testing_Setting_CodesetStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
hts_target_group_setting_mapStruct hts_target_group_setting_map_tmp = new hts_target_group_setting_mapStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.LAMIS3_Login;
				
				
	final String decryptedPassword_tDBInput_1 = context.LAMIS3_Password; 
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
				String url_tDBInput_1 = "jdbc:postgresql://" + context.LAMIS3_Server + ":" + context.LAMIS3_Port + "/" + context.LAMIS3_Database + "?" + context.LAMIS3_AdditionalParams;
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
				conn_tDBInput_1.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT h.id as id, json_build_object(\n  'date', (CASE\n    WHEN hiv_test_result ->> 'screeningTestDate'::varchar IS NO"
+"T NULL \n	THEN hiv_test_result ->> 'screeningTestDate'::varchar\n	WHEN hiv_test_result ->> 'initialScreeningTestDate'::v"
+"archar IS NOT NULL \n	THEN hiv_test_result ->> 'initialScreeningTestDate'::varchar\n	WHEN h.date_visit IS NOT NULL THEN "
+"h.date_visit::VARCHAR\n	ELSE\n	null\n  END),\n  'result', \n	(CASE\n    WHEN lower(trim(left(hiv_test_result ->>'screeni"
+"ngTestResult'::VARCHAR, 2)))='re' THEN 'Yes'\n	WHEN lower(trim(left(hiv_test_result ->>'screeningTestResult'::VARCHAR, 2"
+")))='no' THEN 'No'\n	ELSE\n	null\n  END)\n) test1,\njson_build_object(\n  'date', hiv_test_result ->> 'confirmatoryTestD"
+"ate'::varchar, \n'result', \n	(CASE\n    WHEN lower(trim(left(hiv_test_result ->>'confirmatoryTestResult'::VARCHAR, 2)))"
+"='re' THEN 'Yes'\n	WHEN lower(trim(left(hiv_test_result ->>'confirmatoryTestResult'::VARCHAR, 2)))='no' THEN 'No'\n	ELSE"
+"\n	null\n  END)	\n) confirmatory_test,\njson_build_object(\n  'date', hiv_test_result ->> 'tieBreakerTestDate'::varchar,"
+" \n'result', \n	  (CASE\n    WHEN lower(trim(left(hiv_test_result ->>'tieBreakerTestResult'::VARCHAR, 2)))='re' THEN 'Ye"
+"s'\n	WHEN lower(trim(left(hiv_test_result ->>'tieBreakerTestResult'::VARCHAR, 2)))='no' THEN 'No'\n	ELSE\n	null\n  END)	"
+"\n) tie_breaker_test, h.date_visit::date, h.archived::integer, \nh.created_at::timestamp as date_created,\nh.updated_at:"
+":timestamp as date_modified,\n'ETL' as created_by,\n'ETL' as modified_by,\nh.completed_by as captured_by,\nh.hts_uuid as"
+" uuid,\nh.previously_tested,\n  CASE\n    WHEN lower(trim(h.index_testing))='yes' THEN true\n	WHEN lower(trim(h.index_te"
+"sting))='no' THEN false\n	ELSE\n	null\n  END \n  AS index_testing,\nh.number_of_children as num_children,\nh.number_of_w"
+"ives as num_wives,\n  CASE\n    WHEN lower(trim(h.first_time_visit))='yes' THEN true\n	WHEN lower(trim(h.first_time_visi"
+"t))='no' THEN false\n	ELSE\n	null\n  END \n  AS first_time_visit,\nh.client_code::varchar,\nh.index_client_code,\n\n(CAS"
+"E\n    WHEN lower(trim(left(h.type_of_counseling,4)))='' THEN null\n	ELSE\n	lower(trim(left(h.type_of_counseling,4)))\n "
+" END) as type_counseling,\n\nlower(left(h.referred_from,4)) as referred_from,\nlower(left(h.setting,4)) as testing_setti"
+"ng,\nlower(left(h.target_group,4)) as target_group,\njson_build_object('surname', h.surname,\n				  'first_name', h.firs"
+"t_name,\n				  'middle_name', h.middle_name,\n				  'date_of_birth', h.date_of_birth::varchar,\n				  'age', h.age,\n			"
+"	  'gender', h.gender,\n				  'phone_number', h.phone_number,\n				  'state_of_residence', s.name,\n				  'lga_of_reside"
+"nce', l.name,\n				  'marital_status', h.marital_status)::jsonb as extra,\n				  json_build_object('hivTestBefore', '',"
+"\n				'hivTestResult', (CASE\n    WHEN lower(trim(left(h.post_test_counseling->>'hivResult'::VARCHAR, 2)))='po' THEN 'Tru"
+"e'\n	WHEN lower(trim(left(h.post_test_counseling->>'hivResult'::VARCHAR, 2)))='ne' THEN 'False'\n	ELSE\n	'False'\n  END)"
+",\n				'informationFp', h.post_test_counseling->>'providedWithInformationOnFPAndDualContraception',\n				'riskReduction'"
+", h.post_test_counseling->>'riskReductionPlanDeveloped',\n				'correctCondomUse', h.post_test_counseling->>'correctCondo"
+"mUseDemonstrated',\n				'hivRequestResult', h.post_test_counseling->>'hivRequestAndResultFormSignedByTester',\n				'chil"
+"drenHivtesting', h.post_test_counseling->>'willBringOwnChildrenForHIVTesting',\n				'hivRequestResultCt', h.post_test_co"
+"unseling->>'hivRequestAndResultFormFilledWithCTIForm',\n				'partnerFpUseCondom', h.post_test_counseling->>'clientOrPart"
+"nerUseCondomsAsOneFPMethods',\n				'postTestCounseling', h.post_test_counseling->>'postTestCounsellingDone',\n				'postT"
+"estDisclosure', h.post_test_counseling->>'postTestDisclosurePlanDeveloped',\n				'referredToServices', h.post_test_couns"
+"eling->>'clientReferredToOtherServices',\n				'partnerFpThanCondom', h.post_test_counseling->>'clientOrPartnerUseFPMetho"
+"dsOtherThanCondoms',\n				'bringPartnerHivtesting', h.post_test_counseling->>'willBringPartnerForHIVTesting',\n				'cond"
+"omProvidedToClient', h.post_test_counseling->>'condomsProvidedToClient',\n				'clientReceivedHivTestResult', h.post_test"
+"_counseling->>'clientReceivedHIVTestResult',\n				'unprotectedSexRegularPartnerLastThreeMonth', h.post_test_counseling->"
+">'testedForHIVBeforeWithinThisYear'\n				) as post_test_counseling,\n				\n				json_build_object('informConsentHivTest',"
+" h.pre_test_counseling->'knowledgeAssessment'->>'informedConsentForHIVTestingGiven',\n				'clientInformRiskkHivTrans', h"
+".pre_test_counseling->'knowledgeAssessment'->>'clientInformedOfHIVTransmissionRiskFactors',\n				'previousTestedHIVNegat"
+"ive', h.pre_test_counseling->'knowledgeAssessment'->> 'previouslyTestedHIVNegative',\n			  'clientInformHivTransRoutes',"
+" h.pre_test_counseling->'knowledgeAssessment'->>'clientInformedAboutHIVTransmissionRoutes',\n			  'timeLastHIVNegativeTe"
+"stResult', '',\n			  'clientInformPossibleTestResult',h.pre_test_counseling->'knowledgeAssessment'->>'clientInformedAbou"
+"tPossibleTestResults',\n			  'clientInformPreventingsHivTrans', h.pre_test_counseling->'knowledgeAssessment'->>'clientIn"
+"formedAboutPreventingHIV',\n				'clientPregnant', h.pre_test_counseling->'knowledgeAssessment'->>'clientPregnant'\n				)"
+"::jsonb as knowledge_assessment,\n				\n				json_build_object('fever',  h.pre_test_counseling->'clinicalTBScreening'->>'"
+"fever',\n    'weightLoss', h.pre_test_counseling->'clinicalTBScreening'->>'weightLoss',\n    'nightSweats', h.pre_test_c"
+"ounseling->'clinicalTBScreening'->>'nightSweats',\n    'currentlyCough', h.pre_test_counseling->'clinicalTBScreening'->>"
+"'currentlyCough',\n    'lymphadenopath', h.pre_test_counseling->'clinicalTBScreening'->>'lymphadenopath'\n	) as tb_scree"
+"ning,\n	\n	json_build_object('scrotalSwellingAndPain',  h.pre_test_counseling->'syndromicSTIScreening'->>'scrotalSwellin"
+"gAndPain',\n    'genitalSoreOrSwollenInguinalLymphNodes', h.pre_test_counseling->'syndromicSTIScreening'->>'genitalSoreO"
+"rSwollenInguinalLymphNodes',\n    'vaginalDischargeOrBurningWhenUrinating', h.pre_test_counseling->'syndromicSTIScreenin"
+"g'->>'vaginalDischargeOrBurningWhenUrinating',\n    'urethralDischargeOrBurningWhenUrinating', h.pre_test_counseling->'s"
+"yndromicSTIScreening'->>'urethralDischargeOrBurningWhenUrinating',\n    'lowerAbdominalPainsWithOrWithoutVaginalDischarg"
+"e', h.pre_test_counseling->'syndromicSTIScreening'->>'lowerAbdominalPainsWithOrWithoutVaginalDischarge'\n	) as sti_scree"
+"ning,\n	\n	json_build_object('stiInLast3Months',  h.pre_test_counseling->'hivRiskAssessment'->>'stiInLast3Months',\n    "
+"'everHadSexualIntercourse', h.pre_test_counseling->'hivRiskAssessment'->>'everHadSexualIntercourse',\n    'bloodTransfus"
+"ionInLast3Months', h.pre_test_counseling->'hivRiskAssessment'->>'bloodTransfusionInLast3Months',\n    'moreThan1SexPartn"
+"erDuringLast3Months', h.pre_test_counseling->'hivRiskAssessment'->>'moreThan1SexPartnerDuringLast3Months',\n    'unprote"
+"ctedSexWithCasualPartnerInLast3Months', h.pre_test_counseling->'hivRiskAssessment'->>'unprotectedSexWithCasualPartnerInL"
+"ast3Months',\n	'unprotectedSexWithRegularPartnerInLast3Months', h.pre_test_counseling->'hivRiskAssessment'->>'unprotecte"
+"dSexWithRegularPartnerInLast3Months'\n	) as risk_assessment, \n\njson_build_object('optOutRTRI',  h.recency_testing->>'c"
+"onsent',\n    'rencencyId',  h.recency_testing->>'recencyNumber',\n    'sampleType',  h.recency_testing->>'sampleType',"
+"\n    'controlLine',  h.recency_testing->>'controlLine',\n    'hasViralLoad',  h.recency_testing->>'viralLoadRequest',\n	"
+"'longTermLine',  h.recency_testing->>'viralLoadRequest',\n	'recencyResult',  h.recency_testing->>'recencyResult',\n	'sam"
+"pleTestDate',  h.recency_testing->>'testDate',\n	'receivingPcrLab',  h.recency_testing->>'pcrLab',\n	'verififcationLine'"
+",  h.recency_testing->>'verificationLine',\n	'finalRecencyResult',  h.recency_testing->>'finalRecencyTestResult',\n	'opt"
+"OutRTRITestDate',  '',\n	'optOutRTRITestName',  h.recency_testing->>'testName',\n	'sampleCollectedDate',  h.recency_test"
+"ing->>'dateSampleCollected',\n	'sampleReferanceNumber',  h.recency_testing->>'sampleReferenceNumber',\n	'dateSampleSentT"
+"oPCRLab',  h.recency_testing->>'dateSampleSent',\n	'rencencyInterpretation',  h.recency_testing->>'recencyInterpretation"
+"',\n	'viralLoadResultClassification',  h.recency_testing->>'viralLoadClassification',\n	'viralLoadConfirmationTestDate',"
+"  h.recency_testing->>'viralLoadConfirmationTestDate',\n	'viralLoadConfirmationResult',  h.recency_testing->>'viralLoadC"
+"onfirmationResult',\n	'rapidRecencyAssay',  h.recency_testing->>'rapidRecencyAssay'\n	) as recency,\nn.datim_id\n				  "
+"\nfrom hts_new h\nINNER JOIN state s ON h.state_of_residence = s.id\nINNER JOIN lga l ON h.lga_of_residence = l.id\nINNER"
+" JOIN ndr_facility n ON n.id=h.facility_id";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								hts_extract.id = 0;
							} else {
		                          
            hts_extract.id = rs_tDBInput_1.getInt(1);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								hts_extract.test1 = null;
							} else {
	                         		
        	hts_extract.test1 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								hts_extract.confirmatory_test = null;
							} else {
	                         		
        	hts_extract.confirmatory_test = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								hts_extract.tie_breaker_test = null;
							} else {
	                         		
        	hts_extract.tie_breaker_test = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								hts_extract.date_visit = null;
							} else {
										
			hts_extract.date_visit = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 5);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								hts_extract.archived = null;
							} else {
		                          
            hts_extract.archived = rs_tDBInput_1.getInt(6);
            if(rs_tDBInput_1.wasNull()){
                    hts_extract.archived = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								hts_extract.date_created = null;
							} else {
										
			hts_extract.date_created = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 7);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								hts_extract.date_modified = null;
							} else {
										
			hts_extract.date_modified = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 8);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								hts_extract.created_by = null;
							} else {
	                         		
        	hts_extract.created_by = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								hts_extract.modified_by = null;
							} else {
	                         		
        	hts_extract.modified_by = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								hts_extract.captured_by = null;
							} else {
	                         		
        	hts_extract.captured_by = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								hts_extract.uuid = null;
							} else {
	                         		
        	hts_extract.uuid = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								hts_extract.previously_tested = null;
							} else {
	                         		
            hts_extract.previously_tested = rs_tDBInput_1.getBoolean(13);
            if(rs_tDBInput_1.wasNull()){
                    hts_extract.previously_tested = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								hts_extract.index_testing = null;
							} else {
	                         		
            hts_extract.index_testing = rs_tDBInput_1.getBoolean(14);
            if(rs_tDBInput_1.wasNull()){
                    hts_extract.index_testing = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								hts_extract.num_children = null;
							} else {
		                          
            hts_extract.num_children = rs_tDBInput_1.getInt(15);
            if(rs_tDBInput_1.wasNull()){
                    hts_extract.num_children = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								hts_extract.num_wives = null;
							} else {
		                          
            hts_extract.num_wives = rs_tDBInput_1.getInt(16);
            if(rs_tDBInput_1.wasNull()){
                    hts_extract.num_wives = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								hts_extract.first_time_visit = null;
							} else {
	                         		
            hts_extract.first_time_visit = rs_tDBInput_1.getBoolean(17);
            if(rs_tDBInput_1.wasNull()){
                    hts_extract.first_time_visit = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								hts_extract.client_code = null;
							} else {
	                         		
        	hts_extract.client_code = routines.system.JDBCUtil.getString(rs_tDBInput_1, 18, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								hts_extract.index_client_code = null;
							} else {
	                         		
        	hts_extract.index_client_code = routines.system.JDBCUtil.getString(rs_tDBInput_1, 19, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								hts_extract.type_counseling = null;
							} else {
	                         		
        	hts_extract.type_counseling = routines.system.JDBCUtil.getString(rs_tDBInput_1, 20, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 21) {
								hts_extract.referred_from = null;
							} else {
	                         		
        	hts_extract.referred_from = routines.system.JDBCUtil.getString(rs_tDBInput_1, 21, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 22) {
								hts_extract.testing_setting = null;
							} else {
	                         		
        	hts_extract.testing_setting = routines.system.JDBCUtil.getString(rs_tDBInput_1, 22, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 23) {
								hts_extract.target_group = null;
							} else {
	                         		
        	hts_extract.target_group = routines.system.JDBCUtil.getString(rs_tDBInput_1, 23, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 24) {
								hts_extract.extra = null;
							} else {
	                         		
        	hts_extract.extra = routines.system.JDBCUtil.getString(rs_tDBInput_1, 24, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 25) {
								hts_extract.post_test_counseling = null;
							} else {
	                         		
        	hts_extract.post_test_counseling = routines.system.JDBCUtil.getString(rs_tDBInput_1, 25, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 26) {
								hts_extract.knowledge_assessment = null;
							} else {
	                         		
        	hts_extract.knowledge_assessment = routines.system.JDBCUtil.getString(rs_tDBInput_1, 26, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 27) {
								hts_extract.tb_screening = null;
							} else {
	                         		
        	hts_extract.tb_screening = routines.system.JDBCUtil.getString(rs_tDBInput_1, 27, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 28) {
								hts_extract.sti_screening = null;
							} else {
	                         		
        	hts_extract.sti_screening = routines.system.JDBCUtil.getString(rs_tDBInput_1, 28, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 29) {
								hts_extract.risk_assessment = null;
							} else {
	                         		
        	hts_extract.risk_assessment = routines.system.JDBCUtil.getString(rs_tDBInput_1, 29, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 30) {
								hts_extract.recency = null;
							} else {
	                         		
        	hts_extract.recency = routines.system.JDBCUtil.getString(rs_tDBInput_1, 30, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 31) {
								hts_extract.datim_id = null;
							} else {
	                         		
        	hts_extract.datim_id = routines.system.JDBCUtil.getString(rs_tDBInput_1, 31, false);
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"hts_extract");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "Target_Group_Codeset" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopTarget_Group_Codeset = false;
       		  	    	
       		  	    	
 							Target_Group_CodesetStruct Target_Group_CodesetObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    Target_Group_CodesetHashKey.codeset_display = hts_extract.target_group ;
                        		    		

								
		                        	Target_Group_CodesetHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_Target_Group_Codeset.lookup( Target_Group_CodesetHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_Target_Group_Codeset != null && tHash_Lookup_Target_Group_Codeset.getCount(Target_Group_CodesetHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'Target_Group_Codeset' and it contains more one result from keys :  Target_Group_Codeset.codeset_display = '" + Target_Group_CodesetHashKey.codeset_display + "'");
								} // G 071
							

							Target_Group_CodesetStruct Target_Group_Codeset = null;
                    		  	 
							   
                    		  	 
	       		  	    	Target_Group_CodesetStruct fromLookup_Target_Group_Codeset = null;
							Target_Group_Codeset = Target_Group_CodesetDefault;
										 
							
								 
							
							
								if (tHash_Lookup_Target_Group_Codeset !=null && tHash_Lookup_Target_Group_Codeset.hasNext()) { // G 099
								
							
								
								fromLookup_Target_Group_Codeset = tHash_Lookup_Target_Group_Codeset.next();

							
							
								} // G 099
							
							

							if(fromLookup_Target_Group_Codeset != null) {
								Target_Group_Codeset = fromLookup_Target_Group_Codeset;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "Testing_Setting_Codeset" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopTesting_Setting_Codeset = false;
       		  	    	
       		  	    	
 							Testing_Setting_CodesetStruct Testing_Setting_CodesetObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    Testing_Setting_CodesetHashKey.codeset_display = hts_extract.testing_setting;
                        		    		

								
		                        	Testing_Setting_CodesetHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_Testing_Setting_Codeset.lookup( Testing_Setting_CodesetHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_Testing_Setting_Codeset != null && tHash_Lookup_Testing_Setting_Codeset.getCount(Testing_Setting_CodesetHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'Testing_Setting_Codeset' and it contains more one result from keys :  Testing_Setting_Codeset.codeset_display = '" + Testing_Setting_CodesetHashKey.codeset_display + "'");
								} // G 071
							

							Testing_Setting_CodesetStruct Testing_Setting_Codeset = null;
                    		  	 
							   
                    		  	 
	       		  	    	Testing_Setting_CodesetStruct fromLookup_Testing_Setting_Codeset = null;
							Testing_Setting_Codeset = Testing_Setting_CodesetDefault;
										 
							
								 
							
							
								if (tHash_Lookup_Testing_Setting_Codeset !=null && tHash_Lookup_Testing_Setting_Codeset.hasNext()) { // G 099
								
							
								
								fromLookup_Testing_Setting_Codeset = tHash_Lookup_Testing_Setting_Codeset.next();

							
							
								} // G 099
							
							

							if(fromLookup_Testing_Setting_Codeset != null) {
								Testing_Setting_Codeset = fromLookup_Testing_Setting_Codeset;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

hts_target_group_setting_map = null;


// # Output table : 'hts_target_group_setting_map'
hts_target_group_setting_map_tmp.id = hts_extract.id ;
hts_target_group_setting_map_tmp.test1 = hts_extract.test1 ;
hts_target_group_setting_map_tmp.confirmatory_test = hts_extract.confirmatory_test ;
hts_target_group_setting_map_tmp.tie_breaker_test = hts_extract.tie_breaker_test ;
hts_target_group_setting_map_tmp.client_code = hts_extract.client_code ;
hts_target_group_setting_map_tmp.date_visit = hts_extract.date_visit ;
hts_target_group_setting_map_tmp.archived = hts_extract.archived ;
hts_target_group_setting_map_tmp.date_created = hts_extract.date_created ;
hts_target_group_setting_map_tmp.date_modified = hts_extract.date_modified ;
hts_target_group_setting_map_tmp.created_by = hts_extract.created_by ;
hts_target_group_setting_map_tmp.modified_by = hts_extract.modified_by ;
hts_target_group_setting_map_tmp.captured_by = hts_extract.captured_by ;
hts_target_group_setting_map_tmp.uuid = hts_extract.uuid ;
hts_target_group_setting_map_tmp.previously_tested = hts_extract.previously_tested ;
hts_target_group_setting_map_tmp.index_testing = hts_extract.index_testing ;
hts_target_group_setting_map_tmp.num_children = hts_extract.num_children ;
hts_target_group_setting_map_tmp.num_wives = hts_extract.num_wives ;
hts_target_group_setting_map_tmp.first_time_visit = hts_extract.first_time_visit ;
hts_target_group_setting_map_tmp.index_client_code = hts_extract.index_client_code ;
hts_target_group_setting_map_tmp.type_counseling = hts_extract.type_counseling ;
hts_target_group_setting_map_tmp.referred_from = hts_extract.referred_from ;
hts_target_group_setting_map_tmp.extra = hts_extract.extra ;
hts_target_group_setting_map_tmp.post_test_counseling = hts_extract.post_test_counseling ;
hts_target_group_setting_map_tmp.knowledge_assessment = hts_extract.knowledge_assessment ;
hts_target_group_setting_map_tmp.tb_screening = hts_extract.tb_screening ;
hts_target_group_setting_map_tmp.sti_screening = hts_extract.sti_screening ;
hts_target_group_setting_map_tmp.risk_assessment = hts_extract.risk_assessment ;
hts_target_group_setting_map_tmp.target_group = Target_Group_Codeset.code ;
hts_target_group_setting_map_tmp.testing_setting = Testing_Setting_Codeset.code ;
hts_target_group_setting_map_tmp.datim_id = hts_extract.datim_id ;
hts_target_group_setting_map_tmp.recency = hts_extract.recency ;
hts_target_group_setting_map = hts_target_group_setting_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "hts_target_group_setting_map"
if(hts_target_group_setting_map != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"hts_target_group_setting_map");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "referred_from_codeset" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopreferred_from_codeset = false;
       		  	    	
       		  	    	
 							referred_from_codesetStruct referred_from_codesetObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    referred_from_codesetHashKey.codeset_display = hts_target_group_setting_map.referred_from ;
                        		    		

								
		                        	referred_from_codesetHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_referred_from_codeset.lookup( referred_from_codesetHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_referred_from_codeset != null && tHash_Lookup_referred_from_codeset.getCount(referred_from_codesetHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'referred_from_codeset' and it contains more one result from keys :  referred_from_codeset.codeset_display = '" + referred_from_codesetHashKey.codeset_display + "'");
								} // G 071
							

							referred_from_codesetStruct referred_from_codeset = null;
                    		  	 
							   
                    		  	 
	       		  	    	referred_from_codesetStruct fromLookup_referred_from_codeset = null;
							referred_from_codeset = referred_from_codesetDefault;
										 
							
								 
							
							
								if (tHash_Lookup_referred_from_codeset !=null && tHash_Lookup_referred_from_codeset.hasNext()) { // G 099
								
							
								
								fromLookup_referred_from_codeset = tHash_Lookup_referred_from_codeset.next();

							
							
								} // G 099
							
							

							if(fromLookup_referred_from_codeset != null) {
								referred_from_codeset = fromLookup_referred_from_codeset;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row1" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow1 = false;
       		  	    	
       		  	    	
 							row1Struct row1ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row1HashKey.codeset_display = hts_target_group_setting_map.type_counseling ;
                        		    		

								
		                        	row1HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row1.lookup( row1HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row1 != null && tHash_Lookup_row1.getCount(row1HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row1' and it contains more one result from keys :  row1.codeset_display = '" + row1HashKey.codeset_display + "'");
								} // G 071
							

							row1Struct row1 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row1Struct fromLookup_row1 = null;
							row1 = row1Default;
										 
							
								 
							
							
								if (tHash_Lookup_row1 !=null && tHash_Lookup_row1.hasNext()) { // G 099
								
							
								
								fromLookup_row1 = tHash_Lookup_row1.next();

							
							
								} // G 099
							
							

							if(fromLookup_row1 != null) {
								row1 = fromLookup_row1;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

hts_extract_before_final = null;


// # Output table : 'hts_extract_before_final'
hts_extract_before_final_tmp.id = hts_target_group_setting_map.id ;
hts_extract_before_final_tmp.test1 = hts_target_group_setting_map.test1 ;
hts_extract_before_final_tmp.confirmatory_test = hts_target_group_setting_map.confirmatory_test ;
hts_extract_before_final_tmp.tie_breaker_test = hts_target_group_setting_map.tie_breaker_test ;
hts_extract_before_final_tmp.client_code = hts_target_group_setting_map.client_code ;
hts_extract_before_final_tmp.date_visit = hts_target_group_setting_map.date_visit ;
hts_extract_before_final_tmp.archived = hts_target_group_setting_map.archived ;
hts_extract_before_final_tmp.date_created = hts_target_group_setting_map.date_created ;
hts_extract_before_final_tmp.date_modified = hts_target_group_setting_map.date_modified ;
hts_extract_before_final_tmp.created_by = hts_target_group_setting_map.created_by ;
hts_extract_before_final_tmp.modified_by = hts_target_group_setting_map.modified_by ;
hts_extract_before_final_tmp.captured_by = hts_target_group_setting_map.captured_by ;
hts_extract_before_final_tmp.uuid = hts_target_group_setting_map.uuid ;
hts_extract_before_final_tmp.previously_tested = hts_target_group_setting_map.previously_tested ;
hts_extract_before_final_tmp.index_testing = hts_target_group_setting_map.index_testing ;
hts_extract_before_final_tmp.num_children = hts_target_group_setting_map.num_children ;
hts_extract_before_final_tmp.num_wives = hts_target_group_setting_map.num_wives ;
hts_extract_before_final_tmp.first_time_visit = hts_target_group_setting_map.first_time_visit ;
hts_extract_before_final_tmp.index_client_code = hts_target_group_setting_map.index_client_code ;
hts_extract_before_final_tmp.extra = hts_target_group_setting_map.extra ;
hts_extract_before_final_tmp.post_test_counseling = hts_target_group_setting_map.post_test_counseling ;
hts_extract_before_final_tmp.knowledge_assessment = hts_target_group_setting_map.knowledge_assessment ;
hts_extract_before_final_tmp.tb_screening = hts_target_group_setting_map.tb_screening ;
hts_extract_before_final_tmp.sti_screening = hts_target_group_setting_map.sti_screening ;
hts_extract_before_final_tmp.risk_assessment = hts_target_group_setting_map.risk_assessment ;
hts_extract_before_final_tmp.target_group = hts_target_group_setting_map.target_group ;
hts_extract_before_final_tmp.testing_setting = hts_target_group_setting_map.testing_setting ;
hts_extract_before_final_tmp.referred_from = referred_from_codeset.codeset_id ;
hts_extract_before_final_tmp.type_counseling = row1.codeset_id ;
hts_extract_before_final_tmp.datim_id = hts_target_group_setting_map.datim_id ;
hts_extract_before_final_tmp.recency = hts_target_group_setting_map.recency ;
hts_extract_before_final = hts_extract_before_final_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "hts_extract_before_final"
if(hts_extract_before_final != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"hts_extract_before_final");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row3" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow3 = false;
       		  	    	
       		  	    	
 							row3Struct row3ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row3HashKey.datim_id = hts_extract_before_final.datim_id ;
                        		    		

								
		                        	row3HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row3.lookup( row3HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row3 != null && tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3' and it contains more one result from keys :  row3.datim_id = '" + row3HashKey.datim_id + "'");
								} // G 071
							

							row3Struct row3 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row3Struct fromLookup_row3 = null;
							row3 = row3Default;
										 
							
								 
							
							
								if (tHash_Lookup_row3 !=null && tHash_Lookup_row3.hasNext()) { // G 099
								
							
								
								fromLookup_row3 = tHash_Lookup_row3.next();

							
							
								} // G 099
							
							

							if(fromLookup_row3 != null) {
								row3 = fromLookup_row3;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

hts_final = null;


// # Output table : 'hts_final'
hts_final_tmp.id = hts_extract_before_final.id ;
hts_final_tmp.test1 = hts_extract_before_final.test1 ;
hts_final_tmp.confirmatory_test = hts_extract_before_final.confirmatory_test ;
hts_final_tmp.tie_breaker_test = hts_extract_before_final.tie_breaker_test ;
hts_final_tmp.client_code = hts_extract_before_final.client_code ;
hts_final_tmp.date_visit = hts_extract_before_final.date_visit ;
hts_final_tmp.archived = hts_extract_before_final.archived ;
hts_final_tmp.date_created = hts_extract_before_final.date_created ;
hts_final_tmp.date_modified = hts_extract_before_final.date_modified ;
hts_final_tmp.created_by = hts_extract_before_final.created_by ;
hts_final_tmp.modified_by = hts_extract_before_final.modified_by ;
hts_final_tmp.captured_by = hts_extract_before_final.captured_by ;
hts_final_tmp.uuid = hts_extract_before_final.uuid ;
hts_final_tmp.previously_tested = hts_extract_before_final.previously_tested ;
hts_final_tmp.index_client = hts_extract_before_final.index_testing ;
hts_final_tmp.num_children = hts_extract_before_final.num_children ;
hts_final_tmp.num_wives = hts_extract_before_final.num_wives ;
hts_final_tmp.first_time_visit = hts_extract_before_final.first_time_visit ;
hts_final_tmp.index_client_code = hts_extract_before_final.index_client_code ;
hts_final_tmp.extra = hts_extract_before_final.extra ;
hts_final_tmp.post_test_counseling = hts_extract_before_final.post_test_counseling ;
hts_final_tmp.knowledge_assessment = hts_extract_before_final.knowledge_assessment ;
hts_final_tmp.tb_screening = hts_extract_before_final.tb_screening ;
hts_final_tmp.sti_screening = hts_extract_before_final.sti_screening ;
hts_final_tmp.risk_assessment = hts_extract_before_final.risk_assessment ;
hts_final_tmp.target_group = hts_extract_before_final.target_group ;
hts_final_tmp.testing_setting = hts_extract_before_final.testing_setting ;
hts_final_tmp.referred_from = (hts_extract_before_final.referred_from==null ||hts_extract_before_final.referred_from==0) ? null: hts_extract_before_final.referred_from; ;
hts_final_tmp.type_counseling = (hts_extract_before_final.type_counseling==0)?null: hts_extract_before_final.type_counseling; ;
hts_final_tmp.facility_id = (row3.id==null)?0:row3.id ;
hts_final_tmp.recency = hts_extract_before_final.recency ;
hts_final = hts_final_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "hts_final"
if(hts_final != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"hts_final");
					}
					



        whetherReject_tDBOutput_1 = false;
                    pstmt_tDBOutput_1.setLong(1, hts_final.id);

            int checkCount_tDBOutput_1 = -1;
            try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
                while(rs_tDBOutput_1.next()) {
                    checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
                }
            }
            if(checkCount_tDBOutput_1 > 0) {
                        if(hts_final.test1 == null) {
pstmtUpdate_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(1, hts_final.test1);
}

                        if(hts_final.confirmatory_test == null) {
pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(2, hts_final.confirmatory_test);
}

                        if(hts_final.tie_breaker_test == null) {
pstmtUpdate_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(3, hts_final.tie_breaker_test);
}

                        if(hts_final.client_code == null) {
pstmtUpdate_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(4, hts_final.client_code);
}

                        if(hts_final.date_visit != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(5, new java.sql.Timestamp(hts_final.date_visit.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(5, java.sql.Types.TIMESTAMP);
}

                        pstmtUpdate_tDBOutput_1.setInt(6, hts_final.archived);

                        if(hts_final.date_created != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(7, new java.sql.Timestamp(hts_final.date_created.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(7, java.sql.Types.TIMESTAMP);
}

                        if(hts_final.date_modified != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(8, new java.sql.Timestamp(hts_final.date_modified.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(8, java.sql.Types.TIMESTAMP);
}

                        if(hts_final.created_by == null) {
pstmtUpdate_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(9, hts_final.created_by);
}

                        if(hts_final.modified_by == null) {
pstmtUpdate_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(10, hts_final.modified_by);
}

                        if(hts_final.captured_by == null) {
pstmtUpdate_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(11, hts_final.captured_by);
}

                        if(hts_final.uuid == null) {
pstmtUpdate_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(12, hts_final.uuid);
}

                        if(hts_final.previously_tested == null) {
pstmtUpdate_tDBOutput_1.setNull(13, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tDBOutput_1.setBoolean(13, hts_final.previously_tested);
}

                        if(hts_final.index_client == null) {
pstmtUpdate_tDBOutput_1.setNull(14, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tDBOutput_1.setBoolean(14, hts_final.index_client);
}

                        if(hts_final.num_children == null) {
pstmtUpdate_tDBOutput_1.setNull(15, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(15, hts_final.num_children);
}

                        if(hts_final.num_wives == null) {
pstmtUpdate_tDBOutput_1.setNull(16, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(16, hts_final.num_wives);
}

                        if(hts_final.first_time_visit == null) {
pstmtUpdate_tDBOutput_1.setNull(17, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tDBOutput_1.setBoolean(17, hts_final.first_time_visit);
}

                        if(hts_final.index_client_code == null) {
pstmtUpdate_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(18, hts_final.index_client_code);
}

                        if(hts_final.extra == null) {
pstmtUpdate_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(19, hts_final.extra);
}

                        if(hts_final.post_test_counseling == null) {
pstmtUpdate_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(20, hts_final.post_test_counseling);
}

                        if(hts_final.knowledge_assessment == null) {
pstmtUpdate_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(21, hts_final.knowledge_assessment);
}

                        if(hts_final.tb_screening == null) {
pstmtUpdate_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(22, hts_final.tb_screening);
}

                        if(hts_final.sti_screening == null) {
pstmtUpdate_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(23, hts_final.sti_screening);
}

                        if(hts_final.risk_assessment == null) {
pstmtUpdate_tDBOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(24, hts_final.risk_assessment);
}

                        if(hts_final.target_group == null) {
pstmtUpdate_tDBOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(25, hts_final.target_group);
}

                        if(hts_final.testing_setting == null) {
pstmtUpdate_tDBOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(26, hts_final.testing_setting);
}

                        if(hts_final.referred_from == null) {
pstmtUpdate_tDBOutput_1.setNull(27, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(27, hts_final.referred_from);
}

                        if(hts_final.type_counseling == null) {
pstmtUpdate_tDBOutput_1.setNull(28, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(28, hts_final.type_counseling);
}

                        if(hts_final.facility_id == null) {
pstmtUpdate_tDBOutput_1.setNull(29, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(29, hts_final.facility_id);
}

                        if(hts_final.recency == null) {
pstmtUpdate_tDBOutput_1.setNull(30, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(30, hts_final.recency);
}

                        pstmtUpdate_tDBOutput_1.setLong(31 + count_tDBOutput_1, hts_final.id);

                try {
					
                    updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1 + pstmtUpdate_tDBOutput_1.executeUpdate();
                    nb_line_tDBOutput_1++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_1 = true;
                        nb_line_tDBOutput_1++;
                            System.err.print(e.getMessage());
                }
            } else {
                        pstmtInsert_tDBOutput_1.setLong(1, hts_final.id);

                        if(hts_final.test1 == null) {
pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(2, hts_final.test1);
}

                        if(hts_final.confirmatory_test == null) {
pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(3, hts_final.confirmatory_test);
}

                        if(hts_final.tie_breaker_test == null) {
pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(4, hts_final.tie_breaker_test);
}

                        if(hts_final.client_code == null) {
pstmtInsert_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(5, hts_final.client_code);
}

                        if(hts_final.date_visit != null) {
pstmtInsert_tDBOutput_1.setTimestamp(6, new java.sql.Timestamp(hts_final.date_visit.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(6, java.sql.Types.TIMESTAMP);
}

                        pstmtInsert_tDBOutput_1.setInt(7, hts_final.archived);

                        if(hts_final.date_created != null) {
pstmtInsert_tDBOutput_1.setTimestamp(8, new java.sql.Timestamp(hts_final.date_created.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(8, java.sql.Types.TIMESTAMP);
}

                        if(hts_final.date_modified != null) {
pstmtInsert_tDBOutput_1.setTimestamp(9, new java.sql.Timestamp(hts_final.date_modified.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(9, java.sql.Types.TIMESTAMP);
}

                        if(hts_final.created_by == null) {
pstmtInsert_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(10, hts_final.created_by);
}

                        if(hts_final.modified_by == null) {
pstmtInsert_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(11, hts_final.modified_by);
}

                        if(hts_final.captured_by == null) {
pstmtInsert_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(12, hts_final.captured_by);
}

                        if(hts_final.uuid == null) {
pstmtInsert_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(13, hts_final.uuid);
}

                        if(hts_final.previously_tested == null) {
pstmtInsert_tDBOutput_1.setNull(14, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_1.setBoolean(14, hts_final.previously_tested);
}

                        if(hts_final.index_client == null) {
pstmtInsert_tDBOutput_1.setNull(15, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_1.setBoolean(15, hts_final.index_client);
}

                        if(hts_final.num_children == null) {
pstmtInsert_tDBOutput_1.setNull(16, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(16, hts_final.num_children);
}

                        if(hts_final.num_wives == null) {
pstmtInsert_tDBOutput_1.setNull(17, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(17, hts_final.num_wives);
}

                        if(hts_final.first_time_visit == null) {
pstmtInsert_tDBOutput_1.setNull(18, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_1.setBoolean(18, hts_final.first_time_visit);
}

                        if(hts_final.index_client_code == null) {
pstmtInsert_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(19, hts_final.index_client_code);
}

                        if(hts_final.extra == null) {
pstmtInsert_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(20, hts_final.extra);
}

                        if(hts_final.post_test_counseling == null) {
pstmtInsert_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(21, hts_final.post_test_counseling);
}

                        if(hts_final.knowledge_assessment == null) {
pstmtInsert_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(22, hts_final.knowledge_assessment);
}

                        if(hts_final.tb_screening == null) {
pstmtInsert_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(23, hts_final.tb_screening);
}

                        if(hts_final.sti_screening == null) {
pstmtInsert_tDBOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(24, hts_final.sti_screening);
}

                        if(hts_final.risk_assessment == null) {
pstmtInsert_tDBOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(25, hts_final.risk_assessment);
}

                        if(hts_final.target_group == null) {
pstmtInsert_tDBOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(26, hts_final.target_group);
}

                        if(hts_final.testing_setting == null) {
pstmtInsert_tDBOutput_1.setNull(27, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(27, hts_final.testing_setting);
}

                        if(hts_final.referred_from == null) {
pstmtInsert_tDBOutput_1.setNull(28, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(28, hts_final.referred_from);
}

                        if(hts_final.type_counseling == null) {
pstmtInsert_tDBOutput_1.setNull(29, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(29, hts_final.type_counseling);
}

                        if(hts_final.facility_id == null) {
pstmtInsert_tDBOutput_1.setNull(30, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(30, hts_final.facility_id);
}

                        if(hts_final.recency == null) {
pstmtInsert_tDBOutput_1.setNull(31, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(31, hts_final.recency);
}

                try {
					
                    insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1 + pstmtInsert_tDBOutput_1.executeUpdate();
                    nb_line_tDBOutput_1++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_1 = true;
                        nb_line_tDBOutput_1++;
                            System.err.print(e.getMessage());
                }
            }
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                	conn_tDBOutput_1.commit();
                	
                	commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "hts_final"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "hts_extract_before_final"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "hts_target_group_setting_map"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
	if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
		
			conn_tDBInput_1.commit();
			
		
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());

   			if (globalMap.get("tDBInput_1_NB_LINE") != null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				tJava_1Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}



/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_Target_Group_Codeset != null) {
						tHash_Lookup_Target_Group_Codeset.endGet();
					}
					globalMap.remove( "tHash_Lookup_Target_Group_Codeset" );

					
					
				
					if(tHash_Lookup_Testing_Setting_Codeset != null) {
						tHash_Lookup_Testing_Setting_Codeset.endGet();
					}
					globalMap.remove( "tHash_Lookup_Testing_Setting_Codeset" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"hts_extract");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_referred_from_codeset != null) {
						tHash_Lookup_referred_from_codeset.endGet();
					}
					globalMap.remove( "tHash_Lookup_referred_from_codeset" );

					
					
				
					if(tHash_Lookup_row1 != null) {
						tHash_Lookup_row1.endGet();
					}
					globalMap.remove( "tHash_Lookup_row1" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"hts_target_group_setting_map");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row3 != null) {
						tHash_Lookup_row3.endGet();
					}
					globalMap.remove( "tHash_Lookup_row3" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"hts_extract_before_final");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



        if(pstmtUpdate_tDBOutput_1 != null){
            pstmtUpdate_tDBOutput_1.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_1");
        }
        if(pstmtInsert_tDBOutput_1 != null){
            pstmtInsert_tDBOutput_1.close();
            resourceMap.remove("pstmtInsert_tDBOutput_1");
        }
        if(pstmt_tDBOutput_1 != null) {
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
			
			conn_tDBOutput_1.commit();
			
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"hts_final");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tDBInput_8Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row3"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_referred_from_codeset"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row1"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_Target_Group_Codeset"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_Testing_Setting_Codeset"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
                if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_1")) != null) {
                    pstmtUpdateToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
                if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_1")) != null) {
                    pstmtInsertToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


System.out.println("Total HTS records fetched from LAMIS3 hts_new table - "+globalMap.get("tDBInput_1_NB_LINE"));
System.out.println();
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class sequence_extraStruct implements routines.system.IPersistableRow<sequence_extraStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HTS = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HTS = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long sequence_count;

				public Long getSequence_count () {
					return this.sequence_count;
				}
				
			    public String table_name;

				public String getTable_name () {
					return this.table_name;
				}
				
			    public java.util.Date date_time;

				public java.util.Date getDate_time () {
					return this.date_time;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.table_name == null) ? 0 : this.table_name.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final sequence_extraStruct other = (sequence_extraStruct) obj;
		
						if (this.table_name == null) {
							if (other.table_name != null)
								return false;
						
						} else if (!this.table_name.equals(other.table_name))
						
							return false;
					

		return true;
    }

	public void copyDataTo(sequence_extraStruct other) {

		other.sequence_count = this.sequence_count;
	            other.table_name = this.table_name;
	            other.date_time = this.date_time;
	            
	}

	public void copyKeysDataTo(sequence_extraStruct other) {

		other.table_name = this.table_name;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HTS.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HTS.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HTS = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HTS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HTS, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HTS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HTS) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sequence_count = null;
           				} else {
           			    	this.sequence_count = dis.readLong();
           				}
					
					this.table_name = readString(dis);
					
					this.date_time = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.sequence_count == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.sequence_count);
		            	}
					
					// String
				
						writeString(this.table_name,dos);
					
					// java.util.Date
				
						writeDate(this.date_time,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("sequence_count="+String.valueOf(sequence_count));
		sb.append(",table_name="+table_name);
		sb.append(",date_time="+String.valueOf(date_time));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sequence_extraStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.table_name, other.table_name);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HTS = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HTS = new byte[0];

	
			    public Long sequence_count;

				public Long getSequence_count () {
					return this.sequence_count;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HTS) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sequence_count = null;
           				} else {
           			    	this.sequence_count = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.sequence_count == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.sequence_count);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("sequence_count="+String.valueOf(sequence_count));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
sequence_extraStruct sequence_extra = new sequence_extraStruct();





	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sequence_extra");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = context.LAMISPlus_Schema;
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("etl_sequence");
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("etl_sequence");
}

        int updateKeyCount_tDBOutput_3 = 1;
        if(updateKeyCount_tDBOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }
int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_3 = "jdbc:postgresql://"+context.LAMISPlus_Server+":"+context.LAMISPlus_Port+"/"+context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
    dbUser_tDBOutput_3 = context.LAMISPlus_Login;

	final String decryptedPassword_tDBOutput_3 = context.LAMISPlus_Password; 

    String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;

    conn_tDBOutput_3 = java.sql.DriverManager.getConnection(url_tDBOutput_3,dbUser_tDBOutput_3,dbPwd_tDBOutput_3);
	
	resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
        conn_tDBOutput_3.setAutoCommit(false);
        int commitEvery_tDBOutput_3 = 10000;
        int commitCounter_tDBOutput_3 = 0;



int count_tDBOutput_3=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_3 = conn_tDBOutput_3.getMetaData();
                                boolean whetherExist_tDBOutput_3 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_3 = dbMetaData_tDBOutput_3.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_3 = "public";
                                    if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_3 = conn_tDBOutput_3.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_3 = stmtSchema_tDBOutput_3.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_3.next()){
                                                defaultSchema_tDBOutput_3 = rsSchema_tDBOutput_3.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_3.next()) {
                                        String table_tDBOutput_3 = rsTable_tDBOutput_3.getString("TABLE_NAME");
                                        String schema_tDBOutput_3 = rsTable_tDBOutput_3.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_3.equals(("etl_sequence"))
                                            && (schema_tDBOutput_3.equals(dbschema_tDBOutput_3) || ((dbschema_tDBOutput_3 ==null || dbschema_tDBOutput_3.trim().length() ==0) && defaultSchema_tDBOutput_3.equals(schema_tDBOutput_3)))) {
                                            whetherExist_tDBOutput_3 = true;
                                            break;
                                        }
                                    }
                                }
                                if(!whetherExist_tDBOutput_3) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
                                        stmtCreate_tDBOutput_3.execute("CREATE TABLE \"" + tableName_tDBOutput_3 + "\"(\"sequence_count\" INT8 ,\"table_name\" VARCHAR ,\"date_time\" TIMESTAMP ,primary key(\"table_name\"))");
                                    }
                                }
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_3 + "\" WHERE \"table_name\" = ?");
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    String insert_tDBOutput_3 = "INSERT INTO \"" + tableName_tDBOutput_3 + "\" (\"sequence_count\",\"table_name\",\"date_time\") VALUES (?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
	    resourceMap.put("pstmtInsert_tDBOutput_3", pstmtInsert_tDBOutput_3);
	    String update_tDBOutput_3 = "UPDATE \"" + tableName_tDBOutput_3 + "\" SET \"sequence_count\" = ?,\"date_time\" = ? WHERE \"table_name\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(update_tDBOutput_3);
	    resourceMap.put("pstmtUpdate_tDBOutput_3", pstmtUpdate_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
sequence_extraStruct sequence_extra_tmp = new sequence_extraStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tDBInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_8", false);
		start_Hash.put("tDBInput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_8";

	
		int tos_count_tDBInput_8 = 0;
		
	
    
	
		    int nb_line_tDBInput_8 = 0;
		    java.sql.Connection conn_tDBInput_8 = null;
				String driverClass_tDBInput_8 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_8 = java.lang.Class.forName(driverClass_tDBInput_8);
				String dbUser_tDBInput_8 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_8 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_8 = decryptedPassword_tDBInput_8;
				
				String url_tDBInput_8 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_8 = java.sql.DriverManager.getConnection(url_tDBInput_8,dbUser_tDBInput_8,dbPwd_tDBInput_8);
		        
				conn_tDBInput_8.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8.createStatement();

		    String dbquery_tDBInput_8 = "SELECT pg_catalog.setval('hts_client_id_seq', (SELECT MAX(id) FROM hts_client), true);";
			

            	globalMap.put("tDBInput_8_QUERY",dbquery_tDBInput_8);
		    java.sql.ResultSet rs_tDBInput_8 = null;

		    try {
		    	rs_tDBInput_8 = stmt_tDBInput_8.executeQuery(dbquery_tDBInput_8);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8.getMetaData();
		    	int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8.getColumnCount();

		    String tmpContent_tDBInput_8 = null;
		    
		    
		    while (rs_tDBInput_8.next()) {
		        nb_line_tDBInput_8++;
		        
							if(colQtyInRs_tDBInput_8 < 1) {
								row6.sequence_count = null;
							} else {
		                          
            row6.sequence_count = rs_tDBInput_8.getLong(1);
            if(rs_tDBInput_8.wasNull()){
                    row6.sequence_count = null;
            }
		                    }
					


 



/**
 * [tDBInput_8 begin ] stop
 */
	
	/**
	 * [tDBInput_8 main ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 


	tos_count_tDBInput_8++;

/**
 * [tDBInput_8 main ] stop
 */
	
	/**
	 * [tDBInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

sequence_extra = null;


// # Output table : 'sequence_extra'
sequence_extra_tmp.sequence_count = row6.sequence_count ;
sequence_extra_tmp.table_name = "hts_client";
sequence_extra_tmp.date_time = java.sql.Timestamp.valueOf( java.time.LocalDateTime.now() );
sequence_extra = sequence_extra_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "sequence_extra"
if(sequence_extra != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sequence_extra");
					}
					



        whetherReject_tDBOutput_3 = false;
                    if(sequence_extra.table_name == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, sequence_extra.table_name);
}

            int checkCount_tDBOutput_3 = -1;
            try (java.sql.ResultSet rs_tDBOutput_3 = pstmt_tDBOutput_3.executeQuery()) {
                while(rs_tDBOutput_3.next()) {
                    checkCount_tDBOutput_3 = rs_tDBOutput_3.getInt(1);
                }
            }
            if(checkCount_tDBOutput_3 > 0) {
                        if(sequence_extra.sequence_count == null) {
pstmtUpdate_tDBOutput_3.setNull(1, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_3.setLong(1, sequence_extra.sequence_count);
}

                        if(sequence_extra.date_time != null) {
pstmtUpdate_tDBOutput_3.setTimestamp(2, new java.sql.Timestamp(sequence_extra.date_time.getTime()));
} else {
pstmtUpdate_tDBOutput_3.setNull(2, java.sql.Types.TIMESTAMP);
}

                        if(sequence_extra.table_name == null) {
pstmtUpdate_tDBOutput_3.setNull(3 + count_tDBOutput_3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_3.setString(3 + count_tDBOutput_3, sequence_extra.table_name);
}

                try {
					
                    updatedCount_tDBOutput_3 = updatedCount_tDBOutput_3 + pstmtUpdate_tDBOutput_3.executeUpdate();
                    nb_line_tDBOutput_3++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_3 = true;
                        nb_line_tDBOutput_3++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(sequence_extra.sequence_count == null) {
pstmtInsert_tDBOutput_3.setNull(1, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_3.setLong(1, sequence_extra.sequence_count);
}

                        if(sequence_extra.table_name == null) {
pstmtInsert_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(2, sequence_extra.table_name);
}

                        if(sequence_extra.date_time != null) {
pstmtInsert_tDBOutput_3.setTimestamp(3, new java.sql.Timestamp(sequence_extra.date_time.getTime()));
} else {
pstmtInsert_tDBOutput_3.setNull(3, java.sql.Types.TIMESTAMP);
}

                try {
					
                    insertedCount_tDBOutput_3 = insertedCount_tDBOutput_3 + pstmtInsert_tDBOutput_3.executeUpdate();
                    nb_line_tDBOutput_3++;
					
                } catch(java.lang.Exception e) {
					
                    whetherReject_tDBOutput_3 = true;
                        nb_line_tDBOutput_3++;
                            System.err.print(e.getMessage());
                }
            }
            if(!whetherReject_tDBOutput_3) {
            }
    		    commitCounter_tDBOutput_3++;
                if(commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {
                	conn_tDBOutput_3.commit();
                	
                	commitCounter_tDBOutput_3=0;
                }

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "sequence_extra"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_8 end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

	}
}finally{
	if (rs_tDBInput_8 != null) {
		rs_tDBInput_8.close();
	}
	if (stmt_tDBInput_8 != null) {
		stmt_tDBInput_8.close();
	}
	if(conn_tDBInput_8 != null && !conn_tDBInput_8.isClosed()) {
		
			conn_tDBInput_8.commit();
			
		
			conn_tDBInput_8.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_8_NB_LINE",nb_line_tDBInput_8);
 

ok_Hash.put("tDBInput_8", true);
end_Hash.put("tDBInput_8", System.currentTimeMillis());




/**
 * [tDBInput_8 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



        if(pstmtUpdate_tDBOutput_3 != null){
            pstmtUpdate_tDBOutput_3.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_3");
        }
        if(pstmtInsert_tDBOutput_3 != null){
            pstmtInsert_tDBOutput_3.close();
            resourceMap.remove("pstmtInsert_tDBOutput_3");
        }
        if(pstmt_tDBOutput_3 != null) {
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);
			
			conn_tDBOutput_3.commit();
			
		
    	conn_tDBOutput_3 .close();
    	
    	resourceMap.put("finish_tDBOutput_3", true);
    	

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sequence_extra");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJava_2Process(globalMap);



/**
 * [tDBOutput_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_3 = null;
                if ((pstmtUpdateToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_3")) != null) {
                    pstmtUpdateToClose_tDBOutput_3.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_3 = null;
                if ((pstmtInsertToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_3")) != null) {
                    pstmtInsertToClose_tDBOutput_3.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_3") == null){
            java.sql.Connection ctn_tDBOutput_3 = null;
            if((ctn_tDBOutput_3 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_3")) != null){
                try {
                    ctn_tDBOutput_3.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_3) {
                    String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :" + sqlEx_tDBOutput_3.getMessage();
                    System.err.println(errorMessage_tDBOutput_3);
                }
            }
        }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}
	

public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";

	
		int tos_count_tJava_2 = 0;
		


int totalMigrated = globalMap.get("tDBOutput_1_NB_LINE_UPDATED") != null ? (Integer)globalMap.get("tDBOutput_1_NB_LINE_UPDATED") : 0;

System.out.println("Total HTS already migrated "+totalMigrated);

System.out.println("Total new records migrated - "+globalMap.get("tDBOutput_1_NB_LINE_INSERTED"));
if(globalMap.get("tDBOutput_1_ERROR_MESSAGE") != null){
System.out.println("Migration Error - "+globalMap.get("tDBOutput_1_ERROR_MESSAGE"));
}
System.out.println("Total erroneous records not migrated - "+globalMap.get("tFileOutputDelimited_1_NB_LINE"));
System.out.println();
java.time.LocalDateTime endTime = java.time.LocalDateTime.now();
System.out.println("End time - "+ endTime);
java.time.LocalDateTime statTime = (java.time.LocalDateTime)globalMap.get("startTime");

java.time.Duration duration = java.time.Duration.between(statTime, endTime);
System.out.println("Duration - "+ duration);
System.out.println("*************HTS SESSION MIGRATION REPORT END*****************");
System.out.println("**************************************************************");


 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class Target_Group_CodesetStruct implements routines.system.IPersistableComparableLookupRow<Target_Group_CodesetStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HTS = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HTS = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long codeset_id;

				public long getCodeset_id () {
					return this.codeset_id;
				}
				
			    public String codeset_group;

				public String getCodeset_group () {
					return this.codeset_group;
				}
				
			    public String codeset_display;

				public String getCodeset_display () {
					return this.codeset_display;
				}
				
			    public String code;

				public String getCode () {
					return this.code;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.codeset_display == null) ? 0 : this.codeset_display.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Target_Group_CodesetStruct other = (Target_Group_CodesetStruct) obj;
		
						if (this.codeset_display == null) {
							if (other.codeset_display != null)
								return false;
						
						} else if (!this.codeset_display.equals(other.codeset_display))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Target_Group_CodesetStruct other) {

		other.codeset_id = this.codeset_id;
	            other.codeset_group = this.codeset_group;
	            other.codeset_display = this.codeset_display;
	            other.code = this.code;
	            
	}

	public void copyKeysDataTo(Target_Group_CodesetStruct other) {

		other.codeset_display = this.codeset_display;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HTS.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HTS.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HTS = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HTS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HTS, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HTS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HTS) {

        	try {

        		int length = 0;
		
					this.codeset_display = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.codeset_display,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.codeset_id = dis.readLong();
					
						this.codeset_group = readString(dis,ois);
					
						this.code = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeLong(this.codeset_id);
					
						writeString(this.codeset_group, dos, oos);
					
						writeString(this.code, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("codeset_id="+String.valueOf(codeset_id));
		sb.append(",codeset_group="+codeset_group);
		sb.append(",codeset_display="+codeset_display);
		sb.append(",code="+code);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Target_Group_CodesetStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.codeset_display, other.codeset_display);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		Target_Group_CodesetStruct Target_Group_Codeset = new Target_Group_CodesetStruct();




	
	/**
	 * [tAdvancedHash_Target_Group_Codeset begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_Target_Group_Codeset", false);
		start_Hash.put("tAdvancedHash_Target_Group_Codeset", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_Target_Group_Codeset";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Target_Group_Codeset");
					}
				
		int tos_count_tAdvancedHash_Target_Group_Codeset = 0;
		

			   		// connection name:Target_Group_Codeset
			   		// source node:tDBInput_2 - inputs:(after_tDBInput_1) outputs:(Target_Group_Codeset,Target_Group_Codeset) | target node:tAdvancedHash_Target_Group_Codeset - inputs:(Target_Group_Codeset) outputs:()
			   		// linked node: tMap_1 - inputs:(hts_extract,Target_Group_Codeset,Testing_Setting_Codeset) outputs:(hts_target_group_setting_map)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_Target_Group_Codeset = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Target_Group_CodesetStruct> tHash_Lookup_Target_Group_Codeset =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<Target_Group_CodesetStruct>getLookup(matchingModeEnum_Target_Group_Codeset);
	   						   
		   	   	   globalMap.put("tHash_Lookup_Target_Group_Codeset", tHash_Lookup_Target_Group_Codeset);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_Target_Group_Codeset begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_2 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
				String url_tDBInput_2 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
				conn_tDBInput_2.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT DISTINCT c.id as codeset_id,codeset_group,lower(left(c.display,4)) as codeset_display, code\nFROM public.base_ap"
+"plication_codeset c\nWHERE c.codeset_group='TARGET_GROUP';";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								Target_Group_Codeset.codeset_id = 0;
							} else {
		                          
            Target_Group_Codeset.codeset_id = rs_tDBInput_2.getLong(1);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								Target_Group_Codeset.codeset_group = null;
							} else {
	                         		
        	Target_Group_Codeset.codeset_group = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								Target_Group_Codeset.codeset_display = null;
							} else {
	                         		
        	Target_Group_Codeset.codeset_display = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								Target_Group_Codeset.code = null;
							} else {
	                         		
        	Target_Group_Codeset.code = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
		                    }
					


 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_Target_Group_Codeset main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Target_Group_Codeset";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Target_Group_Codeset");
					}
					


			   
			   

					Target_Group_CodesetStruct Target_Group_Codeset_HashRow = new Target_Group_CodesetStruct();
		   	   	   
				
				Target_Group_Codeset_HashRow.codeset_id = Target_Group_Codeset.codeset_id;
				
				Target_Group_Codeset_HashRow.codeset_group = Target_Group_Codeset.codeset_group;
				
				Target_Group_Codeset_HashRow.codeset_display = Target_Group_Codeset.codeset_display;
				
				Target_Group_Codeset_HashRow.code = Target_Group_Codeset.code;
				
			tHash_Lookup_Target_Group_Codeset.put(Target_Group_Codeset_HashRow);
			
            




 


	tos_count_tAdvancedHash_Target_Group_Codeset++;

/**
 * [tAdvancedHash_Target_Group_Codeset main ] stop
 */
	
	/**
	 * [tAdvancedHash_Target_Group_Codeset process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Target_Group_Codeset";

	

 



/**
 * [tAdvancedHash_Target_Group_Codeset process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_Target_Group_Codeset process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Target_Group_Codeset";

	

 



/**
 * [tAdvancedHash_Target_Group_Codeset process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
	if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
		
			conn_tDBInput_2.commit();
			
		
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_Target_Group_Codeset end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Target_Group_Codeset";

	

tHash_Lookup_Target_Group_Codeset.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Target_Group_Codeset");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_Target_Group_Codeset", true);
end_Hash.put("tAdvancedHash_Target_Group_Codeset", System.currentTimeMillis());




/**
 * [tAdvancedHash_Target_Group_Codeset end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_Target_Group_Codeset finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Target_Group_Codeset";

	

 



/**
 * [tAdvancedHash_Target_Group_Codeset finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class Testing_Setting_CodesetStruct implements routines.system.IPersistableComparableLookupRow<Testing_Setting_CodesetStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HTS = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HTS = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long codeset_id;

				public long getCodeset_id () {
					return this.codeset_id;
				}
				
			    public String codeset_group;

				public String getCodeset_group () {
					return this.codeset_group;
				}
				
			    public String codeset_display;

				public String getCodeset_display () {
					return this.codeset_display;
				}
				
			    public String code;

				public String getCode () {
					return this.code;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.codeset_display == null) ? 0 : this.codeset_display.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Testing_Setting_CodesetStruct other = (Testing_Setting_CodesetStruct) obj;
		
						if (this.codeset_display == null) {
							if (other.codeset_display != null)
								return false;
						
						} else if (!this.codeset_display.equals(other.codeset_display))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Testing_Setting_CodesetStruct other) {

		other.codeset_id = this.codeset_id;
	            other.codeset_group = this.codeset_group;
	            other.codeset_display = this.codeset_display;
	            other.code = this.code;
	            
	}

	public void copyKeysDataTo(Testing_Setting_CodesetStruct other) {

		other.codeset_display = this.codeset_display;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HTS.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HTS.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HTS = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HTS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HTS, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HTS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HTS) {

        	try {

        		int length = 0;
		
					this.codeset_display = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.codeset_display,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.codeset_id = dis.readLong();
					
						this.codeset_group = readString(dis,ois);
					
						this.code = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeLong(this.codeset_id);
					
						writeString(this.codeset_group, dos, oos);
					
						writeString(this.code, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("codeset_id="+String.valueOf(codeset_id));
		sb.append(",codeset_group="+codeset_group);
		sb.append(",codeset_display="+codeset_display);
		sb.append(",code="+code);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Testing_Setting_CodesetStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.codeset_display, other.codeset_display);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		Testing_Setting_CodesetStruct Testing_Setting_Codeset = new Testing_Setting_CodesetStruct();




	
	/**
	 * [tAdvancedHash_Testing_Setting_Codeset begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_Testing_Setting_Codeset", false);
		start_Hash.put("tAdvancedHash_Testing_Setting_Codeset", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_Testing_Setting_Codeset";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Testing_Setting_Codeset");
					}
				
		int tos_count_tAdvancedHash_Testing_Setting_Codeset = 0;
		

			   		// connection name:Testing_Setting_Codeset
			   		// source node:tDBInput_3 - inputs:(after_tDBInput_1) outputs:(Testing_Setting_Codeset,Testing_Setting_Codeset) | target node:tAdvancedHash_Testing_Setting_Codeset - inputs:(Testing_Setting_Codeset) outputs:()
			   		// linked node: tMap_1 - inputs:(hts_extract,Target_Group_Codeset,Testing_Setting_Codeset) outputs:(hts_target_group_setting_map)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_Testing_Setting_Codeset = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<Testing_Setting_CodesetStruct> tHash_Lookup_Testing_Setting_Codeset =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<Testing_Setting_CodesetStruct>getLookup(matchingModeEnum_Testing_Setting_Codeset);
	   						   
		   	   	   globalMap.put("tHash_Lookup_Testing_Setting_Codeset", tHash_Lookup_Testing_Setting_Codeset);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_Testing_Setting_Codeset begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_3 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				
				String url_tDBInput_3 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
				conn_tDBInput_3.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT DISTINCT c.id as codeset_id,codeset_group,lower(left(c.display,4)) as codeset_display, code\nFROM public.base_ap"
+"plication_codeset c\nWHERE c.codeset_group ='TEST_SETTING';";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								Testing_Setting_Codeset.codeset_id = 0;
							} else {
		                          
            Testing_Setting_Codeset.codeset_id = rs_tDBInput_3.getLong(1);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								Testing_Setting_Codeset.codeset_group = null;
							} else {
	                         		
        	Testing_Setting_Codeset.codeset_group = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								Testing_Setting_Codeset.codeset_display = null;
							} else {
	                         		
        	Testing_Setting_Codeset.codeset_display = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								Testing_Setting_Codeset.code = null;
							} else {
	                         		
        	Testing_Setting_Codeset.code = routines.system.JDBCUtil.getString(rs_tDBInput_3, 4, false);
		                    }
					


 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_Testing_Setting_Codeset main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Testing_Setting_Codeset";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Testing_Setting_Codeset");
					}
					


			   
			   

					Testing_Setting_CodesetStruct Testing_Setting_Codeset_HashRow = new Testing_Setting_CodesetStruct();
		   	   	   
				
				Testing_Setting_Codeset_HashRow.codeset_id = Testing_Setting_Codeset.codeset_id;
				
				Testing_Setting_Codeset_HashRow.codeset_group = Testing_Setting_Codeset.codeset_group;
				
				Testing_Setting_Codeset_HashRow.codeset_display = Testing_Setting_Codeset.codeset_display;
				
				Testing_Setting_Codeset_HashRow.code = Testing_Setting_Codeset.code;
				
			tHash_Lookup_Testing_Setting_Codeset.put(Testing_Setting_Codeset_HashRow);
			
            




 


	tos_count_tAdvancedHash_Testing_Setting_Codeset++;

/**
 * [tAdvancedHash_Testing_Setting_Codeset main ] stop
 */
	
	/**
	 * [tAdvancedHash_Testing_Setting_Codeset process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Testing_Setting_Codeset";

	

 



/**
 * [tAdvancedHash_Testing_Setting_Codeset process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_Testing_Setting_Codeset process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Testing_Setting_Codeset";

	

 



/**
 * [tAdvancedHash_Testing_Setting_Codeset process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
	if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
		
			conn_tDBInput_3.commit();
			
		
			conn_tDBInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_Testing_Setting_Codeset end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Testing_Setting_Codeset";

	

tHash_Lookup_Testing_Setting_Codeset.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Testing_Setting_Codeset");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_Testing_Setting_Codeset", true);
end_Hash.put("tAdvancedHash_Testing_Setting_Codeset", System.currentTimeMillis());




/**
 * [tAdvancedHash_Testing_Setting_Codeset end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_Testing_Setting_Codeset finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Testing_Setting_Codeset";

	

 



/**
 * [tAdvancedHash_Testing_Setting_Codeset finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class referred_from_codesetStruct implements routines.system.IPersistableComparableLookupRow<referred_from_codesetStruct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HTS = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HTS = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int codeset_id;

				public int getCodeset_id () {
					return this.codeset_id;
				}
				
			    public String codeset_group;

				public String getCodeset_group () {
					return this.codeset_group;
				}
				
			    public String codeset_display;

				public String getCodeset_display () {
					return this.codeset_display;
				}
				
			    public String code;

				public String getCode () {
					return this.code;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.codeset_display == null) ? 0 : this.codeset_display.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final referred_from_codesetStruct other = (referred_from_codesetStruct) obj;
		
						if (this.codeset_display == null) {
							if (other.codeset_display != null)
								return false;
						
						} else if (!this.codeset_display.equals(other.codeset_display))
						
							return false;
					

		return true;
    }

	public void copyDataTo(referred_from_codesetStruct other) {

		other.codeset_id = this.codeset_id;
	            other.codeset_group = this.codeset_group;
	            other.codeset_display = this.codeset_display;
	            other.code = this.code;
	            
	}

	public void copyKeysDataTo(referred_from_codesetStruct other) {

		other.codeset_display = this.codeset_display;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HTS.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HTS.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HTS = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HTS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HTS, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HTS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HTS) {

        	try {

        		int length = 0;
		
					this.codeset_display = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.codeset_display,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.codeset_id = dis.readInt();
					
						this.codeset_group = readString(dis,ois);
					
						this.code = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.codeset_id);
					
						writeString(this.codeset_group, dos, oos);
					
						writeString(this.code, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("codeset_id="+String.valueOf(codeset_id));
		sb.append(",codeset_group="+codeset_group);
		sb.append(",codeset_display="+codeset_display);
		sb.append(",code="+code);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(referred_from_codesetStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.codeset_display, other.codeset_display);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		referred_from_codesetStruct referred_from_codeset = new referred_from_codesetStruct();




	
	/**
	 * [tAdvancedHash_referred_from_codeset begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_referred_from_codeset", false);
		start_Hash.put("tAdvancedHash_referred_from_codeset", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_referred_from_codeset";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"referred_from_codeset");
					}
				
		int tos_count_tAdvancedHash_referred_from_codeset = 0;
		

			   		// connection name:referred_from_codeset
			   		// source node:tDBInput_4 - inputs:(after_tDBInput_1) outputs:(referred_from_codeset,referred_from_codeset) | target node:tAdvancedHash_referred_from_codeset - inputs:(referred_from_codeset) outputs:()
			   		// linked node: tMap_2 - inputs:(hts_target_group_setting_map,referred_from_codeset,row1) outputs:(hts_extract_before_final)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_referred_from_codeset = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<referred_from_codesetStruct> tHash_Lookup_referred_from_codeset =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<referred_from_codesetStruct>getLookup(matchingModeEnum_referred_from_codeset);
	   						   
		   	   	   globalMap.put("tHash_Lookup_referred_from_codeset", tHash_Lookup_referred_from_codeset);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_referred_from_codeset begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_4 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
				
				String url_tDBInput_4 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4,dbUser_tDBInput_4,dbPwd_tDBInput_4);
		        
				conn_tDBInput_4.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT DISTINCT c.id as codeset_id,codeset_group,lower(left(c.display,4)) as codeset_display, code\nFROM public.base_ap"
+"plication_codeset c\nWHERE c.codeset_group='SOURCE_REFERRAL';";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								referred_from_codeset.codeset_id = 0;
							} else {
		                          
            referred_from_codeset.codeset_id = rs_tDBInput_4.getInt(1);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								referred_from_codeset.codeset_group = null;
							} else {
	                         		
        	referred_from_codeset.codeset_group = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								referred_from_codeset.codeset_display = null;
							} else {
	                         		
        	referred_from_codeset.codeset_display = routines.system.JDBCUtil.getString(rs_tDBInput_4, 3, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								referred_from_codeset.code = null;
							} else {
	                         		
        	referred_from_codeset.code = routines.system.JDBCUtil.getString(rs_tDBInput_4, 4, false);
		                    }
					


 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_referred_from_codeset main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_referred_from_codeset";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"referred_from_codeset");
					}
					


			   
			   

					referred_from_codesetStruct referred_from_codeset_HashRow = new referred_from_codesetStruct();
		   	   	   
				
				referred_from_codeset_HashRow.codeset_id = referred_from_codeset.codeset_id;
				
				referred_from_codeset_HashRow.codeset_group = referred_from_codeset.codeset_group;
				
				referred_from_codeset_HashRow.codeset_display = referred_from_codeset.codeset_display;
				
				referred_from_codeset_HashRow.code = referred_from_codeset.code;
				
			tHash_Lookup_referred_from_codeset.put(referred_from_codeset_HashRow);
			
            




 


	tos_count_tAdvancedHash_referred_from_codeset++;

/**
 * [tAdvancedHash_referred_from_codeset main ] stop
 */
	
	/**
	 * [tAdvancedHash_referred_from_codeset process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_referred_from_codeset";

	

 



/**
 * [tAdvancedHash_referred_from_codeset process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_referred_from_codeset process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_referred_from_codeset";

	

 



/**
 * [tAdvancedHash_referred_from_codeset process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
	if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
		
			conn_tDBInput_4.commit();
			
		
			conn_tDBInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);
 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_referred_from_codeset end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_referred_from_codeset";

	

tHash_Lookup_referred_from_codeset.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"referred_from_codeset");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_referred_from_codeset", true);
end_Hash.put("tAdvancedHash_referred_from_codeset", System.currentTimeMillis());




/**
 * [tAdvancedHash_referred_from_codeset end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_referred_from_codeset finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_referred_from_codeset";

	

 



/**
 * [tAdvancedHash_referred_from_codeset finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableComparableLookupRow<row1Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HTS = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HTS = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int codeset_id;

				public int getCodeset_id () {
					return this.codeset_id;
				}
				
			    public String codeset_group;

				public String getCodeset_group () {
					return this.codeset_group;
				}
				
			    public String codeset_display;

				public String getCodeset_display () {
					return this.codeset_display;
				}
				
			    public String code;

				public String getCode () {
					return this.code;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.codeset_display == null) ? 0 : this.codeset_display.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.codeset_display == null) {
							if (other.codeset_display != null)
								return false;
						
						} else if (!this.codeset_display.equals(other.codeset_display))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.codeset_id = this.codeset_id;
	            other.codeset_group = this.codeset_group;
	            other.codeset_display = this.codeset_display;
	            other.code = this.code;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.codeset_display = this.codeset_display;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HTS.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HTS.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HTS = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HTS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HTS, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HTS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HTS) {

        	try {

        		int length = 0;
		
					this.codeset_display = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.codeset_display,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.codeset_id = dis.readInt();
					
						this.codeset_group = readString(dis,ois);
					
						this.code = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.codeset_id);
					
						writeString(this.codeset_group, dos, oos);
					
						writeString(this.code, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("codeset_id="+String.valueOf(codeset_id));
		sb.append(",codeset_group="+codeset_group);
		sb.append(",codeset_display="+codeset_display);
		sb.append(",code="+code);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.codeset_display, other.codeset_display);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tAdvancedHash_row1 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row1", false);
		start_Hash.put("tAdvancedHash_row1", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tAdvancedHash_row1 = 0;
		

			   		// connection name:row1
			   		// source node:tDBInput_5 - inputs:(after_tDBInput_1) outputs:(row1,row1) | target node:tAdvancedHash_row1 - inputs:(row1) outputs:()
			   		// linked node: tMap_2 - inputs:(hts_target_group_setting_map,referred_from_codeset,row1) outputs:(hts_extract_before_final)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row1 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row1Struct>getLookup(matchingModeEnum_row1);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row1", tHash_Lookup_row1);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row1 begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
    
	
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_5 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;
				
				String url_tDBInput_5 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5,dbUser_tDBInput_5,dbPwd_tDBInput_5);
		        
				conn_tDBInput_5.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "SELECT DISTINCT c.id as codeset_id,codeset_group,lower(left(c.display,4)) as codeset_display, code\nFROM public.base_ap"
+"plication_codeset c\nWHERE c.codeset_group='COUNSELING_TYPE';";
			

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								row1.codeset_id = 0;
							} else {
		                          
            row1.codeset_id = rs_tDBInput_5.getInt(1);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								row1.codeset_group = null;
							} else {
	                         		
        	row1.codeset_group = routines.system.JDBCUtil.getString(rs_tDBInput_5, 2, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								row1.codeset_display = null;
							} else {
	                         		
        	row1.codeset_display = routines.system.JDBCUtil.getString(rs_tDBInput_5, 3, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 4) {
								row1.code = null;
							} else {
	                         		
        	row1.code = routines.system.JDBCUtil.getString(rs_tDBInput_5, 4, false);
		                    }
					


 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row1 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					


			   
			   

					row1Struct row1_HashRow = new row1Struct();
		   	   	   
				
				row1_HashRow.codeset_id = row1.codeset_id;
				
				row1_HashRow.codeset_group = row1.codeset_group;
				
				row1_HashRow.codeset_display = row1.codeset_display;
				
				row1_HashRow.code = row1.code;
				
			tHash_Lookup_row1.put(row1_HashRow);
			
            




 


	tos_count_tAdvancedHash_row1++;

/**
 * [tAdvancedHash_row1 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	

 



/**
 * [tAdvancedHash_row1 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row1 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	

 



/**
 * [tAdvancedHash_row1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
	if(conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {
		
			conn_tDBInput_5.commit();
			
		
			conn_tDBInput_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);
 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row1 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	

tHash_Lookup_row1.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row1", true);
end_Hash.put("tAdvancedHash_row1", System.currentTimeMillis());




/**
 * [tAdvancedHash_row1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row1 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";

	

 



/**
 * [tAdvancedHash_row1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
    final static byte[] commonByteArrayLock_LAMISPLUS_ETL_HTS = new byte[0];
    static byte[] commonByteArray_LAMISPLUS_ETL_HTS = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				
			    public String facility_name;

				public String getFacility_name () {
					return this.facility_name;
				}
				
			    public String lga_name;

				public String getLga_name () {
					return this.lga_name;
				}
				
			    public String datim_id;

				public String getDatim_id () {
					return this.datim_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.datim_id == null) ? 0 : this.datim_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.datim_id == null) {
							if (other.datim_id != null)
								return false;
						
						} else if (!this.datim_id.equals(other.datim_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.id = this.id;
	            other.facility_name = this.facility_name;
	            other.lga_name = this.lga_name;
	            other.datim_id = this.datim_id;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.datim_id = this.datim_id;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LAMISPLUS_ETL_HTS.length) {
				if(length < 1024 && commonByteArray_LAMISPLUS_ETL_HTS.length == 0) {
   					commonByteArray_LAMISPLUS_ETL_HTS = new byte[1024];
				} else {
   					commonByteArray_LAMISPLUS_ETL_HTS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LAMISPLUS_ETL_HTS, 0, length);
			strReturn = new String(commonByteArray_LAMISPLUS_ETL_HTS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LAMISPLUS_ETL_HTS) {

        	try {

        		int length = 0;
		
					this.datim_id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.datim_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.id = readInteger(dis,ois);
					
						this.facility_name = readString(dis,ois);
					
						this.lga_name = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.id, dos, oos);
					
						writeString(this.facility_name, dos, oos);
					
						writeString(this.lga_name, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",facility_name="+facility_name);
		sb.append(",lga_name="+lga_name);
		sb.append(",datim_id="+datim_id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.datim_id, other.datim_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tAdvancedHash_row3 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row3", false);
		start_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tAdvancedHash_row3 = 0;
		

			   		// connection name:row3
			   		// source node:tDBInput_6 - inputs:(after_tDBInput_1) outputs:(row3,row3) | target node:tAdvancedHash_row3 - inputs:(row3) outputs:()
			   		// linked node: tMap_3 - inputs:(hts_extract_before_final,row3) outputs:(hts_final)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row3Struct>getLookup(matchingModeEnum_row3);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row3 begin ] stop
 */



	
	/**
	 * [tDBInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_6", false);
		start_Hash.put("tDBInput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_6";

	
		int tos_count_tDBInput_6 = 0;
		
	
    
	
		    int nb_line_tDBInput_6 = 0;
		    java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_6 = java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = context.LAMISPlus_Login;
				
				
	final String decryptedPassword_tDBInput_6 = context.LAMISPlus_Password; 
				
				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;
				
				String url_tDBInput_6 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port + "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				
				conn_tDBInput_6 = java.sql.DriverManager.getConnection(url_tDBInput_6,dbUser_tDBInput_6,dbPwd_tDBInput_6);
		        
				conn_tDBInput_6.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

		    String dbquery_tDBInput_6 = "SELECT iden.organisation_unit_id as id, ef.facility_name, ef.lga_name, ef.datim_id FROM etl_facility ef \nINNER JOIN ba"
+"se_organisation_unit_identifier iden ON iden.code = ef.datim_id";
			

            	globalMap.put("tDBInput_6_QUERY",dbquery_tDBInput_6);
		    java.sql.ResultSet rs_tDBInput_6 = null;

		    try {
		    	rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
		    	int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

		    String tmpContent_tDBInput_6 = null;
		    
		    
		    while (rs_tDBInput_6.next()) {
		        nb_line_tDBInput_6++;
		        
							if(colQtyInRs_tDBInput_6 < 1) {
								row3.id = null;
							} else {
		                          
            row3.id = rs_tDBInput_6.getInt(1);
            if(rs_tDBInput_6.wasNull()){
                    row3.id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 2) {
								row3.facility_name = null;
							} else {
	                         		
        	row3.facility_name = routines.system.JDBCUtil.getString(rs_tDBInput_6, 2, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 3) {
								row3.lga_name = null;
							} else {
	                         		
        	row3.lga_name = routines.system.JDBCUtil.getString(rs_tDBInput_6, 3, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 4) {
								row3.datim_id = null;
							} else {
	                         		
        	row3.datim_id = routines.system.JDBCUtil.getString(rs_tDBInput_6, 4, false);
		                    }
					


 



/**
 * [tDBInput_6 begin ] stop
 */
	
	/**
	 * [tDBInput_6 main ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 


	tos_count_tDBInput_6++;

/**
 * [tDBInput_6 main ] stop
 */
	
	/**
	 * [tDBInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					


			   
			   

					row3Struct row3_HashRow = new row3Struct();
		   	   	   
				
				row3_HashRow.id = row3.id;
				
				row3_HashRow.facility_name = row3.facility_name;
				
				row3_HashRow.lga_name = row3.lga_name;
				
				row3_HashRow.datim_id = row3.datim_id;
				
			tHash_Lookup_row3.put(row3_HashRow);
			
            




 


	tos_count_tAdvancedHash_row3++;

/**
 * [tAdvancedHash_row3 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_6 end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

	}
}finally{
	if (rs_tDBInput_6 != null) {
		rs_tDBInput_6.close();
	}
	if (stmt_tDBInput_6 != null) {
		stmt_tDBInput_6.close();
	}
	if(conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {
		
			conn_tDBInput_6.commit();
			
		
			conn_tDBInput_6.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_6_NB_LINE",nb_line_tDBInput_6);
 

ok_Hash.put("tDBInput_6", true);
end_Hash.put("tDBInput_6", System.currentTimeMillis());




/**
 * [tDBInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

tHash_Lookup_row3.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row3", true);
end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());




/**
 * [tAdvancedHash_row3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Lamisplus";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final HTS HTSClass = new HTS();

        int exitCode = HTSClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = HTS.class.getClassLoader().getResourceAsStream("lamisplus_etl/hts_6_0/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = HTS.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("LAMISPlus_Schema", "id_String");
                            context.LAMISPlus_Schema=(String) context.getProperty("LAMISPlus_Schema");
                        context.setContextType("LAMISPlus_AdditionalParams", "id_String");
                            context.LAMISPlus_AdditionalParams=(String) context.getProperty("LAMISPlus_AdditionalParams");
                        context.setContextType("LAMISPlus_Database", "id_String");
                            context.LAMISPlus_Database=(String) context.getProperty("LAMISPlus_Database");
                        context.setContextType("LAMISPlus_Login", "id_String");
                            context.LAMISPlus_Login=(String) context.getProperty("LAMISPlus_Login");
                        context.setContextType("LAMISPlus_Server", "id_String");
                            context.LAMISPlus_Server=(String) context.getProperty("LAMISPlus_Server");
                        context.setContextType("LAMISPlus_Password", "id_Password");
                            String pwd_LAMISPlus_Password_value = context.getProperty("LAMISPlus_Password");
                            context.LAMISPlus_Password = null;
                            if(pwd_LAMISPlus_Password_value!=null) {
                                if(context_param.containsKey("LAMISPlus_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.LAMISPlus_Password = pwd_LAMISPlus_Password_value;
                                } else if (!pwd_LAMISPlus_Password_value.isEmpty()) {
                                    try {
                                        context.LAMISPlus_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_LAMISPlus_Password_value);
                                        context.put("LAMISPlus_Password",context.LAMISPlus_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("LAMISPlus_Port", "id_String");
                            context.LAMISPlus_Port=(String) context.getProperty("LAMISPlus_Port");
                        context.setContextType("LAMIS3_Login", "id_String");
                            context.LAMIS3_Login=(String) context.getProperty("LAMIS3_Login");
                        context.setContextType("LAMIS3_Port", "id_String");
                            context.LAMIS3_Port=(String) context.getProperty("LAMIS3_Port");
                        context.setContextType("LAMIS3_AdditionalParams", "id_String");
                            context.LAMIS3_AdditionalParams=(String) context.getProperty("LAMIS3_AdditionalParams");
                        context.setContextType("LAMIS3_Database", "id_String");
                            context.LAMIS3_Database=(String) context.getProperty("LAMIS3_Database");
                        context.setContextType("LAMIS3_Password", "id_Password");
                            String pwd_LAMIS3_Password_value = context.getProperty("LAMIS3_Password");
                            context.LAMIS3_Password = null;
                            if(pwd_LAMIS3_Password_value!=null) {
                                if(context_param.containsKey("LAMIS3_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.LAMIS3_Password = pwd_LAMIS3_Password_value;
                                } else if (!pwd_LAMIS3_Password_value.isEmpty()) {
                                    try {
                                        context.LAMIS3_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_LAMIS3_Password_value);
                                        context.put("LAMIS3_Password",context.LAMIS3_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("LAMIS3_Server", "id_String");
                            context.LAMIS3_Server=(String) context.getProperty("LAMIS3_Server");
                        context.setContextType("LAMIS3_Schema", "id_String");
                            context.LAMIS3_Schema=(String) context.getProperty("LAMIS3_Schema");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("LAMISPlus_Schema")) {
                context.LAMISPlus_Schema = (String) parentContextMap.get("LAMISPlus_Schema");
            }if (parentContextMap.containsKey("LAMISPlus_AdditionalParams")) {
                context.LAMISPlus_AdditionalParams = (String) parentContextMap.get("LAMISPlus_AdditionalParams");
            }if (parentContextMap.containsKey("LAMISPlus_Database")) {
                context.LAMISPlus_Database = (String) parentContextMap.get("LAMISPlus_Database");
            }if (parentContextMap.containsKey("LAMISPlus_Login")) {
                context.LAMISPlus_Login = (String) parentContextMap.get("LAMISPlus_Login");
            }if (parentContextMap.containsKey("LAMISPlus_Server")) {
                context.LAMISPlus_Server = (String) parentContextMap.get("LAMISPlus_Server");
            }if (parentContextMap.containsKey("LAMISPlus_Password")) {
                context.LAMISPlus_Password = (java.lang.String) parentContextMap.get("LAMISPlus_Password");
            }if (parentContextMap.containsKey("LAMISPlus_Port")) {
                context.LAMISPlus_Port = (String) parentContextMap.get("LAMISPlus_Port");
            }if (parentContextMap.containsKey("LAMIS3_Login")) {
                context.LAMIS3_Login = (String) parentContextMap.get("LAMIS3_Login");
            }if (parentContextMap.containsKey("LAMIS3_Port")) {
                context.LAMIS3_Port = (String) parentContextMap.get("LAMIS3_Port");
            }if (parentContextMap.containsKey("LAMIS3_AdditionalParams")) {
                context.LAMIS3_AdditionalParams = (String) parentContextMap.get("LAMIS3_AdditionalParams");
            }if (parentContextMap.containsKey("LAMIS3_Database")) {
                context.LAMIS3_Database = (String) parentContextMap.get("LAMIS3_Database");
            }if (parentContextMap.containsKey("LAMIS3_Password")) {
                context.LAMIS3_Password = (java.lang.String) parentContextMap.get("LAMIS3_Password");
            }if (parentContextMap.containsKey("LAMIS3_Server")) {
                context.LAMIS3_Server = (String) parentContextMap.get("LAMIS3_Server");
            }if (parentContextMap.containsKey("LAMIS3_Schema")) {
                context.LAMIS3_Schema = (String) parentContextMap.get("LAMIS3_Schema");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("LAMISPlus_Password");
			parametersToEncrypt.add("LAMIS3_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_7Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_7) {
globalMap.put("tDBInput_7_SUBPROCESS_STATE", -1);

e_tDBInput_7.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : HTS");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     341598 characters generated by Talend Open Studio for Big Data 
 *     on the April 13, 2023 1:25:50 PM WAT
 ************************************************************************************************/